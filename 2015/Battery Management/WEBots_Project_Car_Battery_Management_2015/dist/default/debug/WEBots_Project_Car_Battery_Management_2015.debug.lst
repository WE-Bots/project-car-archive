

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jul 06 21:49:35 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0110                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011C                     	;# 
   137  011D                     	;# 
   138  011E                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141                           
   142                           	psect	idataCOMMON
   143  09EA                     __pidataCOMMON:	
   144                           
   145                           ;initializer for _supVolt
   146  09EA  3466               	retlw	102
   147  09EB  3486               	retlw	134
   148  09EC  3440               	retlw	64
   149                           
   150                           	psect	idataBANK0
   151  09E6                     __pidataBANK0:	
   152                           
   153                           ;initializer for _currentGain
   154  09E6  34C8               	retlw	200
   155                           
   156                           	psect	idataBANK1
   157  09E7                     __pidataBANK1:	
   158                           
   159                           ;initializer for _shuntRes
   160  09E7  34D7               	retlw	215
   161  09E8  3423               	retlw	35
   162  09E9  343C               	retlw	60
   163                           
   164                           	psect	strings
   165  0800                     __pstrings:	
   166  0800                     stringtab:	
   167  0800                     __stringtab:	
   168                           
   169                           ;	String table - string pointers are 1 byte each
   170  0800  1BFF               	btfsc	btemp+1,7
   171  0801  280A               	ljmp	stringcode
   172  0802  1383               	bcf	3,7
   173  0803  187F               	btfsc	btemp+1,0
   174  0804  1783               	bsf	3,7
   175  0805  0800               	movf	0,w
   176  0806  0A84               	incf	4,f
   177  0807  1903               	skipnz
   178  0808  0AFF               	incf	btemp+1,f
   179  0809  0008               	return
   180  080A                     stringcode:	
   181  080A                     stringdir:	
   182  080A  3008               	movlw	high stringdir
   183  080B  008A               	movwf	10
   184  080C  0804               	movf	4,w
   185  080D  0A84               	incf	4,f
   186  080E  0782               	addwf	2,f
   187  080F                     __stringbase:	
   188  080F  3400               	retlw	0
   189  0810                     __end_of__stringtab:	
   190  0810                     _convConst:	
   191  0810  3412               	retlw	18
   192  0811  3403               	retlw	3
   193  0812  343E               	retlw	62
   194  0813                     __end_of_convConst:	
   195  0813                     _refVolt:	
   196  0813  349E               	retlw	158
   197  0814  348F               	retlw	143
   198  0815  343F               	retlw	63
   199  0816                     __end_of_refVolt:	
   200  0816                     _cell1RDT:	
   201  0816  3498               	retlw	152
   202  0817  3408               	retlw	8
   203  0818                     __end_of_cell1RDT:	
   204  0818                     _cell2RDT:	
   205  0818  345C               	retlw	92
   206  0819  3412               	retlw	18
   207  081A                     __end_of_cell2RDT:	
   208  081A                     _cell3RDT:	
   209  081A  3410               	retlw	16
   210  081B  3427               	retlw	39
   211  081C                     __end_of_cell3RDT:	
   212  081C                     _cell4RDT:	
   213  081C  346C               	retlw	108
   214  081D  3439               	retlw	57
   215  081E                     __end_of_cell4RDT:	
   216  081E                     _cell5RDT:	
   217  081E  3420               	retlw	32
   218  081F  344E               	retlw	78
   219  0820                     __end_of_cell5RDT:	
   220  0820                     _cell6RDT:	
   221  0820  347C               	retlw	124
   222  0821  3460               	retlw	96
   223  0822                     __end_of_cell6RDT:	
   224  0822                     _cellRDB:	
   225  0822  3498               	retlw	152
   226  0823  3408               	retlw	8
   227  0824                     __end_of_cellRDB:	
   228  001F                     _ADCON0	set	31
   229  001F                     _ADCON0bits	set	31
   230  001E                     _ADRESH	set	30
   231  0017                     _CCP1CON	set	23
   232  001D                     _CCP2CON	set	29
   233  000B                     _INTCONbits	set	11
   234  0005                     _PORTA	set	5
   235  0006                     _PORTB	set	6
   236  0007                     _PORTC	set	7
   237  0008                     _PORTD	set	8
   238  0009                     _PORTE	set	9
   239  0001                     _TMR0	set	1
   240  002E                     _RA6	set	46
   241  002F                     _RA7	set	47
   242  0030                     _RB0	set	48
   243  0031                     _RB1	set	49
   244  0032                     _RB2	set	50
   245  0033                     _RB3	set	51
   246  0034                     _RB4	set	52
   247  0035                     _RB5	set	53
   248  0038                     _RC0	set	56
   249  0039                     _RC1	set	57
   250  003A                     _RC2	set	58
   251  003B                     _RC3	set	59
   252  0040                     _RD0	set	64
   253  0041                     _RD1	set	65
   254  0042                     _RD2	set	66
   255  0044                     _RD4	set	68
   256  0045                     _RD5	set	69
   257  0046                     _RD6	set	70
   258  0047                     _RD7	set	71
   259  009F                     _ADCON1	set	159
   260  009E                     _ADRESL	set	158
   261  0091                     _ANSEL	set	145
   262  009C                     _CMCON0bits	set	156
   263  0081                     _OPTION_REGbits	set	129
   264  008F                     _OSCCONbits	set	143
   265  0085                     _TRISA	set	133
   266  0086                     _TRISB	set	134
   267  0087                     _TRISC	set	135
   268  0088                     _TRISD	set	136
   269  0089                     _TRISE	set	137
   270  0107                     _LCDCON	set	263
   271  0109                     _LVDCONbits	set	265
   272  0824                     STR_4:	
   273  0824  3441               	retlw	65	;'A'
   274  0825  3420               	retlw	32	;' '
   275  0826  3420               	retlw	32	;' '
   276  0827  3420               	retlw	32	;' '
   277  0828  3420               	retlw	32	;' '
   278  0829  3420               	retlw	32	;' '
   279  082A  3420               	retlw	32	;' '
   280  082B  3420               	retlw	32	;' '
   281  082C  3400               	retlw	0
   282  082D                     STR_2:	
   283  082D  3420               	retlw	32	;' '
   284  082E  3456               	retlw	86	;'V'
   285  082F  3420               	retlw	32	;' '
   286  0830  3420               	retlw	32	;' '
   287  0831  3420               	retlw	32	;' '
   288  0832  3420               	retlw	32	;' '
   289  0833  3420               	retlw	32	;' '
   290  0834  3420               	retlw	32	;' '
   291  0835  3400               	retlw	0
   292  0836                     STR_1:	
   293  0836  3456               	retlw	86	;'V'
   294  0837  346F               	retlw	111	;'o'
   295  0838  346C               	retlw	108	;'l'
   296  0839  3474               	retlw	116	;'t'
   297  083A  3461               	retlw	97	;'a'
   298  083B  3467               	retlw	103	;'g'
   299  083C  3465               	retlw	101	;'e'
   300  083D  343A               	retlw	58	;':'
   301  083E  3400               	retlw	0
   302  083F                     STR_3:	
   303  083F  3443               	retlw	67	;'C'
   304  0840  3475               	retlw	117	;'u'
   305  0841  3472               	retlw	114	;'r'
   306  0842  3472               	retlw	114	;'r'
   307  0843  3465               	retlw	101	;'e'
   308  0844  346E               	retlw	110	;'n'
   309  0845  3474               	retlw	116	;'t'
   310  0846  343A               	retlw	58	;':'
   311  0847  3400               	retlw	0
   312                           
   313                           ; #config settings
   314  0000                     
   315                           	psect	cinit
   316  07C0                     start_initialization:	
   317  07C0                     __initialization:	
   318                           
   319                           ; Clear objects allocated to BANK0
   320  07C0  01E8               	clrf	__pbssBANK0& (0+127)
   321  07C1  01E9               	clrf	(__pbssBANK0+1)& (0+127)
   322  07C2  01EA               	clrf	(__pbssBANK0+2)& (0+127)
   323  07C3  01EB               	clrf	(__pbssBANK0+3)& (0+127)
   324  07C4  01EC               	clrf	(__pbssBANK0+4)& (0+127)
   325  07C5  01ED               	clrf	(__pbssBANK0+5)& (0+127)
   326  07C6  01EE               	clrf	(__pbssBANK0+6)& (0+127)
   327                           
   328                           ; Clear objects allocated to BANK1
   329  07C7  1383               	bcf	3,7	;select IRP bank0
   330  07C8  30A0               	movlw	low __pbssBANK1
   331  07C9  0084               	movwf	4
   332  07CA  30E1               	movlw	low (__pbssBANK1+65)
   333  07CB  120A  158A  21ED  120A  118A  	fcall	clear_ram0
   334                           
   335                           ; Initialize objects allocated to BANK1
   336  07D0  1683               	bsf	3,5	;RP0=1, select bank1
   337  07D1  1303               	bcf	3,6	;RP1=0, select bank1
   338  07D2  120A  158A  21E7  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   339  07D7  00E1               	movwf	__pdataBANK1& (0+127)
   340  07D8  120A  158A  21E8  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   341  07DD  00E2               	movwf	(__pdataBANK1+1)& (0+127)
   342  07DE  120A  158A  21E9  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   343  07E3  00E3               	movwf	(__pdataBANK1+2)& (0+127)
   344                           
   345                           ; Initialize objects allocated to BANK0
   346  07E4  1283               	bcf	3,5	;RP0=0, select bank0
   347  07E5  1303               	bcf	3,6	;RP1=0, select bank0
   348  07E6  120A  158A  21E6  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   349  07EB  00EF               	movwf	__pdataBANK0& (0+127)
   350                           
   351                           ; Initialize objects allocated to COMMON
   352  07EC  120A  158A  21EA  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   353  07F1  00F9               	movwf	__pdataCOMMON& (0+127)
   354  07F2  120A  158A  21EB  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   355  07F7  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   356  07F8  120A  158A  21EC   	fcall	__pidataCOMMON+2	;fetch initializer
   357  07FB  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   358  07FC                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  07FC                     __end_of__initialization:	
   362  07FC  0183               	clrf	3
   363  07FD  120A  118A  2815   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	dataCOMMON
   366  0079                     __pdataCOMMON:	
   367  0079                     _supVolt:	
   368  0079                     	ds	3
   369                           
   370                           	psect	bssBANK0
   371  0068                     __pbssBANK0:	
   372  0068                     _time:	
   373  0068                     	ds	4
   374  006C                     _refValue:	
   375  006C                     	ds	2
   376  006E                     _LCDDisplayMode:	
   377  006E                     	ds	1
   378                           
   379                           	psect	dataBANK0
   380  006F                     __pdataBANK0:	
   381  006F                     _currentGain:	
   382  006F                     	ds	1
   383                           
   384                           	psect	bssBANK1
   385  00A0                     __pbssBANK1:	
   386  00A0                     _cellVolt:	
   387  00A0                     	ds	18
   388  00B2                     _btmStr:	
   389  00B2                     	ds	16
   390  00C2                     _topStr:	
   391  00C2                     	ds	16
   392  00D2                     displayLCD@F2774:	
   393  00D2                     	ds	4
   394  00D6                     displayLCD@F2776:	
   395  00D6                     	ds	4
   396  00DA                     stopWatch@startTime:	
   397  00DA                     	ds	4
   398  00DE                     _current:	
   399  00DE                     	ds	3
   400                           
   401                           	psect	dataBANK1
   402  00E1                     __pdataBANK1:	
   403  00E1                     _shuntRes:	
   404  00E1                     	ds	3
   405                           
   406                           	psect	clrtext
   407  09ED                     clear_ram0:	
   408                           ;	Called with FSR containing the base address, and
   409                           ;	W with the last address+1
   410                           
   411  09ED  0064               	clrwdt	;clear the watchdog before getting into this loop
   412  09EE                     clrloop0:	
   413  09EE  0180               	clrf	0	;clear RAM location pointed to by FSR
   414  09EF  0A84               	incf	4,f	;increment pointer
   415  09F0  0604               	xorwf	4,w	;XOR with final address
   416  09F1  1903               	btfsc	3,2	;have we reached the end yet?
   417  09F2  3400               	retlw	0	;all done for this memory range, return
   418  09F3  0604               	xorwf	4,w	;XOR again to restore value
   419  09F4  29EE               	goto	clrloop0	;do the next byte
   420                           
   421                           	psect	cstackCOMMON
   422  0071                     __pcstackCOMMON:	
   423  0071                     ?_LCDSetBits:	
   424  0071                     ?_pulse:	
   425                           ; 0 bytes @ 0x0
   426                           
   427  0071                     ?_LCDcmd:	
   428                           ; 0 bytes @ 0x0
   429                           
   430  0071                     ?_currentGainInit:	
   431                           ; 0 bytes @ 0x0
   432                           
   433  0071                     ?_sampleReference:	
   434                           ; 0 bytes @ 0x0
   435                           
   436  0071                     ?_sampleCurrent:	
   437                           ; 0 bytes @ 0x0
   438                           
   439  0071                     ?_sampleBatteryCells:	
   440                           ; 0 bytes @ 0x0
   441                           
   442  0071                     ?_handlePB:	
   443                           ; 0 bytes @ 0x0
   444                           
   445  0071                     ?_initLCD:	
   446                           ; 0 bytes @ 0x0
   447                           
   448  0071                     ?_LCD4bitCmd:	
   449                           ; 0 bytes @ 0x0
   450                           
   451  0071                     ?_LCDWriteChar:	
   452                           ; 0 bytes @ 0x0
   453                           
   454  0071                     ?_LCDSetCursor:	
   455                           ; 0 bytes @ 0x0
   456                           
   457  0071                     ?_timeSetup:	
   458                           ; 0 bytes @ 0x0
   459                           
   460  0071                     ?_isrTimer0:	
   461                           ; 0 bytes @ 0x0
   462                           
   463  0071                     ??_isrTimer0:	
   464                           ; 0 bytes @ 0x0
   465                           
   466  0071                     ?_initADC:	
   467                           ; 0 bytes @ 0x0
   468                           
   469  0071                     ?_initController:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0071                     ?_isr:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0071                     ?_main:	
   476                           ; 0 bytes @ 0x0
   477                           
   478                           
   479                           ; 0 bytes @ 0x0
   480  0071                     	ds	4
   481  0075                     ??_isr:	
   482                           
   483                           ; 0 bytes @ 0x4
   484  0075                     	ds	4
   485                           
   486                           	psect	cstackBANK0
   487  0020                     __pcstackBANK0:	
   488  0020                     ??_LCDSetBits:	
   489  0020                     ??_pulse:	
   490                           ; 0 bytes @ 0x0
   491                           
   492  0020                     ??_currentGainInit:	
   493                           ; 0 bytes @ 0x0
   494                           
   495  0020                     ??_timeSetup:	
   496                           ; 0 bytes @ 0x0
   497                           
   498  0020                     ??_initADC:	
   499                           ; 0 bytes @ 0x0
   500                           
   501  0020                     ?___bmul:	
   502                           ; 0 bytes @ 0x0
   503                           
   504  0020                     ?_analogRead:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0020                     ?___awdiv:	
   508                           ; 2 bytes @ 0x0
   509                           
   510  0020                     ?___lwdiv:	
   511                           ; 2 bytes @ 0x0
   512                           
   513  0020                     ?___ftpack:	
   514                           ; 2 bytes @ 0x0
   515                           
   516  0020                     LCDSetBits@a:	
   517                           ; 3 bytes @ 0x0
   518                           
   519  0020                     currentGainInit@gain:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0020                     ___bmul@multiplicand:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0020                     ___awdiv@divisor:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0020                     ___lwdiv@divisor:	
   529                           ; 2 bytes @ 0x0
   530                           
   531  0020                     ___ftpack@arg:	
   532                           ; 2 bytes @ 0x0
   533                           
   534                           
   535                           ; 3 bytes @ 0x0
   536  0020                     	ds	1
   537  0021                     ??___bmul:	
   538                           
   539                           ; 0 bytes @ 0x1
   540  0021                     	ds	1
   541  0022                     ??_LCDcmd:	
   542  0022                     ??_LCD4bitCmd:	
   543                           ; 0 bytes @ 0x2
   544                           
   545  0022                     ??_LCDWriteChar:	
   546                           ; 0 bytes @ 0x2
   547                           
   548  0022                     ??_analogRead:	
   549                           ; 0 bytes @ 0x2
   550                           
   551  0022                     LCD4bitCmd@a:	
   552                           ; 0 bytes @ 0x2
   553                           
   554  0022                     ___bmul@product:	
   555                           ; 1 bytes @ 0x2
   556                           
   557  0022                     ___awdiv@dividend:	
   558                           ; 1 bytes @ 0x2
   559                           
   560  0022                     ___lwdiv@dividend:	
   561                           ; 2 bytes @ 0x2
   562                           
   563                           
   564                           ; 2 bytes @ 0x2
   565  0022                     	ds	1
   566  0023                     ??_LCDSetCursor:	
   567  0023                     ___bmul@multiplier:	
   568                           ; 0 bytes @ 0x3
   569                           
   570  0023                     ___ftpack@exp:	
   571                           ; 1 bytes @ 0x3
   572                           
   573                           
   574                           ; 1 bytes @ 0x3
   575  0023                     	ds	1
   576  0024                     ??___awdiv:	
   577  0024                     ??___lwdiv:	
   578                           ; 0 bytes @ 0x4
   579                           
   580  0024                     LCDcmd@a:	
   581                           ; 0 bytes @ 0x4
   582                           
   583  0024                     LCDWriteChar@a:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0024                     analogRead@chan:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0024                     ___ftpack@sign:	
   590                           ; 1 bytes @ 0x4
   591                           
   592                           
   593                           ; 1 bytes @ 0x4
   594  0024                     	ds	1
   595  0025                     ??___ftpack:	
   596  0025                     ??_initLCD:	
   597                           ; 0 bytes @ 0x5
   598                           
   599  0025                     ?_LCDWriteString:	
   600                           ; 0 bytes @ 0x5
   601                           
   602  0025                     LCDSetCursor@a:	
   603                           ; 0 bytes @ 0x5
   604                           
   605  0025                     ___awdiv@counter:	
   606                           ; 1 bytes @ 0x5
   607                           
   608  0025                     LCDWriteString@a:	
   609                           ; 1 bytes @ 0x5
   610                           
   611  0025                     analogRead@returnVal:	
   612                           ; 2 bytes @ 0x5
   613                           
   614  0025                     ___lwdiv@quotient:	
   615                           ; 2 bytes @ 0x5
   616                           
   617                           
   618                           ; 2 bytes @ 0x5
   619  0025                     	ds	1
   620  0026                     ___awdiv@sign:	
   621                           
   622                           ; 1 bytes @ 0x6
   623  0026                     	ds	1
   624  0027                     ??_LCDWriteString:	
   625  0027                     ___lwdiv@counter:	
   626                           ; 0 bytes @ 0x7
   627                           
   628  0027                     ___awdiv@quotient:	
   629                           ; 1 bytes @ 0x7
   630                           
   631                           
   632                           ; 2 bytes @ 0x7
   633  0027                     	ds	1
   634  0028                     ??_initController:	
   635  0028                     ?___lbtoft:	
   636                           ; 0 bytes @ 0x8
   637                           
   638  0028                     ?___lltoft:	
   639                           ; 3 bytes @ 0x8
   640                           
   641  0028                     ?___lwtoft:	
   642                           ; 3 bytes @ 0x8
   643                           
   644  0028                     ___lwtoft@c:	
   645                           ; 3 bytes @ 0x8
   646                           
   647  0028                     ___lltoft@c:	
   648                           ; 2 bytes @ 0x8
   649                           
   650                           
   651                           ; 4 bytes @ 0x8
   652  0028                     	ds	1
   653  0029                     ?_uint8ToASCII:	
   654  0029                     uint8ToASCII@num:	
   655                           ; 0 bytes @ 0x9
   656                           
   657                           
   658                           ; 1 bytes @ 0x9
   659  0029                     	ds	1
   660  002A                     ??_uint8ToASCII:	
   661  002A                     LCDWriteString@i:	
   662                           ; 0 bytes @ 0xA
   663                           
   664                           
   665                           ; 2 bytes @ 0xA
   666  002A                     	ds	1
   667  002B                     ??___lbtoft:	
   668  002B                     ??___lwtoft:	
   669                           ; 0 bytes @ 0xB
   670                           
   671                           
   672                           ; 0 bytes @ 0xB
   673  002B                     	ds	1
   674  002C                     ??___lltoft:	
   675                           
   676                           ; 0 bytes @ 0xC
   677  002C                     	ds	1
   678  002D                     ___lltoft@exp:	
   679                           
   680                           ; 1 bytes @ 0xD
   681  002D                     	ds	2
   682  002F                     ___lbtoft@c:	
   683                           
   684                           ; 1 bytes @ 0xF
   685  002F                     	ds	1
   686  0030                     ?___ftmul:	
   687  0030                     uint8ToASCII@prevSum:	
   688                           ; 3 bytes @ 0x10
   689                           
   690  0030                     ___ftmul@f1:	
   691                           ; 1 bytes @ 0x10
   692                           
   693                           
   694                           ; 3 bytes @ 0x10
   695  0030                     	ds	1
   696  0031                     uint8ToASCII@leading:	
   697                           
   698                           ; 1 bytes @ 0x11
   699  0031                     	ds	1
   700  0032                     uint8ToASCII@j:	
   701                           
   702                           ; 2 bytes @ 0x12
   703  0032                     	ds	1
   704  0033                     ___ftmul@f2:	
   705                           
   706                           ; 3 bytes @ 0x13
   707  0033                     	ds	1
   708  0034                     uint8ToASCII@k:	
   709                           
   710                           ; 1 bytes @ 0x14
   711  0034                     	ds	1
   712  0035                     uint8ToASCII@divisor:	
   713                           
   714                           ; 1 bytes @ 0x15
   715  0035                     	ds	1
   716  0036                     ??___ftmul:	
   717  0036                     uint8ToASCII@i:	
   718                           ; 0 bytes @ 0x16
   719                           
   720                           
   721                           ; 1 bytes @ 0x16
   722  0036                     	ds	1
   723  0037                     uint8ToASCII@returnVal:	
   724                           
   725                           ; 1 bytes @ 0x17
   726  0037                     	ds	1
   727  0038                     ?_displayLCD:	
   728  0038                     displayLCD@disp:	
   729                           ; 0 bytes @ 0x18
   730                           
   731                           
   732                           ; 2 bytes @ 0x18
   733  0038                     	ds	2
   734  003A                     ??_displayLCD:	
   735  003A                     ___ftmul@exp:	
   736                           ; 0 bytes @ 0x1A
   737                           
   738                           
   739                           ; 1 bytes @ 0x1A
   740  003A                     	ds	1
   741  003B                     ___ftmul@f3_as_product:	
   742  003B                     displayLCD@temp1:	
   743                           ; 3 bytes @ 0x1B
   744                           
   745                           
   746                           ; 4 bytes @ 0x1B
   747  003B                     	ds	3
   748  003E                     ___ftmul@cntr:	
   749                           
   750                           ; 1 bytes @ 0x1E
   751  003E                     	ds	1
   752  003F                     ___ftmul@sign:	
   753  003F                     displayLCD@temp2:	
   754                           ; 1 bytes @ 0x1F
   755                           
   756                           
   757                           ; 4 bytes @ 0x1F
   758  003F                     	ds	1
   759  0040                     ?___ftdiv:	
   760  0040                     ?___fttol:	
   761                           ; 3 bytes @ 0x20
   762                           
   763  0040                     ___ftdiv@f2:	
   764                           ; 4 bytes @ 0x20
   765                           
   766  0040                     ___fttol@f1:	
   767                           ; 3 bytes @ 0x20
   768                           
   769                           
   770                           ; 3 bytes @ 0x20
   771  0040                     	ds	3
   772  0043                     ___ftdiv@f1:	
   773                           
   774                           ; 3 bytes @ 0x23
   775  0043                     	ds	1
   776  0044                     ??___fttol:	
   777                           
   778                           ; 0 bytes @ 0x24
   779  0044                     	ds	2
   780  0046                     ??___ftdiv:	
   781                           
   782                           ; 0 bytes @ 0x26
   783  0046                     	ds	2
   784  0048                     ___fttol@sign1:	
   785                           
   786                           ; 1 bytes @ 0x28
   787  0048                     	ds	1
   788  0049                     ___fttol@lval:	
   789                           
   790                           ; 4 bytes @ 0x29
   791  0049                     	ds	1
   792  004A                     ___ftdiv@cntr:	
   793                           
   794                           ; 1 bytes @ 0x2A
   795  004A                     	ds	1
   796  004B                     ___ftdiv@f3:	
   797                           
   798                           ; 3 bytes @ 0x2B
   799  004B                     	ds	2
   800  004D                     ___fttol@exp1:	
   801                           
   802                           ; 1 bytes @ 0x2D
   803  004D                     	ds	1
   804  004E                     ?_stopWatch:	
   805  004E                     ___ftdiv@exp:	
   806                           ; 4 bytes @ 0x2E
   807                           
   808                           
   809                           ; 1 bytes @ 0x2E
   810  004E                     	ds	1
   811  004F                     ___ftdiv@sign:	
   812                           
   813                           ; 1 bytes @ 0x2F
   814  004F                     	ds	1
   815  0050                     ??_sampleReference:	
   816  0050                     ??_sampleCurrent:	
   817                           ; 0 bytes @ 0x30
   818                           
   819  0050                     ?_sampleVoltage:	
   820                           ; 0 bytes @ 0x30
   821                           
   822  0050                     _sampleCurrent$869:	
   823                           ; 3 bytes @ 0x30
   824                           
   825                           
   826                           ; 3 bytes @ 0x30
   827  0050                     	ds	2
   828  0052                     ??_stopWatch:	
   829  0052                     sampleReference@i:	
   830                           ; 0 bytes @ 0x32
   831                           
   832                           
   833                           ; 2 bytes @ 0x32
   834  0052                     	ds	1
   835  0053                     sampleCurrent@i:	
   836                           
   837                           ; 2 bytes @ 0x33
   838  0053                     	ds	1
   839  0054                     ??_sampleVoltage:	
   840  0054                     sampleVoltage@chan:	
   841                           ; 0 bytes @ 0x34
   842                           
   843                           
   844                           ; 1 bytes @ 0x34
   845  0054                     	ds	1
   846  0055                     sampleVoltage@i:	
   847  0055                     sampleCurrent@temp:	
   848                           ; 2 bytes @ 0x35
   849                           
   850                           
   851                           ; 2 bytes @ 0x35
   852  0055                     	ds	2
   853  0057                     sampleVoltage@temp:	
   854                           
   855                           ; 2 bytes @ 0x37
   856  0057                     	ds	2
   857  0059                     ??_sampleBatteryCells:	
   858                           
   859                           ; 0 bytes @ 0x39
   860  0059                     	ds	4
   861  005D                     _sampleBatteryCells$868:	
   862                           
   863                           ; 3 bytes @ 0x3D
   864  005D                     	ds	1
   865  005E                     stopWatch@mode:	
   866                           
   867                           ; 1 bytes @ 0x3E
   868  005E                     	ds	1
   869  005F                     stopWatch@temp:	
   870                           
   871                           ; 4 bytes @ 0x3F
   872  005F                     	ds	4
   873  0063                     ??_handlePB:	
   874                           
   875                           ; 0 bytes @ 0x43
   876  0063                     	ds	3
   877  0066                     ??_main:	
   878                           
   879                           ; 0 bytes @ 0x46
   880  0066                     	ds	2
   881                           
   882                           	psect	maintext
   883  0015                     __pmaintext:	
   884 ;;
   885 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   886 ;;
   887 ;; *************** function _main *****************
   888 ;; Defined at:
   889 ;;		line 64 in file "PIC16F917 Battery Management.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;		None               void
   896 ;; Registers used:
   897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : B00/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   903 ;;      Params:         0       0       0       0       0
   904 ;;      Locals:         0       0       0       0       0
   905 ;;      Temps:          0       2       0       0       0
   906 ;;      Totals:         0       2       0       0       0
   907 ;;Total ram usage:        2 bytes
   908 ;; Hardware stack levels required when called:    6
   909 ;; This function calls:
   910 ;;		_currentGainInit
   911 ;;		_displayLCD
   912 ;;		_handlePB
   913 ;;		_initController
   914 ;;		_sampleBatteryCells
   915 ;;		_sampleCurrent
   916 ;;		_sampleReference
   917 ;; This function is called by:
   918 ;;		Startup code after reset
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _main
   924  0015                     _main:	
   925                           
   926                           ;PIC16F917 Battery Management.c: 66: initController();
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   930  0015  120A  158A  236B  120A  118A  	fcall	_initController
   931                           
   932                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
   933  001A  1283               	bcf	3,5	;RP0=0, select bank0
   934  001B  1303               	bcf	3,6	;RP1=0, select bank0
   935  001C  1608               	bsf	8,4	;volatile
   936                           
   937                           ;PIC16F917 Battery Management.c: 72: currentGainInit(200);
   938  001D  30C8               	movlw	200
   939  001E  120A  158A  2286  120A  118A  	fcall	_currentGainInit
   940  0023                     l2348:	
   941                           ;PIC16F917 Battery Management.c: 75: while(1)
   942                           
   943                           
   944                           ;PIC16F917 Battery Management.c: 76: {
   945                           ;PIC16F917 Battery Management.c: 77: sampleReference();
   946  0023  120A  158A  26BF  120A  118A  	fcall	_sampleReference
   947                           
   948                           ;PIC16F917 Battery Management.c: 78: sampleCurrent();
   949  0028  120A  118A  2262  120A  118A  	fcall	_sampleCurrent
   950                           
   951                           ;PIC16F917 Battery Management.c: 79: sampleBatteryCells();
   952  002D  120A  118A  24E5  120A  118A  	fcall	_sampleBatteryCells
   953                           
   954                           ;PIC16F917 Battery Management.c: 81: handlePB();
   955  0032  120A  158A  2494  120A  118A  	fcall	_handlePB
   956                           
   957                           ;PIC16F917 Battery Management.c: 83: displayLCD(LCDDisplayMode);
   958  0037  1283               	bcf	3,5	;RP0=0, select bank0
   959  0038  1303               	bcf	3,6	;RP1=0, select bank0
   960  0039  086E               	movf	_LCDDisplayMode,w
   961  003A  00E6               	movwf	??_main
   962  003B  01E7               	clrf	??_main+1
   963  003C  0866               	movf	??_main,w
   964  003D  00B8               	movwf	displayLCD@disp
   965  003E  0867               	movf	??_main+1,w
   966  003F  00B9               	movwf	displayLCD@disp+1
   967  0040  120A  118A  2046  120A  118A  	fcall	_displayLCD
   968  0045  2823               	goto	l2348
   969  0046                     __end_of_main:	
   970                           
   971                           	psect	text1
   972  0EBF                     __ptext1:	
   973 ;; *************** function _sampleReference *****************
   974 ;; Defined at:
   975 ;;		line 119 in file "PIC16F917 Battery Management.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  i               2   50[BANK0 ] int 
   980 ;; Return value:  Size  Location     Type
   981 ;;		None               void
   982 ;; Registers used:
   983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   989 ;;      Params:         0       0       0       0       0
   990 ;;      Locals:         0       2       0       0       0
   991 ;;      Temps:          0       2       0       0       0
   992 ;;      Totals:         0       4       0       0       0
   993 ;;Total ram usage:        4 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    4
   996 ;; This function calls:
   997 ;;		___ftdiv
   998 ;;		___ftmul
   999 ;;		___lwdiv
  1000 ;;		___lwtoft
  1001 ;;		_analogRead
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;;		_checkCurrent
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _sampleReference
  1010  0EBF                     _sampleReference:	
  1011                           
  1012                           ;PIC16F917 Battery Management.c: 122: RD1 = 1;
  1013                           
  1014                           ;incstack = 0
  1015                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1016  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0EC1  1488               	bsf	8,1	;volatile
  1019                           
  1020                           ;PIC16F917 Battery Management.c: 124: RC2 = 1;
  1021  0EC2  1507               	bsf	7,2	;volatile
  1022                           
  1023                           ;PIC16F917 Battery Management.c: 126: _delay((unsigned long)((5)*(8000000/4000.0)));
  1024  0EC3  300D               	movlw	13
  1025  0EC4  00D1               	movwf	??_sampleReference+1
  1026  0EC5  30FB               	movlw	251
  1027  0EC6  00D0               	movwf	??_sampleReference
  1028  0EC7                     u2407:	
  1029  0EC7  0BD0               	decfsz	??_sampleReference,f
  1030  0EC8  2EC7               	goto	u2407
  1031  0EC9  0BD1               	decfsz	??_sampleReference+1,f
  1032  0ECA  2EC7               	goto	u2407
  1033  0ECB  2ECC               	nop2
  1034                           
  1035                           ;PIC16F917 Battery Management.c: 128: refValue = 0;
  1036  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0ECE  01EC               	clrf	_refValue
  1039  0ECF  01ED               	clrf	_refValue+1
  1040                           
  1041                           ;PIC16F917 Battery Management.c: 130: for ( int i = 0; i <= 10; i++)
  1042  0ED0  01D2               	clrf	sampleReference@i
  1043  0ED1  01D3               	clrf	sampleReference@i+1
  1044  0ED2  0853               	movf	sampleReference@i+1,w
  1045  0ED3  3A80               	xorlw	128
  1046  0ED4  00FF               	movwf	127
  1047  0ED5  3080               	movlw	128
  1048  0ED6  027F               	subwf	127,w
  1049  0ED7  1D03               	skipz
  1050  0ED8  2EDB               	goto	u2125
  1051  0ED9  300B               	movlw	11
  1052  0EDA  0252               	subwf	sampleReference@i,w
  1053  0EDB                     u2125:	
  1054  0EDB  1803               	btfsc	3,0
  1055  0EDC  2EFC               	goto	l2152
  1056  0EDD                     l2146:	
  1057                           
  1058                           ;PIC16F917 Battery Management.c: 131: {
  1059                           ;PIC16F917 Battery Management.c: 132: refValue += analogRead(REFV);
  1060  0EDD  3002               	movlw	2
  1061  0EDE  120A  158A  23DC  120A  158A  	fcall	_analogRead
  1062  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  1063  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0EE5  0820               	movf	?_analogRead,w
  1065  0EE6  07EC               	addwf	_refValue,f
  1066  0EE7  1803               	skipnc
  1067  0EE8  0AED               	incf	_refValue+1,f
  1068  0EE9  0821               	movf	?_analogRead+1,w
  1069  0EEA  07ED               	addwf	_refValue+1,f
  1070  0EEB  3001               	movlw	1
  1071  0EEC  07D2               	addwf	sampleReference@i,f
  1072  0EED  1803               	skipnc
  1073  0EEE  0AD3               	incf	sampleReference@i+1,f
  1074  0EEF  3000               	movlw	0
  1075  0EF0  07D3               	addwf	sampleReference@i+1,f
  1076  0EF1  0853               	movf	sampleReference@i+1,w
  1077  0EF2  3A80               	xorlw	128
  1078  0EF3  00FF               	movwf	127
  1079  0EF4  3080               	movlw	128
  1080  0EF5  027F               	subwf	127,w
  1081  0EF6  1D03               	skipz
  1082  0EF7  2EFA               	goto	u2135
  1083  0EF8  300B               	movlw	11
  1084  0EF9  0252               	subwf	sampleReference@i,w
  1085  0EFA                     u2135:	
  1086  0EFA  1C03               	skipc
  1087  0EFB  2EDD               	goto	l2146
  1088  0EFC                     l2152:	
  1089                           
  1090                           ;PIC16F917 Battery Management.c: 133: }
  1091                           ;PIC16F917 Battery Management.c: 135: refValue = refValue / 10;
  1092  0EFC  300A               	movlw	10
  1093  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  1094  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  1095  0EFF  00A0               	movwf	___lwdiv@divisor
  1096  0F00  3000               	movlw	0
  1097  0F01  00A1               	movwf	___lwdiv@divisor+1
  1098  0F02  086D               	movf	_refValue+1,w
  1099  0F03  00A3               	movwf	___lwdiv@dividend+1
  1100  0F04  086C               	movf	_refValue,w
  1101  0F05  00A2               	movwf	___lwdiv@dividend
  1102  0F06  120A  158A  2415  120A  158A  	fcall	___lwdiv
  1103  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0F0D  0821               	movf	?___lwdiv+1,w
  1106  0F0E  00ED               	movwf	_refValue+1
  1107  0F0F  0820               	movf	?___lwdiv,w
  1108  0F10  00EC               	movwf	_refValue
  1109                           
  1110                           ;PIC16F917 Battery Management.c: 138: RD1 = 0;
  1111  0F11  1088               	bcf	8,1	;volatile
  1112                           
  1113                           ;PIC16F917 Battery Management.c: 140: RC2 = 0;
  1114  0F12  1107               	bcf	7,2	;volatile
  1115                           
  1116                           ;PIC16F917 Battery Management.c: 142: supVolt = (refVolt * 1023)/refValue;
  1117  0F13  086D               	movf	_refValue+1,w
  1118  0F14  00A9               	movwf	___lwtoft@c+1
  1119  0F15  086C               	movf	_refValue,w
  1120  0F16  00A8               	movwf	___lwtoft@c
  1121  0F17  120A  158A  226E  120A  158A  	fcall	___lwtoft
  1122  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0F1E  0828               	movf	?___lwtoft,w
  1125  0F1F  00C0               	movwf	___ftdiv@f2
  1126  0F20  0829               	movf	?___lwtoft+1,w
  1127  0F21  00C1               	movwf	___ftdiv@f2+1
  1128  0F22  082A               	movf	?___lwtoft+2,w
  1129  0F23  00C2               	movwf	___ftdiv@f2+2
  1130  0F24  30C0               	movlw	192
  1131  0F25  00B0               	movwf	___ftmul@f1
  1132  0F26  307F               	movlw	127
  1133  0F27  00B1               	movwf	___ftmul@f1+1
  1134  0F28  3044               	movlw	68
  1135  0F29  00B2               	movwf	___ftmul@f1+2
  1136  0F2A  3004               	movlw	low (_refVolt-__stringbase)
  1137  0F2B  0084               	movwf	4
  1138  0F2C  120A  158A  200A  120A  158A  	fcall	stringdir
  1139  0F31  00B3               	movwf	___ftmul@f2
  1140  0F32  120A  158A  200A  120A  158A  	fcall	stringdir
  1141  0F37  00B4               	movwf	___ftmul@f2+1
  1142  0F38  120A  158A  200A  120A  158A  	fcall	stringdir
  1143  0F3D  00B5               	movwf	___ftmul@f2+2
  1144  0F3E  120A  118A  2327  120A  158A  	fcall	___ftmul
  1145  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  1146  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  1147  0F45  0830               	movf	?___ftmul,w
  1148  0F46  00C3               	movwf	___ftdiv@f1
  1149  0F47  0831               	movf	?___ftmul+1,w
  1150  0F48  00C4               	movwf	___ftdiv@f1+1
  1151  0F49  0832               	movf	?___ftmul+2,w
  1152  0F4A  00C5               	movwf	___ftdiv@f1+2
  1153  0F4B  120A  118A  20F0   	fcall	___ftdiv
  1154  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0F50  0840               	movf	?___ftdiv,w
  1157  0F51  00F9               	movwf	_supVolt
  1158  0F52  0841               	movf	?___ftdiv+1,w
  1159  0F53  00FA               	movwf	_supVolt+1
  1160  0F54  0842               	movf	?___ftdiv+2,w
  1161  0F55  00FB               	movwf	_supVolt+2
  1162  0F56  0008               	return
  1163  0F57                     __end_of_sampleReference:	
  1164                           
  1165                           	psect	text2
  1166  0262                     __ptext2:	
  1167 ;; *************** function _sampleCurrent *****************
  1168 ;; Defined at:
  1169 ;;		line 160 in file "PIC16F917 Battery Management.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  i               2   51[BANK0 ] int 
  1174 ;;  temp            2   53[BANK0 ] unsigned int 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;		None               void
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1184 ;;      Params:         0       0       0       0       0
  1185 ;;      Locals:         0       7       0       0       0
  1186 ;;      Temps:          0       0       0       0       0
  1187 ;;      Totals:         0       7       0       0       0
  1188 ;;Total ram usage:        7 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    4
  1191 ;; This function calls:
  1192 ;;		___ftdiv
  1193 ;;		___ftmul
  1194 ;;		___lbtoft
  1195 ;;		___lwdiv
  1196 ;;		___lwtoft
  1197 ;;		_analogRead
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;;		_checkCurrent
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           
  1205                           ;psect for function _sampleCurrent
  1206  0262                     _sampleCurrent:	
  1207                           
  1208                           ;PIC16F917 Battery Management.c: 162: uint16_t temp = 0;
  1209                           
  1210                           ;incstack = 0
  1211                           ; Regs used in _sampleCurrent: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1212  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1214  0264  01D5               	clrf	sampleCurrent@temp
  1215  0265  01D6               	clrf	sampleCurrent@temp+1
  1216                           
  1217                           ;PIC16F917 Battery Management.c: 164: for ( int i = 0; i <= 10; i++)
  1218  0266  01D3               	clrf	sampleCurrent@i
  1219  0267  01D4               	clrf	sampleCurrent@i+1
  1220  0268  0854               	movf	sampleCurrent@i+1,w
  1221  0269  3A80               	xorlw	128
  1222  026A  00FF               	movwf	127
  1223  026B  3080               	movlw	128
  1224  026C  027F               	subwf	127,w
  1225  026D  1D03               	skipz
  1226  026E  2A71               	goto	u2145
  1227  026F  300B               	movlw	11
  1228  0270  0253               	subwf	sampleCurrent@i,w
  1229  0271                     u2145:	
  1230  0271  1803               	btfsc	3,0
  1231  0272  2A92               	goto	l2172
  1232  0273                     l2166:	
  1233                           
  1234                           ;PIC16F917 Battery Management.c: 165: {
  1235                           ;PIC16F917 Battery Management.c: 166: temp += analogRead(CURRENT);
  1236  0273  3007               	movlw	7
  1237  0274  120A  158A  23DC  120A  118A  	fcall	_analogRead
  1238  0279  1283               	bcf	3,5	;RP0=0, select bank0
  1239  027A  1303               	bcf	3,6	;RP1=0, select bank0
  1240  027B  0820               	movf	?_analogRead,w
  1241  027C  07D5               	addwf	sampleCurrent@temp,f
  1242  027D  1803               	skipnc
  1243  027E  0AD6               	incf	sampleCurrent@temp+1,f
  1244  027F  0821               	movf	?_analogRead+1,w
  1245  0280  07D6               	addwf	sampleCurrent@temp+1,f
  1246  0281  3001               	movlw	1
  1247  0282  07D3               	addwf	sampleCurrent@i,f
  1248  0283  1803               	skipnc
  1249  0284  0AD4               	incf	sampleCurrent@i+1,f
  1250  0285  3000               	movlw	0
  1251  0286  07D4               	addwf	sampleCurrent@i+1,f
  1252  0287  0854               	movf	sampleCurrent@i+1,w
  1253  0288  3A80               	xorlw	128
  1254  0289  00FF               	movwf	127
  1255  028A  3080               	movlw	128
  1256  028B  027F               	subwf	127,w
  1257  028C  1D03               	skipz
  1258  028D  2A90               	goto	u2155
  1259  028E  300B               	movlw	11
  1260  028F  0253               	subwf	sampleCurrent@i,w
  1261  0290                     u2155:	
  1262  0290  1C03               	skipc
  1263  0291  2A73               	goto	l2166
  1264  0292                     l2172:	
  1265                           
  1266                           ;PIC16F917 Battery Management.c: 167: }
  1267                           ;PIC16F917 Battery Management.c: 169: temp = temp / 10;
  1268  0292  300A               	movlw	10
  1269  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1270  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0295  00A0               	movwf	___lwdiv@divisor
  1272  0296  3000               	movlw	0
  1273  0297  00A1               	movwf	___lwdiv@divisor+1
  1274  0298  0856               	movf	sampleCurrent@temp+1,w
  1275  0299  00A3               	movwf	___lwdiv@dividend+1
  1276  029A  0855               	movf	sampleCurrent@temp,w
  1277  029B  00A2               	movwf	___lwdiv@dividend
  1278  029C  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1279  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1280  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1281  02A3  0821               	movf	?___lwdiv+1,w
  1282  02A4  00D6               	movwf	sampleCurrent@temp+1
  1283  02A5  0820               	movf	?___lwdiv,w
  1284  02A6  00D5               	movwf	sampleCurrent@temp
  1285                           
  1286                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1287  02A7  30C0               	movlw	192
  1288  02A8  00C0               	movwf	___ftdiv@f2
  1289  02A9  307F               	movlw	127
  1290  02AA  00C1               	movwf	___ftdiv@f2+1
  1291  02AB  3044               	movlw	68
  1292  02AC  00C2               	movwf	___ftdiv@f2+2
  1293  02AD  0879               	movf	_supVolt,w
  1294  02AE  00B0               	movwf	___ftmul@f1
  1295  02AF  087A               	movf	_supVolt+1,w
  1296  02B0  00B1               	movwf	___ftmul@f1+1
  1297  02B1  087B               	movf	_supVolt+2,w
  1298  02B2  00B2               	movwf	___ftmul@f1+2
  1299  02B3  0856               	movf	sampleCurrent@temp+1,w
  1300  02B4  00A9               	movwf	___lwtoft@c+1
  1301  02B5  0855               	movf	sampleCurrent@temp,w
  1302  02B6  00A8               	movwf	___lwtoft@c
  1303  02B7  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1304  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1305  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1306  02BE  0828               	movf	?___lwtoft,w
  1307  02BF  00B3               	movwf	___ftmul@f2
  1308  02C0  0829               	movf	?___lwtoft+1,w
  1309  02C1  00B4               	movwf	___ftmul@f2+1
  1310  02C2  082A               	movf	?___lwtoft+2,w
  1311  02C3  00B5               	movwf	___ftmul@f2+2
  1312  02C4  120A  118A  2327  120A  118A  	fcall	___ftmul
  1313  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1314  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1315  02CB  0830               	movf	?___ftmul,w
  1316  02CC  00C3               	movwf	___ftdiv@f1
  1317  02CD  0831               	movf	?___ftmul+1,w
  1318  02CE  00C4               	movwf	___ftdiv@f1+1
  1319  02CF  0832               	movf	?___ftmul+2,w
  1320  02D0  00C5               	movwf	___ftdiv@f1+2
  1321  02D1  120A  118A  20F0  120A  118A  	fcall	___ftdiv
  1322  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1323  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1324  02D8  0840               	movf	?___ftdiv,w
  1325  02D9  00D0               	movwf	_sampleCurrent$869
  1326  02DA  0841               	movf	?___ftdiv+1,w
  1327  02DB  00D1               	movwf	_sampleCurrent$869+1
  1328  02DC  0842               	movf	?___ftdiv+2,w
  1329  02DD  00D2               	movwf	_sampleCurrent$869+2
  1330                           
  1331                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1332  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  1333  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  1334  02E0  0861               	movf	_shuntRes^(0+128),w
  1335  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1336  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1337  02E3  00B0               	movwf	___ftmul@f1
  1338  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  1339  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  1340  02E6  0862               	movf	(_shuntRes+1)^(0+128),w
  1341  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1342  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1343  02E9  00B1               	movwf	___ftmul@f1+1
  1344  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  1345  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  1346  02EC  0863               	movf	(_shuntRes+2)^(0+128),w
  1347  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1348  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1349  02EF  00B2               	movwf	___ftmul@f1+2
  1350  02F0  086F               	movf	_currentGain,w
  1351  02F1  120A  158A  229F  120A  118A  	fcall	___lbtoft
  1352  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1353  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  1354  02F8  0828               	movf	?___lbtoft,w
  1355  02F9  00B3               	movwf	___ftmul@f2
  1356  02FA  0829               	movf	?___lbtoft+1,w
  1357  02FB  00B4               	movwf	___ftmul@f2+1
  1358  02FC  082A               	movf	?___lbtoft+2,w
  1359  02FD  00B5               	movwf	___ftmul@f2+2
  1360  02FE  120A  118A  2327  120A  118A  	fcall	___ftmul
  1361  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1362  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0305  0830               	movf	?___ftmul,w
  1364  0306  00C0               	movwf	___ftdiv@f2
  1365  0307  0831               	movf	?___ftmul+1,w
  1366  0308  00C1               	movwf	___ftdiv@f2+1
  1367  0309  0832               	movf	?___ftmul+2,w
  1368  030A  00C2               	movwf	___ftdiv@f2+2
  1369  030B  0850               	movf	_sampleCurrent$869,w
  1370  030C  00C3               	movwf	___ftdiv@f1
  1371  030D  0851               	movf	_sampleCurrent$869+1,w
  1372  030E  00C4               	movwf	___ftdiv@f1+1
  1373  030F  0852               	movf	_sampleCurrent$869+2,w
  1374  0310  00C5               	movwf	___ftdiv@f1+2
  1375  0311  120A  118A  20F0   	fcall	___ftdiv
  1376  0314  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0315  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0316  0840               	movf	?___ftdiv,w
  1379  0317  1683               	bsf	3,5	;RP0=1, select bank1
  1380  0318  1303               	bcf	3,6	;RP1=0, select bank1
  1381  0319  00DE               	movwf	_current^(0+128)
  1382  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1383  031B  1303               	bcf	3,6	;RP1=0, select bank0
  1384  031C  0841               	movf	?___ftdiv+1,w
  1385  031D  1683               	bsf	3,5	;RP0=1, select bank1
  1386  031E  1303               	bcf	3,6	;RP1=0, select bank1
  1387  031F  00DF               	movwf	(_current+1)^(0+128)
  1388  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0322  0842               	movf	?___ftdiv+2,w
  1391  0323  1683               	bsf	3,5	;RP0=1, select bank1
  1392  0324  1303               	bcf	3,6	;RP1=0, select bank1
  1393  0325  00E0               	movwf	(_current+2)^(0+128)
  1394  0326  0008               	return
  1395  0327                     __end_of_sampleCurrent:	
  1396                           
  1397                           	psect	text3
  1398  0A9F                     __ptext3:	
  1399 ;; *************** function ___lbtoft *****************
  1400 ;; Defined at:
  1401 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  c               1    wreg     unsigned char 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  c               1   15[BANK0 ] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  3    8[BANK0 ] float 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0, pclath, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1415 ;;      Params:         0       3       0       0       0
  1416 ;;      Locals:         0       1       0       0       0
  1417 ;;      Temps:          0       4       0       0       0
  1418 ;;      Totals:         0       8       0       0       0
  1419 ;;Total ram usage:        8 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    3
  1422 ;; This function calls:
  1423 ;;		___ftpack
  1424 ;; This function is called by:
  1425 ;;		_sampleCurrent
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function ___lbtoft
  1431  0A9F                     ___lbtoft:	
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1435                           ;___lbtoft@c stored from wreg
  1436  0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0AA0  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0AA1  00AF               	movwf	___lbtoft@c
  1439  0AA2  082F               	movf	___lbtoft@c,w
  1440  0AA3  00AB               	movwf	??___lbtoft
  1441  0AA4  01AC               	clrf	??___lbtoft+1
  1442  0AA5  01AD               	clrf	??___lbtoft+2
  1443  0AA6  082B               	movf	??___lbtoft,w
  1444  0AA7  00A0               	movwf	___ftpack@arg
  1445  0AA8  082C               	movf	??___lbtoft+1,w
  1446  0AA9  00A1               	movwf	___ftpack@arg+1
  1447  0AAA  082D               	movf	??___lbtoft+2,w
  1448  0AAB  00A2               	movwf	___ftpack@arg+2
  1449  0AAC  308E               	movlw	142
  1450  0AAD  00AE               	movwf	??___lbtoft+3
  1451  0AAE  082E               	movf	??___lbtoft+3,w
  1452  0AAF  00A3               	movwf	___ftpack@exp
  1453  0AB0  01A4               	clrf	___ftpack@sign
  1454  0AB1  120A  158A  2545   	fcall	___ftpack
  1455  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  1457  0AB6  0820               	movf	?___ftpack,w
  1458  0AB7  00A8               	movwf	?___lbtoft
  1459  0AB8  0821               	movf	?___ftpack+1,w
  1460  0AB9  00A9               	movwf	?___lbtoft+1
  1461  0ABA  0822               	movf	?___ftpack+2,w
  1462  0ABB  00AA               	movwf	?___lbtoft+2
  1463  0ABC  0008               	return
  1464  0ABD                     __end_of___lbtoft:	
  1465                           
  1466                           	psect	text4
  1467  04E5                     __ptext4:	
  1468 ;; *************** function _sampleBatteryCells *****************
  1469 ;; Defined at:
  1470 ;;		line 89 in file "PIC16F917 Battery Management.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;		None               void
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       3       0       0       0
  1486 ;;      Temps:          0       4       0       0       0
  1487 ;;      Totals:         0       7       0       0       0
  1488 ;;Total ram usage:        7 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    5
  1491 ;; This function calls:
  1492 ;;		___ftmul
  1493 ;;		___lwdiv
  1494 ;;		___lwtoft
  1495 ;;		_sampleVoltage
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _sampleBatteryCells
  1503  04E5                     _sampleBatteryCells:	
  1504                           
  1505                           ;PIC16F917 Battery Management.c: 92: RC2 = 1;
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1509  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1510  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1511  04E7  1507               	bsf	7,2	;volatile
  1512                           
  1513                           ;PIC16F917 Battery Management.c: 95: RD0 = 1;
  1514  04E8  1408               	bsf	8,0	;volatile
  1515                           
  1516                           ;PIC16F917 Battery Management.c: 97: _delay((unsigned long)((5)*(8000000/4000.0)));
  1517  04E9  300D               	movlw	13
  1518  04EA  00DA               	movwf	??_sampleBatteryCells+1
  1519  04EB  30FB               	movlw	251
  1520  04EC  00D9               	movwf	??_sampleBatteryCells
  1521  04ED                     u2417:	
  1522  04ED  0BD9               	decfsz	??_sampleBatteryCells,f
  1523  04EE  2CED               	goto	u2417
  1524  04EF  0BDA               	decfsz	??_sampleBatteryCells+1,f
  1525  04F0  2CED               	goto	u2417
  1526  04F1  2CF2               	nop2
  1527                           
  1528                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1529  04F2  3000               	movlw	0
  1530  04F3  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1531  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1532  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1533  04FA  0850               	movf	?_sampleVoltage,w
  1534  04FB  00DD               	movwf	_sampleBatteryCells$868
  1535  04FC  0851               	movf	?_sampleVoltage+1,w
  1536  04FD  00DE               	movwf	_sampleBatteryCells$868+1
  1537  04FE  0852               	movf	?_sampleVoltage+2,w
  1538  04FF  00DF               	movwf	_sampleBatteryCells$868+2
  1539                           
  1540                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1541  0500  085D               	movf	_sampleBatteryCells$868,w
  1542  0501  00B0               	movwf	___ftmul@f1
  1543  0502  085E               	movf	_sampleBatteryCells$868+1,w
  1544  0503  00B1               	movwf	___ftmul@f1+1
  1545  0504  085F               	movf	_sampleBatteryCells$868+2,w
  1546  0505  00B2               	movwf	___ftmul@f1+2
  1547  0506  3013               	movlw	low (_cellRDB-__stringbase)
  1548  0507  0084               	movwf	4
  1549  0508  120A  158A  200A  120A  118A  	fcall	stringdir
  1550  050D  00A0               	movwf	___lwdiv@divisor
  1551  050E  120A  158A  200A  120A  118A  	fcall	stringdir
  1552  0513  00A1               	movwf	___lwdiv@divisor+1
  1553  0514  3013               	movlw	low (_cellRDB-__stringbase)
  1554  0515  0084               	movwf	4
  1555  0516  120A  158A  200A  120A  118A  	fcall	stringdir
  1556  051B  00D9               	movwf	??_sampleBatteryCells
  1557  051C  120A  158A  200A  120A  118A  	fcall	stringdir
  1558  0521  00DA               	movwf	??_sampleBatteryCells+1
  1559  0522  3007               	movlw	low (_cell1RDT-__stringbase)
  1560  0523  0084               	movwf	4
  1561  0524  120A  158A  200A  120A  118A  	fcall	stringdir
  1562  0529  00DB               	movwf	??_sampleBatteryCells+2
  1563  052A  120A  158A  200A  120A  118A  	fcall	stringdir
  1564  052F  00DC               	movwf	??_sampleBatteryCells+3
  1565  0530  0859               	movf	??_sampleBatteryCells,w
  1566  0531  075B               	addwf	??_sampleBatteryCells+2,w
  1567  0532  00A2               	movwf	___lwdiv@dividend
  1568  0533  085A               	movf	??_sampleBatteryCells+1,w
  1569  0534  1803               	skipnc
  1570  0535  0A5A               	incf	??_sampleBatteryCells+1,w
  1571  0536  075C               	addwf	??_sampleBatteryCells+3,w
  1572  0537  00A3               	movwf	___lwdiv@dividend+1
  1573  0538  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1574  053D  1283               	bcf	3,5	;RP0=0, select bank0
  1575  053E  1303               	bcf	3,6	;RP1=0, select bank0
  1576  053F  0821               	movf	?___lwdiv+1,w
  1577  0540  00A9               	movwf	___lwtoft@c+1
  1578  0541  0820               	movf	?___lwdiv,w
  1579  0542  00A8               	movwf	___lwtoft@c
  1580  0543  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1581  0548  1283               	bcf	3,5	;RP0=0, select bank0
  1582  0549  1303               	bcf	3,6	;RP1=0, select bank0
  1583  054A  0828               	movf	?___lwtoft,w
  1584  054B  00B3               	movwf	___ftmul@f2
  1585  054C  0829               	movf	?___lwtoft+1,w
  1586  054D  00B4               	movwf	___ftmul@f2+1
  1587  054E  082A               	movf	?___lwtoft+2,w
  1588  054F  00B5               	movwf	___ftmul@f2+2
  1589  0550  120A  118A  2327  120A  118A  	fcall	___ftmul
  1590  0555  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0556  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0557  0830               	movf	?___ftmul,w
  1593  0558  1683               	bsf	3,5	;RP0=1, select bank1
  1594  0559  1303               	bcf	3,6	;RP1=0, select bank1
  1595  055A  00A0               	movwf	_cellVolt^(0+128)
  1596  055B  1283               	bcf	3,5	;RP0=0, select bank0
  1597  055C  1303               	bcf	3,6	;RP1=0, select bank0
  1598  055D  0831               	movf	?___ftmul+1,w
  1599  055E  1683               	bsf	3,5	;RP0=1, select bank1
  1600  055F  1303               	bcf	3,6	;RP1=0, select bank1
  1601  0560  00A1               	movwf	(_cellVolt+1)^(0+128)
  1602  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1604  0563  0832               	movf	?___ftmul+2,w
  1605  0564  1683               	bsf	3,5	;RP0=1, select bank1
  1606  0565  1303               	bcf	3,6	;RP1=0, select bank1
  1607  0566  00A2               	movwf	(_cellVolt+2)^(0+128)
  1608                           
  1609                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1610  0567  3001               	movlw	1
  1611  0568  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1612  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1613  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1614  056F  0850               	movf	?_sampleVoltage,w
  1615  0570  00DD               	movwf	_sampleBatteryCells$868
  1616  0571  0851               	movf	?_sampleVoltage+1,w
  1617  0572  00DE               	movwf	_sampleBatteryCells$868+1
  1618  0573  0852               	movf	?_sampleVoltage+2,w
  1619  0574  00DF               	movwf	_sampleBatteryCells$868+2
  1620                           
  1621                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1622  0575  085D               	movf	_sampleBatteryCells$868,w
  1623  0576  00B0               	movwf	___ftmul@f1
  1624  0577  085E               	movf	_sampleBatteryCells$868+1,w
  1625  0578  00B1               	movwf	___ftmul@f1+1
  1626  0579  085F               	movf	_sampleBatteryCells$868+2,w
  1627  057A  00B2               	movwf	___ftmul@f1+2
  1628  057B  3013               	movlw	low (_cellRDB-__stringbase)
  1629  057C  0084               	movwf	4
  1630  057D  120A  158A  200A  120A  118A  	fcall	stringdir
  1631  0582  00A0               	movwf	___lwdiv@divisor
  1632  0583  120A  158A  200A  120A  118A  	fcall	stringdir
  1633  0588  00A1               	movwf	___lwdiv@divisor+1
  1634  0589  3013               	movlw	low (_cellRDB-__stringbase)
  1635  058A  0084               	movwf	4
  1636  058B  120A  158A  200A  120A  118A  	fcall	stringdir
  1637  0590  00D9               	movwf	??_sampleBatteryCells
  1638  0591  120A  158A  200A  120A  118A  	fcall	stringdir
  1639  0596  00DA               	movwf	??_sampleBatteryCells+1
  1640  0597  3009               	movlw	low (_cell2RDT-__stringbase)
  1641  0598  0084               	movwf	4
  1642  0599  120A  158A  200A  120A  118A  	fcall	stringdir
  1643  059E  00DB               	movwf	??_sampleBatteryCells+2
  1644  059F  120A  158A  200A  120A  118A  	fcall	stringdir
  1645  05A4  00DC               	movwf	??_sampleBatteryCells+3
  1646  05A5  0859               	movf	??_sampleBatteryCells,w
  1647  05A6  075B               	addwf	??_sampleBatteryCells+2,w
  1648  05A7  00A2               	movwf	___lwdiv@dividend
  1649  05A8  085A               	movf	??_sampleBatteryCells+1,w
  1650  05A9  1803               	skipnc
  1651  05AA  0A5A               	incf	??_sampleBatteryCells+1,w
  1652  05AB  075C               	addwf	??_sampleBatteryCells+3,w
  1653  05AC  00A3               	movwf	___lwdiv@dividend+1
  1654  05AD  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1655  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1656  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1657  05B4  0821               	movf	?___lwdiv+1,w
  1658  05B5  00A9               	movwf	___lwtoft@c+1
  1659  05B6  0820               	movf	?___lwdiv,w
  1660  05B7  00A8               	movwf	___lwtoft@c
  1661  05B8  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1662  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1663  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1664  05BF  0828               	movf	?___lwtoft,w
  1665  05C0  00B3               	movwf	___ftmul@f2
  1666  05C1  0829               	movf	?___lwtoft+1,w
  1667  05C2  00B4               	movwf	___ftmul@f2+1
  1668  05C3  082A               	movf	?___lwtoft+2,w
  1669  05C4  00B5               	movwf	___ftmul@f2+2
  1670  05C5  120A  118A  2327  120A  118A  	fcall	___ftmul
  1671  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1672  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1673  05CC  0830               	movf	?___ftmul,w
  1674  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  1675  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  1676  05CF  00A3               	movwf	(_cellVolt^(0+128)+3)
  1677  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1678  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1679  05D2  0831               	movf	?___ftmul+1,w
  1680  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  1681  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  1682  05D5  00A4               	movwf	((_cellVolt+1)^(0+128)+3)
  1683  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1684  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1685  05D8  0832               	movf	?___ftmul+2,w
  1686  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  1687  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  1688  05DB  00A5               	movwf	((_cellVolt+2)^(0+128)+3)
  1689                           
  1690                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  1691  05DC  3005               	movlw	5
  1692  05DD  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1693  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1694  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  1695  05E4  0850               	movf	?_sampleVoltage,w
  1696  05E5  00DD               	movwf	_sampleBatteryCells$868
  1697  05E6  0851               	movf	?_sampleVoltage+1,w
  1698  05E7  00DE               	movwf	_sampleBatteryCells$868+1
  1699  05E8  0852               	movf	?_sampleVoltage+2,w
  1700  05E9  00DF               	movwf	_sampleBatteryCells$868+2
  1701                           
  1702                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  1703  05EA  085D               	movf	_sampleBatteryCells$868,w
  1704  05EB  00B0               	movwf	___ftmul@f1
  1705  05EC  085E               	movf	_sampleBatteryCells$868+1,w
  1706  05ED  00B1               	movwf	___ftmul@f1+1
  1707  05EE  085F               	movf	_sampleBatteryCells$868+2,w
  1708  05EF  00B2               	movwf	___ftmul@f1+2
  1709  05F0  3013               	movlw	low (_cellRDB-__stringbase)
  1710  05F1  0084               	movwf	4
  1711  05F2  120A  158A  200A  120A  118A  	fcall	stringdir
  1712  05F7  00A0               	movwf	___lwdiv@divisor
  1713  05F8  120A  158A  200A  120A  118A  	fcall	stringdir
  1714  05FD  00A1               	movwf	___lwdiv@divisor+1
  1715  05FE  3013               	movlw	low (_cellRDB-__stringbase)
  1716  05FF  0084               	movwf	4
  1717  0600  120A  158A  200A  120A  118A  	fcall	stringdir
  1718  0605  00D9               	movwf	??_sampleBatteryCells
  1719  0606  120A  158A  200A  120A  118A  	fcall	stringdir
  1720  060B  00DA               	movwf	??_sampleBatteryCells+1
  1721  060C  300B               	movlw	low (_cell3RDT-__stringbase)
  1722  060D  0084               	movwf	4
  1723  060E  120A  158A  200A  120A  118A  	fcall	stringdir
  1724  0613  00DB               	movwf	??_sampleBatteryCells+2
  1725  0614  120A  158A  200A  120A  118A  	fcall	stringdir
  1726  0619  00DC               	movwf	??_sampleBatteryCells+3
  1727  061A  0859               	movf	??_sampleBatteryCells,w
  1728  061B  075B               	addwf	??_sampleBatteryCells+2,w
  1729  061C  00A2               	movwf	___lwdiv@dividend
  1730  061D  085A               	movf	??_sampleBatteryCells+1,w
  1731  061E  1803               	skipnc
  1732  061F  0A5A               	incf	??_sampleBatteryCells+1,w
  1733  0620  075C               	addwf	??_sampleBatteryCells+3,w
  1734  0621  00A3               	movwf	___lwdiv@dividend+1
  1735  0622  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1736  0627  1283               	bcf	3,5	;RP0=0, select bank0
  1737  0628  1303               	bcf	3,6	;RP1=0, select bank0
  1738  0629  0821               	movf	?___lwdiv+1,w
  1739  062A  00A9               	movwf	___lwtoft@c+1
  1740  062B  0820               	movf	?___lwdiv,w
  1741  062C  00A8               	movwf	___lwtoft@c
  1742  062D  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1743  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1744  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1745  0634  0828               	movf	?___lwtoft,w
  1746  0635  00B3               	movwf	___ftmul@f2
  1747  0636  0829               	movf	?___lwtoft+1,w
  1748  0637  00B4               	movwf	___ftmul@f2+1
  1749  0638  082A               	movf	?___lwtoft+2,w
  1750  0639  00B5               	movwf	___ftmul@f2+2
  1751  063A  120A  118A  2327  120A  118A  	fcall	___ftmul
  1752  063F  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0640  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0641  0830               	movf	?___ftmul,w
  1755  0642  1683               	bsf	3,5	;RP0=1, select bank1
  1756  0643  1303               	bcf	3,6	;RP1=0, select bank1
  1757  0644  00A6               	movwf	(_cellVolt^(0+128)+6)
  1758  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1760  0647  0831               	movf	?___ftmul+1,w
  1761  0648  1683               	bsf	3,5	;RP0=1, select bank1
  1762  0649  1303               	bcf	3,6	;RP1=0, select bank1
  1763  064A  00A7               	movwf	((_cellVolt+1)^(0+128)+6)
  1764  064B  1283               	bcf	3,5	;RP0=0, select bank0
  1765  064C  1303               	bcf	3,6	;RP1=0, select bank0
  1766  064D  0832               	movf	?___ftmul+2,w
  1767  064E  1683               	bsf	3,5	;RP0=1, select bank1
  1768  064F  1303               	bcf	3,6	;RP1=0, select bank1
  1769  0650  00A8               	movwf	((_cellVolt+2)^(0+128)+6)
  1770                           
  1771                           ;PIC16F917 Battery Management.c: 104: RD0 = 0;
  1772  0651  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0652  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0653  1008               	bcf	8,0	;volatile
  1775                           
  1776                           ;PIC16F917 Battery Management.c: 105: RC3 = 1;
  1777  0654  1587               	bsf	7,3	;volatile
  1778                           
  1779                           ;PIC16F917 Battery Management.c: 107: _delay((unsigned long)((5)*(8000000/4000.0)));
  1780  0655  300D               	movlw	13
  1781  0656  00DA               	movwf	??_sampleBatteryCells+1
  1782  0657  30FB               	movlw	251
  1783  0658  00D9               	movwf	??_sampleBatteryCells
  1784  0659                     u2427:	
  1785  0659  0BD9               	decfsz	??_sampleBatteryCells,f
  1786  065A  2E59               	goto	u2427
  1787  065B  0BDA               	decfsz	??_sampleBatteryCells+1,f
  1788  065C  2E59               	goto	u2427
  1789  065D  2E5E               	nop2
  1790                           
  1791                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  1792  065E  3006               	movlw	6
  1793  065F  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1794  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1795  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1796  0666  0850               	movf	?_sampleVoltage,w
  1797  0667  00DD               	movwf	_sampleBatteryCells$868
  1798  0668  0851               	movf	?_sampleVoltage+1,w
  1799  0669  00DE               	movwf	_sampleBatteryCells$868+1
  1800  066A  0852               	movf	?_sampleVoltage+2,w
  1801  066B  00DF               	movwf	_sampleBatteryCells$868+2
  1802                           
  1803                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  1804  066C  085D               	movf	_sampleBatteryCells$868,w
  1805  066D  00B0               	movwf	___ftmul@f1
  1806  066E  085E               	movf	_sampleBatteryCells$868+1,w
  1807  066F  00B1               	movwf	___ftmul@f1+1
  1808  0670  085F               	movf	_sampleBatteryCells$868+2,w
  1809  0671  00B2               	movwf	___ftmul@f1+2
  1810  0672  3013               	movlw	low (_cellRDB-__stringbase)
  1811  0673  0084               	movwf	4
  1812  0674  120A  158A  200A  120A  118A  	fcall	stringdir
  1813  0679  00A0               	movwf	___lwdiv@divisor
  1814  067A  120A  158A  200A  120A  118A  	fcall	stringdir
  1815  067F  00A1               	movwf	___lwdiv@divisor+1
  1816  0680  3013               	movlw	low (_cellRDB-__stringbase)
  1817  0681  0084               	movwf	4
  1818  0682  120A  158A  200A  120A  118A  	fcall	stringdir
  1819  0687  00D9               	movwf	??_sampleBatteryCells
  1820  0688  120A  158A  200A  120A  118A  	fcall	stringdir
  1821  068D  00DA               	movwf	??_sampleBatteryCells+1
  1822  068E  300D               	movlw	low (_cell4RDT-__stringbase)
  1823  068F  0084               	movwf	4
  1824  0690  120A  158A  200A  120A  118A  	fcall	stringdir
  1825  0695  00DB               	movwf	??_sampleBatteryCells+2
  1826  0696  120A  158A  200A  120A  118A  	fcall	stringdir
  1827  069B  00DC               	movwf	??_sampleBatteryCells+3
  1828  069C  0859               	movf	??_sampleBatteryCells,w
  1829  069D  075B               	addwf	??_sampleBatteryCells+2,w
  1830  069E  00A2               	movwf	___lwdiv@dividend
  1831  069F  085A               	movf	??_sampleBatteryCells+1,w
  1832  06A0  1803               	skipnc
  1833  06A1  0A5A               	incf	??_sampleBatteryCells+1,w
  1834  06A2  075C               	addwf	??_sampleBatteryCells+3,w
  1835  06A3  00A3               	movwf	___lwdiv@dividend+1
  1836  06A4  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1837  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  1838  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  1839  06AB  0821               	movf	?___lwdiv+1,w
  1840  06AC  00A9               	movwf	___lwtoft@c+1
  1841  06AD  0820               	movf	?___lwdiv,w
  1842  06AE  00A8               	movwf	___lwtoft@c
  1843  06AF  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1844  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  1845  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  1846  06B6  0828               	movf	?___lwtoft,w
  1847  06B7  00B3               	movwf	___ftmul@f2
  1848  06B8  0829               	movf	?___lwtoft+1,w
  1849  06B9  00B4               	movwf	___ftmul@f2+1
  1850  06BA  082A               	movf	?___lwtoft+2,w
  1851  06BB  00B5               	movwf	___ftmul@f2+2
  1852  06BC  120A  118A  2327  120A  118A  	fcall	___ftmul
  1853  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1854  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1855  06C3  0830               	movf	?___ftmul,w
  1856  06C4  1683               	bsf	3,5	;RP0=1, select bank1
  1857  06C5  1303               	bcf	3,6	;RP1=0, select bank1
  1858  06C6  00A9               	movwf	(_cellVolt^(0+128)+9)
  1859  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  1860  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  1861  06C9  0831               	movf	?___ftmul+1,w
  1862  06CA  1683               	bsf	3,5	;RP0=1, select bank1
  1863  06CB  1303               	bcf	3,6	;RP1=0, select bank1
  1864  06CC  00AA               	movwf	((_cellVolt+1)^(0+128)+9)
  1865  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1866  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1867  06CF  0832               	movf	?___ftmul+2,w
  1868  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  1869  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  1870  06D2  00AB               	movwf	((_cellVolt+2)^(0+128)+9)
  1871                           
  1872                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  1873  06D3  3003               	movlw	3
  1874  06D4  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1875  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  1876  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  1877  06DB  0850               	movf	?_sampleVoltage,w
  1878  06DC  00DD               	movwf	_sampleBatteryCells$868
  1879  06DD  0851               	movf	?_sampleVoltage+1,w
  1880  06DE  00DE               	movwf	_sampleBatteryCells$868+1
  1881  06DF  0852               	movf	?_sampleVoltage+2,w
  1882  06E0  00DF               	movwf	_sampleBatteryCells$868+2
  1883                           
  1884                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  1885  06E1  085D               	movf	_sampleBatteryCells$868,w
  1886  06E2  00B0               	movwf	___ftmul@f1
  1887  06E3  085E               	movf	_sampleBatteryCells$868+1,w
  1888  06E4  00B1               	movwf	___ftmul@f1+1
  1889  06E5  085F               	movf	_sampleBatteryCells$868+2,w
  1890  06E6  00B2               	movwf	___ftmul@f1+2
  1891  06E7  3013               	movlw	low (_cellRDB-__stringbase)
  1892  06E8  0084               	movwf	4
  1893  06E9  120A  158A  200A  120A  118A  	fcall	stringdir
  1894  06EE  00A0               	movwf	___lwdiv@divisor
  1895  06EF  120A  158A  200A  120A  118A  	fcall	stringdir
  1896  06F4  00A1               	movwf	___lwdiv@divisor+1
  1897  06F5  3013               	movlw	low (_cellRDB-__stringbase)
  1898  06F6  0084               	movwf	4
  1899  06F7  120A  158A  200A  120A  118A  	fcall	stringdir
  1900  06FC  00D9               	movwf	??_sampleBatteryCells
  1901  06FD  120A  158A  200A  120A  118A  	fcall	stringdir
  1902  0702  00DA               	movwf	??_sampleBatteryCells+1
  1903  0703  300F               	movlw	low (_cell5RDT-__stringbase)
  1904  0704  0084               	movwf	4
  1905  0705  120A  158A  200A  120A  118A  	fcall	stringdir
  1906  070A  00DB               	movwf	??_sampleBatteryCells+2
  1907  070B  120A  158A  200A  120A  118A  	fcall	stringdir
  1908  0710  00DC               	movwf	??_sampleBatteryCells+3
  1909  0711  0859               	movf	??_sampleBatteryCells,w
  1910  0712  075B               	addwf	??_sampleBatteryCells+2,w
  1911  0713  00A2               	movwf	___lwdiv@dividend
  1912  0714  085A               	movf	??_sampleBatteryCells+1,w
  1913  0715  1803               	skipnc
  1914  0716  0A5A               	incf	??_sampleBatteryCells+1,w
  1915  0717  075C               	addwf	??_sampleBatteryCells+3,w
  1916  0718  00A3               	movwf	___lwdiv@dividend+1
  1917  0719  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1918  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1919  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1920  0720  0821               	movf	?___lwdiv+1,w
  1921  0721  00A9               	movwf	___lwtoft@c+1
  1922  0722  0820               	movf	?___lwdiv,w
  1923  0723  00A8               	movwf	___lwtoft@c
  1924  0724  120A  158A  226E  120A  118A  	fcall	___lwtoft
  1925  0729  1283               	bcf	3,5	;RP0=0, select bank0
  1926  072A  1303               	bcf	3,6	;RP1=0, select bank0
  1927  072B  0828               	movf	?___lwtoft,w
  1928  072C  00B3               	movwf	___ftmul@f2
  1929  072D  0829               	movf	?___lwtoft+1,w
  1930  072E  00B4               	movwf	___ftmul@f2+1
  1931  072F  082A               	movf	?___lwtoft+2,w
  1932  0730  00B5               	movwf	___ftmul@f2+2
  1933  0731  120A  118A  2327  120A  118A  	fcall	___ftmul
  1934  0736  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0737  1303               	bcf	3,6	;RP1=0, select bank0
  1936  0738  0830               	movf	?___ftmul,w
  1937  0739  1683               	bsf	3,5	;RP0=1, select bank1
  1938  073A  1303               	bcf	3,6	;RP1=0, select bank1
  1939  073B  00AC               	movwf	(_cellVolt^(0+128)+12)
  1940  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1941  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1942  073E  0831               	movf	?___ftmul+1,w
  1943  073F  1683               	bsf	3,5	;RP0=1, select bank1
  1944  0740  1303               	bcf	3,6	;RP1=0, select bank1
  1945  0741  00AD               	movwf	((_cellVolt+1)^(0+128)+12)
  1946  0742  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0743  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0744  0832               	movf	?___ftmul+2,w
  1949  0745  1683               	bsf	3,5	;RP0=1, select bank1
  1950  0746  1303               	bcf	3,6	;RP1=0, select bank1
  1951  0747  00AE               	movwf	((_cellVolt+2)^(0+128)+12)
  1952                           
  1953                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  1954  0748  3004               	movlw	4
  1955  0749  120A  158A  25B3  120A  118A  	fcall	_sampleVoltage
  1956  074E  1283               	bcf	3,5	;RP0=0, select bank0
  1957  074F  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0750  0850               	movf	?_sampleVoltage,w
  1959  0751  00DD               	movwf	_sampleBatteryCells$868
  1960  0752  0851               	movf	?_sampleVoltage+1,w
  1961  0753  00DE               	movwf	_sampleBatteryCells$868+1
  1962  0754  0852               	movf	?_sampleVoltage+2,w
  1963  0755  00DF               	movwf	_sampleBatteryCells$868+2
  1964                           
  1965                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  1966  0756  085D               	movf	_sampleBatteryCells$868,w
  1967  0757  00B0               	movwf	___ftmul@f1
  1968  0758  085E               	movf	_sampleBatteryCells$868+1,w
  1969  0759  00B1               	movwf	___ftmul@f1+1
  1970  075A  085F               	movf	_sampleBatteryCells$868+2,w
  1971  075B  00B2               	movwf	___ftmul@f1+2
  1972  075C  3013               	movlw	low (_cellRDB-__stringbase)
  1973  075D  0084               	movwf	4
  1974  075E  120A  158A  200A  120A  118A  	fcall	stringdir
  1975  0763  00A0               	movwf	___lwdiv@divisor
  1976  0764  120A  158A  200A  120A  118A  	fcall	stringdir
  1977  0769  00A1               	movwf	___lwdiv@divisor+1
  1978  076A  3013               	movlw	low (_cellRDB-__stringbase)
  1979  076B  0084               	movwf	4
  1980  076C  120A  158A  200A  120A  118A  	fcall	stringdir
  1981  0771  00D9               	movwf	??_sampleBatteryCells
  1982  0772  120A  158A  200A  120A  118A  	fcall	stringdir
  1983  0777  00DA               	movwf	??_sampleBatteryCells+1
  1984  0778  3011               	movlw	low (_cell6RDT-__stringbase)
  1985  0779  0084               	movwf	4
  1986  077A  120A  158A  200A  120A  118A  	fcall	stringdir
  1987  077F  00DB               	movwf	??_sampleBatteryCells+2
  1988  0780  120A  158A  200A  120A  118A  	fcall	stringdir
  1989  0785  00DC               	movwf	??_sampleBatteryCells+3
  1990  0786  0859               	movf	??_sampleBatteryCells,w
  1991  0787  075B               	addwf	??_sampleBatteryCells+2,w
  1992  0788  00A2               	movwf	___lwdiv@dividend
  1993  0789  085A               	movf	??_sampleBatteryCells+1,w
  1994  078A  1803               	skipnc
  1995  078B  0A5A               	incf	??_sampleBatteryCells+1,w
  1996  078C  075C               	addwf	??_sampleBatteryCells+3,w
  1997  078D  00A3               	movwf	___lwdiv@dividend+1
  1998  078E  120A  158A  2415  120A  118A  	fcall	___lwdiv
  1999  0793  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0794  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0795  0821               	movf	?___lwdiv+1,w
  2002  0796  00A9               	movwf	___lwtoft@c+1
  2003  0797  0820               	movf	?___lwdiv,w
  2004  0798  00A8               	movwf	___lwtoft@c
  2005  0799  120A  158A  226E  120A  118A  	fcall	___lwtoft
  2006  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2007  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2008  07A0  0828               	movf	?___lwtoft,w
  2009  07A1  00B3               	movwf	___ftmul@f2
  2010  07A2  0829               	movf	?___lwtoft+1,w
  2011  07A3  00B4               	movwf	___ftmul@f2+1
  2012  07A4  082A               	movf	?___lwtoft+2,w
  2013  07A5  00B5               	movwf	___ftmul@f2+2
  2014  07A6  120A  118A  2327   	fcall	___ftmul
  2015  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  2016  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  2017  07AB  0830               	movf	?___ftmul,w
  2018  07AC  1683               	bsf	3,5	;RP0=1, select bank1
  2019  07AD  1303               	bcf	3,6	;RP1=0, select bank1
  2020  07AE  00AF               	movwf	(_cellVolt^(0+128)+15)
  2021  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  2022  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  2023  07B1  0831               	movf	?___ftmul+1,w
  2024  07B2  1683               	bsf	3,5	;RP0=1, select bank1
  2025  07B3  1303               	bcf	3,6	;RP1=0, select bank1
  2026  07B4  00B0               	movwf	((_cellVolt+1)^(0+128)+15)
  2027  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2028  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2029  07B7  0832               	movf	?___ftmul+2,w
  2030  07B8  1683               	bsf	3,5	;RP0=1, select bank1
  2031  07B9  1303               	bcf	3,6	;RP1=0, select bank1
  2032  07BA  00B1               	movwf	((_cellVolt+2)^(0+128)+15)
  2033                           
  2034                           ;PIC16F917 Battery Management.c: 113: RC3 = 0;
  2035  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  2036  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  2037  07BD  1187               	bcf	7,3	;volatile
  2038                           
  2039                           ;PIC16F917 Battery Management.c: 115: RC2 = 0;
  2040  07BE  1107               	bcf	7,2	;volatile
  2041  07BF  0008               	return
  2042  07C0                     __end_of_sampleBatteryCells:	
  2043                           
  2044                           	psect	text5
  2045  0DB3                     __ptext5:	
  2046 ;; *************** function _sampleVoltage *****************
  2047 ;; Defined at:
  2048 ;;		line 145 in file "PIC16F917 Battery Management.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  chan            1    wreg     enum E2715
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  chan            1   52[BANK0 ] enum E2715
  2053 ;;  i               2   53[BANK0 ] int 
  2054 ;;  temp            2   55[BANK0 ] unsigned int 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  3   48[BANK0 ] float 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2064 ;;      Params:         0       4       0       0       0
  2065 ;;      Locals:         0       5       0       0       0
  2066 ;;      Temps:          0       0       0       0       0
  2067 ;;      Totals:         0       9       0       0       0
  2068 ;;Total ram usage:        9 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    4
  2071 ;; This function calls:
  2072 ;;		___ftdiv
  2073 ;;		___ftmul
  2074 ;;		___lwdiv
  2075 ;;		___lwtoft
  2076 ;;		_analogRead
  2077 ;; This function is called by:
  2078 ;;		_sampleBatteryCells
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _sampleVoltage
  2084  0DB3                     _sampleVoltage:	
  2085                           
  2086                           ;incstack = 0
  2087                           ; Regs used in _sampleVoltage: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2088                           ;sampleVoltage@chan stored from wreg
  2089  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  2090  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0DB5  00D4               	movwf	sampleVoltage@chan
  2092                           
  2093                           ;PIC16F917 Battery Management.c: 147: uint16_t temp = 0;
  2094  0DB6  01D7               	clrf	sampleVoltage@temp
  2095  0DB7  01D8               	clrf	sampleVoltage@temp+1
  2096                           
  2097                           ;PIC16F917 Battery Management.c: 149: for ( int i = 0; i <= 10; i++)
  2098  0DB8  01D5               	clrf	sampleVoltage@i
  2099  0DB9  01D6               	clrf	sampleVoltage@i+1
  2100  0DBA  0856               	movf	sampleVoltage@i+1,w
  2101  0DBB  3A80               	xorlw	128
  2102  0DBC  00FF               	movwf	127
  2103  0DBD  3080               	movlw	128
  2104  0DBE  027F               	subwf	127,w
  2105  0DBF  1D03               	skipz
  2106  0DC0  2DC3               	goto	u2045
  2107  0DC1  300B               	movlw	11
  2108  0DC2  0255               	subwf	sampleVoltage@i,w
  2109  0DC3                     u2045:	
  2110  0DC3  1803               	btfsc	3,0
  2111  0DC4  2DE6               	goto	l2058
  2112  0DC5                     l2052:	
  2113                           
  2114                           ;PIC16F917 Battery Management.c: 150: {
  2115                           ;PIC16F917 Battery Management.c: 151: temp += analogRead(chan);
  2116  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  2117  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  2118  0DC7  0854               	movf	sampleVoltage@chan,w
  2119  0DC8  120A  158A  23DC  120A  158A  	fcall	_analogRead
  2120  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  2122  0DCF  0820               	movf	?_analogRead,w
  2123  0DD0  07D7               	addwf	sampleVoltage@temp,f
  2124  0DD1  1803               	skipnc
  2125  0DD2  0AD8               	incf	sampleVoltage@temp+1,f
  2126  0DD3  0821               	movf	?_analogRead+1,w
  2127  0DD4  07D8               	addwf	sampleVoltage@temp+1,f
  2128  0DD5  3001               	movlw	1
  2129  0DD6  07D5               	addwf	sampleVoltage@i,f
  2130  0DD7  1803               	skipnc
  2131  0DD8  0AD6               	incf	sampleVoltage@i+1,f
  2132  0DD9  3000               	movlw	0
  2133  0DDA  07D6               	addwf	sampleVoltage@i+1,f
  2134  0DDB  0856               	movf	sampleVoltage@i+1,w
  2135  0DDC  3A80               	xorlw	128
  2136  0DDD  00FF               	movwf	127
  2137  0DDE  3080               	movlw	128
  2138  0DDF  027F               	subwf	127,w
  2139  0DE0  1D03               	skipz
  2140  0DE1  2DE4               	goto	u2055
  2141  0DE2  300B               	movlw	11
  2142  0DE3  0255               	subwf	sampleVoltage@i,w
  2143  0DE4                     u2055:	
  2144  0DE4  1C03               	skipc
  2145  0DE5  2DC5               	goto	l2052
  2146  0DE6                     l2058:	
  2147                           
  2148                           ;PIC16F917 Battery Management.c: 152: }
  2149                           ;PIC16F917 Battery Management.c: 154: temp = temp / 10;
  2150  0DE6  300A               	movlw	10
  2151  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0DE9  00A0               	movwf	___lwdiv@divisor
  2154  0DEA  3000               	movlw	0
  2155  0DEB  00A1               	movwf	___lwdiv@divisor+1
  2156  0DEC  0858               	movf	sampleVoltage@temp+1,w
  2157  0DED  00A3               	movwf	___lwdiv@dividend+1
  2158  0DEE  0857               	movf	sampleVoltage@temp,w
  2159  0DEF  00A2               	movwf	___lwdiv@dividend
  2160  0DF0  120A  158A  2415  120A  158A  	fcall	___lwdiv
  2161  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0DF7  0821               	movf	?___lwdiv+1,w
  2164  0DF8  00D8               	movwf	sampleVoltage@temp+1
  2165  0DF9  0820               	movf	?___lwdiv,w
  2166  0DFA  00D7               	movwf	sampleVoltage@temp
  2167                           
  2168                           ;PIC16F917 Battery Management.c: 157: return (temp * supVolt)/1023;
  2169  0DFB  30C0               	movlw	192
  2170  0DFC  00C0               	movwf	___ftdiv@f2
  2171  0DFD  307F               	movlw	127
  2172  0DFE  00C1               	movwf	___ftdiv@f2+1
  2173  0DFF  3044               	movlw	68
  2174  0E00  00C2               	movwf	___ftdiv@f2+2
  2175  0E01  0879               	movf	_supVolt,w
  2176  0E02  00B0               	movwf	___ftmul@f1
  2177  0E03  087A               	movf	_supVolt+1,w
  2178  0E04  00B1               	movwf	___ftmul@f1+1
  2179  0E05  087B               	movf	_supVolt+2,w
  2180  0E06  00B2               	movwf	___ftmul@f1+2
  2181  0E07  0858               	movf	sampleVoltage@temp+1,w
  2182  0E08  00A9               	movwf	___lwtoft@c+1
  2183  0E09  0857               	movf	sampleVoltage@temp,w
  2184  0E0A  00A8               	movwf	___lwtoft@c
  2185  0E0B  120A  158A  226E  120A  158A  	fcall	___lwtoft
  2186  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0E12  0828               	movf	?___lwtoft,w
  2189  0E13  00B3               	movwf	___ftmul@f2
  2190  0E14  0829               	movf	?___lwtoft+1,w
  2191  0E15  00B4               	movwf	___ftmul@f2+1
  2192  0E16  082A               	movf	?___lwtoft+2,w
  2193  0E17  00B5               	movwf	___ftmul@f2+2
  2194  0E18  120A  118A  2327  120A  158A  	fcall	___ftmul
  2195  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0E1F  0830               	movf	?___ftmul,w
  2198  0E20  00C3               	movwf	___ftdiv@f1
  2199  0E21  0831               	movf	?___ftmul+1,w
  2200  0E22  00C4               	movwf	___ftdiv@f1+1
  2201  0E23  0832               	movf	?___ftmul+2,w
  2202  0E24  00C5               	movwf	___ftdiv@f1+2
  2203  0E25  120A  118A  20F0   	fcall	___ftdiv
  2204  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  2206  0E2A  0840               	movf	?___ftdiv,w
  2207  0E2B  00D0               	movwf	?_sampleVoltage
  2208  0E2C  0841               	movf	?___ftdiv+1,w
  2209  0E2D  00D1               	movwf	?_sampleVoltage+1
  2210  0E2E  0842               	movf	?___ftdiv+2,w
  2211  0E2F  00D2               	movwf	?_sampleVoltage+2
  2212  0E30  0008               	return
  2213  0E31                     __end_of_sampleVoltage:	
  2214                           
  2215                           	psect	text6
  2216  0BDC                     __ptext6:	
  2217 ;; *************** function _analogRead *****************
  2218 ;; Defined at:
  2219 ;;		line 73 in file "adc.h"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  chan            1    wreg     unsigned char 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  chan            1    4[BANK0 ] unsigned char 
  2224 ;;  returnVal       2    5[BANK0 ] unsigned int 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  2    0[BANK0 ] unsigned int 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       2       0       0       0
  2235 ;;      Locals:         0       3       0       0       0
  2236 ;;      Temps:          0       2       0       0       0
  2237 ;;      Totals:         0       7       0       0       0
  2238 ;;Total ram usage:        7 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    2
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_sampleReference
  2245 ;;		_sampleVoltage
  2246 ;;		_sampleCurrent
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           
  2251                           ;psect for function _analogRead
  2252  0BDC                     _analogRead:	
  2253                           
  2254                           ;incstack = 0
  2255                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2256                           ;analogRead@chan stored from wreg
  2257  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  2259  0BDE  00A4               	movwf	analogRead@chan
  2260                           
  2261                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2262  0BDF  0824               	movf	analogRead@chan,w
  2263  0BE0  00A2               	movwf	??_analogRead
  2264  0BE1  0DA2               	rlf	??_analogRead,f
  2265  0BE2  0DA2               	rlf	??_analogRead,f
  2266  0BE3  081F               	movf	31,w	;volatile
  2267  0BE4  0622               	xorwf	??_analogRead,w
  2268  0BE5  39E3               	andlw	-29
  2269  0BE6  0622               	xorwf	??_analogRead,w
  2270  0BE7  009F               	movwf	31	;volatile
  2271                           
  2272                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2273  0BE8  141F               	bsf	31,0	;volatile
  2274                           
  2275                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2276  0BE9  3006               	movlw	6
  2277  0BEA  00A2               	movwf	??_analogRead
  2278  0BEB                     u2437:	
  2279  0BEB  0BA2               	decfsz	??_analogRead,f
  2280  0BEC  2BEB               	goto	u2437
  2281  0BED  0000               	nop
  2282                           
  2283                           ;adc.h: 81: ADCON0bits.GO = 1;
  2284  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0BF0  149F               	bsf	31,1	;volatile
  2287                           
  2288                           ;adc.h: 83: unsigned int returnVal = 0;
  2289  0BF1  01A5               	clrf	analogRead@returnVal
  2290  0BF2  01A6               	clrf	analogRead@returnVal+1
  2291  0BF3                     l216:	
  2292                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2293                           
  2294  0BF3  189F               	btfsc	31,1	;volatile
  2295  0BF4  2BF3               	goto	l216
  2296                           
  2297                           ;adc.h: 89: returnVal = ADRESH;
  2298  0BF5  081E               	movf	30,w	;volatile
  2299  0BF6  00A2               	movwf	??_analogRead
  2300  0BF7  01A3               	clrf	??_analogRead+1
  2301  0BF8  0822               	movf	??_analogRead,w
  2302  0BF9  00A5               	movwf	analogRead@returnVal
  2303  0BFA  0823               	movf	??_analogRead+1,w
  2304  0BFB  00A6               	movwf	analogRead@returnVal+1
  2305                           
  2306                           ;adc.h: 90: returnVal = returnVal << 8;
  2307  0BFC  0825               	movf	analogRead@returnVal,w
  2308  0BFD  00A3               	movwf	??_analogRead+1
  2309  0BFE  01A2               	clrf	??_analogRead
  2310  0BFF  0822               	movf	??_analogRead,w
  2311  0C00  00A5               	movwf	analogRead@returnVal
  2312  0C01  0823               	movf	??_analogRead+1,w
  2313  0C02  00A6               	movwf	analogRead@returnVal+1
  2314                           
  2315                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2316  0C03  0825               	movf	analogRead@returnVal,w
  2317  0C04  1683               	bsf	3,5	;RP0=1, select bank1
  2318  0C05  1303               	bcf	3,6	;RP1=0, select bank1
  2319  0C06  041E               	iorwf	30,w	;volatile
  2320  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  2322  0C09  00A2               	movwf	??_analogRead
  2323  0C0A  0826               	movf	analogRead@returnVal+1,w
  2324  0C0B  00A3               	movwf	??_analogRead+1
  2325  0C0C  0822               	movf	??_analogRead,w
  2326  0C0D  00A5               	movwf	analogRead@returnVal
  2327  0C0E  0823               	movf	??_analogRead+1,w
  2328  0C0F  00A6               	movwf	analogRead@returnVal+1
  2329                           
  2330                           ;adc.h: 93: return returnVal;
  2331  0C10  0826               	movf	analogRead@returnVal+1,w
  2332  0C11  00A1               	movwf	?_analogRead+1
  2333  0C12  0825               	movf	analogRead@returnVal,w
  2334  0C13  00A0               	movwf	?_analogRead
  2335  0C14  0008               	return
  2336  0C15                     __end_of_analogRead:	
  2337                           
  2338                           	psect	text7
  2339  0A6E                     __ptext7:	
  2340 ;; *************** function ___lwtoft *****************
  2341 ;; Defined at:
  2342 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  c               2    8[BANK0 ] unsigned int 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  3    8[BANK0 ] float 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0, pclath, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2356 ;;      Params:         0       3       0       0       0
  2357 ;;      Locals:         0       0       0       0       0
  2358 ;;      Temps:          0       1       0       0       0
  2359 ;;      Totals:         0       4       0       0       0
  2360 ;;Total ram usage:        4 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    3
  2363 ;; This function calls:
  2364 ;;		___ftpack
  2365 ;; This function is called by:
  2366 ;;		_sampleBatteryCells
  2367 ;;		_sampleReference
  2368 ;;		_sampleVoltage
  2369 ;;		_sampleCurrent
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function ___lwtoft
  2375  0A6E                     ___lwtoft:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2379  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0A70  0828               	movf	___lwtoft@c,w
  2382  0A71  00A0               	movwf	___ftpack@arg
  2383  0A72  0829               	movf	___lwtoft@c+1,w
  2384  0A73  00A1               	movwf	___ftpack@arg+1
  2385  0A74  01A2               	clrf	___ftpack@arg+2
  2386  0A75  308E               	movlw	142
  2387  0A76  00AB               	movwf	??___lwtoft
  2388  0A77  082B               	movf	??___lwtoft,w
  2389  0A78  00A3               	movwf	___ftpack@exp
  2390  0A79  01A4               	clrf	___ftpack@sign
  2391  0A7A  120A  158A  2545   	fcall	___ftpack
  2392  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0A7E  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0A7F  0820               	movf	?___ftpack,w
  2395  0A80  00A8               	movwf	?___lwtoft
  2396  0A81  0821               	movf	?___ftpack+1,w
  2397  0A82  00A9               	movwf	?___lwtoft+1
  2398  0A83  0822               	movf	?___ftpack+2,w
  2399  0A84  00AA               	movwf	?___lwtoft+2
  2400  0A85  0008               	return
  2401  0A86                     __end_of___lwtoft:	
  2402                           
  2403                           	psect	text8
  2404  0C15                     __ptext8:	
  2405 ;; *************** function ___lwdiv *****************
  2406 ;; Defined at:
  2407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  divisor         2    0[BANK0 ] unsigned int 
  2410 ;;  dividend        2    2[BANK0 ] unsigned int 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  quotient        2    5[BANK0 ] unsigned int 
  2413 ;;  counter         1    7[BANK0 ] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  2    0[BANK0 ] unsigned int 
  2416 ;; Registers used:
  2417 ;;		wreg, status,2, status,0
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2423 ;;      Params:         0       4       0       0       0
  2424 ;;      Locals:         0       3       0       0       0
  2425 ;;      Temps:          0       1       0       0       0
  2426 ;;      Totals:         0       8       0       0       0
  2427 ;;Total ram usage:        8 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    2
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_sampleBatteryCells
  2434 ;;		_sampleReference
  2435 ;;		_sampleVoltage
  2436 ;;		_sampleCurrent
  2437 ;;		_uint16ToASCII
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function ___lwdiv
  2443  0C15                     ___lwdiv:	
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2447  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0C17  01A5               	clrf	___lwdiv@quotient
  2450  0C18  01A6               	clrf	___lwdiv@quotient+1
  2451  0C19  0820               	movf	___lwdiv@divisor,w
  2452  0C1A  0421               	iorwf	___lwdiv@divisor+1,w
  2453  0C1B  1903               	btfsc	3,2
  2454  0C1C  2C4E               	goto	l1900
  2455  0C1D  01A7               	clrf	___lwdiv@counter
  2456  0C1E  0AA7               	incf	___lwdiv@counter,f
  2457  0C1F                     l1888:	
  2458  0C1F  1BA1               	btfsc	___lwdiv@divisor+1,7
  2459  0C20  2C2D               	goto	l1890
  2460  0C21  3001               	movlw	1
  2461  0C22                     u1845:	
  2462  0C22  1003               	clrc
  2463  0C23  0DA0               	rlf	___lwdiv@divisor,f
  2464  0C24  0DA1               	rlf	___lwdiv@divisor+1,f
  2465  0C25  3EFF               	addlw	-1
  2466  0C26  1D03               	skipz
  2467  0C27  2C22               	goto	u1845
  2468  0C28  3001               	movlw	1
  2469  0C29  00A4               	movwf	??___lwdiv
  2470  0C2A  0824               	movf	??___lwdiv,w
  2471  0C2B  07A7               	addwf	___lwdiv@counter,f
  2472  0C2C  2C1F               	goto	l1888
  2473  0C2D                     l1890:	
  2474  0C2D  3001               	movlw	1
  2475  0C2E                     u1865:	
  2476  0C2E  1003               	clrc
  2477  0C2F  0DA5               	rlf	___lwdiv@quotient,f
  2478  0C30  0DA6               	rlf	___lwdiv@quotient+1,f
  2479  0C31  3EFF               	addlw	-1
  2480  0C32  1D03               	skipz
  2481  0C33  2C2E               	goto	u1865
  2482  0C34  0821               	movf	___lwdiv@divisor+1,w
  2483  0C35  0223               	subwf	___lwdiv@dividend+1,w
  2484  0C36  1D03               	skipz
  2485  0C37  2C3A               	goto	u1875
  2486  0C38  0820               	movf	___lwdiv@divisor,w
  2487  0C39  0222               	subwf	___lwdiv@dividend,w
  2488  0C3A                     u1875:	
  2489  0C3A  1C03               	skipc
  2490  0C3B  2C43               	goto	l1896
  2491  0C3C  0820               	movf	___lwdiv@divisor,w
  2492  0C3D  02A2               	subwf	___lwdiv@dividend,f
  2493  0C3E  0821               	movf	___lwdiv@divisor+1,w
  2494  0C3F  1C03               	skipc
  2495  0C40  03A3               	decf	___lwdiv@dividend+1,f
  2496  0C41  02A3               	subwf	___lwdiv@dividend+1,f
  2497  0C42  1425               	bsf	___lwdiv@quotient,0
  2498  0C43                     l1896:	
  2499  0C43  3001               	movlw	1
  2500  0C44                     u1885:	
  2501  0C44  1003               	clrc
  2502  0C45  0CA1               	rrf	___lwdiv@divisor+1,f
  2503  0C46  0CA0               	rrf	___lwdiv@divisor,f
  2504  0C47  3EFF               	addlw	-1
  2505  0C48  1D03               	skipz
  2506  0C49  2C44               	goto	u1885
  2507  0C4A  3001               	movlw	1
  2508  0C4B  02A7               	subwf	___lwdiv@counter,f
  2509  0C4C  1D03               	btfss	3,2
  2510  0C4D  2C2D               	goto	l1890
  2511  0C4E                     l1900:	
  2512  0C4E  0826               	movf	___lwdiv@quotient+1,w
  2513  0C4F  00A1               	movwf	?___lwdiv+1
  2514  0C50  0825               	movf	___lwdiv@quotient,w
  2515  0C51  00A0               	movwf	?___lwdiv
  2516  0C52  0008               	return
  2517  0C53                     __end_of___lwdiv:	
  2518                           
  2519                           	psect	text9
  2520  00F0                     __ptext9:	
  2521 ;; *************** function ___ftdiv *****************
  2522 ;; Defined at:
  2523 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  f2              3   32[BANK0 ] float 
  2526 ;;  f1              3   35[BANK0 ] float 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  f3              3   43[BANK0 ] float 
  2529 ;;  sign            1   47[BANK0 ] unsigned char 
  2530 ;;  exp             1   46[BANK0 ] unsigned char 
  2531 ;;  cntr            1   42[BANK0 ] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  3   32[BANK0 ] float 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       6       0       0       0
  2542 ;;      Locals:         0       6       0       0       0
  2543 ;;      Temps:          0       4       0       0       0
  2544 ;;      Totals:         0      16       0       0       0
  2545 ;;Total ram usage:       16 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    3
  2548 ;; This function calls:
  2549 ;;		___ftpack
  2550 ;; This function is called by:
  2551 ;;		_sampleReference
  2552 ;;		_sampleVoltage
  2553 ;;		_sampleCurrent
  2554 ;;		_floatToASCII
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function ___ftdiv
  2560  00F0                     ___ftdiv:	
  2561                           
  2562                           ;incstack = 0
  2563                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2564  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  2565  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  2566  00F2  0843               	movf	___ftdiv@f1,w
  2567  00F3  00C6               	movwf	??___ftdiv
  2568  00F4  0844               	movf	___ftdiv@f1+1,w
  2569  00F5  00C7               	movwf	??___ftdiv+1
  2570  00F6  0845               	movf	___ftdiv@f1+2,w
  2571  00F7  00C8               	movwf	??___ftdiv+2
  2572  00F8  1003               	clrc
  2573  00F9  0D47               	rlf	??___ftdiv+1,w
  2574  00FA  0D48               	rlf	??___ftdiv+2,w
  2575  00FB  00C9               	movwf	??___ftdiv+3
  2576  00FC  0849               	movf	??___ftdiv+3,w
  2577  00FD  00CE               	movwf	___ftdiv@exp
  2578  00FE  084E               	movf	___ftdiv@exp,w
  2579  00FF  1D03               	btfss	3,2
  2580  0100  2908               	goto	l1740
  2581  0101  3000               	movlw	0
  2582  0102  00C0               	movwf	?___ftdiv
  2583  0103  3000               	movlw	0
  2584  0104  00C1               	movwf	?___ftdiv+1
  2585  0105  3000               	movlw	0
  2586  0106  00C2               	movwf	?___ftdiv+2
  2587  0107  0008               	return
  2588  0108                     l1740:	
  2589  0108  0840               	movf	___ftdiv@f2,w
  2590  0109  00C6               	movwf	??___ftdiv
  2591  010A  0841               	movf	___ftdiv@f2+1,w
  2592  010B  00C7               	movwf	??___ftdiv+1
  2593  010C  0842               	movf	___ftdiv@f2+2,w
  2594  010D  00C8               	movwf	??___ftdiv+2
  2595  010E  1003               	clrc
  2596  010F  0D47               	rlf	??___ftdiv+1,w
  2597  0110  0D48               	rlf	??___ftdiv+2,w
  2598  0111  00C9               	movwf	??___ftdiv+3
  2599  0112  0849               	movf	??___ftdiv+3,w
  2600  0113  00CF               	movwf	___ftdiv@sign
  2601  0114  084F               	movf	___ftdiv@sign,w
  2602  0115  1D03               	btfss	3,2
  2603  0116  291E               	goto	l1746
  2604  0117  3000               	movlw	0
  2605  0118  00C0               	movwf	?___ftdiv
  2606  0119  3000               	movlw	0
  2607  011A  00C1               	movwf	?___ftdiv+1
  2608  011B  3000               	movlw	0
  2609  011C  00C2               	movwf	?___ftdiv+2
  2610  011D  0008               	return
  2611  011E                     l1746:	
  2612  011E  3000               	movlw	0
  2613  011F  00CB               	movwf	___ftdiv@f3
  2614  0120  3000               	movlw	0
  2615  0121  00CC               	movwf	___ftdiv@f3+1
  2616  0122  3000               	movlw	0
  2617  0123  00CD               	movwf	___ftdiv@f3+2
  2618  0124  3089               	movlw	137
  2619  0125  074F               	addwf	___ftdiv@sign,w
  2620  0126  00C6               	movwf	??___ftdiv
  2621  0127  0846               	movf	??___ftdiv,w
  2622  0128  02CE               	subwf	___ftdiv@exp,f
  2623  0129  0843               	movf	___ftdiv@f1,w
  2624  012A  00C6               	movwf	??___ftdiv
  2625  012B  0844               	movf	___ftdiv@f1+1,w
  2626  012C  00C7               	movwf	??___ftdiv+1
  2627  012D  0845               	movf	___ftdiv@f1+2,w
  2628  012E  00C8               	movwf	??___ftdiv+2
  2629  012F  3010               	movlw	16
  2630  0130                     u1515:	
  2631  0130  1003               	clrc
  2632  0131  0CC8               	rrf	??___ftdiv+2,f
  2633  0132  0CC7               	rrf	??___ftdiv+1,f
  2634  0133  0CC6               	rrf	??___ftdiv,f
  2635  0134  3EFF               	addlw	-1
  2636  0135  1D03               	skipz
  2637  0136  2930               	goto	u1515
  2638  0137  0846               	movf	??___ftdiv,w
  2639  0138  00C9               	movwf	??___ftdiv+3
  2640  0139  0849               	movf	??___ftdiv+3,w
  2641  013A  00CF               	movwf	___ftdiv@sign
  2642  013B  0840               	movf	___ftdiv@f2,w
  2643  013C  00C6               	movwf	??___ftdiv
  2644  013D  0841               	movf	___ftdiv@f2+1,w
  2645  013E  00C7               	movwf	??___ftdiv+1
  2646  013F  0842               	movf	___ftdiv@f2+2,w
  2647  0140  00C8               	movwf	??___ftdiv+2
  2648  0141  3010               	movlw	16
  2649  0142                     u1525:	
  2650  0142  1003               	clrc
  2651  0143  0CC8               	rrf	??___ftdiv+2,f
  2652  0144  0CC7               	rrf	??___ftdiv+1,f
  2653  0145  0CC6               	rrf	??___ftdiv,f
  2654  0146  3EFF               	addlw	-1
  2655  0147  1D03               	skipz
  2656  0148  2942               	goto	u1525
  2657  0149  0846               	movf	??___ftdiv,w
  2658  014A  00C9               	movwf	??___ftdiv+3
  2659  014B  0849               	movf	??___ftdiv+3,w
  2660  014C  06CF               	xorwf	___ftdiv@sign,f
  2661  014D  3080               	movlw	128
  2662  014E  00C6               	movwf	??___ftdiv
  2663  014F  0846               	movf	??___ftdiv,w
  2664  0150  05CF               	andwf	___ftdiv@sign,f
  2665  0151  17C4               	bsf	___ftdiv@f1+1,7
  2666  0152  30FF               	movlw	255
  2667  0153  05C3               	andwf	___ftdiv@f1,f
  2668  0154  30FF               	movlw	255
  2669  0155  05C4               	andwf	___ftdiv@f1+1,f
  2670  0156  3000               	movlw	0
  2671  0157  05C5               	andwf	___ftdiv@f1+2,f
  2672  0158  17C1               	bsf	___ftdiv@f2+1,7
  2673  0159  30FF               	movlw	255
  2674  015A  05C0               	andwf	___ftdiv@f2,f
  2675  015B  30FF               	movlw	255
  2676  015C  05C1               	andwf	___ftdiv@f2+1,f
  2677  015D  3000               	movlw	0
  2678  015E  05C2               	andwf	___ftdiv@f2+2,f
  2679  015F  3018               	movlw	24
  2680  0160  00C6               	movwf	??___ftdiv
  2681  0161  0846               	movf	??___ftdiv,w
  2682  0162  00CA               	movwf	___ftdiv@cntr
  2683  0163                     l1760:	
  2684  0163  3001               	movlw	1
  2685  0164                     u1535:	
  2686  0164  1003               	clrc
  2687  0165  0DCB               	rlf	___ftdiv@f3,f
  2688  0166  0DCC               	rlf	___ftdiv@f3+1,f
  2689  0167  0DCD               	rlf	___ftdiv@f3+2,f
  2690  0168  3EFF               	addlw	-1
  2691  0169  1D03               	skipz
  2692  016A  2964               	goto	u1535
  2693  016B  0842               	movf	___ftdiv@f2+2,w
  2694  016C  0245               	subwf	___ftdiv@f1+2,w
  2695  016D  1D03               	skipz
  2696  016E  2975               	goto	u1545
  2697  016F  0841               	movf	___ftdiv@f2+1,w
  2698  0170  0244               	subwf	___ftdiv@f1+1,w
  2699  0171  1D03               	skipz
  2700  0172  2975               	goto	u1545
  2701  0173  0840               	movf	___ftdiv@f2,w
  2702  0174  0243               	subwf	___ftdiv@f1,w
  2703  0175                     u1545:	
  2704  0175  1C03               	skipc
  2705  0176  2982               	goto	l1768
  2706  0177  0840               	movf	___ftdiv@f2,w
  2707  0178  02C3               	subwf	___ftdiv@f1,f
  2708  0179  0841               	movf	___ftdiv@f2+1,w
  2709  017A  1C03               	skipc
  2710  017B  0F41               	incfsz	___ftdiv@f2+1,w
  2711  017C  02C4               	subwf	___ftdiv@f1+1,f
  2712  017D  0842               	movf	___ftdiv@f2+2,w
  2713  017E  1C03               	skipc
  2714  017F  0A42               	incf	___ftdiv@f2+2,w
  2715  0180  02C5               	subwf	___ftdiv@f1+2,f
  2716  0181  144B               	bsf	___ftdiv@f3,0
  2717  0182                     l1768:	
  2718  0182  3001               	movlw	1
  2719  0183                     u1555:	
  2720  0183  1003               	clrc
  2721  0184  0DC3               	rlf	___ftdiv@f1,f
  2722  0185  0DC4               	rlf	___ftdiv@f1+1,f
  2723  0186  0DC5               	rlf	___ftdiv@f1+2,f
  2724  0187  3EFF               	addlw	-1
  2725  0188  1D03               	skipz
  2726  0189  2983               	goto	u1555
  2727  018A  3001               	movlw	1
  2728  018B  02CA               	subwf	___ftdiv@cntr,f
  2729  018C  1D03               	btfss	3,2
  2730  018D  2963               	goto	l1760
  2731  018E  084B               	movf	___ftdiv@f3,w
  2732  018F  00A0               	movwf	___ftpack@arg
  2733  0190  084C               	movf	___ftdiv@f3+1,w
  2734  0191  00A1               	movwf	___ftpack@arg+1
  2735  0192  084D               	movf	___ftdiv@f3+2,w
  2736  0193  00A2               	movwf	___ftpack@arg+2
  2737  0194  084E               	movf	___ftdiv@exp,w
  2738  0195  00C6               	movwf	??___ftdiv
  2739  0196  0846               	movf	??___ftdiv,w
  2740  0197  00A3               	movwf	___ftpack@exp
  2741  0198  084F               	movf	___ftdiv@sign,w
  2742  0199  00C7               	movwf	??___ftdiv+1
  2743  019A  0847               	movf	??___ftdiv+1,w
  2744  019B  00A4               	movwf	___ftpack@sign
  2745  019C  120A  158A  2545   	fcall	___ftpack
  2746  019F  1283               	bcf	3,5	;RP0=0, select bank0
  2747  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  2748  01A1  0820               	movf	?___ftpack,w
  2749  01A2  00C0               	movwf	?___ftdiv
  2750  01A3  0821               	movf	?___ftpack+1,w
  2751  01A4  00C1               	movwf	?___ftdiv+1
  2752  01A5  0822               	movf	?___ftpack+2,w
  2753  01A6  00C2               	movwf	?___ftdiv+2
  2754  01A7  0008               	return
  2755  01A8                     __end_of___ftdiv:	
  2756                           
  2757                           	psect	text10
  2758  0B6B                     __ptext10:	
  2759 ;; *************** function _initController *****************
  2760 ;; Defined at:
  2761 ;;		line 211 in file "setup.h"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;		None               void
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0, pclath, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2775 ;;      Params:         0       0       0       0       0
  2776 ;;      Locals:         0       0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0
  2778 ;;      Totals:         0       0       0       0       0
  2779 ;;Total ram usage:        0 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    5
  2782 ;; This function calls:
  2783 ;;		_initADC
  2784 ;;		_initLCD
  2785 ;;		_timeSetup
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _initController
  2793  0B6B                     _initController:	
  2794                           
  2795                           ;setup.h: 214: OSCCONbits.IRCF = 0b111;
  2796                           
  2797                           ;incstack = 0
  2798                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  2799  0B6B  3070               	movlw	112
  2800  0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  2801  0B6D  1303               	bcf	3,6	;RP1=0, select bank1
  2802  0B6E  048F               	iorwf	15,f	;volatile
  2803                           
  2804                           ;setup.h: 215: OSCCONbits.SCS = 0;
  2805  0B6F  100F               	bcf	15,0	;volatile
  2806                           
  2807                           ;setup.h: 218: TRISA = 0b00111111;
  2808  0B70  303F               	movlw	63
  2809  0B71  0085               	movwf	5	;volatile
  2810                           
  2811                           ;setup.h: 219: TRISB = 0b00000000;
  2812  0B72  0186               	clrf	6	;volatile
  2813                           
  2814                           ;setup.h: 220: TRISC = 0b00000000;
  2815  0B73  0187               	clrf	7	;volatile
  2816                           
  2817                           ;setup.h: 221: TRISD = 0b00100000;
  2818  0B74  3020               	movlw	32
  2819  0B75  0088               	movwf	8	;volatile
  2820                           
  2821                           ;setup.h: 222: TRISE = 0b00000111;
  2822  0B76  3007               	movlw	7
  2823  0B77  0089               	movwf	9	;volatile
  2824                           
  2825                           ;setup.h: 224: ANSEL = 0xFF;
  2826  0B78  30FF               	movlw	255
  2827  0B79  0091               	movwf	17	;volatile
  2828                           
  2829                           ;setup.h: 226: PORTA = 0;
  2830  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0B7C  0185               	clrf	5	;volatile
  2833                           
  2834                           ;setup.h: 227: PORTB = 0;
  2835  0B7D  0186               	clrf	6	;volatile
  2836                           
  2837                           ;setup.h: 228: PORTC = 0;
  2838  0B7E  0187               	clrf	7	;volatile
  2839                           
  2840                           ;setup.h: 229: PORTD = 0;
  2841  0B7F  0188               	clrf	8	;volatile
  2842                           
  2843                           ;setup.h: 230: PORTE = 0;
  2844  0B80  0189               	clrf	9	;volatile
  2845                           
  2846                           ;setup.h: 232: CMCON0bits.CM = 0b111;
  2847  0B81  3007               	movlw	7
  2848  0B82  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0B83  1303               	bcf	3,6	;RP1=0, select bank1
  2850  0B84  049C               	iorwf	28,f	;volatile
  2851                           
  2852                           ;setup.h: 233: LCDCON = 0;
  2853  0B85  1283               	bcf	3,5	;RP0=0, select bank2
  2854  0B86  1703               	bsf	3,6	;RP1=1, select bank2
  2855  0B87  0187               	clrf	7	;volatile
  2856                           
  2857                           ;setup.h: 234: LVDCONbits.LVDEN = 0;
  2858  0B88  1209               	bcf	9,4	;volatile
  2859                           
  2860                           ;setup.h: 235: CCP1CON = 0;
  2861  0B89  1283               	bcf	3,5	;RP0=0, select bank0
  2862  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
  2863  0B8B  0197               	clrf	23	;volatile
  2864                           
  2865                           ;setup.h: 236: CCP2CON = 0;
  2866  0B8C  019D               	clrf	29	;volatile
  2867                           
  2868                           ;setup.h: 237: OPTION_REGbits.nRBPU = 1;
  2869  0B8D  1683               	bsf	3,5	;RP0=1, select bank1
  2870  0B8E  1303               	bcf	3,6	;RP1=0, select bank1
  2871  0B8F  1781               	bsf	1,7	;volatile
  2872                           
  2873                           ;setup.h: 239: RD2 = 0;
  2874  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  2876  0B92  1108               	bcf	8,2	;volatile
  2877                           
  2878                           ;setup.h: 241: RD6 = 0;
  2879  0B93  1308               	bcf	8,6	;volatile
  2880                           
  2881                           ;setup.h: 244: RC0 = 1;
  2882  0B94  1407               	bsf	7,0	;volatile
  2883                           
  2884                           ;setup.h: 247: initADC();
  2885  0B95  120A  158A  2201  120A  158A  	fcall	_initADC
  2886                           
  2887                           ;setup.h: 249: timeSetup();
  2888  0B9A  120A  158A  21F5  120A  158A  	fcall	_timeSetup
  2889                           
  2890                           ;setup.h: 251: initLCD();
  2891  0B9F  120A  158A  2757   	fcall	_initLCD
  2892  0BA2  0008               	return
  2893  0BA3                     __end_of_initController:	
  2894                           
  2895                           	psect	text11
  2896  09F5                     __ptext11:	
  2897 ;; *************** function _timeSetup *****************
  2898 ;; Defined at:
  2899 ;;		line 49 in file "timer0.h"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;		None
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;		None
  2904 ;; Return value:  Size  Location     Type
  2905 ;;		None               void
  2906 ;; Registers used:
  2907 ;;		wreg, status,2, status,0
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/0
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2913 ;;      Params:         0       0       0       0       0
  2914 ;;      Locals:         0       0       0       0       0
  2915 ;;      Temps:          0       0       0       0       0
  2916 ;;      Totals:         0       0       0       0       0
  2917 ;;Total ram usage:        0 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    2
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_initController
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _timeSetup
  2929  09F5                     _timeSetup:	
  2930                           
  2931                           ;timer0.h: 51: OPTION_REGbits.T0CS = 0;
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in _timeSetup: [wreg+status,2+status,0]
  2935  09F5  1683               	bsf	3,5	;RP0=1, select bank1
  2936  09F6  1303               	bcf	3,6	;RP1=0, select bank1
  2937  09F7  1281               	bcf	1,5	;volatile
  2938                           
  2939                           ;timer0.h: 52: OPTION_REGbits.T0SE = 1;
  2940  09F8  1601               	bsf	1,4	;volatile
  2941                           
  2942                           ;timer0.h: 53: OPTION_REGbits.PSA = 0 ;
  2943  09F9  1181               	bcf	1,3	;volatile
  2944                           
  2945                           ;timer0.h: 54: OPTION_REGbits.PS = 0b111;
  2946  09FA  3007               	movlw	7
  2947  09FB  0481               	iorwf	1,f	;volatile
  2948                           
  2949                           ;timer0.h: 57: INTCONbits.T0IE = 1;
  2950  09FC  168B               	bsf	11,5	;volatile
  2951                           
  2952                           ;timer0.h: 58: INTCONbits.T0IF = 0;
  2953  09FD  110B               	bcf	11,2	;volatile
  2954                           
  2955                           ;timer0.h: 59: INTCONbits.PEIE = 1;
  2956  09FE  170B               	bsf	11,6	;volatile
  2957                           
  2958                           ;timer0.h: 60: INTCONbits.GIE = 1;
  2959  09FF  178B               	bsf	11,7	;volatile
  2960  0A00  0008               	return
  2961  0A01                     __end_of_timeSetup:	
  2962                           
  2963                           	psect	text12
  2964  0A01                     __ptext12:	
  2965 ;; *************** function _initADC *****************
  2966 ;; Defined at:
  2967 ;;		line 56 in file "adc.h"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;		None               void
  2974 ;; Registers used:
  2975 ;;		wreg, status,2
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2981 ;;      Params:         0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    2
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_initController
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           
  2996                           ;psect for function _initADC
  2997  0A01                     _initADC:	
  2998                           
  2999                           ;adc.h: 58: ADCON0 = 0b10000001;
  3000                           
  3001                           ;incstack = 0
  3002                           ; Regs used in _initADC: [wreg+status,2]
  3003  0A01  3081               	movlw	129
  3004  0A02  1283               	bcf	3,5	;RP0=0, select bank0
  3005  0A03  1303               	bcf	3,6	;RP1=0, select bank0
  3006  0A04  009F               	movwf	31	;volatile
  3007                           
  3008                           ;adc.h: 65: ADCON1 = 0b01110000;
  3009  0A05  3070               	movlw	112
  3010  0A06  1683               	bsf	3,5	;RP0=1, select bank1
  3011  0A07  1303               	bcf	3,6	;RP1=0, select bank1
  3012  0A08  009F               	movwf	31	;volatile
  3013                           
  3014                           ;adc.h: 68: ADRESH = 0x00;
  3015  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0A0B  019E               	clrf	30	;volatile
  3018                           
  3019                           ;adc.h: 69: ADRESL = 0x00;
  3020  0A0C  1683               	bsf	3,5	;RP0=1, select bank1
  3021  0A0D  1303               	bcf	3,6	;RP1=0, select bank1
  3022  0A0E  019E               	clrf	30	;volatile
  3023  0A0F  0008               	return
  3024  0A10                     __end_of_initADC:	
  3025                           
  3026                           	psect	text13
  3027  0C94                     __ptext13:	
  3028 ;; *************** function _handlePB *****************
  3029 ;; Defined at:
  3030 ;;		line 298 in file "PIC16F917 Battery Management.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;		None
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3044 ;;      Params:         0       0       0       0       0
  3045 ;;      Locals:         0       0       0       0       0
  3046 ;;      Temps:          0       3       0       0       0
  3047 ;;      Totals:         0       3       0       0       0
  3048 ;;Total ram usage:        3 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    5
  3051 ;; This function calls:
  3052 ;;		_initLCD
  3053 ;;		_stopWatch
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           
  3060                           ;psect for function _handlePB
  3061  0C94                     _handlePB:	
  3062                           
  3063                           ;PIC16F917 Battery Management.c: 300: if( RD5 == 1 )
  3064                           
  3065                           ;incstack = 0
  3066                           ; Regs used in _handlePB: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3067  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0C95  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0C96  1A88               	btfsc	8,5	;volatile
  3070  0C97  0008               	return
  3071                           
  3072                           ;PIC16F917 Battery Management.c: 303: _delay((unsigned long)((50)*(8000000/4000.0)));
  3073                           
  3074                           ;PIC16F917 Battery Management.c: 301: return;
  3075  0C98  3082               	movlw	130
  3076  0C99  00E4               	movwf	??_handlePB+1
  3077  0C9A  30DD               	movlw	221
  3078  0C9B  00E3               	movwf	??_handlePB
  3079  0C9C                     u2447:	
  3080  0C9C  0BE3               	decfsz	??_handlePB,f
  3081  0C9D  2C9C               	goto	u2447
  3082  0C9E  0BE4               	decfsz	??_handlePB+1,f
  3083  0C9F  2C9C               	goto	u2447
  3084  0CA0  2CA1               	nop2
  3085                           
  3086                           ;PIC16F917 Battery Management.c: 305: if( RD5 == 1 )
  3087  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0CA3  1A88               	btfsc	8,5	;volatile
  3090  0CA4  0008               	return
  3091                           
  3092                           ;PIC16F917 Battery Management.c: 308: stopWatch(0);
  3093                           
  3094                           ;PIC16F917 Battery Management.c: 306: return;
  3095  0CA5  3000               	movlw	0
  3096  0CA6  120A  118A  23FA  120A  158A  	fcall	_stopWatch
  3097  0CAB                     l307:	
  3098                           ;PIC16F917 Battery Management.c: 309: while( RD5 == 0 )
  3099                           
  3100  0CAB  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0CAC  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0CAD  1A88               	btfsc	8,5	;volatile
  3103  0CAE  2CE0               	goto	l2232
  3104                           
  3105                           ;PIC16F917 Battery Management.c: 310: {
  3106                           ;PIC16F917 Battery Management.c: 311: if(stopWatch(1) >= 1000)
  3107  0CAF  3001               	movlw	1
  3108  0CB0  120A  118A  23FA  120A  158A  	fcall	_stopWatch
  3109  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0CB7  0851               	movf	?_stopWatch+3,w
  3112  0CB8  1D03               	btfss	3,2
  3113  0CB9  2CC7               	goto	l2222
  3114  0CBA  0850               	movf	?_stopWatch+2,w
  3115  0CBB  1D03               	btfss	3,2
  3116  0CBC  2CC7               	goto	l2222
  3117  0CBD  3003               	movlw	3
  3118  0CBE  024F               	subwf	?_stopWatch+1,w
  3119  0CBF  1D03               	skipz
  3120  0CC0  2CC5               	goto	u2183
  3121  0CC1  30E8               	movlw	232
  3122  0CC2  024E               	subwf	?_stopWatch,w
  3123  0CC3  1D03               	skipz
  3124  0CC4  2CC5               	goto	u2183
  3125  0CC5                     u2183:	
  3126  0CC5  1C03               	btfss	3,0
  3127  0CC6  2CAB               	goto	l307
  3128  0CC7                     l2222:	
  3129                           
  3130                           ;PIC16F917 Battery Management.c: 312: {
  3131                           ;PIC16F917 Battery Management.c: 313: initLCD();
  3132  0CC7  120A  158A  2757  120A  158A  	fcall	_initLCD
  3133                           
  3134                           ;PIC16F917 Battery Management.c: 315: RC1 = 1;
  3135  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0CCE  1487               	bsf	7,1	;volatile
  3138                           
  3139                           ;PIC16F917 Battery Management.c: 316: _delay((unsigned long)((100)*(8000000/4000.0)));
  3140  0CCF  3002               	movlw	2
  3141  0CD0  00E5               	movwf	??_handlePB+2
  3142  0CD1  3004               	movlw	4
  3143  0CD2  00E4               	movwf	??_handlePB+1
  3144  0CD3  30BA               	movlw	186
  3145  0CD4  00E3               	movwf	??_handlePB
  3146  0CD5                     u2457:	
  3147  0CD5  0BE3               	decfsz	??_handlePB,f
  3148  0CD6  2CD5               	goto	u2457
  3149  0CD7  0BE4               	decfsz	??_handlePB+1,f
  3150  0CD8  2CD5               	goto	u2457
  3151  0CD9  0BE5               	decfsz	??_handlePB+2,f
  3152  0CDA  2CD5               	goto	u2457
  3153  0CDB  0000               	nop
  3154                           
  3155                           ;PIC16F917 Battery Management.c: 317: RC1 = 0;
  3156  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  3157  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  3158  0CDE  1087               	bcf	7,1	;volatile
  3159                           
  3160                           ;PIC16F917 Battery Management.c: 318: return;
  3161  0CDF  0008               	return
  3162  0CE0                     l2232:	
  3163                           
  3164                           ;PIC16F917 Battery Management.c: 319: }
  3165                           ;PIC16F917 Battery Management.c: 320: }
  3166                           ;PIC16F917 Battery Management.c: 322: LCDDisplayMode++;
  3167  0CE0  3001               	movlw	1
  3168  0CE1  00E3               	movwf	??_handlePB
  3169  0CE2  0863               	movf	??_handlePB,w
  3170  0CE3  07EE               	addwf	_LCDDisplayMode,f
  3171                           
  3172                           ;PIC16F917 Battery Management.c: 324: if (LCDDisplayMode > 3)
  3173  0CE4  3004               	movlw	4
  3174  0CE5  026E               	subwf	_LCDDisplayMode,w
  3175  0CE6  1C03               	skipc
  3176  0CE7  0008               	return
  3177                           
  3178                           ;PIC16F917 Battery Management.c: 325: LCDDisplayMode = 0;
  3179  0CE8  01EE               	clrf	_LCDDisplayMode
  3180  0CE9  0008               	return
  3181  0CEA                     __end_of_handlePB:	
  3182                           
  3183                           	psect	text14
  3184  03FA                     __ptext14:	
  3185 ;; *************** function _stopWatch *****************
  3186 ;; Defined at:
  3187 ;;		line 81 in file "timer0.h"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  mode            1    wreg     unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  mode            1   62[BANK0 ] unsigned char 
  3192 ;;  temp            4   63[BANK0 ] unsigned long 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  4   46[BANK0 ] unsigned long 
  3195 ;; Registers used:
  3196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3202 ;;      Params:         0       4       0       0       0
  3203 ;;      Locals:         0       5       0       0       0
  3204 ;;      Temps:          0      12       0       0       0
  3205 ;;      Totals:         0      21       0       0       0
  3206 ;;Total ram usage:       21 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    4
  3209 ;; This function calls:
  3210 ;;		___ftmul
  3211 ;;		___fttol
  3212 ;;		___lltoft
  3213 ;; This function is called by:
  3214 ;;		_handlePB
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _stopWatch
  3220  03FA                     _stopWatch:	
  3221                           
  3222                           ;incstack = 0
  3223                           ; Regs used in _stopWatch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3224                           ;stopWatch@mode stored from wreg
  3225  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3226  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3227  03FC  00DE               	movwf	stopWatch@mode
  3228                           
  3229                           ;timer0.h: 83: static unsigned long startTime = 0;
  3230                           ;timer0.h: 85: unsigned long temp = 0;
  3231  03FD  3000               	movlw	0
  3232  03FE  00E2               	movwf	stopWatch@temp+3
  3233  03FF  3000               	movlw	0
  3234  0400  00E1               	movwf	stopWatch@temp+2
  3235  0401  3000               	movlw	0
  3236  0402  00E0               	movwf	stopWatch@temp+1
  3237  0403  3000               	movlw	0
  3238  0404  00DF               	movwf	stopWatch@temp
  3239                           
  3240                           ;timer0.h: 87: switch (mode)
  3241  0405  2CD4               	goto	l2034
  3242  0406                     l2020:	
  3243                           ;timer0.h: 88: {
  3244                           ;timer0.h: 89: case(0):
  3245                           
  3246                           
  3247                           ;timer0.h: 90: {
  3248                           ;timer0.h: 91: startTime = time + TMR0;
  3249  0406  0801               	movf	1,w	;volatile
  3250  0407  0768               	addwf	_time,w
  3251  0408  1683               	bsf	3,5	;RP0=1, select bank1
  3252  0409  1303               	bcf	3,6	;RP1=0, select bank1
  3253  040A  00DA               	movwf	stopWatch@startTime^(0+128)
  3254  040B  1283               	bcf	3,5	;RP0=0, select bank0
  3255  040C  1303               	bcf	3,6	;RP1=0, select bank0
  3256  040D  0869               	movf	_time+1,w
  3257  040E  1803               	skipnc
  3258  040F  0F69               	incfsz	_time+1,w
  3259  0410  1003               	clrc
  3260  0411  1683               	bsf	3,5	;RP0=1, select bank1
  3261  0412  1303               	bcf	3,6	;RP1=0, select bank1
  3262  0413  00DB               	movwf	(stopWatch@startTime^(0+128)+1)
  3263  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3265  0416  086A               	movf	_time+2,w
  3266  0417  1803               	skipnc
  3267  0418  0F6A               	incfsz	_time+2,w
  3268  0419  1003               	clrc
  3269  041A  1683               	bsf	3,5	;RP0=1, select bank1
  3270  041B  1303               	bcf	3,6	;RP1=0, select bank1
  3271  041C  00DC               	movwf	(stopWatch@startTime^(0+128)+2)
  3272  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3273  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3274  041F  086B               	movf	_time+3,w
  3275  0420  1803               	skipnc
  3276  0421  0A6B               	incf	_time+3,w
  3277  0422  1683               	bsf	3,5	;RP0=1, select bank1
  3278  0423  1303               	bcf	3,6	;RP1=0, select bank1
  3279  0424  00DD               	movwf	(stopWatch@startTime^(0+128)+3)
  3280                           
  3281                           ;timer0.h: 93: return 1;
  3282  0425  3000               	movlw	0
  3283  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3284  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3285  0428  00D1               	movwf	?_stopWatch+3
  3286  0429  3000               	movlw	0
  3287  042A  00D0               	movwf	?_stopWatch+2
  3288  042B  3000               	movlw	0
  3289  042C  00CF               	movwf	?_stopWatch+1
  3290  042D  3001               	movlw	1
  3291  042E  00CE               	movwf	?_stopWatch
  3292  042F  0008               	return
  3293  0430                     l2024:	
  3294                           ;timer0.h: 94: }
  3295                           ;timer0.h: 96: case (1):
  3296                           
  3297                           
  3298                           ;timer0.h: 97: {
  3299                           ;timer0.h: 98: temp = time + TMR0 - startTime;
  3300  0430  0868               	movf	_time,w
  3301  0431  00D2               	movwf	??_stopWatch
  3302  0432  0869               	movf	_time+1,w
  3303  0433  00D3               	movwf	??_stopWatch+1
  3304  0434  086A               	movf	_time+2,w
  3305  0435  00D4               	movwf	??_stopWatch+2
  3306  0436  086B               	movf	_time+3,w
  3307  0437  00D5               	movwf	??_stopWatch+3
  3308  0438  1683               	bsf	3,5	;RP0=1, select bank1
  3309  0439  1303               	bcf	3,6	;RP1=0, select bank1
  3310  043A  095A               	comf	stopWatch@startTime^(0+128),w
  3311  043B  1283               	bcf	3,5	;RP0=0, select bank0
  3312  043C  1303               	bcf	3,6	;RP1=0, select bank0
  3313  043D  00D6               	movwf	??_stopWatch+4
  3314  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3315  043F  1303               	bcf	3,6	;RP1=0, select bank1
  3316  0440  095B               	comf	(stopWatch@startTime+1)^(0+128),w
  3317  0441  1283               	bcf	3,5	;RP0=0, select bank0
  3318  0442  1303               	bcf	3,6	;RP1=0, select bank0
  3319  0443  00D7               	movwf	??_stopWatch+5
  3320  0444  1683               	bsf	3,5	;RP0=1, select bank1
  3321  0445  1303               	bcf	3,6	;RP1=0, select bank1
  3322  0446  095C               	comf	(stopWatch@startTime+2)^(0+128),w
  3323  0447  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0448  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0449  00D8               	movwf	??_stopWatch+6
  3326  044A  1683               	bsf	3,5	;RP0=1, select bank1
  3327  044B  1303               	bcf	3,6	;RP1=0, select bank1
  3328  044C  095D               	comf	(stopWatch@startTime+3)^(0+128),w
  3329  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3330  044E  1303               	bcf	3,6	;RP1=0, select bank0
  3331  044F  00D9               	movwf	??_stopWatch+7
  3332  0450  0AD6               	incf	??_stopWatch+4,f
  3333  0451  1903               	skipnz
  3334  0452  0AD7               	incf	??_stopWatch+5,f
  3335  0453  1903               	skipnz
  3336  0454  0AD8               	incf	??_stopWatch+6,f
  3337  0455  1903               	skipnz
  3338  0456  0AD9               	incf	??_stopWatch+7,f
  3339  0457  0801               	movf	1,w	;volatile
  3340  0458  00DA               	movwf	??_stopWatch+8
  3341  0459  01DB               	clrf	??_stopWatch+9
  3342  045A  01DC               	clrf	??_stopWatch+10
  3343  045B  01DD               	clrf	??_stopWatch+11
  3344  045C  085A               	movf	??_stopWatch+8,w
  3345  045D  07D6               	addwf	??_stopWatch+4,f
  3346  045E  085B               	movf	??_stopWatch+9,w
  3347  045F  1803               	skipnc
  3348  0460  0F5B               	incfsz	??_stopWatch+9,w
  3349  0461  2C63               	goto	u2020
  3350  0462  2C64               	goto	u2021
  3351  0463                     u2020:	
  3352  0463  07D7               	addwf	??_stopWatch+5,f
  3353  0464                     u2021:	
  3354  0464  085C               	movf	??_stopWatch+10,w
  3355  0465  1803               	skipnc
  3356  0466  0F5C               	incfsz	??_stopWatch+10,w
  3357  0467  2C69               	goto	u2022
  3358  0468  2C6A               	goto	u2023
  3359  0469                     u2022:	
  3360  0469  07D8               	addwf	??_stopWatch+6,f
  3361  046A                     u2023:	
  3362  046A  085D               	movf	??_stopWatch+11,w
  3363  046B  1803               	skipnc
  3364  046C  0A5D               	incf	??_stopWatch+11,w
  3365  046D  07D9               	addwf	??_stopWatch+7,f
  3366  046E  0856               	movf	??_stopWatch+4,w
  3367  046F  07D2               	addwf	??_stopWatch,f
  3368  0470  0857               	movf	??_stopWatch+5,w
  3369  0471  1803               	skipnc
  3370  0472  0F57               	incfsz	??_stopWatch+5,w
  3371  0473  2C75               	goto	u2030
  3372  0474  2C76               	goto	u2031
  3373  0475                     u2030:	
  3374  0475  07D3               	addwf	??_stopWatch+1,f
  3375  0476                     u2031:	
  3376  0476  0858               	movf	??_stopWatch+6,w
  3377  0477  1803               	skipnc
  3378  0478  0F58               	incfsz	??_stopWatch+6,w
  3379  0479  2C7B               	goto	u2032
  3380  047A  2C7C               	goto	u2033
  3381  047B                     u2032:	
  3382  047B  07D4               	addwf	??_stopWatch+2,f
  3383  047C                     u2033:	
  3384  047C  0859               	movf	??_stopWatch+7,w
  3385  047D  1803               	skipnc
  3386  047E  0A59               	incf	??_stopWatch+7,w
  3387  047F  07D5               	addwf	??_stopWatch+3,f
  3388  0480  0855               	movf	??_stopWatch+3,w
  3389  0481  00E2               	movwf	stopWatch@temp+3
  3390  0482  0854               	movf	??_stopWatch+2,w
  3391  0483  00E1               	movwf	stopWatch@temp+2
  3392  0484  0853               	movf	??_stopWatch+1,w
  3393  0485  00E0               	movwf	stopWatch@temp+1
  3394  0486  0852               	movf	??_stopWatch,w
  3395  0487  00DF               	movwf	stopWatch@temp
  3396                           
  3397                           ;timer0.h: 100: temp = convConst * temp;
  3398  0488  0862               	movf	stopWatch@temp+3,w
  3399  0489  00AB               	movwf	___lltoft@c+3
  3400  048A  0861               	movf	stopWatch@temp+2,w
  3401  048B  00AA               	movwf	___lltoft@c+2
  3402  048C  0860               	movf	stopWatch@temp+1,w
  3403  048D  00A9               	movwf	___lltoft@c+1
  3404  048E  085F               	movf	stopWatch@temp,w
  3405  048F  00A8               	movwf	___lltoft@c
  3406  0490  120A  158A  233C  120A  118A  	fcall	___lltoft
  3407  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0497  0828               	movf	?___lltoft,w
  3410  0498  00B3               	movwf	___ftmul@f2
  3411  0499  0829               	movf	?___lltoft+1,w
  3412  049A  00B4               	movwf	___ftmul@f2+1
  3413  049B  082A               	movf	?___lltoft+2,w
  3414  049C  00B5               	movwf	___ftmul@f2+2
  3415  049D  3001               	movlw	low (_convConst-__stringbase)
  3416  049E  0084               	movwf	4
  3417  049F  120A  158A  200A  120A  118A  	fcall	stringdir
  3418  04A4  00B0               	movwf	___ftmul@f1
  3419  04A5  120A  158A  200A  120A  118A  	fcall	stringdir
  3420  04AA  00B1               	movwf	___ftmul@f1+1
  3421  04AB  120A  158A  200A  120A  118A  	fcall	stringdir
  3422  04B0  00B2               	movwf	___ftmul@f1+2
  3423  04B1  120A  118A  2327  120A  118A  	fcall	___ftmul
  3424  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3425  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3426  04B8  0830               	movf	?___ftmul,w
  3427  04B9  00C0               	movwf	___fttol@f1
  3428  04BA  0831               	movf	?___ftmul+1,w
  3429  04BB  00C1               	movwf	___fttol@f1+1
  3430  04BC  0832               	movf	?___ftmul+2,w
  3431  04BD  00C2               	movwf	___fttol@f1+2
  3432  04BE  120A  158A  2631   	fcall	___fttol
  3433  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3434  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3435  04C3  0843               	movf	?___fttol+3,w
  3436  04C4  00E2               	movwf	stopWatch@temp+3
  3437  04C5  0842               	movf	?___fttol+2,w
  3438  04C6  00E1               	movwf	stopWatch@temp+2
  3439  04C7  0841               	movf	?___fttol+1,w
  3440  04C8  00E0               	movwf	stopWatch@temp+1
  3441  04C9  0840               	movf	?___fttol,w
  3442  04CA  00DF               	movwf	stopWatch@temp
  3443                           
  3444                           ;timer0.h: 102: return temp;
  3445  04CB  0862               	movf	stopWatch@temp+3,w
  3446  04CC  00D1               	movwf	?_stopWatch+3
  3447  04CD  0861               	movf	stopWatch@temp+2,w
  3448  04CE  00D0               	movwf	?_stopWatch+2
  3449  04CF  0860               	movf	stopWatch@temp+1,w
  3450  04D0  00CF               	movwf	?_stopWatch+1
  3451  04D1  085F               	movf	stopWatch@temp,w
  3452  04D2  00CE               	movwf	?_stopWatch
  3453  04D3  0008               	return
  3454  04D4                     l2034:	
  3455                           ;timer0.h: 103: }
  3456                           ;timer0.h: 104: }
  3457                           
  3458  04D4  085E               	movf	stopWatch@mode,w
  3459                           
  3460                           ; Switch size 1, requested type "space"
  3461                           ; Number of cases is 2, Range of values is 0 to 1
  3462                           ; switch strategies available:
  3463                           ; Name         Instructions Cycles
  3464                           ; simple_byte            7     4 (average)
  3465                           ; direct_byte           14     8 (fixed)
  3466                           ; jumptable            260     6 (fixed)
  3467                           ;	Chosen strategy is simple_byte
  3468  04D5  3A00               	xorlw	0	; case 0
  3469  04D6  1903               	skipnz
  3470  04D7  2C06               	goto	l2020
  3471  04D8  3A01               	xorlw	1	; case 1
  3472  04D9  1903               	skipnz
  3473  04DA  2C30               	goto	l2024
  3474  04DB  2CDC               	goto	l2036
  3475  04DC                     l2036:	
  3476                           
  3477                           ;timer0.h: 106: return 0;
  3478  04DC  3000               	movlw	0
  3479  04DD  00D1               	movwf	?_stopWatch+3
  3480  04DE  3000               	movlw	0
  3481  04DF  00D0               	movwf	?_stopWatch+2
  3482  04E0  3000               	movlw	0
  3483  04E1  00CF               	movwf	?_stopWatch+1
  3484  04E2  3000               	movlw	0
  3485  04E3  00CE               	movwf	?_stopWatch
  3486  04E4  0008               	return
  3487  04E5                     __end_of_stopWatch:	
  3488                           
  3489                           	psect	text15
  3490  0B3C                     __ptext15:	
  3491 ;; *************** function ___lltoft *****************
  3492 ;; Defined at:
  3493 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  c               4    8[BANK0 ] unsigned long 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  exp             1   13[BANK0 ] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  3    8[BANK0 ] float 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, pclath, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3507 ;;      Params:         0       4       0       0       0
  3508 ;;      Locals:         0       1       0       0       0
  3509 ;;      Temps:          0       1       0       0       0
  3510 ;;      Totals:         0       6       0       0       0
  3511 ;;Total ram usage:        6 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		___ftpack
  3516 ;; This function is called by:
  3517 ;;		_stopWatch
  3518 ;;		_floatToASCII
  3519 ;;		_currentTime
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function ___lltoft
  3525  0B3C                     ___lltoft:	
  3526                           
  3527                           ;incstack = 0
  3528                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  3529  0B3C  308E               	movlw	142
  3530  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0B3F  00AC               	movwf	??___lltoft
  3533  0B40  082C               	movf	??___lltoft,w
  3534  0B41  00AD               	movwf	___lltoft@exp
  3535  0B42                     l1872:	
  3536  0B42  30FF               	movlw	255
  3537  0B43  052B               	andwf	___lltoft@c+3,w
  3538  0B44  1903               	btfsc	3,2
  3539  0B45  2B54               	goto	l1874
  3540  0B46  3001               	movlw	1
  3541  0B47                     u1815:	
  3542  0B47  1003               	clrc
  3543  0B48  0CAB               	rrf	___lltoft@c+3,f
  3544  0B49  0CAA               	rrf	___lltoft@c+2,f
  3545  0B4A  0CA9               	rrf	___lltoft@c+1,f
  3546  0B4B  0CA8               	rrf	___lltoft@c,f
  3547  0B4C  3EFF               	addlw	-1
  3548  0B4D  1D03               	skipz
  3549  0B4E  2B47               	goto	u1815
  3550  0B4F  3001               	movlw	1
  3551  0B50  00AC               	movwf	??___lltoft
  3552  0B51  082C               	movf	??___lltoft,w
  3553  0B52  07AD               	addwf	___lltoft@exp,f
  3554  0B53  2B42               	goto	l1872
  3555  0B54                     l1874:	
  3556  0B54  0828               	movf	___lltoft@c,w
  3557  0B55  00A0               	movwf	___ftpack@arg
  3558  0B56  0829               	movf	___lltoft@c+1,w
  3559  0B57  00A1               	movwf	___ftpack@arg+1
  3560  0B58  082A               	movf	___lltoft@c+2,w
  3561  0B59  00A2               	movwf	___ftpack@arg+2
  3562  0B5A  082D               	movf	___lltoft@exp,w
  3563  0B5B  00AC               	movwf	??___lltoft
  3564  0B5C  082C               	movf	??___lltoft,w
  3565  0B5D  00A3               	movwf	___ftpack@exp
  3566  0B5E  01A4               	clrf	___ftpack@sign
  3567  0B5F  120A  158A  2545   	fcall	___ftpack
  3568  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  3569  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  3570  0B64  0820               	movf	?___ftpack,w
  3571  0B65  00A8               	movwf	?___lltoft
  3572  0B66  0821               	movf	?___ftpack+1,w
  3573  0B67  00A9               	movwf	?___lltoft+1
  3574  0B68  0822               	movf	?___ftpack+2,w
  3575  0B69  00AA               	movwf	?___lltoft+2
  3576  0B6A  0008               	return
  3577  0B6B                     __end_of___lltoft:	
  3578                           
  3579                           	psect	text16
  3580  0E31                     __ptext16:	
  3581 ;; *************** function ___fttol *****************
  3582 ;; Defined at:
  3583 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  f1              3   32[BANK0 ] float 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  lval            4   41[BANK0 ] unsigned long 
  3588 ;;  exp1            1   45[BANK0 ] unsigned char 
  3589 ;;  sign1           1   40[BANK0 ] unsigned char 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  4   32[BANK0 ] long 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3599 ;;      Params:         0       4       0       0       0
  3600 ;;      Locals:         0       6       0       0       0
  3601 ;;      Temps:          0       4       0       0       0
  3602 ;;      Totals:         0      14       0       0       0
  3603 ;;Total ram usage:       14 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    2
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_stopWatch
  3610 ;;		_floatToASCII
  3611 ;;		_currentTime
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function ___fttol
  3617  0E31                     ___fttol:	
  3618                           
  3619                           ;incstack = 0
  3620                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3621  0E31  1283               	bcf	3,5	;RP0=0, select bank0
  3622  0E32  1303               	bcf	3,6	;RP1=0, select bank0
  3623  0E33  0840               	movf	___fttol@f1,w
  3624  0E34  00C4               	movwf	??___fttol
  3625  0E35  0841               	movf	___fttol@f1+1,w
  3626  0E36  00C5               	movwf	??___fttol+1
  3627  0E37  0842               	movf	___fttol@f1+2,w
  3628  0E38  00C6               	movwf	??___fttol+2
  3629  0E39  1003               	clrc
  3630  0E3A  0D45               	rlf	??___fttol+1,w
  3631  0E3B  0D46               	rlf	??___fttol+2,w
  3632  0E3C  00C7               	movwf	??___fttol+3
  3633  0E3D  0847               	movf	??___fttol+3,w
  3634  0E3E  00CD               	movwf	___fttol@exp1
  3635  0E3F  084D               	movf	___fttol@exp1,w
  3636  0E40  1D03               	btfss	3,2
  3637  0E41  2E4B               	goto	l1832
  3638  0E42  3000               	movlw	0
  3639  0E43  00C3               	movwf	?___fttol+3
  3640  0E44  3000               	movlw	0
  3641  0E45  00C2               	movwf	?___fttol+2
  3642  0E46  3000               	movlw	0
  3643  0E47  00C1               	movwf	?___fttol+1
  3644  0E48  3000               	movlw	0
  3645  0E49  00C0               	movwf	?___fttol
  3646  0E4A  0008               	return
  3647  0E4B                     l1832:	
  3648  0E4B  0840               	movf	___fttol@f1,w
  3649  0E4C  00C4               	movwf	??___fttol
  3650  0E4D  0841               	movf	___fttol@f1+1,w
  3651  0E4E  00C5               	movwf	??___fttol+1
  3652  0E4F  0842               	movf	___fttol@f1+2,w
  3653  0E50  00C6               	movwf	??___fttol+2
  3654  0E51  3017               	movlw	23
  3655  0E52                     u1725:	
  3656  0E52  1003               	clrc
  3657  0E53  0CC6               	rrf	??___fttol+2,f
  3658  0E54  0CC5               	rrf	??___fttol+1,f
  3659  0E55  0CC4               	rrf	??___fttol,f
  3660  0E56  3EFF               	addlw	-1
  3661  0E57  1D03               	skipz
  3662  0E58  2E52               	goto	u1725
  3663  0E59  0844               	movf	??___fttol,w
  3664  0E5A  00C7               	movwf	??___fttol+3
  3665  0E5B  0847               	movf	??___fttol+3,w
  3666  0E5C  00C8               	movwf	___fttol@sign1
  3667  0E5D  17C1               	bsf	___fttol@f1+1,7
  3668  0E5E  30FF               	movlw	255
  3669  0E5F  05C0               	andwf	___fttol@f1,f
  3670  0E60  30FF               	movlw	255
  3671  0E61  05C1               	andwf	___fttol@f1+1,f
  3672  0E62  3000               	movlw	0
  3673  0E63  05C2               	andwf	___fttol@f1+2,f
  3674  0E64  0840               	movf	___fttol@f1,w
  3675  0E65  00C9               	movwf	___fttol@lval
  3676  0E66  0841               	movf	___fttol@f1+1,w
  3677  0E67  00CA               	movwf	___fttol@lval+1
  3678  0E68  0842               	movf	___fttol@f1+2,w
  3679  0E69  00CB               	movwf	___fttol@lval+2
  3680  0E6A  01CC               	clrf	___fttol@lval+3
  3681  0E6B  308E               	movlw	142
  3682  0E6C  02CD               	subwf	___fttol@exp1,f
  3683  0E6D  1FCD               	btfss	___fttol@exp1,7
  3684  0E6E  2E8D               	goto	l1852
  3685  0E6F  084D               	movf	___fttol@exp1,w
  3686  0E70  3A80               	xorlw	128
  3687  0E71  3E8F               	addlw	143
  3688  0E72  1803               	skipnc
  3689  0E73  2E7D               	goto	l1850
  3690  0E74  3000               	movlw	0
  3691  0E75  00C3               	movwf	?___fttol+3
  3692  0E76  3000               	movlw	0
  3693  0E77  00C2               	movwf	?___fttol+2
  3694  0E78  3000               	movlw	0
  3695  0E79  00C1               	movwf	?___fttol+1
  3696  0E7A  3000               	movlw	0
  3697  0E7B  00C0               	movwf	?___fttol
  3698  0E7C  0008               	return
  3699  0E7D                     l1850:	
  3700  0E7D  3001               	movlw	1
  3701  0E7E                     u1755:	
  3702  0E7E  1003               	clrc
  3703  0E7F  0CCC               	rrf	___fttol@lval+3,f
  3704  0E80  0CCB               	rrf	___fttol@lval+2,f
  3705  0E81  0CCA               	rrf	___fttol@lval+1,f
  3706  0E82  0CC9               	rrf	___fttol@lval,f
  3707  0E83  3EFF               	addlw	-1
  3708  0E84  1D03               	skipz
  3709  0E85  2E7E               	goto	u1755
  3710  0E86  3001               	movlw	1
  3711  0E87  00C4               	movwf	??___fttol
  3712  0E88  0844               	movf	??___fttol,w
  3713  0E89  07CD               	addwf	___fttol@exp1,f
  3714  0E8A  1903               	btfsc	3,2
  3715  0E8B  2EA8               	goto	l1860
  3716  0E8C  2E7D               	goto	l1850
  3717  0E8D                     l1852:	
  3718  0E8D  3018               	movlw	24
  3719  0E8E  024D               	subwf	___fttol@exp1,w
  3720  0E8F  1C03               	skipc
  3721  0E90  2EA5               	goto	l652
  3722  0E91  3000               	movlw	0
  3723  0E92  00C3               	movwf	?___fttol+3
  3724  0E93  3000               	movlw	0
  3725  0E94  00C2               	movwf	?___fttol+2
  3726  0E95  3000               	movlw	0
  3727  0E96  00C1               	movwf	?___fttol+1
  3728  0E97  3000               	movlw	0
  3729  0E98  00C0               	movwf	?___fttol
  3730  0E99  0008               	return
  3731  0E9A                     l1858:	
  3732  0E9A  3001               	movlw	1
  3733  0E9B  00C4               	movwf	??___fttol
  3734  0E9C                     u1785:	
  3735  0E9C  1003               	clrc
  3736  0E9D  0DC9               	rlf	___fttol@lval,f
  3737  0E9E  0DCA               	rlf	___fttol@lval+1,f
  3738  0E9F  0DCB               	rlf	___fttol@lval+2,f
  3739  0EA0  0DCC               	rlf	___fttol@lval+3,f
  3740  0EA1  0BC4               	decfsz	??___fttol,f
  3741  0EA2  2E9C               	goto	u1785
  3742  0EA3  3001               	movlw	1
  3743  0EA4  02CD               	subwf	___fttol@exp1,f
  3744  0EA5                     l652:	
  3745  0EA5  084D               	movf	___fttol@exp1,w
  3746  0EA6  1D03               	btfss	3,2
  3747  0EA7  2E9A               	goto	l1858
  3748  0EA8                     l1860:	
  3749  0EA8  0848               	movf	___fttol@sign1,w
  3750  0EA9  1903               	btfsc	3,2
  3751  0EAA  2EB6               	goto	l1864
  3752  0EAB  09C9               	comf	___fttol@lval,f
  3753  0EAC  09CA               	comf	___fttol@lval+1,f
  3754  0EAD  09CB               	comf	___fttol@lval+2,f
  3755  0EAE  09CC               	comf	___fttol@lval+3,f
  3756  0EAF  0AC9               	incf	___fttol@lval,f
  3757  0EB0  1903               	skipnz
  3758  0EB1  0ACA               	incf	___fttol@lval+1,f
  3759  0EB2  1903               	skipnz
  3760  0EB3  0ACB               	incf	___fttol@lval+2,f
  3761  0EB4  1903               	skipnz
  3762  0EB5  0ACC               	incf	___fttol@lval+3,f
  3763  0EB6                     l1864:	
  3764  0EB6  084C               	movf	___fttol@lval+3,w
  3765  0EB7  00C3               	movwf	?___fttol+3
  3766  0EB8  084B               	movf	___fttol@lval+2,w
  3767  0EB9  00C2               	movwf	?___fttol+2
  3768  0EBA  084A               	movf	___fttol@lval+1,w
  3769  0EBB  00C1               	movwf	?___fttol+1
  3770  0EBC  0849               	movf	___fttol@lval,w
  3771  0EBD  00C0               	movwf	?___fttol
  3772  0EBE  0008               	return
  3773  0EBF                     __end_of___fttol:	
  3774                           
  3775                           	psect	text17
  3776  0327                     __ptext17:	
  3777 ;; *************** function ___ftmul *****************
  3778 ;; Defined at:
  3779 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  f1              3   16[BANK0 ] float 
  3782 ;;  f2              3   19[BANK0 ] float 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  3785 ;;  sign            1   31[BANK0 ] unsigned char 
  3786 ;;  cntr            1   30[BANK0 ] unsigned char 
  3787 ;;  exp             1   26[BANK0 ] unsigned char 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  3   16[BANK0 ] float 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0, pclath, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3797 ;;      Params:         0       6       0       0       0
  3798 ;;      Locals:         0       6       0       0       0
  3799 ;;      Temps:          0       4       0       0       0
  3800 ;;      Totals:         0      16       0       0       0
  3801 ;;Total ram usage:       16 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    3
  3804 ;; This function calls:
  3805 ;;		___ftpack
  3806 ;; This function is called by:
  3807 ;;		_stopWatch
  3808 ;;		_sampleBatteryCells
  3809 ;;		_sampleReference
  3810 ;;		_sampleVoltage
  3811 ;;		_sampleCurrent
  3812 ;;		_floatToASCII
  3813 ;;		_currentTime
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           
  3818                           ;psect for function ___ftmul
  3819  0327                     ___ftmul:	
  3820                           
  3821                           ;incstack = 0
  3822                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3823  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0328  1303               	bcf	3,6	;RP1=0, select bank0
  3825  0329  0830               	movf	___ftmul@f1,w
  3826  032A  00B6               	movwf	??___ftmul
  3827  032B  0831               	movf	___ftmul@f1+1,w
  3828  032C  00B7               	movwf	??___ftmul+1
  3829  032D  0832               	movf	___ftmul@f1+2,w
  3830  032E  00B8               	movwf	??___ftmul+2
  3831  032F  1003               	clrc
  3832  0330  0D37               	rlf	??___ftmul+1,w
  3833  0331  0D38               	rlf	??___ftmul+2,w
  3834  0332  00B9               	movwf	??___ftmul+3
  3835  0333  0839               	movf	??___ftmul+3,w
  3836  0334  00BA               	movwf	___ftmul@exp
  3837  0335  083A               	movf	___ftmul@exp,w
  3838  0336  1D03               	btfss	3,2
  3839  0337  2B3F               	goto	l1782
  3840  0338  3000               	movlw	0
  3841  0339  00B0               	movwf	?___ftmul
  3842  033A  3000               	movlw	0
  3843  033B  00B1               	movwf	?___ftmul+1
  3844  033C  3000               	movlw	0
  3845  033D  00B2               	movwf	?___ftmul+2
  3846  033E  0008               	return
  3847  033F                     l1782:	
  3848  033F  0833               	movf	___ftmul@f2,w
  3849  0340  00B6               	movwf	??___ftmul
  3850  0341  0834               	movf	___ftmul@f2+1,w
  3851  0342  00B7               	movwf	??___ftmul+1
  3852  0343  0835               	movf	___ftmul@f2+2,w
  3853  0344  00B8               	movwf	??___ftmul+2
  3854  0345  1003               	clrc
  3855  0346  0D37               	rlf	??___ftmul+1,w
  3856  0347  0D38               	rlf	??___ftmul+2,w
  3857  0348  00B9               	movwf	??___ftmul+3
  3858  0349  0839               	movf	??___ftmul+3,w
  3859  034A  00BF               	movwf	___ftmul@sign
  3860  034B  083F               	movf	___ftmul@sign,w
  3861  034C  1D03               	btfss	3,2
  3862  034D  2B55               	goto	l1788
  3863  034E  3000               	movlw	0
  3864  034F  00B0               	movwf	?___ftmul
  3865  0350  3000               	movlw	0
  3866  0351  00B1               	movwf	?___ftmul+1
  3867  0352  3000               	movlw	0
  3868  0353  00B2               	movwf	?___ftmul+2
  3869  0354  0008               	return
  3870  0355                     l1788:	
  3871  0355  083F               	movf	___ftmul@sign,w
  3872  0356  3E7B               	addlw	123
  3873  0357  00B6               	movwf	??___ftmul
  3874  0358  0836               	movf	??___ftmul,w
  3875  0359  07BA               	addwf	___ftmul@exp,f
  3876  035A  0830               	movf	___ftmul@f1,w
  3877  035B  00B6               	movwf	??___ftmul
  3878  035C  0831               	movf	___ftmul@f1+1,w
  3879  035D  00B7               	movwf	??___ftmul+1
  3880  035E  0832               	movf	___ftmul@f1+2,w
  3881  035F  00B8               	movwf	??___ftmul+2
  3882  0360  3010               	movlw	16
  3883  0361                     u1595:	
  3884  0361  1003               	clrc
  3885  0362  0CB8               	rrf	??___ftmul+2,f
  3886  0363  0CB7               	rrf	??___ftmul+1,f
  3887  0364  0CB6               	rrf	??___ftmul,f
  3888  0365  3EFF               	addlw	-1
  3889  0366  1D03               	skipz
  3890  0367  2B61               	goto	u1595
  3891  0368  0836               	movf	??___ftmul,w
  3892  0369  00B9               	movwf	??___ftmul+3
  3893  036A  0839               	movf	??___ftmul+3,w
  3894  036B  00BF               	movwf	___ftmul@sign
  3895  036C  0833               	movf	___ftmul@f2,w
  3896  036D  00B6               	movwf	??___ftmul
  3897  036E  0834               	movf	___ftmul@f2+1,w
  3898  036F  00B7               	movwf	??___ftmul+1
  3899  0370  0835               	movf	___ftmul@f2+2,w
  3900  0371  00B8               	movwf	??___ftmul+2
  3901  0372  3010               	movlw	16
  3902  0373                     u1605:	
  3903  0373  1003               	clrc
  3904  0374  0CB8               	rrf	??___ftmul+2,f
  3905  0375  0CB7               	rrf	??___ftmul+1,f
  3906  0376  0CB6               	rrf	??___ftmul,f
  3907  0377  3EFF               	addlw	-1
  3908  0378  1D03               	skipz
  3909  0379  2B73               	goto	u1605
  3910  037A  0836               	movf	??___ftmul,w
  3911  037B  00B9               	movwf	??___ftmul+3
  3912  037C  0839               	movf	??___ftmul+3,w
  3913  037D  06BF               	xorwf	___ftmul@sign,f
  3914  037E  3080               	movlw	128
  3915  037F  00B6               	movwf	??___ftmul
  3916  0380  0836               	movf	??___ftmul,w
  3917  0381  05BF               	andwf	___ftmul@sign,f
  3918  0382  17B1               	bsf	___ftmul@f1+1,7
  3919  0383  17B4               	bsf	___ftmul@f2+1,7
  3920  0384  30FF               	movlw	255
  3921  0385  05B3               	andwf	___ftmul@f2,f
  3922  0386  30FF               	movlw	255
  3923  0387  05B4               	andwf	___ftmul@f2+1,f
  3924  0388  3000               	movlw	0
  3925  0389  05B5               	andwf	___ftmul@f2+2,f
  3926  038A  3000               	movlw	0
  3927  038B  00BB               	movwf	___ftmul@f3_as_product
  3928  038C  3000               	movlw	0
  3929  038D  00BC               	movwf	___ftmul@f3_as_product+1
  3930  038E  3000               	movlw	0
  3931  038F  00BD               	movwf	___ftmul@f3_as_product+2
  3932  0390  3007               	movlw	7
  3933  0391  00B6               	movwf	??___ftmul
  3934  0392  0836               	movf	??___ftmul,w
  3935  0393  00BE               	movwf	___ftmul@cntr
  3936  0394                     l1800:	
  3937  0394  1C30               	btfss	___ftmul@f1,0
  3938  0395  2BA4               	goto	l1804
  3939  0396  0833               	movf	___ftmul@f2,w
  3940  0397  07BB               	addwf	___ftmul@f3_as_product,f
  3941  0398  0834               	movf	___ftmul@f2+1,w
  3942  0399  1103               	clrz
  3943  039A  1803               	skipnc
  3944  039B  0A34               	incf	___ftmul@f2+1,w
  3945  039C  1D03               	btfss	3,2
  3946  039D  07BC               	addwf	___ftmul@f3_as_product+1,f
  3947  039E  0835               	movf	___ftmul@f2+2,w
  3948  039F  1103               	clrz
  3949  03A0  1803               	skipnc
  3950  03A1  0A35               	incf	___ftmul@f2+2,w
  3951  03A2  1D03               	btfss	3,2
  3952  03A3  07BD               	addwf	___ftmul@f3_as_product+2,f
  3953  03A4                     l1804:	
  3954  03A4  3001               	movlw	1
  3955  03A5                     u1635:	
  3956  03A5  1003               	clrc
  3957  03A6  0CB2               	rrf	___ftmul@f1+2,f
  3958  03A7  0CB1               	rrf	___ftmul@f1+1,f
  3959  03A8  0CB0               	rrf	___ftmul@f1,f
  3960  03A9  3EFF               	addlw	-1
  3961  03AA  1D03               	skipz
  3962  03AB  2BA5               	goto	u1635
  3963  03AC  3001               	movlw	1
  3964  03AD                     u1645:	
  3965  03AD  1003               	clrc
  3966  03AE  0DB3               	rlf	___ftmul@f2,f
  3967  03AF  0DB4               	rlf	___ftmul@f2+1,f
  3968  03B0  0DB5               	rlf	___ftmul@f2+2,f
  3969  03B1  3EFF               	addlw	-1
  3970  03B2  1D03               	skipz
  3971  03B3  2BAD               	goto	u1645
  3972  03B4  3001               	movlw	1
  3973  03B5  02BE               	subwf	___ftmul@cntr,f
  3974  03B6  1D03               	btfss	3,2
  3975  03B7  2B94               	goto	l1800
  3976  03B8  3009               	movlw	9
  3977  03B9  00B6               	movwf	??___ftmul
  3978  03BA  0836               	movf	??___ftmul,w
  3979  03BB  00BE               	movwf	___ftmul@cntr
  3980  03BC                     l1812:	
  3981  03BC  1C30               	btfss	___ftmul@f1,0
  3982  03BD  2BCC               	goto	l1816
  3983  03BE  0833               	movf	___ftmul@f2,w
  3984  03BF  07BB               	addwf	___ftmul@f3_as_product,f
  3985  03C0  0834               	movf	___ftmul@f2+1,w
  3986  03C1  1103               	clrz
  3987  03C2  1803               	skipnc
  3988  03C3  0A34               	incf	___ftmul@f2+1,w
  3989  03C4  1D03               	btfss	3,2
  3990  03C5  07BC               	addwf	___ftmul@f3_as_product+1,f
  3991  03C6  0835               	movf	___ftmul@f2+2,w
  3992  03C7  1103               	clrz
  3993  03C8  1803               	skipnc
  3994  03C9  0A35               	incf	___ftmul@f2+2,w
  3995  03CA  1D03               	btfss	3,2
  3996  03CB  07BD               	addwf	___ftmul@f3_as_product+2,f
  3997  03CC                     l1816:	
  3998  03CC  3001               	movlw	1
  3999  03CD                     u1685:	
  4000  03CD  1003               	clrc
  4001  03CE  0CB2               	rrf	___ftmul@f1+2,f
  4002  03CF  0CB1               	rrf	___ftmul@f1+1,f
  4003  03D0  0CB0               	rrf	___ftmul@f1,f
  4004  03D1  3EFF               	addlw	-1
  4005  03D2  1D03               	skipz
  4006  03D3  2BCD               	goto	u1685
  4007  03D4  3001               	movlw	1
  4008  03D5                     u1695:	
  4009  03D5  1003               	clrc
  4010  03D6  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4011  03D7  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4012  03D8  0CBB               	rrf	___ftmul@f3_as_product,f
  4013  03D9  3EFF               	addlw	-1
  4014  03DA  1D03               	skipz
  4015  03DB  2BD5               	goto	u1695
  4016  03DC  3001               	movlw	1
  4017  03DD  02BE               	subwf	___ftmul@cntr,f
  4018  03DE  1D03               	btfss	3,2
  4019  03DF  2BBC               	goto	l1812
  4020  03E0  083B               	movf	___ftmul@f3_as_product,w
  4021  03E1  00A0               	movwf	___ftpack@arg
  4022  03E2  083C               	movf	___ftmul@f3_as_product+1,w
  4023  03E3  00A1               	movwf	___ftpack@arg+1
  4024  03E4  083D               	movf	___ftmul@f3_as_product+2,w
  4025  03E5  00A2               	movwf	___ftpack@arg+2
  4026  03E6  083A               	movf	___ftmul@exp,w
  4027  03E7  00B6               	movwf	??___ftmul
  4028  03E8  0836               	movf	??___ftmul,w
  4029  03E9  00A3               	movwf	___ftpack@exp
  4030  03EA  083F               	movf	___ftmul@sign,w
  4031  03EB  00B7               	movwf	??___ftmul+1
  4032  03EC  0837               	movf	??___ftmul+1,w
  4033  03ED  00A4               	movwf	___ftpack@sign
  4034  03EE  120A  158A  2545   	fcall	___ftpack
  4035  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  4036  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  4037  03F3  0820               	movf	?___ftpack,w
  4038  03F4  00B0               	movwf	?___ftmul
  4039  03F5  0821               	movf	?___ftpack+1,w
  4040  03F6  00B1               	movwf	?___ftmul+1
  4041  03F7  0822               	movf	?___ftpack+2,w
  4042  03F8  00B2               	movwf	?___ftmul+2
  4043  03F9  0008               	return
  4044  03FA                     __end_of___ftmul:	
  4045                           
  4046                           	psect	text18
  4047  0D45                     __ptext18:	
  4048 ;; *************** function ___ftpack *****************
  4049 ;; Defined at:
  4050 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  arg             3    0[BANK0 ] unsigned um
  4053 ;;  exp             1    3[BANK0 ] unsigned char 
  4054 ;;  sign            1    4[BANK0 ] unsigned char 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  3    0[BANK0 ] float 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4066 ;;      Params:         0       5       0       0       0
  4067 ;;      Locals:         0       0       0       0       0
  4068 ;;      Temps:          0       3       0       0       0
  4069 ;;      Totals:         0       8       0       0       0
  4070 ;;Total ram usage:        8 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    2
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		___ftdiv
  4077 ;;		___ftmul
  4078 ;;		___lbtoft
  4079 ;;		___lltoft
  4080 ;;		___lwtoft
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function ___ftpack
  4086  0D45                     ___ftpack:	
  4087                           
  4088                           ;incstack = 0
  4089                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4090  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  4092  0D47  0823               	movf	___ftpack@exp,w
  4093  0D48  1903               	btfsc	3,2
  4094  0D49  2D4F               	goto	l1606
  4095  0D4A  0822               	movf	___ftpack@arg+2,w
  4096  0D4B  0421               	iorwf	___ftpack@arg+1,w
  4097  0D4C  0420               	iorwf	___ftpack@arg,w
  4098  0D4D  1D03               	skipz
  4099  0D4E  2D62               	goto	l1612
  4100  0D4F                     l1606:	
  4101  0D4F  3000               	movlw	0
  4102  0D50  00A0               	movwf	?___ftpack
  4103  0D51  3000               	movlw	0
  4104  0D52  00A1               	movwf	?___ftpack+1
  4105  0D53  3000               	movlw	0
  4106  0D54  00A2               	movwf	?___ftpack+2
  4107  0D55  0008               	return
  4108  0D56                     l1610:	
  4109  0D56  3001               	movlw	1
  4110  0D57  00A5               	movwf	??___ftpack
  4111  0D58  0825               	movf	??___ftpack,w
  4112  0D59  07A3               	addwf	___ftpack@exp,f
  4113  0D5A  3001               	movlw	1
  4114  0D5B                     u1245:	
  4115  0D5B  1003               	clrc
  4116  0D5C  0CA2               	rrf	___ftpack@arg+2,f
  4117  0D5D  0CA1               	rrf	___ftpack@arg+1,f
  4118  0D5E  0CA0               	rrf	___ftpack@arg,f
  4119  0D5F  3EFF               	addlw	-1
  4120  0D60  1D03               	skipz
  4121  0D61  2D5B               	goto	u1245
  4122  0D62                     l1612:	
  4123  0D62  30FE               	movlw	254
  4124  0D63  0522               	andwf	___ftpack@arg+2,w
  4125  0D64  1903               	btfsc	3,2
  4126  0D65  2D7D               	goto	l561
  4127  0D66  2D56               	goto	l1610
  4128  0D67                     l1614:	
  4129  0D67  3001               	movlw	1
  4130  0D68  00A5               	movwf	??___ftpack
  4131  0D69  0825               	movf	??___ftpack,w
  4132  0D6A  07A3               	addwf	___ftpack@exp,f
  4133  0D6B  3001               	movlw	1
  4134  0D6C  07A0               	addwf	___ftpack@arg,f
  4135  0D6D  3000               	movlw	0
  4136  0D6E  1803               	skipnc
  4137  0D6F  3001               	movlw	1
  4138  0D70  07A1               	addwf	___ftpack@arg+1,f
  4139  0D71  3000               	movlw	0
  4140  0D72  1803               	skipnc
  4141  0D73  3001               	movlw	1
  4142  0D74  07A2               	addwf	___ftpack@arg+2,f
  4143  0D75  3001               	movlw	1
  4144  0D76                     u1265:	
  4145  0D76  1003               	clrc
  4146  0D77  0CA2               	rrf	___ftpack@arg+2,f
  4147  0D78  0CA1               	rrf	___ftpack@arg+1,f
  4148  0D79  0CA0               	rrf	___ftpack@arg,f
  4149  0D7A  3EFF               	addlw	-1
  4150  0D7B  1D03               	skipz
  4151  0D7C  2D76               	goto	u1265
  4152  0D7D                     l561:	
  4153  0D7D  30FF               	movlw	255
  4154  0D7E  0522               	andwf	___ftpack@arg+2,w
  4155  0D7F  1903               	btfsc	3,2
  4156  0D80  2D90               	goto	l1622
  4157  0D81  2D67               	goto	l1614
  4158  0D82                     l1624:	
  4159  0D82  3002               	movlw	2
  4160  0D83  0223               	subwf	___ftpack@exp,w
  4161  0D84  1C03               	btfss	3,0
  4162  0D85  2D92               	goto	l568
  4163  0D86  3001               	movlw	1
  4164  0D87  02A3               	subwf	___ftpack@exp,f
  4165  0D88  3001               	movlw	1
  4166  0D89                     u1285:	
  4167  0D89  1003               	clrc
  4168  0D8A  0DA0               	rlf	___ftpack@arg,f
  4169  0D8B  0DA1               	rlf	___ftpack@arg+1,f
  4170  0D8C  0DA2               	rlf	___ftpack@arg+2,f
  4171  0D8D  3EFF               	addlw	-1
  4172  0D8E  1D03               	skipz
  4173  0D8F  2D89               	goto	u1285
  4174  0D90                     l1622:	
  4175  0D90  1FA1               	btfss	___ftpack@arg+1,7
  4176  0D91  2D82               	goto	l1624
  4177  0D92                     l568:	
  4178  0D92  1823               	btfsc	___ftpack@exp,0
  4179  0D93  2D9A               	goto	l569
  4180  0D94  30FF               	movlw	255
  4181  0D95  05A0               	andwf	___ftpack@arg,f
  4182  0D96  307F               	movlw	127
  4183  0D97  05A1               	andwf	___ftpack@arg+1,f
  4184  0D98  30FF               	movlw	255
  4185  0D99  05A2               	andwf	___ftpack@arg+2,f
  4186  0D9A                     l569:	
  4187  0D9A  1003               	clrc
  4188  0D9B  0CA3               	rrf	___ftpack@exp,f
  4189  0D9C  0823               	movf	___ftpack@exp,w
  4190  0D9D  00A5               	movwf	??___ftpack
  4191  0D9E  01A6               	clrf	??___ftpack+1
  4192  0D9F  01A7               	clrf	??___ftpack+2
  4193  0DA0  3010               	movlw	16
  4194  0DA1                     u1325:	
  4195  0DA1  1003               	clrc
  4196  0DA2  0DA5               	rlf	??___ftpack,f
  4197  0DA3  0DA6               	rlf	??___ftpack+1,f
  4198  0DA4  0DA7               	rlf	??___ftpack+2,f
  4199  0DA5  3EFF               	addlw	-1
  4200  0DA6  1D03               	skipz
  4201  0DA7  2DA1               	goto	u1325
  4202  0DA8  0825               	movf	??___ftpack,w
  4203  0DA9  04A0               	iorwf	___ftpack@arg,f
  4204  0DAA  0826               	movf	??___ftpack+1,w
  4205  0DAB  04A1               	iorwf	___ftpack@arg+1,f
  4206  0DAC  0827               	movf	??___ftpack+2,w
  4207  0DAD  04A2               	iorwf	___ftpack@arg+2,f
  4208  0DAE  0824               	movf	___ftpack@sign,w
  4209  0DAF  1903               	btfsc	3,2
  4210  0DB0  0008               	return
  4211  0DB1  17A2               	bsf	___ftpack@arg+2,7
  4212  0DB2  0008               	return
  4213  0DB3                     __end_of___ftpack:	
  4214                           
  4215                           	psect	text19
  4216  0F57                     __ptext19:	
  4217 ;; *************** function _initLCD *****************
  4218 ;; Defined at:
  4219 ;;		line 52 in file "lcd.h"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;		None               void
  4226 ;; Registers used:
  4227 ;;		wreg, status,2, status,0, pclath, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4233 ;;      Params:         0       0       0       0       0
  4234 ;;      Locals:         0       0       0       0       0
  4235 ;;      Temps:          0       3       0       0       0
  4236 ;;      Totals:         0       3       0       0       0
  4237 ;;Total ram usage:        3 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    4
  4240 ;; This function calls:
  4241 ;;		_LCDSetBits
  4242 ;;		_LCDcmd
  4243 ;;		_pulse
  4244 ;; This function is called by:
  4245 ;;		_initController
  4246 ;;		_handlePB
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           
  4251                           ;psect for function _initLCD
  4252  0F57                     _initLCD:	
  4253                           
  4254                           ;lcd.h: 54: RB0 = 0;
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  4258  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  4259  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  4260  0F59  1006               	bcf	6,0	;volatile
  4261                           
  4262                           ;lcd.h: 55: RD7 = 0;
  4263  0F5A  1388               	bcf	8,7	;volatile
  4264                           
  4265                           ;lcd.h: 56: LCDSetBits(0x00);
  4266  0F5B  3000               	movlw	0
  4267  0F5C  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  4268                           
  4269                           ;lcd.h: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  4270  0F61  3002               	movlw	2
  4271  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  4272  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  4273  0F64  00A7               	movwf	??_initLCD+2
  4274  0F65  3004               	movlw	4
  4275  0F66  00A6               	movwf	??_initLCD+1
  4276  0F67  30BA               	movlw	186
  4277  0F68  00A5               	movwf	??_initLCD
  4278  0F69                     u2467:	
  4279  0F69  0BA5               	decfsz	??_initLCD,f
  4280  0F6A  2F69               	goto	u2467
  4281  0F6B  0BA6               	decfsz	??_initLCD+1,f
  4282  0F6C  2F69               	goto	u2467
  4283  0F6D  0BA7               	decfsz	??_initLCD+2,f
  4284  0F6E  2F69               	goto	u2467
  4285  0F6F  0000               	nop
  4286                           
  4287                           ;lcd.h: 58: LCDSetBits(0x30);
  4288  0F70  3030               	movlw	48
  4289  0F71  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  4290                           
  4291                           ;lcd.h: 59: _delay((unsigned long)((30)*(8000000/4000.0)));
  4292  0F76  304E               	movlw	78
  4293  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  4294  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  4295  0F79  00A6               	movwf	??_initLCD+1
  4296  0F7A  30EB               	movlw	235
  4297  0F7B  00A5               	movwf	??_initLCD
  4298  0F7C                     u2477:	
  4299  0F7C  0BA5               	decfsz	??_initLCD,f
  4300  0F7D  2F7C               	goto	u2477
  4301  0F7E  0BA6               	decfsz	??_initLCD+1,f
  4302  0F7F  2F7C               	goto	u2477
  4303                           
  4304                           ;lcd.h: 60: pulse();
  4305  0F80  120A  158A  2210  120A  158A  	fcall	_pulse
  4306                           
  4307                           ;lcd.h: 61: _delay((unsigned long)((10)*(8000000/4000.0)));
  4308  0F85  301A               	movlw	26
  4309  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  4310  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  4311  0F88  00A6               	movwf	??_initLCD+1
  4312  0F89  30F8               	movlw	248
  4313  0F8A  00A5               	movwf	??_initLCD
  4314  0F8B                     u2487:	
  4315  0F8B  0BA5               	decfsz	??_initLCD,f
  4316  0F8C  2F8B               	goto	u2487
  4317  0F8D  0BA6               	decfsz	??_initLCD+1,f
  4318  0F8E  2F8B               	goto	u2487
  4319  0F8F  0000               	nop
  4320                           
  4321                           ;lcd.h: 62: pulse();
  4322  0F90  120A  158A  2210  120A  158A  	fcall	_pulse
  4323                           
  4324                           ;lcd.h: 63: _delay((unsigned long)((10)*(8000000/4000.0)));
  4325  0F95  301A               	movlw	26
  4326  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  4327  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  4328  0F98  00A6               	movwf	??_initLCD+1
  4329  0F99  30F8               	movlw	248
  4330  0F9A  00A5               	movwf	??_initLCD
  4331  0F9B                     u2497:	
  4332  0F9B  0BA5               	decfsz	??_initLCD,f
  4333  0F9C  2F9B               	goto	u2497
  4334  0F9D  0BA6               	decfsz	??_initLCD+1,f
  4335  0F9E  2F9B               	goto	u2497
  4336  0F9F  0000               	nop
  4337                           
  4338                           ;lcd.h: 64: pulse();
  4339  0FA0  120A  158A  2210  120A  158A  	fcall	_pulse
  4340                           
  4341                           ;lcd.h: 65: _delay((unsigned long)((10)*(8000000/4000.0)));
  4342  0FA5  301A               	movlw	26
  4343  0FA6  1283               	bcf	3,5	;RP0=0, select bank0
  4344  0FA7  1303               	bcf	3,6	;RP1=0, select bank0
  4345  0FA8  00A6               	movwf	??_initLCD+1
  4346  0FA9  30F8               	movlw	248
  4347  0FAA  00A5               	movwf	??_initLCD
  4348  0FAB                     u2507:	
  4349  0FAB  0BA5               	decfsz	??_initLCD,f
  4350  0FAC  2FAB               	goto	u2507
  4351  0FAD  0BA6               	decfsz	??_initLCD+1,f
  4352  0FAE  2FAB               	goto	u2507
  4353  0FAF  0000               	nop
  4354                           
  4355                           ;lcd.h: 66: LCDSetBits(0x20);
  4356  0FB0  3020               	movlw	32
  4357  0FB1  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  4358                           
  4359                           ;lcd.h: 67: pulse();
  4360  0FB6  120A  158A  2210  120A  158A  	fcall	_pulse
  4361                           
  4362                           ;lcd.h: 69: LCDcmd(0x28);
  4363  0FBB  3028               	movlw	40
  4364  0FBC  120A  158A  2311  120A  158A  	fcall	_LCDcmd
  4365                           
  4366                           ;lcd.h: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  4367  0FC1  301A               	movlw	26
  4368  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4369  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4370  0FC4  00A6               	movwf	??_initLCD+1
  4371  0FC5  30F8               	movlw	248
  4372  0FC6  00A5               	movwf	??_initLCD
  4373  0FC7                     u2517:	
  4374  0FC7  0BA5               	decfsz	??_initLCD,f
  4375  0FC8  2FC7               	goto	u2517
  4376  0FC9  0BA6               	decfsz	??_initLCD+1,f
  4377  0FCA  2FC7               	goto	u2517
  4378  0FCB  0000               	nop
  4379                           
  4380                           ;lcd.h: 71: LCDcmd(0x10);
  4381  0FCC  3010               	movlw	16
  4382  0FCD  120A  158A  2311  120A  158A  	fcall	_LCDcmd
  4383                           
  4384                           ;lcd.h: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  4385  0FD2  301A               	movlw	26
  4386  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0FD5  00A6               	movwf	??_initLCD+1
  4389  0FD6  30F8               	movlw	248
  4390  0FD7  00A5               	movwf	??_initLCD
  4391  0FD8                     u2527:	
  4392  0FD8  0BA5               	decfsz	??_initLCD,f
  4393  0FD9  2FD8               	goto	u2527
  4394  0FDA  0BA6               	decfsz	??_initLCD+1,f
  4395  0FDB  2FD8               	goto	u2527
  4396  0FDC  0000               	nop
  4397                           
  4398                           ;lcd.h: 73: LCDcmd(0x0F);
  4399  0FDD  300F               	movlw	15
  4400  0FDE  120A  158A  2311  120A  158A  	fcall	_LCDcmd
  4401                           
  4402                           ;lcd.h: 74: _delay((unsigned long)((10)*(8000000/4000.0)));
  4403  0FE3  301A               	movlw	26
  4404  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0FE6  00A6               	movwf	??_initLCD+1
  4407  0FE7  30F8               	movlw	248
  4408  0FE8  00A5               	movwf	??_initLCD
  4409  0FE9                     u2537:	
  4410  0FE9  0BA5               	decfsz	??_initLCD,f
  4411  0FEA  2FE9               	goto	u2537
  4412  0FEB  0BA6               	decfsz	??_initLCD+1,f
  4413  0FEC  2FE9               	goto	u2537
  4414  0FED  0000               	nop
  4415                           
  4416                           ;lcd.h: 75: LCDcmd(0x06);
  4417  0FEE  3006               	movlw	6
  4418  0FEF  120A  158A  2311  120A  158A  	fcall	_LCDcmd
  4419                           
  4420                           ;lcd.h: 76: _delay((unsigned long)((10)*(8000000/4000.0)));
  4421  0FF4  301A               	movlw	26
  4422  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0FF7  00A6               	movwf	??_initLCD+1
  4425  0FF8  30F8               	movlw	248
  4426  0FF9  00A5               	movwf	??_initLCD
  4427  0FFA                     u2547:	
  4428  0FFA  0BA5               	decfsz	??_initLCD,f
  4429  0FFB  2FFA               	goto	u2547
  4430  0FFC  0BA6               	decfsz	??_initLCD+1,f
  4431  0FFD  2FFA               	goto	u2547
  4432  0FFE  0000               	nop
  4433  0FFF  0008               	return
  4434  1000                     __end_of_initLCD:	
  4435                           
  4436                           	psect	text20
  4437  0B11                     __ptext20:	
  4438 ;; *************** function _LCDcmd *****************
  4439 ;; Defined at:
  4440 ;;		line 111 in file "lcd.h"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  a               1    wreg     unsigned char 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  a               1    4[BANK0 ] unsigned char 
  4445 ;; Return value:  Size  Location     Type
  4446 ;;		None               void
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0, pclath, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4454 ;;      Params:         0       0       0       0       0
  4455 ;;      Locals:         0       1       0       0       0
  4456 ;;      Temps:          0       2       0       0       0
  4457 ;;      Totals:         0       3       0       0       0
  4458 ;;Total ram usage:        3 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    3
  4461 ;; This function calls:
  4462 ;;		_LCDSetBits
  4463 ;;		_pulse
  4464 ;; This function is called by:
  4465 ;;		_initLCD
  4466 ;;		_clearLCD
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function _LCDcmd
  4472  0B11                     _LCDcmd:	
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  4476                           ;LCDcmd@a stored from wreg
  4477  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  4478  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  4479  0B13  00A4               	movwf	LCDcmd@a
  4480                           
  4481                           ;lcd.h: 113: LCDSetBits(a);
  4482  0B14  0824               	movf	LCDcmd@a,w
  4483  0B15  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  4484                           
  4485                           ;lcd.h: 114: RB0 = 0;
  4486  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0B1C  1006               	bcf	6,0	;volatile
  4489                           
  4490                           ;lcd.h: 115: RD7 = 0;
  4491  0B1D  1388               	bcf	8,7	;volatile
  4492                           
  4493                           ;lcd.h: 116: pulse();
  4494  0B1E  120A  158A  2210  120A  158A  	fcall	_pulse
  4495                           
  4496                           ;lcd.h: 117: a = a<<4;
  4497  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  4498  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0B25  0824               	movf	LCDcmd@a,w
  4500  0B26  00A2               	movwf	??_LCDcmd
  4501  0B27  3003               	movlw	3
  4502  0B28                     u1345:	
  4503  0B28  1003               	clrc
  4504  0B29  0DA2               	rlf	??_LCDcmd,f
  4505  0B2A  3EFF               	addlw	-1
  4506  0B2B  1D03               	skipz
  4507  0B2C  2B28               	goto	u1345
  4508  0B2D  1003               	clrc
  4509  0B2E  0D22               	rlf	??_LCDcmd,w
  4510  0B2F  00A3               	movwf	??_LCDcmd+1
  4511  0B30  0823               	movf	??_LCDcmd+1,w
  4512  0B31  00A4               	movwf	LCDcmd@a
  4513                           
  4514                           ;lcd.h: 118: LCDSetBits(a);
  4515  0B32  0824               	movf	LCDcmd@a,w
  4516  0B33  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  4517                           
  4518                           ;lcd.h: 119: pulse();
  4519  0B38  120A  158A  2210   	fcall	_pulse
  4520  0B3B  0008               	return
  4521  0B3C                     __end_of_LCDcmd:	
  4522                           
  4523                           	psect	text21
  4524  0046                     __ptext21:	
  4525 ;; *************** function _displayLCD *****************
  4526 ;; Defined at:
  4527 ;;		line 179 in file "PIC16F917 Battery Management.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  disp            2   24[BANK0 ] int 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  temp2           4   31[BANK0 ] unsigned char [4]
  4532 ;;  temp1           4   27[BANK0 ] unsigned char [4]
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4542 ;;      Params:         0       2       0       0       0
  4543 ;;      Locals:         0       8       0       0       0
  4544 ;;      Temps:          0       1       0       0       0
  4545 ;;      Totals:         0      11       0       0       0
  4546 ;;Total ram usage:       11 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    5
  4549 ;; This function calls:
  4550 ;;		_LCDSetCursor
  4551 ;;		_LCDWriteString
  4552 ;;		_uint8ToASCII
  4553 ;; This function is called by:
  4554 ;;		_main
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _displayLCD
  4560  0046                     _displayLCD:	
  4561                           
  4562                           ;PIC16F917 Battery Management.c: 181: char temp1[4] = {0,0,0,0};
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4566  0046  1683               	bsf	3,5	;RP0=1, select bank1
  4567  0047  1303               	bcf	3,6	;RP1=0, select bank1
  4568  0048  0855               	movf	(displayLCD@F2774+3)^(0+128),w
  4569  0049  1283               	bcf	3,5	;RP0=0, select bank0
  4570  004A  1303               	bcf	3,6	;RP1=0, select bank0
  4571  004B  00BE               	movwf	displayLCD@temp1+3
  4572  004C  1683               	bsf	3,5	;RP0=1, select bank1
  4573  004D  1303               	bcf	3,6	;RP1=0, select bank1
  4574  004E  0854               	movf	(displayLCD@F2774+2)^(0+128),w
  4575  004F  1283               	bcf	3,5	;RP0=0, select bank0
  4576  0050  1303               	bcf	3,6	;RP1=0, select bank0
  4577  0051  00BD               	movwf	displayLCD@temp1+2
  4578  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4579  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4580  0054  0853               	movf	(displayLCD@F2774+1)^(0+128),w
  4581  0055  1283               	bcf	3,5	;RP0=0, select bank0
  4582  0056  1303               	bcf	3,6	;RP1=0, select bank0
  4583  0057  00BC               	movwf	displayLCD@temp1+1
  4584  0058  1683               	bsf	3,5	;RP0=1, select bank1
  4585  0059  1303               	bcf	3,6	;RP1=0, select bank1
  4586  005A  0852               	movf	displayLCD@F2774^(0+128),w
  4587  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4588  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4589  005D  00BB               	movwf	displayLCD@temp1
  4590                           
  4591                           ;PIC16F917 Battery Management.c: 182: char temp2[4] = {0,0,0,0};
  4592  005E  1683               	bsf	3,5	;RP0=1, select bank1
  4593  005F  1303               	bcf	3,6	;RP1=0, select bank1
  4594  0060  0859               	movf	(displayLCD@F2776+3)^(0+128),w
  4595  0061  1283               	bcf	3,5	;RP0=0, select bank0
  4596  0062  1303               	bcf	3,6	;RP1=0, select bank0
  4597  0063  00C2               	movwf	displayLCD@temp2+3
  4598  0064  1683               	bsf	3,5	;RP0=1, select bank1
  4599  0065  1303               	bcf	3,6	;RP1=0, select bank1
  4600  0066  0858               	movf	(displayLCD@F2776+2)^(0+128),w
  4601  0067  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0068  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0069  00C1               	movwf	displayLCD@temp2+2
  4604  006A  1683               	bsf	3,5	;RP0=1, select bank1
  4605  006B  1303               	bcf	3,6	;RP1=0, select bank1
  4606  006C  0857               	movf	(displayLCD@F2776+1)^(0+128),w
  4607  006D  1283               	bcf	3,5	;RP0=0, select bank0
  4608  006E  1303               	bcf	3,6	;RP1=0, select bank0
  4609  006F  00C0               	movwf	displayLCD@temp2+1
  4610  0070  1683               	bsf	3,5	;RP0=1, select bank1
  4611  0071  1303               	bcf	3,6	;RP1=0, select bank1
  4612  0072  0856               	movf	displayLCD@F2776^(0+128),w
  4613  0073  1283               	bcf	3,5	;RP0=0, select bank0
  4614  0074  1303               	bcf	3,6	;RP1=0, select bank0
  4615  0075  00BF               	movwf	displayLCD@temp2
  4616                           
  4617                           ;PIC16F917 Battery Management.c: 184: switch( disp )
  4618  0076  28DA               	goto	l2256
  4619  0077                     l2240:	
  4620                           ;PIC16F917 Battery Management.c: 185: {
  4621                           ;PIC16F917 Battery Management.c: 188: case 0:
  4622                           
  4623                           
  4624                           ;PIC16F917 Battery Management.c: 189: {
  4625                           ;PIC16F917 Battery Management.c: 190: uint8ToASCII( temp1, 250);
  4626  0077  30FA               	movlw	250
  4627  0078  00BA               	movwf	??_displayLCD
  4628  0079  083A               	movf	??_displayLCD,w
  4629  007A  00A9               	movwf	uint8ToASCII@num
  4630  007B  303B               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4631  007C  120A  118A  21A8  120A  118A  	fcall	_uint8ToASCII
  4632                           
  4633                           ;PIC16F917 Battery Management.c: 191: LCDSetCursor(0x00);
  4634  0081  3000               	movlw	0
  4635  0082  120A  158A  23A3  120A  118A  	fcall	_LCDSetCursor
  4636                           
  4637                           ;PIC16F917 Battery Management.c: 192: LCDWriteString("Voltage:");
  4638  0087  3027               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4639  0088  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0089  1303               	bcf	3,6	;RP1=0, select bank0
  4641  008A  00A5               	movwf	LCDWriteString@a
  4642  008B  3080               	movlw	128
  4643  008C  00A6               	movwf	LCDWriteString@a+1
  4644  008D  120A  158A  2453  120A  118A  	fcall	_LCDWriteString
  4645                           
  4646                           ;PIC16F917 Battery Management.c: 193: LCDWriteString(temp1);
  4647  0092  303B               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4648  0093  1283               	bcf	3,5	;RP0=0, select bank0
  4649  0094  1303               	bcf	3,6	;RP1=0, select bank0
  4650  0095  00A5               	movwf	LCDWriteString@a
  4651  0096  3000               	movlw	0
  4652  0097  00A6               	movwf	LCDWriteString@a+1
  4653  0098  120A  158A  2453  120A  118A  	fcall	_LCDWriteString
  4654                           
  4655                           ;PIC16F917 Battery Management.c: 194: LCDWriteString(" V      ");
  4656  009D  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4657  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4658  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4659  00A0  00A5               	movwf	LCDWriteString@a
  4660  00A1  3080               	movlw	128
  4661  00A2  00A6               	movwf	LCDWriteString@a+1
  4662  00A3  120A  158A  2453  120A  118A  	fcall	_LCDWriteString
  4663                           
  4664                           ;PIC16F917 Battery Management.c: 196: uint8ToASCII( temp2, 12);
  4665  00A8  300C               	movlw	12
  4666  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  4667  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  4668  00AB  00BA               	movwf	??_displayLCD
  4669  00AC  083A               	movf	??_displayLCD,w
  4670  00AD  00A9               	movwf	uint8ToASCII@num
  4671  00AE  303F               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4672  00AF  120A  118A  21A8  120A  118A  	fcall	_uint8ToASCII
  4673                           
  4674                           ;PIC16F917 Battery Management.c: 197: LCDSetCursor(0x10);
  4675  00B4  3010               	movlw	16
  4676  00B5  120A  158A  23A3  120A  118A  	fcall	_LCDSetCursor
  4677                           
  4678                           ;PIC16F917 Battery Management.c: 198: LCDWriteString("Current:");
  4679  00BA  3030               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  4680  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  4681  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4682  00BD  00A5               	movwf	LCDWriteString@a
  4683  00BE  3080               	movlw	128
  4684  00BF  00A6               	movwf	LCDWriteString@a+1
  4685  00C0  120A  158A  2453  120A  118A  	fcall	_LCDWriteString
  4686                           
  4687                           ;PIC16F917 Battery Management.c: 199: LCDWriteString(temp2);
  4688  00C5  303F               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4689  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  4690  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  4691  00C8  00A5               	movwf	LCDWriteString@a
  4692  00C9  3000               	movlw	0
  4693  00CA  00A6               	movwf	LCDWriteString@a+1
  4694  00CB  120A  158A  2453  120A  118A  	fcall	_LCDWriteString
  4695                           
  4696                           ;PIC16F917 Battery Management.c: 200: LCDWriteString("A       ");
  4697  00D0  3015               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4698  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4699  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4700  00D3  00A5               	movwf	LCDWriteString@a
  4701  00D4  3080               	movlw	128
  4702  00D5  00A6               	movwf	LCDWriteString@a+1
  4703  00D6  120A  158A  2453   	fcall	_LCDWriteString
  4704                           
  4705                           ;PIC16F917 Battery Management.c: 254: }
  4706                           ;PIC16F917 Battery Management.c: 255: }
  4707                           
  4708                           ;PIC16F917 Battery Management.c: 241: {
  4709                           ;PIC16F917 Battery Management.c: 253: break;
  4710                           
  4711                           ;PIC16F917 Battery Management.c: 237: }
  4712                           ;PIC16F917 Battery Management.c: 240: case 3:
  4713                           
  4714                           ;PIC16F917 Battery Management.c: 224: {
  4715                           ;PIC16F917 Battery Management.c: 236: break;
  4716                           
  4717                           ;PIC16F917 Battery Management.c: 220: }
  4718                           ;PIC16F917 Battery Management.c: 223: case 2:
  4719                           
  4720                           ;PIC16F917 Battery Management.c: 207: {
  4721                           ;PIC16F917 Battery Management.c: 219: break;
  4722                           
  4723                           ;PIC16F917 Battery Management.c: 203: }
  4724                           ;PIC16F917 Battery Management.c: 206: case 1:
  4725                           
  4726                           ;PIC16F917 Battery Management.c: 202: break;
  4727  00D9  0008               	return
  4728  00DA                     l2256:	
  4729                           
  4730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4731                           ; Switch size 1, requested type "space"
  4732                           ; Number of cases is 1, Range of values is 0 to 0
  4733                           ; switch strategies available:
  4734                           ; Name         Instructions Cycles
  4735                           ; simple_byte            4     3 (average)
  4736                           ; direct_byte           11     8 (fixed)
  4737                           ; jumptable            260     6 (fixed)
  4738                           ;	Chosen strategy is simple_byte
  4739  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4740  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  4741  00DC  0839               	movf	displayLCD@disp+1,w
  4742  00DD  3A00               	xorlw	0	; case 0
  4743  00DE  1903               	skipnz
  4744  00DF  28E1               	goto	l2408
  4745  00E0  28EF               	goto	l292
  4746  00E1                     l2408:	
  4747                           
  4748                           ; Switch size 1, requested type "space"
  4749                           ; Number of cases is 4, Range of values is 0 to 3
  4750                           ; switch strategies available:
  4751                           ; Name         Instructions Cycles
  4752                           ; simple_byte           13     7 (average)
  4753                           ; direct_byte           20     8 (fixed)
  4754                           ; jumptable            260     6 (fixed)
  4755                           ;	Chosen strategy is simple_byte
  4756  00E1  0838               	movf	displayLCD@disp,w
  4757  00E2  3A00               	xorlw	0	; case 0
  4758  00E3  1903               	skipnz
  4759  00E4  2877               	goto	l2240
  4760  00E5  3A01               	xorlw	1	; case 1
  4761  00E6  1903               	skipnz
  4762  00E7  28EF               	goto	l292
  4763  00E8  3A03               	xorlw	3	; case 2
  4764  00E9  1903               	skipnz
  4765  00EA  28EF               	goto	l292
  4766  00EB  3A01               	xorlw	1	; case 3
  4767  00EC  1903               	skipnz
  4768  00ED  28EF               	goto	l292
  4769  00EE  28EF               	goto	l292
  4770  00EF                     l292:	
  4771  00EF  0008               	return
  4772  00F0                     __end_of_displayLCD:	
  4773                           
  4774                           	psect	text22
  4775  01A8                     __ptext22:	
  4776 ;; *************** function _uint8ToASCII *****************
  4777 ;; Defined at:
  4778 ;;		line 176 in file "lcd.h"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  returnVal       1    wreg     PTR unsigned char 
  4781 ;;		 -> displayLCD@temp2(4), displayLCD@temp1(4), 
  4782 ;;  num             1    9[BANK0 ] unsigned char 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  returnVal       1   23[BANK0 ] PTR unsigned char 
  4785 ;;		 -> displayLCD@temp2(4), displayLCD@temp1(4), 
  4786 ;;  k               1   20[BANK0 ] unsigned char 
  4787 ;;  j               2   18[BANK0 ] int 
  4788 ;;  i               1   22[BANK0 ] unsigned char 
  4789 ;;  divisor         1   21[BANK0 ] unsigned char 
  4790 ;;  leading         1   17[BANK0 ] unsigned char 
  4791 ;;  prevSum         1   16[BANK0 ] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4801 ;;      Params:         0       1       0       0       0
  4802 ;;      Locals:         0       8       0       0       0
  4803 ;;      Temps:          0       6       0       0       0
  4804 ;;      Totals:         0      15       0       0       0
  4805 ;;Total ram usage:       15 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    3
  4808 ;; This function calls:
  4809 ;;		___awdiv
  4810 ;;		___bmul
  4811 ;; This function is called by:
  4812 ;;		_displayLCD
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _uint8ToASCII
  4818  01A8                     _uint8ToASCII:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _uint8ToASCII: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4822                           ;uint8ToASCII@returnVal stored from wreg
  4823  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  4824  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  4825  01AA  00B7               	movwf	uint8ToASCII@returnVal
  4826                           
  4827                           ;lcd.h: 178: uint8_t divisor = 100;
  4828  01AB  3064               	movlw	100
  4829  01AC  00AA               	movwf	??_uint8ToASCII
  4830  01AD  082A               	movf	??_uint8ToASCII,w
  4831  01AE  00B5               	movwf	uint8ToASCII@divisor
  4832                           
  4833                           ;lcd.h: 179: uint8_t prevSum = 0;
  4834  01AF  01B0               	clrf	uint8ToASCII@prevSum
  4835                           
  4836                           ;lcd.h: 180: bool leading = 1;
  4837  01B0  01B1               	clrf	uint8ToASCII@leading
  4838  01B1  0AB1               	incf	uint8ToASCII@leading,f
  4839                           
  4840                           ;lcd.h: 181: uint8_t i = 0;
  4841  01B2  01B6               	clrf	uint8ToASCII@i
  4842                           
  4843                           ;lcd.h: 184: for (int j = 0; j <= 2; j++)
  4844  01B3  01B2               	clrf	uint8ToASCII@j
  4845  01B4  01B3               	clrf	uint8ToASCII@j+1
  4846  01B5  0833               	movf	uint8ToASCII@j+1,w
  4847  01B6  3A80               	xorlw	128
  4848  01B7  00FF               	movwf	127
  4849  01B8  3080               	movlw	128
  4850  01B9  027F               	subwf	127,w
  4851  01BA  1D03               	skipz
  4852  01BB  29BE               	goto	u1965
  4853  01BC  3003               	movlw	3
  4854  01BD  0232               	subwf	uint8ToASCII@j,w
  4855  01BE                     u1965:	
  4856  01BE  1803               	btfsc	3,0
  4857  01BF  29DA               	goto	l1982
  4858  01C0                     l1976:	
  4859                           
  4860                           ;lcd.h: 185: {
  4861                           ;lcd.h: 186: returnVal[j] = 0x00;
  4862  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  4863  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  4864  01C2  0832               	movf	uint8ToASCII@j,w
  4865  01C3  0737               	addwf	uint8ToASCII@returnVal,w
  4866  01C4  00AA               	movwf	??_uint8ToASCII
  4867  01C5  082A               	movf	??_uint8ToASCII,w
  4868  01C6  0084               	movwf	4
  4869  01C7  1383               	bcf	3,7	;select IRP bank0
  4870  01C8  0180               	clrf	0
  4871  01C9  3001               	movlw	1
  4872  01CA  07B2               	addwf	uint8ToASCII@j,f
  4873  01CB  1803               	skipnc
  4874  01CC  0AB3               	incf	uint8ToASCII@j+1,f
  4875  01CD  3000               	movlw	0
  4876  01CE  07B3               	addwf	uint8ToASCII@j+1,f
  4877  01CF  0833               	movf	uint8ToASCII@j+1,w
  4878  01D0  3A80               	xorlw	128
  4879  01D1  00FF               	movwf	127
  4880  01D2  3080               	movlw	128
  4881  01D3  027F               	subwf	127,w
  4882  01D4  1D03               	skipz
  4883  01D5  29D8               	goto	u1975
  4884  01D6  3003               	movlw	3
  4885  01D7  0232               	subwf	uint8ToASCII@j,w
  4886  01D8                     u1975:	
  4887  01D8  1C03               	skipc
  4888  01D9  29C0               	goto	l1976
  4889  01DA                     l1982:	
  4890                           ;lcd.h: 187: }
  4891                           ;lcd.h: 189: do
  4892                           
  4893                           
  4894                           ;lcd.h: 190: {
  4895                           ;lcd.h: 194: returnVal[i] = ( num - prevSum ) / divisor;
  4896  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  4897  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  4898  01DC  0835               	movf	uint8ToASCII@divisor,w
  4899  01DD  00AA               	movwf	??_uint8ToASCII
  4900  01DE  01AB               	clrf	??_uint8ToASCII+1
  4901  01DF  082A               	movf	??_uint8ToASCII,w
  4902  01E0  00A0               	movwf	___awdiv@divisor
  4903  01E1  082B               	movf	??_uint8ToASCII+1,w
  4904  01E2  00A1               	movwf	___awdiv@divisor+1
  4905  01E3  0830               	movf	uint8ToASCII@prevSum,w
  4906  01E4  00AC               	movwf	??_uint8ToASCII+2
  4907  01E5  01AD               	clrf	??_uint8ToASCII+3
  4908  01E6  09AC               	comf	??_uint8ToASCII+2,f
  4909  01E7  09AD               	comf	??_uint8ToASCII+3,f
  4910  01E8  0AAC               	incf	??_uint8ToASCII+2,f
  4911  01E9  1903               	skipnz
  4912  01EA  0AAD               	incf	??_uint8ToASCII+3,f
  4913  01EB  0829               	movf	uint8ToASCII@num,w
  4914  01EC  072C               	addwf	??_uint8ToASCII+2,w
  4915  01ED  00A2               	movwf	___awdiv@dividend
  4916  01EE  082D               	movf	??_uint8ToASCII+3,w
  4917  01EF  1803               	skipnc
  4918  01F0  0A2D               	incf	??_uint8ToASCII+3,w
  4919  01F1  00A3               	movwf	___awdiv@dividend+1
  4920  01F2  120A  158A  24EA  120A  118A  	fcall	___awdiv
  4921  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  4922  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  4923  01F9  0820               	movf	?___awdiv,w
  4924  01FA  00AE               	movwf	??_uint8ToASCII+4
  4925  01FB  0836               	movf	uint8ToASCII@i,w
  4926  01FC  0737               	addwf	uint8ToASCII@returnVal,w
  4927  01FD  00AF               	movwf	??_uint8ToASCII+5
  4928  01FE  082F               	movf	??_uint8ToASCII+5,w
  4929  01FF  0084               	movwf	4
  4930  0200  082E               	movf	??_uint8ToASCII+4,w
  4931  0201  1383               	bcf	3,7	;select IRP bank0
  4932  0202  0080               	movwf	0
  4933                           
  4934                           ;lcd.h: 196: prevSum += returnVal[i]*divisor;
  4935  0203  0835               	movf	uint8ToASCII@divisor,w
  4936  0204  00AA               	movwf	??_uint8ToASCII
  4937  0205  082A               	movf	??_uint8ToASCII,w
  4938  0206  00A0               	movwf	___bmul@multiplicand
  4939  0207  0836               	movf	uint8ToASCII@i,w
  4940  0208  0737               	addwf	uint8ToASCII@returnVal,w
  4941  0209  00AB               	movwf	??_uint8ToASCII+1
  4942  020A  082B               	movf	??_uint8ToASCII+1,w
  4943  020B  0084               	movwf	4
  4944  020C  0800               	movf	0,w
  4945  020D  120A  158A  2243  120A  118A  	fcall	___bmul
  4946  0212  1283               	bcf	3,5	;RP0=0, select bank0
  4947  0213  1303               	bcf	3,6	;RP1=0, select bank0
  4948  0214  00AC               	movwf	??_uint8ToASCII+2
  4949  0215  082C               	movf	??_uint8ToASCII+2,w
  4950  0216  07B0               	addwf	uint8ToASCII@prevSum,f
  4951                           
  4952                           ;lcd.h: 198: divisor = divisor/10;
  4953  0217  300A               	movlw	10
  4954  0218  00A0               	movwf	___awdiv@divisor
  4955  0219  3000               	movlw	0
  4956  021A  00A1               	movwf	___awdiv@divisor+1
  4957  021B  0835               	movf	uint8ToASCII@divisor,w
  4958  021C  00AA               	movwf	??_uint8ToASCII
  4959  021D  01AB               	clrf	??_uint8ToASCII+1
  4960  021E  082A               	movf	??_uint8ToASCII,w
  4961  021F  00A2               	movwf	___awdiv@dividend
  4962  0220  082B               	movf	??_uint8ToASCII+1,w
  4963  0221  00A3               	movwf	___awdiv@dividend+1
  4964  0222  120A  158A  24EA  120A  118A  	fcall	___awdiv
  4965  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0228  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0229  0820               	movf	?___awdiv,w
  4968  022A  00AC               	movwf	??_uint8ToASCII+2
  4969  022B  082C               	movf	??_uint8ToASCII+2,w
  4970  022C  00B5               	movwf	uint8ToASCII@divisor
  4971                           
  4972                           ;lcd.h: 200: if (leading == 1)
  4973  022D  0331               	decf	uint8ToASCII@leading,w
  4974  022E  1D03               	btfss	3,2
  4975  022F  2A3F               	goto	l1994
  4976                           
  4977                           ;lcd.h: 201: {
  4978                           ;lcd.h: 202: if ( returnVal[i] != 0 )
  4979  0230  0836               	movf	uint8ToASCII@i,w
  4980  0231  0737               	addwf	uint8ToASCII@returnVal,w
  4981  0232  00AA               	movwf	??_uint8ToASCII
  4982  0233  082A               	movf	??_uint8ToASCII,w
  4983  0234  0084               	movwf	4
  4984  0235  1383               	bcf	3,7	;select IRP bank0
  4985  0236  0800               	movf	0,w
  4986  0237  1903               	btfsc	3,2
  4987  0238  2A43               	goto	l162
  4988                           
  4989                           ;lcd.h: 203: {
  4990                           ;lcd.h: 205: i++;
  4991  0239  3001               	movlw	1
  4992  023A  00AA               	movwf	??_uint8ToASCII
  4993  023B  082A               	movf	??_uint8ToASCII,w
  4994  023C  07B6               	addwf	uint8ToASCII@i,f
  4995                           
  4996                           ;lcd.h: 206: leading = 0;
  4997  023D  01B1               	clrf	uint8ToASCII@leading
  4998                           
  4999                           ;lcd.h: 207: }
  5000                           ;lcd.h: 208: }
  5001  023E  2A43               	goto	l162
  5002  023F                     l1994:	
  5003                           
  5004                           ;lcd.h: 209: else
  5005                           ;lcd.h: 210: i++;
  5006  023F  3001               	movlw	1
  5007  0240  00AA               	movwf	??_uint8ToASCII
  5008  0241  082A               	movf	??_uint8ToASCII,w
  5009  0242  07B6               	addwf	uint8ToASCII@i,f
  5010  0243                     l162:	
  5011                           
  5012                           ;lcd.h: 212: } while ( divisor > 0);
  5013  0243  0835               	movf	uint8ToASCII@divisor,w
  5014  0244  1D03               	btfss	3,2
  5015  0245  29DA               	goto	l1982
  5016                           
  5017                           ;lcd.h: 217: i--;
  5018  0246  3001               	movlw	1
  5019  0247  02B6               	subwf	uint8ToASCII@i,f
  5020                           
  5021                           ;lcd.h: 219: for ( uint8_t k = 0; k <= i ; k++ )
  5022  0248  01B4               	clrf	uint8ToASCII@k
  5023  0249                     l2004:	
  5024  0249  0834               	movf	uint8ToASCII@k,w
  5025  024A  0236               	subwf	uint8ToASCII@i,w
  5026  024B  1C03               	btfss	3,0
  5027  024C  0008               	return
  5028                           
  5029                           ;lcd.h: 220: {
  5030                           ;lcd.h: 223: returnVal[k] = returnVal[k] | 0x30;
  5031  024D  0834               	movf	uint8ToASCII@k,w
  5032  024E  0737               	addwf	uint8ToASCII@returnVal,w
  5033  024F  00AA               	movwf	??_uint8ToASCII
  5034  0250  082A               	movf	??_uint8ToASCII,w
  5035  0251  0084               	movwf	4
  5036  0252  1383               	bcf	3,7	;select IRP bank0
  5037  0253  0800               	movf	0,w
  5038  0254  3830               	iorlw	48
  5039  0255  00AB               	movwf	??_uint8ToASCII+1
  5040  0256  0834               	movf	uint8ToASCII@k,w
  5041  0257  0737               	addwf	uint8ToASCII@returnVal,w
  5042  0258  00AC               	movwf	??_uint8ToASCII+2
  5043  0259  082C               	movf	??_uint8ToASCII+2,w
  5044  025A  0084               	movwf	4
  5045  025B  082B               	movf	??_uint8ToASCII+1,w
  5046  025C  0080               	movwf	0
  5047  025D  3001               	movlw	1
  5048  025E  00AA               	movwf	??_uint8ToASCII
  5049  025F  082A               	movf	??_uint8ToASCII,w
  5050  0260  07B4               	addwf	uint8ToASCII@k,f
  5051  0261  2A49               	goto	l2004
  5052  0262                     __end_of_uint8ToASCII:	
  5053                           
  5054                           	psect	text23
  5055  0A43                     __ptext23:	
  5056 ;; *************** function ___bmul *****************
  5057 ;; Defined at:
  5058 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  multiplier      1    wreg     unsigned char 
  5061 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5064 ;;  product         1    2[BANK0 ] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      unsigned char 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         0       1       0       0       0
  5075 ;;      Locals:         0       2       0       0       0
  5076 ;;      Temps:          0       1       0       0       0
  5077 ;;      Totals:         0       4       0       0       0
  5078 ;;Total ram usage:        4 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    2
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_uint8ToASCII
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function ___bmul
  5090  0A43                     ___bmul:	
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5094                           ;___bmul@multiplier stored from wreg
  5095  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  5096  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  5097  0A45  00A3               	movwf	___bmul@multiplier
  5098  0A46  01A2               	clrf	___bmul@product
  5099  0A47                     l1678:	
  5100  0A47  1C23               	btfss	___bmul@multiplier,0
  5101  0A48  2A4D               	goto	l1682
  5102  0A49  0820               	movf	___bmul@multiplicand,w
  5103  0A4A  00A1               	movwf	??___bmul
  5104  0A4B  0821               	movf	??___bmul,w
  5105  0A4C  07A2               	addwf	___bmul@product,f
  5106  0A4D                     l1682:	
  5107  0A4D  1003               	clrc
  5108  0A4E  0DA0               	rlf	___bmul@multiplicand,f
  5109  0A4F  1003               	clrc
  5110  0A50  0CA3               	rrf	___bmul@multiplier,f
  5111  0A51  0823               	movf	___bmul@multiplier,w
  5112  0A52  1D03               	btfss	3,2
  5113  0A53  2A47               	goto	l1678
  5114  0A54  0822               	movf	___bmul@product,w
  5115  0A55  0008               	return
  5116  0A56                     __end_of___bmul:	
  5117                           
  5118                           	psect	text24
  5119  0CEA                     __ptext24:	
  5120 ;; *************** function ___awdiv *****************
  5121 ;; Defined at:
  5122 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  divisor         2    0[BANK0 ] int 
  5125 ;;  dividend        2    2[BANK0 ] int 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  quotient        2    7[BANK0 ] int 
  5128 ;;  sign            1    6[BANK0 ] unsigned char 
  5129 ;;  counter         1    5[BANK0 ] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  2    0[BANK0 ] int 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5139 ;;      Params:         0       4       0       0       0
  5140 ;;      Locals:         0       4       0       0       0
  5141 ;;      Temps:          0       1       0       0       0
  5142 ;;      Totals:         0       9       0       0       0
  5143 ;;Total ram usage:        9 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    2
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_uint8ToASCII
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function ___awdiv
  5155  0CEA                     ___awdiv:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5159  0CEA  1283               	bcf	3,5	;RP0=0, select bank0
  5160  0CEB  1303               	bcf	3,6	;RP1=0, select bank0
  5161  0CEC  01A6               	clrf	___awdiv@sign
  5162  0CED  1FA1               	btfss	___awdiv@divisor+1,7
  5163  0CEE  2CF6               	goto	l1698
  5164  0CEF  09A0               	comf	___awdiv@divisor,f
  5165  0CF0  09A1               	comf	___awdiv@divisor+1,f
  5166  0CF1  0AA0               	incf	___awdiv@divisor,f
  5167  0CF2  1903               	skipnz
  5168  0CF3  0AA1               	incf	___awdiv@divisor+1,f
  5169  0CF4  01A6               	clrf	___awdiv@sign
  5170  0CF5  0AA6               	incf	___awdiv@sign,f
  5171  0CF6                     l1698:	
  5172  0CF6  1FA3               	btfss	___awdiv@dividend+1,7
  5173  0CF7  2D01               	goto	l1704
  5174  0CF8  09A2               	comf	___awdiv@dividend,f
  5175  0CF9  09A3               	comf	___awdiv@dividend+1,f
  5176  0CFA  0AA2               	incf	___awdiv@dividend,f
  5177  0CFB  1903               	skipnz
  5178  0CFC  0AA3               	incf	___awdiv@dividend+1,f
  5179  0CFD  3001               	movlw	1
  5180  0CFE  00A4               	movwf	??___awdiv
  5181  0CFF  0824               	movf	??___awdiv,w
  5182  0D00  06A6               	xorwf	___awdiv@sign,f
  5183  0D01                     l1704:	
  5184  0D01  01A7               	clrf	___awdiv@quotient
  5185  0D02  01A8               	clrf	___awdiv@quotient+1
  5186  0D03  0820               	movf	___awdiv@divisor,w
  5187  0D04  0421               	iorwf	___awdiv@divisor+1,w
  5188  0D05  1903               	btfsc	3,2
  5189  0D06  2D38               	goto	l1726
  5190  0D07  01A5               	clrf	___awdiv@counter
  5191  0D08  0AA5               	incf	___awdiv@counter,f
  5192  0D09                     l1714:	
  5193  0D09  1BA1               	btfsc	___awdiv@divisor+1,7
  5194  0D0A  2D17               	goto	l1716
  5195  0D0B  3001               	movlw	1
  5196  0D0C                     u1425:	
  5197  0D0C  1003               	clrc
  5198  0D0D  0DA0               	rlf	___awdiv@divisor,f
  5199  0D0E  0DA1               	rlf	___awdiv@divisor+1,f
  5200  0D0F  3EFF               	addlw	-1
  5201  0D10  1D03               	skipz
  5202  0D11  2D0C               	goto	u1425
  5203  0D12  3001               	movlw	1
  5204  0D13  00A4               	movwf	??___awdiv
  5205  0D14  0824               	movf	??___awdiv,w
  5206  0D15  07A5               	addwf	___awdiv@counter,f
  5207  0D16  2D09               	goto	l1714
  5208  0D17                     l1716:	
  5209  0D17  3001               	movlw	1
  5210  0D18                     u1445:	
  5211  0D18  1003               	clrc
  5212  0D19  0DA7               	rlf	___awdiv@quotient,f
  5213  0D1A  0DA8               	rlf	___awdiv@quotient+1,f
  5214  0D1B  3EFF               	addlw	-1
  5215  0D1C  1D03               	skipz
  5216  0D1D  2D18               	goto	u1445
  5217  0D1E  0821               	movf	___awdiv@divisor+1,w
  5218  0D1F  0223               	subwf	___awdiv@dividend+1,w
  5219  0D20  1D03               	skipz
  5220  0D21  2D24               	goto	u1455
  5221  0D22  0820               	movf	___awdiv@divisor,w
  5222  0D23  0222               	subwf	___awdiv@dividend,w
  5223  0D24                     u1455:	
  5224  0D24  1C03               	skipc
  5225  0D25  2D2D               	goto	l1722
  5226  0D26  0820               	movf	___awdiv@divisor,w
  5227  0D27  02A2               	subwf	___awdiv@dividend,f
  5228  0D28  0821               	movf	___awdiv@divisor+1,w
  5229  0D29  1C03               	skipc
  5230  0D2A  03A3               	decf	___awdiv@dividend+1,f
  5231  0D2B  02A3               	subwf	___awdiv@dividend+1,f
  5232  0D2C  1427               	bsf	___awdiv@quotient,0
  5233  0D2D                     l1722:	
  5234  0D2D  3001               	movlw	1
  5235  0D2E                     u1465:	
  5236  0D2E  1003               	clrc
  5237  0D2F  0CA1               	rrf	___awdiv@divisor+1,f
  5238  0D30  0CA0               	rrf	___awdiv@divisor,f
  5239  0D31  3EFF               	addlw	-1
  5240  0D32  1D03               	skipz
  5241  0D33  2D2E               	goto	u1465
  5242  0D34  3001               	movlw	1
  5243  0D35  02A5               	subwf	___awdiv@counter,f
  5244  0D36  1D03               	btfss	3,2
  5245  0D37  2D17               	goto	l1716
  5246  0D38                     l1726:	
  5247  0D38  0826               	movf	___awdiv@sign,w
  5248  0D39  1903               	btfsc	3,2
  5249  0D3A  2D40               	goto	l1730
  5250  0D3B  09A7               	comf	___awdiv@quotient,f
  5251  0D3C  09A8               	comf	___awdiv@quotient+1,f
  5252  0D3D  0AA7               	incf	___awdiv@quotient,f
  5253  0D3E  1903               	skipnz
  5254  0D3F  0AA8               	incf	___awdiv@quotient+1,f
  5255  0D40                     l1730:	
  5256  0D40  0828               	movf	___awdiv@quotient+1,w
  5257  0D41  00A1               	movwf	?___awdiv+1
  5258  0D42  0827               	movf	___awdiv@quotient,w
  5259  0D43  00A0               	movwf	?___awdiv
  5260  0D44  0008               	return
  5261  0D45                     __end_of___awdiv:	
  5262                           
  5263                           	psect	text25
  5264  0C53                     __ptext25:	
  5265 ;; *************** function _LCDWriteString *****************
  5266 ;; Defined at:
  5267 ;;		line 163 in file "lcd.h"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  a               2    5[BANK0 ] PTR const unsigned char 
  5270 ;;		 -> STR_4(9), STR_3(9), STR_2(9), STR_1(9), 
  5271 ;;		 -> displayLCD@temp2(4), displayLCD@temp1(4), 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  i               2   10[BANK0 ] int 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;		None               void
  5276 ;; Registers used:
  5277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5283 ;;      Params:         0       2       0       0       0
  5284 ;;      Locals:         0       2       0       0       0
  5285 ;;      Temps:          0       3       0       0       0
  5286 ;;      Totals:         0       7       0       0       0
  5287 ;;Total ram usage:        7 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    4
  5290 ;; This function calls:
  5291 ;;		_LCDWriteChar
  5292 ;; This function is called by:
  5293 ;;		_displayLCD
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _LCDWriteString
  5299  0C53                     _LCDWriteString:	
  5300                           
  5301                           ;lcd.h: 165: for(int i=0;a[i]!='\0';i++)
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5305  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  5306  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  5307  0C55  01AA               	clrf	LCDWriteString@i
  5308  0C56  01AB               	clrf	LCDWriteString@i+1
  5309  0C57                     l1960:	
  5310  0C57  082A               	movf	LCDWriteString@i,w
  5311  0C58  0725               	addwf	LCDWriteString@a,w
  5312  0C59  00A8               	movwf	??_LCDWriteString+1
  5313  0C5A  0826               	movf	LCDWriteString@a+1,w
  5314  0C5B  00A7               	movwf	??_LCDWriteString
  5315  0C5C  1803               	skipnc
  5316  0C5D  0AA7               	incf	??_LCDWriteString,f
  5317  0C5E  1BAA               	btfsc	LCDWriteString@i,7
  5318  0C5F  03A7               	decf	??_LCDWriteString,f
  5319  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  5320  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  5321  0C62  0827               	movf	??_LCDWriteString,w
  5322  0C63  00A9               	movwf	??_LCDWriteString+2
  5323  0C64  0829               	movf	??_LCDWriteString+2,w
  5324  0C65  00FF               	movwf	127
  5325  0C66  0828               	movf	??_LCDWriteString+1,w
  5326  0C67  0084               	movwf	4
  5327  0C68  120A  158A  2000  120A  158A  	fcall	stringtab
  5328  0C6D  3A00               	xorlw	0
  5329  0C6E  1903               	btfsc	3,2
  5330  0C6F  0008               	return
  5331                           
  5332                           ;lcd.h: 166: {
  5333                           ;lcd.h: 167: LCDWriteChar(a[i]);
  5334  0C70  082A               	movf	LCDWriteString@i,w
  5335  0C71  0725               	addwf	LCDWriteString@a,w
  5336  0C72  00A8               	movwf	??_LCDWriteString+1
  5337  0C73  0826               	movf	LCDWriteString@a+1,w
  5338  0C74  00A7               	movwf	??_LCDWriteString
  5339  0C75  1803               	skipnc
  5340  0C76  0AA7               	incf	??_LCDWriteString,f
  5341  0C77  1BAA               	btfsc	LCDWriteString@i,7
  5342  0C78  03A7               	decf	??_LCDWriteString,f
  5343  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  5344  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  5345  0C7B  0827               	movf	??_LCDWriteString,w
  5346  0C7C  00A9               	movwf	??_LCDWriteString+2
  5347  0C7D  0829               	movf	??_LCDWriteString+2,w
  5348  0C7E  00FF               	movwf	127
  5349  0C7F  0828               	movf	??_LCDWriteString+1,w
  5350  0C80  0084               	movwf	4
  5351  0C81  120A  158A  2000  120A  158A  	fcall	stringtab
  5352  0C86  120A  158A  22E7  120A  158A  	fcall	_LCDWriteChar
  5353  0C8B  3001               	movlw	1
  5354  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  5355  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  5356  0C8E  07AA               	addwf	LCDWriteString@i,f
  5357  0C8F  1803               	skipnc
  5358  0C90  0AAB               	incf	LCDWriteString@i+1,f
  5359  0C91  3000               	movlw	0
  5360  0C92  07AB               	addwf	LCDWriteString@i+1,f
  5361  0C93  2C57               	goto	l1960
  5362  0C94                     __end_of_LCDWriteString:	
  5363                           
  5364                           	psect	text26
  5365  0AE7                     __ptext26:	
  5366 ;; *************** function _LCDWriteChar *****************
  5367 ;; Defined at:
  5368 ;;		line 131 in file "lcd.h"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;  a               1    wreg     unsigned char 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  a               1    4[BANK0 ] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;		None               void
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5382 ;;      Params:         0       0       0       0       0
  5383 ;;      Locals:         0       1       0       0       0
  5384 ;;      Temps:          0       2       0       0       0
  5385 ;;      Totals:         0       3       0       0       0
  5386 ;;Total ram usage:        3 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    3
  5389 ;; This function calls:
  5390 ;;		_LCDSetBits
  5391 ;;		_pulse
  5392 ;; This function is called by:
  5393 ;;		_LCDWriteString
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _LCDWriteChar
  5399  0AE7                     _LCDWriteChar:	
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
  5403                           ;LCDWriteChar@a stored from wreg
  5404  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  5405  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  5406  0AE9  00A4               	movwf	LCDWriteChar@a
  5407                           
  5408                           ;lcd.h: 133: LCDSetBits(a);
  5409  0AEA  0824               	movf	LCDWriteChar@a,w
  5410  0AEB  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  5411                           
  5412                           ;lcd.h: 134: RB0 = 1;
  5413  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  5414  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  5415  0AF2  1406               	bsf	6,0	;volatile
  5416                           
  5417                           ;lcd.h: 136: pulse();
  5418  0AF3  120A  158A  2210  120A  158A  	fcall	_pulse
  5419                           
  5420                           ;lcd.h: 137: a = a<<4;
  5421  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  5422  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  5423  0AFA  0824               	movf	LCDWriteChar@a,w
  5424  0AFB  00A2               	movwf	??_LCDWriteChar
  5425  0AFC  3003               	movlw	3
  5426  0AFD                     u1355:	
  5427  0AFD  1003               	clrc
  5428  0AFE  0DA2               	rlf	??_LCDWriteChar,f
  5429  0AFF  3EFF               	addlw	-1
  5430  0B00  1D03               	skipz
  5431  0B01  2AFD               	goto	u1355
  5432  0B02  1003               	clrc
  5433  0B03  0D22               	rlf	??_LCDWriteChar,w
  5434  0B04  00A3               	movwf	??_LCDWriteChar+1
  5435  0B05  0823               	movf	??_LCDWriteChar+1,w
  5436  0B06  00A4               	movwf	LCDWriteChar@a
  5437                           
  5438                           ;lcd.h: 138: LCDSetBits(a);
  5439  0B07  0824               	movf	LCDWriteChar@a,w
  5440  0B08  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  5441                           
  5442                           ;lcd.h: 139: pulse();
  5443  0B0D  120A  158A  2210   	fcall	_pulse
  5444  0B10  0008               	return
  5445  0B11                     __end_of_LCDWriteChar:	
  5446                           
  5447                           	psect	text27
  5448  0BA3                     __ptext27:	
  5449 ;; *************** function _LCDSetCursor *****************
  5450 ;; Defined at:
  5451 ;;		line 146 in file "lcd.h"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  a               1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  a               1    5[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5465 ;;      Params:         0       0       0       0       0
  5466 ;;      Locals:         0       1       0       0       0
  5467 ;;      Temps:          0       2       0       0       0
  5468 ;;      Totals:         0       3       0       0       0
  5469 ;;Total ram usage:        3 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    4
  5472 ;; This function calls:
  5473 ;;		_LCD4bitCmd
  5474 ;; This function is called by:
  5475 ;;		_displayLCD
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _LCDSetCursor
  5481  0BA3                     _LCDSetCursor:	
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5485                           ;LCDSetCursor@a stored from wreg
  5486  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  5487  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0BA5  00A5               	movwf	LCDSetCursor@a
  5489                           
  5490                           ;lcd.h: 148: if (a & 16)
  5491  0BA6  1E25               	btfss	LCDSetCursor@a,4
  5492  0BA7  2BC2               	goto	l1948
  5493                           
  5494                           ;lcd.h: 149: {
  5495                           ;lcd.h: 150: LCD4bitCmd(0xC0);
  5496  0BA8  30C0               	movlw	192
  5497  0BA9  120A  158A  2220  120A  158A  	fcall	_LCD4bitCmd
  5498                           
  5499                           ;lcd.h: 151: a = a << 4;
  5500  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  5501  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  5502  0BB0  0825               	movf	LCDSetCursor@a,w
  5503  0BB1  00A3               	movwf	??_LCDSetCursor
  5504  0BB2  3003               	movlw	3
  5505  0BB3                     u1915:	
  5506  0BB3  1003               	clrc
  5507  0BB4  0DA3               	rlf	??_LCDSetCursor,f
  5508  0BB5  3EFF               	addlw	-1
  5509  0BB6  1D03               	skipz
  5510  0BB7  2BB3               	goto	u1915
  5511  0BB8  1003               	clrc
  5512  0BB9  0D23               	rlf	??_LCDSetCursor,w
  5513  0BBA  00A4               	movwf	??_LCDSetCursor+1
  5514  0BBB  0824               	movf	??_LCDSetCursor+1,w
  5515  0BBC  00A5               	movwf	LCDSetCursor@a
  5516                           
  5517                           ;lcd.h: 152: LCD4bitCmd(a);
  5518  0BBD  0825               	movf	LCDSetCursor@a,w
  5519  0BBE  120A  158A  2220   	fcall	_LCD4bitCmd
  5520                           
  5521                           ;lcd.h: 153: }
  5522  0BC1  0008               	return
  5523  0BC2                     l1948:	
  5524                           
  5525                           ;lcd.h: 155: else
  5526                           ;lcd.h: 156: {
  5527                           ;lcd.h: 157: LCD4bitCmd(0x80);
  5528  0BC2  3080               	movlw	128
  5529  0BC3  120A  158A  2220  120A  158A  	fcall	_LCD4bitCmd
  5530                           
  5531                           ;lcd.h: 158: a = a << 4;
  5532  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  5534  0BCA  0825               	movf	LCDSetCursor@a,w
  5535  0BCB  00A3               	movwf	??_LCDSetCursor
  5536  0BCC  3003               	movlw	3
  5537  0BCD                     u1925:	
  5538  0BCD  1003               	clrc
  5539  0BCE  0DA3               	rlf	??_LCDSetCursor,f
  5540  0BCF  3EFF               	addlw	-1
  5541  0BD0  1D03               	skipz
  5542  0BD1  2BCD               	goto	u1925
  5543  0BD2  1003               	clrc
  5544  0BD3  0D23               	rlf	??_LCDSetCursor,w
  5545  0BD4  00A4               	movwf	??_LCDSetCursor+1
  5546  0BD5  0824               	movf	??_LCDSetCursor+1,w
  5547  0BD6  00A5               	movwf	LCDSetCursor@a
  5548                           
  5549                           ;lcd.h: 159: LCD4bitCmd(a);
  5550  0BD7  0825               	movf	LCDSetCursor@a,w
  5551  0BD8  120A  158A  2220   	fcall	_LCD4bitCmd
  5552  0BDB  0008               	return
  5553  0BDC                     __end_of_LCDSetCursor:	
  5554                           
  5555                           	psect	text28
  5556  0A20                     __ptext28:	
  5557 ;; *************** function _LCD4bitCmd *****************
  5558 ;; Defined at:
  5559 ;;		line 123 in file "lcd.h"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  a               1    wreg     unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  a               1    2[BANK0 ] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;		None               void
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, pclath, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5573 ;;      Params:         0       0       0       0       0
  5574 ;;      Locals:         0       1       0       0       0
  5575 ;;      Temps:          0       0       0       0       0
  5576 ;;      Totals:         0       1       0       0       0
  5577 ;;Total ram usage:        1 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    3
  5580 ;; This function calls:
  5581 ;;		_LCDSetBits
  5582 ;;		_pulse
  5583 ;; This function is called by:
  5584 ;;		_LCDSetCursor
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _LCD4bitCmd
  5590  0A20                     _LCD4bitCmd:	
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
  5594                           ;LCD4bitCmd@a stored from wreg
  5595  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  5596  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  5597  0A22  00A2               	movwf	LCD4bitCmd@a
  5598                           
  5599                           ;lcd.h: 125: LCDSetBits(a);
  5600  0A23  0822               	movf	LCD4bitCmd@a,w
  5601  0A24  120A  158A  2256  120A  158A  	fcall	_LCDSetBits
  5602                           
  5603                           ;lcd.h: 126: RB0 = 0;
  5604  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  5606  0A2B  1006               	bcf	6,0	;volatile
  5607                           
  5608                           ;lcd.h: 127: RD7 = 0;
  5609  0A2C  1388               	bcf	8,7	;volatile
  5610                           
  5611                           ;lcd.h: 128: pulse();
  5612  0A2D  120A  158A  2210   	fcall	_pulse
  5613  0A30  0008               	return
  5614  0A31                     __end_of_LCD4bitCmd:	
  5615                           
  5616                           	psect	text29
  5617  0A10                     __ptext29:	
  5618 ;; *************** function _pulse *****************
  5619 ;; Defined at:
  5620 ;;		line 102 in file "lcd.h"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;		None               void
  5627 ;; Registers used:
  5628 ;;		wreg
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5634 ;;      Params:         0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0
  5636 ;;      Temps:          0       2       0       0       0
  5637 ;;      Totals:         0       2       0       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    2
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_initLCD
  5645 ;;		_LCDcmd
  5646 ;;		_LCD4bitCmd
  5647 ;;		_LCDWriteChar
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _pulse
  5653  0A10                     _pulse:	
  5654                           
  5655                           ;lcd.h: 104: RB1 = 1;
  5656                           
  5657                           ;incstack = 0
  5658                           ; Regs used in _pulse: [wreg]
  5659  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  5660  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  5661  0A12  1486               	bsf	6,1	;volatile
  5662                           
  5663                           ;lcd.h: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  5664  0A13  3003               	movlw	3
  5665  0A14  00A1               	movwf	??_pulse+1
  5666  0A15  3097               	movlw	151
  5667  0A16  00A0               	movwf	??_pulse
  5668  0A17                     u2557:	
  5669  0A17  0BA0               	decfsz	??_pulse,f
  5670  0A18  2A17               	goto	u2557
  5671  0A19  0BA1               	decfsz	??_pulse+1,f
  5672  0A1A  2A17               	goto	u2557
  5673  0A1B  2A1C               	nop2
  5674                           
  5675                           ;lcd.h: 106: RB1 = 0;
  5676  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  5677  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  5678  0A1E  1086               	bcf	6,1	;volatile
  5679  0A1F  0008               	return
  5680  0A20                     __end_of_pulse:	
  5681                           
  5682                           	psect	text30
  5683  0A56                     __ptext30:	
  5684 ;; *************** function _LCDSetBits *****************
  5685 ;; Defined at:
  5686 ;;		line 79 in file "lcd.h"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  a               1    wreg     unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  a               1    0[BANK0 ] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5700 ;;      Params:         0       0       0       0       0
  5701 ;;      Locals:         0       1       0       0       0
  5702 ;;      Temps:          0       0       0       0       0
  5703 ;;      Totals:         0       1       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    2
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_initLCD
  5711 ;;		_LCDcmd
  5712 ;;		_LCD4bitCmd
  5713 ;;		_LCDWriteChar
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _LCDSetBits
  5719  0A56                     _LCDSetBits:	
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _LCDSetBits: [wreg]
  5723                           ;LCDSetBits@a stored from wreg
  5724  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  5725  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  5726  0A58  00A0               	movwf	LCDSetBits@a
  5727                           
  5728                           ;lcd.h: 81: if(a & 16)
  5729  0A59  1E20               	btfss	LCDSetBits@a,4
  5730  0A5A  2A5D               	goto	l120
  5731                           
  5732                           ;lcd.h: 82: RB2 = 1;
  5733  0A5B  1506               	bsf	6,2	;volatile
  5734  0A5C  2A5E               	goto	l121
  5735  0A5D                     l120:	
  5736                           
  5737                           ;lcd.h: 83: else
  5738                           ;lcd.h: 84: RB2 = 0;
  5739  0A5D  1106               	bcf	6,2	;volatile
  5740  0A5E                     l121:	
  5741                           
  5742                           ;lcd.h: 86: if(a & 32)
  5743  0A5E  1EA0               	btfss	LCDSetBits@a,5
  5744  0A5F  2A62               	goto	l122
  5745                           
  5746                           ;lcd.h: 87: RB3 = 1;
  5747  0A60  1586               	bsf	6,3	;volatile
  5748  0A61  2A63               	goto	l123
  5749  0A62                     l122:	
  5750                           
  5751                           ;lcd.h: 88: else
  5752                           ;lcd.h: 89: RB3 = 0;
  5753  0A62  1186               	bcf	6,3	;volatile
  5754  0A63                     l123:	
  5755                           
  5756                           ;lcd.h: 91: if(a & 64)
  5757  0A63  1F20               	btfss	LCDSetBits@a,6
  5758  0A64  2A67               	goto	l124
  5759                           
  5760                           ;lcd.h: 92: RB4 = 1;
  5761  0A65  1606               	bsf	6,4	;volatile
  5762  0A66  2A68               	goto	l125
  5763  0A67                     l124:	
  5764                           
  5765                           ;lcd.h: 93: else
  5766                           ;lcd.h: 94: RB4 = 0;
  5767  0A67  1206               	bcf	6,4	;volatile
  5768  0A68                     l125:	
  5769                           
  5770                           ;lcd.h: 96: if(a & 128)
  5771  0A68  1FA0               	btfss	LCDSetBits@a,7
  5772  0A69  2A6C               	goto	l126
  5773                           
  5774                           ;lcd.h: 97: RB5 = 1;
  5775  0A6A  1686               	bsf	6,5	;volatile
  5776  0A6B  0008               	return
  5777  0A6C                     l126:	
  5778                           
  5779                           ;lcd.h: 98: else
  5780                           ;lcd.h: 99: RB5 = 0;
  5781  0A6C  1286               	bcf	6,5	;volatile
  5782  0A6D  0008               	return
  5783  0A6E                     __end_of_LCDSetBits:	
  5784                           
  5785                           	psect	text31
  5786  0A86                     __ptext31:	
  5787 ;; *************** function _currentGainInit *****************
  5788 ;; Defined at:
  5789 ;;		line 260 in file "PIC16F917 Battery Management.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  gain            1    wreg     unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  gain            1    0[BANK0 ] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;		None               void
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5803 ;;      Params:         0       0       0       0       0
  5804 ;;      Locals:         0       1       0       0       0
  5805 ;;      Temps:          0       0       0       0       0
  5806 ;;      Totals:         0       1       0       0       0
  5807 ;;Total ram usage:        1 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    2
  5810 ;; This function calls:
  5811 ;;		Nothing
  5812 ;; This function is called by:
  5813 ;;		_main
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function _currentGainInit
  5819  0A86                     _currentGainInit:	
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in _currentGainInit: [wreg+status,2+status,0]
  5823                           ;currentGainInit@gain stored from wreg
  5824  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  5825  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  5826  0A88  00A0               	movwf	currentGainInit@gain
  5827                           
  5828                           ;PIC16F917 Battery Management.c: 262: if ( gain >= 100 )
  5829  0A89  3064               	movlw	100
  5830  0A8A  0220               	subwf	currentGainInit@gain,w
  5831  0A8B  1C03               	skipc
  5832  0A8C  2A96               	goto	l295
  5833                           
  5834                           ;PIC16F917 Battery Management.c: 263: {
  5835                           ;PIC16F917 Battery Management.c: 264: RA6 = 1;
  5836  0A8D  1705               	bsf	5,6	;volatile
  5837                           
  5838                           ;PIC16F917 Battery Management.c: 266: if ( gain == 100 )
  5839  0A8E  3064               	movlw	100
  5840  0A8F  0620               	xorwf	currentGainInit@gain,w
  5841  0A90  1D03               	btfss	3,2
  5842  0A91  2A94               	goto	l296
  5843                           
  5844                           ;PIC16F917 Battery Management.c: 267: {
  5845                           ;PIC16F917 Battery Management.c: 268: RA7 = 0;
  5846  0A92  1385               	bcf	5,7	;volatile
  5847                           
  5848                           ;PIC16F917 Battery Management.c: 270: }
  5849                           
  5850                           ;PIC16F917 Battery Management.c: 269: return;
  5851  0A93  0008               	return
  5852  0A94                     l296:	
  5853                           
  5854                           ;PIC16F917 Battery Management.c: 271: else
  5855                           ;PIC16F917 Battery Management.c: 272: {
  5856                           ;PIC16F917 Battery Management.c: 273: RA7 = 1;
  5857  0A94  1785               	bsf	5,7	;volatile
  5858                           
  5859                           ;PIC16F917 Battery Management.c: 275: }
  5860                           ;PIC16F917 Battery Management.c: 277: }
  5861                           
  5862                           ;PIC16F917 Battery Management.c: 274: return;
  5863  0A95  0008               	return
  5864  0A96                     l295:	
  5865                           
  5866                           ;PIC16F917 Battery Management.c: 279: else
  5867                           ;PIC16F917 Battery Management.c: 280: {
  5868                           ;PIC16F917 Battery Management.c: 281: RA6 = 0;
  5869  0A96  1305               	bcf	5,6	;volatile
  5870                           
  5871                           ;PIC16F917 Battery Management.c: 283: if ( gain == 25 )
  5872  0A97  3019               	movlw	25
  5873  0A98  0620               	xorwf	currentGainInit@gain,w
  5874  0A99  1D03               	btfss	3,2
  5875  0A9A  2A9D               	goto	l300
  5876                           
  5877                           ;PIC16F917 Battery Management.c: 284: {
  5878                           ;PIC16F917 Battery Management.c: 285: RA7 = 0;
  5879  0A9B  1385               	bcf	5,7	;volatile
  5880                           
  5881                           ;PIC16F917 Battery Management.c: 287: }
  5882                           
  5883                           ;PIC16F917 Battery Management.c: 286: return;
  5884  0A9C  0008               	return
  5885  0A9D                     l300:	
  5886                           
  5887                           ;PIC16F917 Battery Management.c: 288: else
  5888                           ;PIC16F917 Battery Management.c: 289: {
  5889                           ;PIC16F917 Battery Management.c: 290: RA7 = 1;
  5890  0A9D  1785               	bsf	5,7	;volatile
  5891                           
  5892                           ;PIC16F917 Battery Management.c: 291: return;
  5893  0A9E  0008               	return
  5894  0A9F                     __end_of_currentGainInit:	
  5895                           
  5896                           	psect	text32
  5897  0A31                     __ptext32:	
  5898 ;; *************** function _isr *****************
  5899 ;; Defined at:
  5900 ;;		line 255 in file "setup.h"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;		None               void
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, pclath, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5914 ;;      Params:         0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0
  5916 ;;      Temps:          4       0       0       0       0
  5917 ;;      Totals:         4       0       0       0       0
  5918 ;;Total ram usage:        4 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    1
  5921 ;; This function calls:
  5922 ;;		_isrTimer0
  5923 ;; This function is called by:
  5924 ;;		Interrupt level 1
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           
  5929                           ;psect for function _isr
  5930  0A31                     _isr:	
  5931                           
  5932                           ;setup.h: 257: isrTimer0();
  5933  0A31  120A  158A  22BD  120A  158A  	fcall	_isrTimer0
  5934  0A36  0878               	movf	??_isr+3,w
  5935  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  5936  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  5937  0A39  00FF               	movwf	127
  5938  0A3A  0877               	movf	??_isr+2,w
  5939  0A3B  008A               	movwf	10
  5940  0A3C  0876               	movf	??_isr+1,w
  5941  0A3D  0084               	movwf	4
  5942  0A3E  0E75               	swapf	??_isr^(0+-128),w
  5943  0A3F  0083               	movwf	3
  5944  0A40  0EFE               	swapf	126,f
  5945  0A41  0E7E               	swapf	126,w
  5946  0A42  0009               	retfie
  5947  0A43                     __end_of_isr:	
  5948                           
  5949                           	psect	intentry
  5950  0004                     __pintentry:	
  5951                           ;incstack = 0
  5952                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  5953                           
  5954  0004                     interrupt_function:	
  5955  007E                     saved_w	set	btemp
  5956  0004  00FE               	movwf	btemp
  5957  0005  0E03               	swapf	3,w
  5958  0006  00F5               	movwf	??_isr
  5959  0007  0804               	movf	4,w
  5960  0008  00F6               	movwf	??_isr+1
  5961  0009  080A               	movf	10,w
  5962  000A  00F7               	movwf	??_isr+2
  5963  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5964  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5965  000D  087F               	movf	btemp+1,w
  5966  000E  00F8               	movwf	??_isr+3
  5967  000F  120A  158A  2A31   	ljmp	_isr
  5968                           
  5969                           	psect	text33
  5970  0ABD                     __ptext33:	
  5971 ;; *************** function _isrTimer0 *****************
  5972 ;; Defined at:
  5973 ;;		line 64 in file "timer0.h"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;		None
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;		None
  5978 ;; Return value:  Size  Location     Type
  5979 ;;		None               void
  5980 ;; Registers used:
  5981 ;;		wreg
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5987 ;;      Params:         0       0       0       0       0
  5988 ;;      Locals:         0       0       0       0       0
  5989 ;;      Temps:          4       0       0       0       0
  5990 ;;      Totals:         4       0       0       0       0
  5991 ;;Total ram usage:        4 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_isr
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           
  6001                           ;psect for function _isrTimer0
  6002  0ABD                     _isrTimer0:	
  6003                           
  6004                           ;timer0.h: 66: if (INTCONbits.T0IF == 1 && INTCONbits.T0IE == 1)
  6005                           
  6006                           ;incstack = 0
  6007                           ; Regs used in _isrTimer0: [wreg]
  6008  0ABD  1D0B               	btfss	11,2	;volatile
  6009  0ABE  0008               	return
  6010  0ABF  1E8B               	btfss	11,5	;volatile
  6011  0AC0  0008               	return
  6012                           
  6013                           ;timer0.h: 67: {
  6014                           ;timer0.h: 70: time = time + 255;
  6015  0AC1  30FF               	movlw	255
  6016  0AC2  00F1               	movwf	??_isrTimer0
  6017  0AC3  3000               	movlw	0
  6018  0AC4  00F2               	movwf	??_isrTimer0+1
  6019  0AC5  3000               	movlw	0
  6020  0AC6  00F3               	movwf	??_isrTimer0+2
  6021  0AC7  3000               	movlw	0
  6022  0AC8  00F4               	movwf	??_isrTimer0+3
  6023  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  6024  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  6025  0ACB  0868               	movf	_time,w
  6026  0ACC  07F1               	addwf	??_isrTimer0,f
  6027  0ACD  0869               	movf	_time+1,w
  6028  0ACE  1803               	skipnc
  6029  0ACF  0F69               	incfsz	_time+1,w
  6030  0AD0  2AD2               	goto	u208_20
  6031  0AD1  2AD3               	goto	u208_21
  6032  0AD2                     u208_20:	
  6033  0AD2  07F2               	addwf	??_isrTimer0+1,f
  6034  0AD3                     u208_21:	
  6035  0AD3  086A               	movf	_time+2,w
  6036  0AD4  1803               	skipnc
  6037  0AD5  0F6A               	incfsz	_time+2,w
  6038  0AD6  2AD8               	goto	u208_22
  6039  0AD7  2AD9               	goto	u208_23
  6040  0AD8                     u208_22:	
  6041  0AD8  07F3               	addwf	??_isrTimer0+2,f
  6042  0AD9                     u208_23:	
  6043  0AD9  086B               	movf	_time+3,w
  6044  0ADA  1803               	skipnc
  6045  0ADB  0A6B               	incf	_time+3,w
  6046  0ADC  07F4               	addwf	??_isrTimer0+3,f
  6047  0ADD  0874               	movf	??_isrTimer0+3,w
  6048  0ADE  00EB               	movwf	_time+3
  6049  0ADF  0873               	movf	??_isrTimer0+2,w
  6050  0AE0  00EA               	movwf	_time+2
  6051  0AE1  0872               	movf	??_isrTimer0+1,w
  6052  0AE2  00E9               	movwf	_time+1
  6053  0AE3  0871               	movf	??_isrTimer0,w
  6054  0AE4  00E8               	movwf	_time
  6055                           
  6056                           ;timer0.h: 72: INTCONbits.T0IF = 0;
  6057  0AE5  110B               	bcf	11,2	;volatile
  6058  0AE6  0008               	return
  6059  0AE7                     __end_of_isrTimer0:	
  6060  007E                     btemp	set	126	;btemp
  6061  007E                     wtemp	set	126
  6062  007E                     wtemp0	set	126
  6063  0080                     wtemp1	set	128
  6064  0082                     wtemp2	set	130
  6065  0084                     wtemp3	set	132
  6066  0086                     wtemp4	set	134
  6067  0088                     wtemp5	set	136
  6068  007F                     wtemp6	set	127
  6069  007E                     ttemp	set	126
  6070  007E                     ttemp0	set	126
  6071  0081                     ttemp1	set	129
  6072  0084                     ttemp2	set	132
  6073  0087                     ttemp3	set	135
  6074  007F                     ttemp4	set	127
  6075  007E                     ltemp	set	126
  6076  007E                     ltemp0	set	126
  6077  0082                     ltemp1	set	130
  6078  0086                     ltemp2	set	134
  6079  0080                     ltemp3	set	128


Data Sizes:
    Strings     36
    Constant    20
    Data        7
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      8      11
    BANK0            80     72      80
    BANK1            80      0      68
    BANK3            96      0       0
    BANK2            69      0       0

Pointer List with Targets:

    uint8ToASCII@returnVal	PTR unsigned char  size(1) Largest target is 4
		 -> displayLCD@temp2(BANK0[4]), displayLCD@temp1(BANK0[4]), 

    LCDWriteString@a	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 
		 -> displayLCD@temp2(BANK0[4]), displayLCD@temp1(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrTimer0

Critical Paths under _main in BANK0

    _main->_handlePB
    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___lwtoft->___lwdiv
    ___ftdiv->___ftmul
    _initController->_initLCD
    _handlePB->_stopWatch
    _stopWatch->___fttol
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _initLCD->_LCDcmd
    _LCDcmd->_pulse
    _displayLCD->_uint8ToASCII
    _uint8ToASCII->___awdiv
    _LCDWriteString->_LCDWriteChar
    _LCDWriteChar->_pulse
    _LCDSetCursor->_LCD4bitCmd
    _LCD4bitCmd->_pulse

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   56378
                                             70 BANK0      2     2      0
                    _currentGainInit
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      4     4      0   11543
                                             48 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        7     7      0   13744
                                             48 BANK0      7     7      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2131
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  22    22      0   20816
                                             57 BANK0      7     7      0
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                        9     5      4   11612
                                             48 BANK0      9     5      4
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2      92
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2707
                                              8 BANK0      4     1      3
                           ___ftpack
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1570
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3029
                                             32 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     243
                            _initADC
                            _initLCD
                          _timeSetup
 ---------------------------------------------------------------------------------
 (2) _timeSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             3     3      0    7481
                                             67 BANK0      3     3      0
                            _initLCD
                          _stopWatch
 ---------------------------------------------------------------------------------
 (2) _stopWatch                                           21    17      4    7238
                                             46 BANK0     21    17      4
                            ___ftmul
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2562
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     508
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4099
                                             16 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     243
                                              5 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                          11     9      2    2485
                                             24 BANK0     11     9      2
                       _LCDSetCursor
                     _LCDWriteString
                       _uint8ToASCII
 ---------------------------------------------------------------------------------
 (2) _uint8ToASCII                                        15    14      1    1436
                                              9 BANK0     15    14      1
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     556
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       7     5      2     629
                                              5 BANK0      7     5      2
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     222
                                              3 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     110
                                              2 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _currentGainInit                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0       0
                                              4 COMMON     4     4      0
                          _isrTimer0
 ---------------------------------------------------------------------------------
 (6) _isrTimer0                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _currentGainInit
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     _uint8ToASCII
       ___awdiv
       ___bmul
   _handlePB
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _stopWatch
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _timeSetup
   _sampleBatteryCells
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _sampleVoltage
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___lwdiv
       ___lwtoft
         ___ftpack
         ___lwdiv (ARG)
       _analogRead
   _sampleCurrent
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lbtoft
       ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead

 _isr (ROOT)
   _isrTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       8        0.0%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               45      0       0       9        0.0%
BITBANK2            45      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      44       6       85.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      8       B       1       84.6%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9F      12        0.0%
ABS                  0      0      9F      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jul 06 21:49:35 2015

                ?_LCDSetBits 0071                            pc 0002               ___bmul@product 0022  
                __CFG_CP$OFF 0000                 ___awdiv@sign 0026                           fsr 0004  
                        l120 0A5D                          l121 0A5E                          l122 0A62  
                        l123 0A63                          l300 0A9D                          l124 0A67  
                        l125 0A68                          l126 0A6C                          l216 0BF3  
                        l162 0243                          l307 0CAB                          l292 00EF  
                        l295 0A96                          l296 0A94                          l561 0D7D  
                        l652 0EA5                          l568 0D92                          l569 0D9A  
                        _RB0 0030                          _RB1 0031                          _RC0 0038  
                        _RB2 0032                          _RC1 0039                          _RB3 0033  
                        _RD0 0040                          _RC2 003A                          _RB4 0034  
                        _RA6 002E                          _RD1 0041                          _RC3 003B  
                        _RB5 0035                          _RA7 002F                          _RD2 0042  
                        _RD4 0044                          _RD5 0045                          _RD6 0046  
                        _RD7 0047                 __CFG_CPD$OFF 0000                          _isr 0A31  
                        fsr0 0004                          indf 0000                ?_LCDSetCursor 0071  
               __CFG_IESO$ON 0000                 ___ftdiv@cntr 004A                 ___ftdiv@sign 004F  
                       l2004 0249                         l2020 0406                         l2024 0430  
                       l2034 04D4                         l2036 04DC                         l2052 0DC5  
                       l2222 0CC7                         l2240 0077                         l2232 0CE0  
                       l2152 0EFC                         l1610 0D56                         l2058 0DE6  
                       l2146 0EDD                         l1612 0D62                         l2172 0292  
                       l1622 0D90                         l1614 0D67                         l1606 0D4F  
                       l2166 0273                         l1704 0D01                         l2408 00E1  
                       l2256 00DA                         l1624 0D82                         l1800 0394  
                       l1730 0D40                         l1722 0D2D                         l1714 0D09  
                       l1716 0D17                         l1812 03BC                         l1804 03A4  
                       l1740 0108                         l1900 0C4E                         l2348 0023  
                       l1726 0D38                         l1816 03CC                         l1832 0E4B  
                       l1760 0163                         l1682 0A4D                         l1850 0E7D  
                       l1746 011E                         l1860 0EA8                         l1852 0E8D  
                       l1678 0A47                         l1782 033F                         l1960 0C57  
                       l1864 0EB6                         l1872 0B42                         l1768 0182  
                       l1698 0CF6                         l1858 0E9A                         l1874 0B54  
                       l1890 0C2D                         l1948 0BC2                         l1788 0355  
                       l1982 01DA                         l1976 01C0                         l1896 0C43  
                       l1888 0C1F                         l1994 023F                         ?_isr 0071  
                       STR_1 0836                         STR_2 082D                         STR_3 083F  
                       STR_4 0824                         u2020 0463                         u2021 0464  
                       u2030 0475                         u2022 0469                         u2031 0476  
                       u2023 046A                         u2032 047B                         u2033 047C  
                       u1325 0DA1                         u1245 0D5B                         u2045 0DC3  
                       u2125 0EDB                         u2055 0DE4                         u2135 0EFA  
                       u1425 0D0C                         u1345 0B28                         u1265 0D76  
                       u2145 0271                         u1355 0AFD                         u1515 0130  
                       u2155 0290                         u1445 0D18                         u1285 0D89  
                       u1605 0373                         u1525 0142                         u1455 0D24  
                       u2183 0CC5                         u1535 0164                         u2407 0EC7  
                       u1465 0D2E                         u1545 0175                         u2417 04ED  
                       u2507 0FAB                         u1635 03A5                         u1555 0183  
                       u2427 0659                __CFG_DEBUG$ON 0000                         u2517 0FC7  
                       u1645 03AD                         u1725 0E52                         u2437 0BEB  
                       u2527 0FD8                         u1815 0B47                         u2447 0C9C  
                       u2537 0FE9                         u2457 0CD5                         u1915 0BB3  
                       u2547 0FFA                         u2467 0F69                         u1595 0361  
                       u1755 0E7E                         u2557 0A17                         u1925 0BCD  
                       u2477 0F7C                         u1685 03CD                         u1845 0C22  
                       u2487 0F8B                         u1695 03D5                         u2497 0F9B  
                       u1785 0E9C                         u1865 0C2E                         u1875 0C3A  
                       u1965 01BE                         u1885 0C44                         u1975 01D8  
                       _TMR0 0001                         _main 0015                 ___ftpack@arg 0020  
               ___ftpack@exp 0023                         _time 0068                         btemp 007E  
                       ltemp 007E                         start 0012                         ttemp 007E  
                       wtemp 007E                  LCDSetBits@a 0020            ___bmul@multiplier 0023  
              __CFG_MCLRE$ON 0000                 ___ftmul@cntr 003E                 ___ftmul@sign 003F  
               ___fttol@exp1 004D                 ___fttol@lval 0049                        ??_isr 0075  
              ?_LCDWriteChar 0071          __size_of_LCD4bitCmd 0011                        ?_main 0071  
            __end_of___awdiv 0D45                __CFG_WDTE$OFF 0000              __end_of___ftdiv 01A8  
                      _ANSEL 0091              __end_of___ftmul 03FA              ___awdiv@divisor 0020  
            __end_of___fttol 0EBF              __end_of___lwdiv 0C53              ___awdiv@counter 0025  
            __end_of_cellRDB 0824                        _PORTA 0005                        _PORTB 0006  
                      _PORTC 0007                        _PORTD 0008                        _PORTE 0009  
             ??_LCDSetCursor 0023                        _TRISA 0085                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TRISE 0089  
               ___lltoft@exp 002D               __CFG_FCMEN$OFF 0000              __end_of_initADC 0A10  
            __end_of_initLCD 1000              __end_of_refVolt 0816                ___ftpack@sign 0024  
                      _pulse 0A10          __size_of_LCDSetBits 0018               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
      __end_of_sampleCurrent 0327            ??_sampleReference 0050              __initialization 07C0  
      __end_of_sampleVoltage 0E31                 __end_of_main 0046               ??_LCDWriteChar 0022  
                     ??_main 0066                ___fttol@sign1 0048       _sampleBatteryCells$868 005D  
                     _ADCON0 001F                       _ADCON1 009F                       _ADRESH 001E  
                     _ADRESL 009E             ___awdiv@dividend 0022                       ?_pulse 0071  
           __end_of___ftpack 0DB3             __end_of___lbtoft 0ABD                       _LCDCON 0107  
           __end_of___lltoft 0B6B                       u208_20 0AD2                       u208_21 0AD3  
                     u208_22 0AD8                       u208_23 0AD9                       _LCDcmd 0B11  
           __end_of_cell1RDT 0818             __end_of_cell2RDT 081A             __end_of_cell3RDT 081C  
           __end_of_cell4RDT 081E             __end_of___lwtoft 0A86             __end_of_cell5RDT 0820  
           __end_of_cell6RDT 0822              _currentGainInit 0A86               __CFG_PWRTE$OFF 0000  
           __end_of_handlePB 0CEA               _LCDWriteString 0C53                       ___bmul 0A43  
                  ??___awdiv 0024                    ??___ftdiv 0046                    ??___ftmul 0036  
                  ??___fttol 0044                    ??___lwdiv 0024                       _btmStr 00B2  
           ___awdiv@quotient 0027                       _topStr 00C2                    ??_initADC 0020  
      ___ftmul@f3_as_product 003B                    ??_initLCD 0025                 __pdataCOMMON 0079  
    __size_of_initController 0038                       saved_w 007E            sampleCurrent@temp 0055  
               ??_LCD4bitCmd 0022        uint8ToASCII@returnVal 0037      __end_of__initialization 07FC  
     __end_of_LCDWriteString 0C94                   ___ftdiv@f1 0043                   ___ftdiv@f2 0040  
                 ___ftdiv@f3 004B                   ___lbtoft@c 002F          ___bmul@multiplicand 0020  
       __end_of_LCDSetCursor 0BDC                LCDSetCursor@a 0025                   ___ftmul@f1 0030  
                 ___ftmul@f2 0033                   ___fttol@f1 0040               __pcstackCOMMON 0071  
               __pidataBANK0 09E6                 __pidataBANK1 09E7                 ??_LCDSetBits 0020  
                 ___lltoft@c 0028                __end_of_pulse 0A20   __end_of_sampleBatteryCells 07C0  
         __end_of_LCD4bitCmd 0A31                   ___lwtoft@c 0028               _OPTION_REGbits 0081  
    __end_of_currentGainInit 0A9F                      ??_pulse 0020         __end_of_LCDWriteChar 0B11  
                 __pbssBANK0 0068                   __pbssBANK1 00A0                      ?_LCDcmd 0071  
         __end_of_LCDSetBits 0A6E          currentGainInit@gain 0020                      LCDcmd@a 0024  
                 _analogRead 0BDC              ?_LCDWriteString 0025           __size_of_isrTimer0 002A  
                 __pmaintext 0015                      ?___bmul 0020                   __pintentry 0004  
                    _CCP1CON 0017                      _CCP2CON 001D                    ?___ftpack 0020  
                  ?___lbtoft 0028                    ?___lltoft 0028                    ?___lwtoft 0028  
             displayLCD@disp 0038           __size_of_timeSetup 000C                    ?_handlePB 0071  
                 _displayLCD 0046              _sampleReference 0EBF                   __stringtab 0800  
         __size_of_stopWatch 00EB              __size_of_LCDcmd 002B            __end_of_convConst 0813  
            __size_of___bmul 0013                      ___awdiv 0CEA                      ___ftdiv 00F0  
                    ___ftmul 0327                      ___fttol 0E31                      ___lwdiv 0C15  
                    _cellRDB 0822                   ??___ftpack 0025                   ??___lbtoft 002B  
                 ??___lltoft 002C                      __ptext1 0EBF                      __ptext2 0262  
                    __ptext3 0A9F                      __ptext4 04E5                      __ptext5 0DB3  
                    __ptext6 0BDC                      __ptext7 0A6E                      __ptext8 0C15  
                    __ptext9 00F0                   ??___lwtoft 002B                      _initADC 0A01  
                    _initLCD 0F57              uint8ToASCII@num 0029               _initController 0B6B  
                    _current 00DE                 __size_of_isr 0012                      _refVolt 0813  
              ?_uint8ToASCII 0029            __end_of_isrTimer0 0AE7                   ??_handlePB 0063  
                    _supVolt 0079                      clrloop0 09EE             ?_currentGainInit 0071  
       end_of_initialization 07FC            _sampleCurrent$869 0050        __size_of_LCDSetCursor 0039  
              LCDWriteChar@a 0024            __end_of_timeSetup 0A01                  ?_analogRead 0020  
          __end_of_stopWatch 04E5       __end_of_initController 0BA3               ??_uint8ToASCII 002A  
     __size_of_sampleCurrent 00C5      __end_of_sampleReference 0F57        __size_of_LCDWriteChar 002A  
               _LCDSetCursor 0BA3                  ?_displayLCD 0038       __size_of_sampleVoltage 007E  
                ___ftdiv@exp 004E               __end_of_LCDcmd 0B3C                  ___ftmul@exp 003A  
             __end_of___bmul 0A56                 _LCDWriteChar 0AE7                __pidataCOMMON 09EA  
            ?_initController 0071          __size_of_analogRead 0039          start_initialization 07C0  
                __end_of_isr 0A43           _sampleBatteryCells 04E5             ??_LCDWriteString 0027  
                   ??_LCDcmd 0022          ?_sampleBatteryCells 0071                _sampleCurrent 0262  
                   ??___bmul 0021                _sampleVoltage 0DB3          __size_of_displayLCD 00AA  
                __pdataBANK0 006F                  __pdataBANK1 00E1         ??_sampleBatteryCells 0059  
          __size_of___ftpack 006E            __size_of___lbtoft 001E            __size_of___lltoft 002F  
           ?_sampleReference 0071                    ___latbits 0002            __size_of___lwtoft 0018  
              __pcstackBANK0 0020            __size_of_handlePB 0056               ?_sampleCurrent 0071  
       __end_of_uint8ToASCII 0262             ___lwdiv@dividend 0022             sampleReference@i 0052  
             ?_sampleVoltage 0050                     ?___awdiv 0020                     ?___ftdiv 0040  
                   ?___ftmul 0030                     ?___fttol 0040                     ?___lwdiv 0020  
              stopWatch@mode 005E                stopWatch@temp 005F                    _convConst 0810  
                  __pstrings 0800              displayLCD@F2774 00D2              displayLCD@F2776 00D6  
                   ?_initADC 0071                     ?_initLCD 0071             ___lwdiv@quotient 0025  
          sampleVoltage@chan 0054               __size_of_pulse 0010            sampleVoltage@temp 0057  
                  _isrTimer0 0ABD              displayLCD@temp1 003B              displayLCD@temp2 003F  
          interrupt_function 0004                 ??_analogRead 0022                    clear_ram0 09ED  
                  _timeSetup 09F5                   _ADCON0bits 001F                  __stringbase 080F  
                  _stopWatch 03FA           __end_of_analogRead 0C15                 ??_displayLCD 003A  
         stopWatch@startTime 00DA                   ?_isrTimer0 0071              ??_sampleCurrent 0050  
   __size_of_currentGainInit 0019              ??_sampleVoltage 0054          uint8ToASCII@leading 0031  
        uint8ToASCII@divisor 0035                   ?_timeSetup 0071             ??_initController 0028  
                 _CMCON0bits 009C           __end_of_displayLCD 00F0             __size_of___awdiv 005B  
        uint8ToASCII@prevSum 0030             __size_of___ftdiv 00B8             __size_of___ftmul 00D3  
           __size_of___fttol 008E             __size_of___lwdiv 003E                     ___ftpack 0D45  
                   ___lbtoft 0A9F           __end_of__stringtab 0810                     ___lltoft 0B3C  
                   _cell1RDT 0816                     _cell2RDT 0818                     _cell3RDT 081A  
                   _cell4RDT 081C                     _cell5RDT 081E                     ___lwtoft 0A6E  
                   _cell6RDT 0820                  _currentGain 006F             __size_of_initADC 000F  
           __size_of_initLCD 00A9                   ?_stopWatch 004E                     _cellVolt 00A0  
            ___lwdiv@divisor 0020                     _handlePB 0C94              ___lwdiv@counter 0027  
                   __ptext10 0B6B                     __ptext11 09F5                     __ptext20 0B11  
                   __ptext12 0A01                     __ptext21 0046                     __ptext13 0C94  
                   __ptext30 0A56                     __ptext22 01A8                     __ptext14 03FA  
                   __ptext31 0A86                     __ptext23 0A43                     __ptext15 0B3C  
                   __ptext32 0A31                     __ptext24 0CEA                     __ptext16 0E31  
                   __ptext33 0ABD                     __ptext25 0C53                     __ptext17 0327  
                   __ptext26 0AE7                     __ptext18 0D45                     __ptext27 0BA3  
                   __ptext19 0F57                     __ptext28 0A20                     __ptext29 0A10  
                 _LCD4bitCmd 0A20               _LCDDisplayMode 006E        __size_of_uint8ToASCII 00BA  
              __size_of_main 0031                     _refValue 006C                uint8ToASCII@i 0036  
              uint8ToASCII@j 0032                uint8ToASCII@k 0034              LCDWriteString@a 0025  
            LCDWriteString@i 002A                   _LCDSetBits 0A56                     _shuntRes 00E1  
                 _INTCONbits 000B                 _uint8ToASCII 01A8               analogRead@chan 0024  
             sampleCurrent@i 0053                  ??_isrTimer0 0071                     intlevel1 0000  
                 _LVDCONbits 0109                  LCD4bitCmd@a 0022                    stringcode 080A  
                 _OSCCONbits 008F                  ??_timeSetup 0020            ??_currentGainInit 0020  
__size_of_sampleBatteryCells 02DB                  ??_stopWatch 0052               sampleVoltage@i 0055  
                   stringdir 080A                     stringtab 0800          analogRead@returnVal 0025  
                ?_LCD4bitCmd 0071           __CFG_FOSC$INTOSCIO 0000     __size_of_sampleReference 0098  
    __size_of_LCDWriteString 0041  
