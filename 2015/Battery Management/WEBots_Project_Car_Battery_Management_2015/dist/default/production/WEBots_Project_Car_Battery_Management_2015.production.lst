

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jul 06 22:29:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0110                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011A                     	;# 
   138  011B                     	;# 
   139  011C                     	;# 
   140  011D                     	;# 
   141  011E                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144                           
   145                           	psect	idataCOMMON
   146  15D2                     __pidataCOMMON:	
   147                           
   148                           ;initializer for _supVolt
   149  15D2  3466               	retlw	102
   150  15D3  3486               	retlw	134
   151  15D4  3440               	retlw	64
   152                           
   153                           ;initializer for _currentGain
   154  15D5  34C8               	retlw	200
   155                           
   156                           	psect	idataBANK1
   157  15CF                     __pidataBANK1:	
   158                           
   159                           ;initializer for _shuntRes
   160  15CF  34D7               	retlw	215
   161  15D0  3423               	retlw	35
   162  15D1  343C               	retlw	60
   163                           
   164                           	psect	strings
   165  0800                     __pstrings:	
   166  0800                     stringtab:	
   167  0800                     __stringtab:	
   168                           
   169                           ;	String table - string pointers are 1 byte each
   170  0800  1BFF               	btfsc	btemp+1,7
   171  0801  280A               	ljmp	stringcode
   172  0802  1383               	bcf	3,7
   173  0803  187F               	btfsc	btemp+1,0
   174  0804  1783               	bsf	3,7
   175  0805  0800               	movf	0,w
   176  0806  0A84               	incf	4,f
   177  0807  1903               	skipnz
   178  0808  0AFF               	incf	btemp+1,f
   179  0809  0008               	return
   180  080A                     stringcode:	
   181  080A                     stringdir:	
   182  080A  3008               	movlw	high stringdir
   183  080B  008A               	movwf	10
   184  080C  0804               	movf	4,w
   185  080D  0A84               	incf	4,f
   186  080E  0782               	addwf	2,f
   187  080F                     __stringbase:	
   188  080F  3400               	retlw	0
   189  0810                     __end_of__stringtab:	
   190  0810                     _convConst:	
   191  0810  3412               	retlw	18
   192  0811  3403               	retlw	3
   193  0812  343E               	retlw	62
   194  0813                     __end_of_convConst:	
   195  0813                     _refVolt:	
   196  0813  349E               	retlw	158
   197  0814  348F               	retlw	143
   198  0815  343F               	retlw	63
   199  0816                     __end_of_refVolt:	
   200  0816                     _cell1RDT:	
   201  0816  3498               	retlw	152
   202  0817  3408               	retlw	8
   203  0818                     __end_of_cell1RDT:	
   204  0818                     _cell2RDT:	
   205  0818  345C               	retlw	92
   206  0819  3412               	retlw	18
   207  081A                     __end_of_cell2RDT:	
   208  081A                     _cell3RDT:	
   209  081A  3410               	retlw	16
   210  081B  3427               	retlw	39
   211  081C                     __end_of_cell3RDT:	
   212  081C                     _cell4RDT:	
   213  081C  346C               	retlw	108
   214  081D  3439               	retlw	57
   215  081E                     __end_of_cell4RDT:	
   216  081E                     _cell5RDT:	
   217  081E  3420               	retlw	32
   218  081F  344E               	retlw	78
   219  0820                     __end_of_cell5RDT:	
   220  0820                     _cell6RDT:	
   221  0820  347C               	retlw	124
   222  0821  3460               	retlw	96
   223  0822                     __end_of_cell6RDT:	
   224  0822                     _cellRDB:	
   225  0822  3498               	retlw	152
   226  0823  3408               	retlw	8
   227  0824                     __end_of_cellRDB:	
   228  001F                     _ADCON0	set	31
   229  001F                     _ADCON0bits	set	31
   230  001E                     _ADRESH	set	30
   231  0017                     _CCP1CON	set	23
   232  001D                     _CCP2CON	set	29
   233  000B                     _INTCONbits	set	11
   234  0005                     _PORTA	set	5
   235  0006                     _PORTB	set	6
   236  0007                     _PORTC	set	7
   237  0008                     _PORTD	set	8
   238  0009                     _PORTE	set	9
   239  0001                     _TMR0	set	1
   240  002E                     _RA6	set	46
   241  002F                     _RA7	set	47
   242  0030                     _RB0	set	48
   243  0031                     _RB1	set	49
   244  0032                     _RB2	set	50
   245  0033                     _RB3	set	51
   246  0034                     _RB4	set	52
   247  0035                     _RB5	set	53
   248  0038                     _RC0	set	56
   249  0039                     _RC1	set	57
   250  003A                     _RC2	set	58
   251  003B                     _RC3	set	59
   252  0040                     _RD0	set	64
   253  0041                     _RD1	set	65
   254  0042                     _RD2	set	66
   255  0044                     _RD4	set	68
   256  0045                     _RD5	set	69
   257  0046                     _RD6	set	70
   258  0047                     _RD7	set	71
   259  009F                     _ADCON1	set	159
   260  009E                     _ADRESL	set	158
   261  0091                     _ANSEL	set	145
   262  009C                     _CMCON0bits	set	156
   263  0081                     _OPTION_REGbits	set	129
   264  008F                     _OSCCONbits	set	143
   265  0085                     _TRISA	set	133
   266  0086                     _TRISB	set	134
   267  0087                     _TRISC	set	135
   268  0088                     _TRISD	set	136
   269  0089                     _TRISE	set	137
   270  0107                     _LCDCON	set	263
   271  0109                     _LVDCONbits	set	265
   272  0824                     STR_4:	
   273  0824  3420               	retlw	32	;' '
   274  0825  3441               	retlw	65	;'A'
   275  0826  3420               	retlw	32	;' '
   276  0827  3420               	retlw	32	;' '
   277  0828  3420               	retlw	32	;' '
   278  0829  3420               	retlw	32	;' '
   279  082A  3420               	retlw	32	;' '
   280  082B  3420               	retlw	32	;' '
   281  082C  3420               	retlw	32	;' '
   282  082D  3400               	retlw	0
   283  082E                     STR_2:	
   284  082E  3420               	retlw	32	;' '
   285  082F  3456               	retlw	86	;'V'
   286  0830  3420               	retlw	32	;' '
   287  0831  3420               	retlw	32	;' '
   288  0832  3420               	retlw	32	;' '
   289  0833  3420               	retlw	32	;' '
   290  0834  3420               	retlw	32	;' '
   291  0835  3420               	retlw	32	;' '
   292  0836  3400               	retlw	0
   293  0837                     STR_1:	
   294  0837  3456               	retlw	86	;'V'
   295  0838  346F               	retlw	111	;'o'
   296  0839  346C               	retlw	108	;'l'
   297  083A  3474               	retlw	116	;'t'
   298  083B  3461               	retlw	97	;'a'
   299  083C  3467               	retlw	103	;'g'
   300  083D  3465               	retlw	101	;'e'
   301  083E  343A               	retlw	58	;':'
   302  083F  3400               	retlw	0
   303  0840                     STR_3:	
   304  0840  3443               	retlw	67	;'C'
   305  0841  3475               	retlw	117	;'u'
   306  0842  3472               	retlw	114	;'r'
   307  0843  3472               	retlw	114	;'r'
   308  0844  3465               	retlw	101	;'e'
   309  0845  346E               	retlw	110	;'n'
   310  0846  3474               	retlw	116	;'t'
   311  0847  343A               	retlw	58	;':'
   312  0848  3400               	retlw	0
   313                           
   314                           ; #config settings
   315  0000                     
   316                           	psect	cinit
   317  0015                     start_initialization:	
   318  0015                     __initialization:	
   319                           
   320                           ; Clear objects allocated to COMMON
   321  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   322  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   323                           
   324                           ; Clear objects allocated to BANK0
   325  0017  01EF               	clrf	__pbssBANK0& (0+127)
   326                           
   327                           ; Clear objects allocated to BANK1
   328  0018  1383               	bcf	3,7	;select IRP bank0
   329  0019  30CB               	movlw	low __pbssBANK1
   330  001A  0084               	movwf	4
   331  001B  30E8               	movlw	low (__pbssBANK1+29)
   332  001C  160A  118A  25D6  120A  118A  	fcall	clear_ram0
   333                           
   334                           ; Clear objects allocated to BANK3
   335  0021  1783               	bsf	3,7	;select IRP bank2
   336  0022  3090               	movlw	low __pbssBANK3
   337  0023  0084               	movwf	4
   338  0024  30C0               	movlw	low (__pbssBANK3+48)
   339  0025  160A  118A  25D6  120A  118A  	fcall	clear_ram0
   340                           
   341                           ; Initialize objects allocated to BANK1
   342  002A  1683               	bsf	3,5	;RP0=1, select bank1
   343  002B  1303               	bcf	3,6	;RP1=0, select bank1
   344  002C  160A  118A  25CF  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   345  0031  00E8               	movwf	__pdataBANK1& (0+127)
   346  0032  160A  118A  25D0  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   347  0037  00E9               	movwf	(__pdataBANK1+1)& (0+127)
   348  0038  160A  118A  25D1  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   349  003D  00EA               	movwf	(__pdataBANK1+2)& (0+127)
   350                           
   351                           ; Initialize objects allocated to COMMON
   352  003E  160A  118A  25D2  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   353  0043  00F8               	movwf	__pdataCOMMON& (0+127)
   354  0044  160A  118A  25D3  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   355  0049  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   356  004A  160A  118A  25D4  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   357  004F  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
   358  0050  160A  118A  25D5   	fcall	__pidataCOMMON+3	;fetch initializer
   359  0053  00FB               	movwf	(__pdataCOMMON+3)& (0+127)
   360  0054                     end_of_initialization:	
   361                           ;End of C runtime variable initialization code
   362                           
   363  0054                     __end_of__initialization:	
   364  0054  0183               	clrf	3
   365  0055  160A  118A  2F23   	ljmp	_main	;jump to C main() function
   366                           
   367                           	psect	bssCOMMON
   368  007C                     __pbssCOMMON:	
   369  007C                     _refValue:	
   370  007C                     	ds	2
   371                           
   372                           	psect	dataCOMMON
   373  0078                     __pdataCOMMON:	
   374  0078                     _supVolt:	
   375  0078                     	ds	3
   376  007B                     _currentGain:	
   377  007B                     	ds	1
   378                           
   379                           	psect	bssBANK0
   380  006F                     __pbssBANK0:	
   381  006F                     _LCDDisplayMode:	
   382  006F                     	ds	1
   383                           
   384                           	psect	bssBANK1
   385  00CB                     __pbssBANK1:	
   386  00CB                     _cellVolt:	
   387  00CB                     	ds	18
   388  00DD                     _time:	
   389  00DD                     	ds	4
   390  00E1                     stopWatch@startTime:	
   391  00E1                     	ds	4
   392  00E5                     _current:	
   393  00E5                     	ds	3
   394                           
   395                           	psect	dataBANK1
   396  00E8                     __pdataBANK1:	
   397  00E8                     _shuntRes:	
   398  00E8                     	ds	3
   399                           
   400                           	psect	bssBANK3
   401  0190                     __pbssBANK3:	
   402  0190                     _btmStr:	
   403  0190                     	ds	16
   404  01A0                     _topStr:	
   405  01A0                     	ds	16
   406  01B0                     displayLCD@F2777:	
   407  01B0                     	ds	8
   408  01B8                     displayLCD@F2779:	
   409  01B8                     	ds	8
   410                           
   411                           	psect	clrtext
   412  15D6                     clear_ram0:	
   413                           ;	Called with FSR containing the base address, and
   414                           ;	W with the last address+1
   415                           
   416  15D6  0064               	clrwdt	;clear the watchdog before getting into this loop
   417  15D7                     clrloop0:	
   418  15D7  0180               	clrf	0	;clear RAM location pointed to by FSR
   419  15D8  0A84               	incf	4,f	;increment pointer
   420  15D9  0604               	xorwf	4,w	;XOR with final address
   421  15DA  1903               	btfsc	3,2	;have we reached the end yet?
   422  15DB  3400               	retlw	0	;all done for this memory range, return
   423  15DC  0604               	xorwf	4,w	;XOR again to restore value
   424  15DD  2DD7               	goto	clrloop0	;do the next byte
   425                           
   426                           	psect	cstackBANK1
   427  00A0                     __pcstackBANK1:	
   428  00A0                     ??_floatToASCII:	
   429  00A0                     ??_stopWatch:	
   430                           ; 0 bytes @ 0x0
   431                           
   432                           
   433                           ; 0 bytes @ 0x0
   434  00A0                     	ds	5
   435  00A5                     floatToASCII@j_342:	
   436                           
   437                           ; 1 bytes @ 0x5
   438  00A5                     	ds	1
   439  00A6                     floatToASCII@leading:	
   440                           
   441                           ; 1 bytes @ 0x6
   442  00A6                     	ds	1
   443  00A7                     floatToASCII@j:	
   444                           
   445                           ; 2 bytes @ 0x7
   446  00A7                     	ds	2
   447  00A9                     floatToASCII@prevSum:	
   448                           
   449                           ; 4 bytes @ 0x9
   450  00A9                     	ds	3
   451  00AC                     stopWatch@mode:	
   452                           
   453                           ; 1 bytes @ 0xC
   454  00AC                     	ds	1
   455  00AD                     floatToASCII@scaler:	
   456  00AD                     stopWatch@temp:	
   457                           ; 4 bytes @ 0xD
   458                           
   459                           
   460                           ; 4 bytes @ 0xD
   461  00AD                     	ds	4
   462  00B1                     ??_handlePB:	
   463  00B1                     floatToASCII@returnVal:	
   464                           ; 0 bytes @ 0x11
   465                           
   466                           
   467                           ; 1 bytes @ 0x11
   468  00B1                     	ds	1
   469  00B2                     floatToASCII@i:	
   470                           
   471                           ; 1 bytes @ 0x12
   472  00B2                     	ds	1
   473  00B3                     ?_displayLCD:	
   474  00B3                     displayLCD@disp:	
   475                           ; 0 bytes @ 0x13
   476                           
   477                           
   478                           ; 2 bytes @ 0x13
   479  00B3                     	ds	2
   480  00B5                     ??_displayLCD:	
   481                           
   482                           ; 0 bytes @ 0x15
   483  00B5                     	ds	4
   484  00B9                     displayLCD@temp1:	
   485                           
   486                           ; 8 bytes @ 0x19
   487  00B9                     	ds	8
   488  00C1                     displayLCD@temp2:	
   489                           
   490                           ; 8 bytes @ 0x21
   491  00C1                     	ds	8
   492  00C9                     ??_main:	
   493                           
   494                           ; 0 bytes @ 0x29
   495  00C9                     	ds	2
   496                           
   497                           	psect	cstackCOMMON
   498  0070                     __pcstackCOMMON:	
   499  0070                     ?_LCDSetBits:	
   500  0070                     ?_pulse:	
   501                           ; 0 bytes @ 0x0
   502                           
   503  0070                     ?_LCDcmd:	
   504                           ; 0 bytes @ 0x0
   505                           
   506  0070                     ?_currentGainInit:	
   507                           ; 0 bytes @ 0x0
   508                           
   509  0070                     ?_sampleReference:	
   510                           ; 0 bytes @ 0x0
   511                           
   512  0070                     ?_sampleCurrent:	
   513                           ; 0 bytes @ 0x0
   514                           
   515  0070                     ?_sampleBatteryCells:	
   516                           ; 0 bytes @ 0x0
   517                           
   518  0070                     ?_handlePB:	
   519                           ; 0 bytes @ 0x0
   520                           
   521  0070                     ?_initLCD:	
   522                           ; 0 bytes @ 0x0
   523                           
   524  0070                     ?_LCD4bitCmd:	
   525                           ; 0 bytes @ 0x0
   526                           
   527  0070                     ?_LCDWriteChar:	
   528                           ; 0 bytes @ 0x0
   529                           
   530  0070                     ?_LCDSetCursor:	
   531                           ; 0 bytes @ 0x0
   532                           
   533  0070                     ?_timeSetup:	
   534                           ; 0 bytes @ 0x0
   535                           
   536  0070                     ?_isrTimer0:	
   537                           ; 0 bytes @ 0x0
   538                           
   539  0070                     ??_isrTimer0:	
   540                           ; 0 bytes @ 0x0
   541                           
   542  0070                     ?_initADC:	
   543                           ; 0 bytes @ 0x0
   544                           
   545  0070                     ?_initController:	
   546                           ; 0 bytes @ 0x0
   547                           
   548  0070                     ?_isr:	
   549                           ; 0 bytes @ 0x0
   550                           
   551  0070                     ?_main:	
   552                           ; 0 bytes @ 0x0
   553                           
   554                           
   555                           ; 0 bytes @ 0x0
   556  0070                     	ds	4
   557  0074                     ??_isr:	
   558                           
   559                           ; 0 bytes @ 0x4
   560  0074                     	ds	4
   561                           
   562                           	psect	cstackBANK0
   563  0020                     __pcstackBANK0:	
   564  0020                     ??_LCDSetBits:	
   565  0020                     ??_pulse:	
   566                           ; 0 bytes @ 0x0
   567                           
   568  0020                     ??_currentGainInit:	
   569                           ; 0 bytes @ 0x0
   570                           
   571  0020                     ??_timeSetup:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0020                     ??_initADC:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0020                     ?_analogRead:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0020                     ?___lwdiv:	
   581                           ; 2 bytes @ 0x0
   582                           
   583  0020                     ?___ftpack:	
   584                           ; 2 bytes @ 0x0
   585                           
   586  0020                     ?___lmul:	
   587                           ; 3 bytes @ 0x0
   588                           
   589  0020                     ?___lldiv:	
   590                           ; 4 bytes @ 0x0
   591                           
   592  0020                     LCDSetBits@a:	
   593                           ; 4 bytes @ 0x0
   594                           
   595  0020                     currentGainInit@gain:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0020                     ___lwdiv@divisor:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0020                     ___ftpack@arg:	
   602                           ; 2 bytes @ 0x0
   603                           
   604  0020                     ___lmul@multiplier:	
   605                           ; 3 bytes @ 0x0
   606                           
   607  0020                     ___lldiv@divisor:	
   608                           ; 4 bytes @ 0x0
   609                           
   610                           
   611                           ; 4 bytes @ 0x0
   612  0020                     	ds	2
   613  0022                     ??_LCDcmd:	
   614  0022                     ??_LCD4bitCmd:	
   615                           ; 0 bytes @ 0x2
   616                           
   617  0022                     ??_LCDWriteChar:	
   618                           ; 0 bytes @ 0x2
   619                           
   620  0022                     ??_analogRead:	
   621                           ; 0 bytes @ 0x2
   622                           
   623  0022                     LCD4bitCmd@a:	
   624                           ; 0 bytes @ 0x2
   625                           
   626  0022                     ___lwdiv@dividend:	
   627                           ; 1 bytes @ 0x2
   628                           
   629                           
   630                           ; 2 bytes @ 0x2
   631  0022                     	ds	1
   632  0023                     ??_LCDSetCursor:	
   633  0023                     ___ftpack@exp:	
   634                           ; 0 bytes @ 0x3
   635                           
   636                           
   637                           ; 1 bytes @ 0x3
   638  0023                     	ds	1
   639  0024                     ??___lwdiv:	
   640  0024                     LCDcmd@a:	
   641                           ; 0 bytes @ 0x4
   642                           
   643  0024                     LCDWriteChar@a:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0024                     analogRead@chan:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0024                     ___ftpack@sign:	
   650                           ; 1 bytes @ 0x4
   651                           
   652  0024                     ___lmul@multiplicand:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0024                     ___lldiv@dividend:	
   656                           ; 4 bytes @ 0x4
   657                           
   658                           
   659                           ; 4 bytes @ 0x4
   660  0024                     	ds	1
   661  0025                     ??___ftpack:	
   662  0025                     ??_initLCD:	
   663                           ; 0 bytes @ 0x5
   664                           
   665  0025                     ?_LCDWriteString:	
   666                           ; 0 bytes @ 0x5
   667                           
   668  0025                     LCDSetCursor@a:	
   669                           ; 0 bytes @ 0x5
   670                           
   671  0025                     LCDWriteString@a:	
   672                           ; 1 bytes @ 0x5
   673                           
   674  0025                     analogRead@returnVal:	
   675                           ; 2 bytes @ 0x5
   676                           
   677  0025                     ___lwdiv@quotient:	
   678                           ; 2 bytes @ 0x5
   679                           
   680                           
   681                           ; 2 bytes @ 0x5
   682  0025                     	ds	2
   683  0027                     ??_LCDWriteString:	
   684  0027                     ___lwdiv@counter:	
   685                           ; 0 bytes @ 0x7
   686                           
   687                           
   688                           ; 1 bytes @ 0x7
   689  0027                     	ds	1
   690  0028                     ??_initController:	
   691  0028                     ??___lmul:	
   692                           ; 0 bytes @ 0x8
   693                           
   694  0028                     ??___lldiv:	
   695                           ; 0 bytes @ 0x8
   696                           
   697  0028                     ?___lbtoft:	
   698                           ; 0 bytes @ 0x8
   699                           
   700  0028                     ?___lltoft:	
   701                           ; 3 bytes @ 0x8
   702                           
   703  0028                     ?___lwtoft:	
   704                           ; 3 bytes @ 0x8
   705                           
   706  0028                     ___lwtoft@c:	
   707                           ; 3 bytes @ 0x8
   708                           
   709  0028                     ___lltoft@c:	
   710                           ; 2 bytes @ 0x8
   711                           
   712                           
   713                           ; 4 bytes @ 0x8
   714  0028                     	ds	1
   715  0029                     ___lmul@product:	
   716  0029                     ___lldiv@quotient:	
   717                           ; 4 bytes @ 0x9
   718                           
   719                           
   720                           ; 4 bytes @ 0x9
   721  0029                     	ds	1
   722  002A                     LCDWriteString@i:	
   723                           
   724                           ; 2 bytes @ 0xA
   725  002A                     	ds	1
   726  002B                     ??___lbtoft:	
   727  002B                     ??___lwtoft:	
   728                           ; 0 bytes @ 0xB
   729                           
   730                           
   731                           ; 0 bytes @ 0xB
   732  002B                     	ds	1
   733  002C                     ??___lltoft:	
   734                           
   735                           ; 0 bytes @ 0xC
   736  002C                     	ds	1
   737  002D                     ___lldiv@counter:	
   738  002D                     ___lltoft@exp:	
   739                           ; 1 bytes @ 0xD
   740                           
   741                           
   742                           ; 1 bytes @ 0xD
   743  002D                     	ds	1
   744  002E                     ?___ftneg:	
   745  002E                     ___ftneg@f1:	
   746                           ; 3 bytes @ 0xE
   747                           
   748                           
   749                           ; 3 bytes @ 0xE
   750  002E                     	ds	1
   751  002F                     ___lbtoft@c:	
   752                           
   753                           ; 1 bytes @ 0xF
   754  002F                     	ds	1
   755  0030                     ?___ftmul:	
   756  0030                     ___ftmul@f1:	
   757                           ; 3 bytes @ 0x10
   758                           
   759                           
   760                           ; 3 bytes @ 0x10
   761  0030                     	ds	1
   762  0031                     ??___ftneg:	
   763                           
   764                           ; 0 bytes @ 0x11
   765  0031                     	ds	2
   766  0033                     ___ftmul@f2:	
   767                           
   768                           ; 3 bytes @ 0x13
   769  0033                     	ds	3
   770  0036                     ??___ftmul:	
   771                           
   772                           ; 0 bytes @ 0x16
   773  0036                     	ds	4
   774  003A                     ___ftmul@exp:	
   775                           
   776                           ; 1 bytes @ 0x1A
   777  003A                     	ds	1
   778  003B                     ___ftmul@f3_as_product:	
   779                           
   780                           ; 3 bytes @ 0x1B
   781  003B                     	ds	3
   782  003E                     ___ftmul@cntr:	
   783                           
   784                           ; 1 bytes @ 0x1E
   785  003E                     	ds	1
   786  003F                     ___ftmul@sign:	
   787                           
   788                           ; 1 bytes @ 0x1F
   789  003F                     	ds	1
   790  0040                     ?___ftadd:	
   791  0040                     ___ftadd@f1:	
   792                           ; 3 bytes @ 0x20
   793                           
   794                           
   795                           ; 3 bytes @ 0x20
   796  0040                     	ds	3
   797  0043                     ___ftadd@f2:	
   798                           
   799                           ; 3 bytes @ 0x23
   800  0043                     	ds	3
   801  0046                     ??___ftadd:	
   802                           
   803                           ; 0 bytes @ 0x26
   804  0046                     	ds	4
   805  004A                     ___ftadd@sign:	
   806                           
   807                           ; 1 bytes @ 0x2A
   808  004A                     	ds	1
   809  004B                     ___ftadd@exp2:	
   810                           
   811                           ; 1 bytes @ 0x2B
   812  004B                     	ds	1
   813  004C                     ___ftadd@exp1:	
   814                           
   815                           ; 1 bytes @ 0x2C
   816  004C                     	ds	1
   817  004D                     ?___ftdiv:	
   818  004D                     ___ftdiv@f2:	
   819                           ; 3 bytes @ 0x2D
   820                           
   821                           
   822                           ; 3 bytes @ 0x2D
   823  004D                     	ds	3
   824  0050                     ___ftdiv@f1:	
   825                           
   826                           ; 3 bytes @ 0x30
   827  0050                     	ds	3
   828  0053                     ??___ftdiv:	
   829                           
   830                           ; 0 bytes @ 0x33
   831  0053                     	ds	4
   832  0057                     ___ftdiv@cntr:	
   833                           
   834                           ; 1 bytes @ 0x37
   835  0057                     	ds	1
   836  0058                     ___ftdiv@f3:	
   837                           
   838                           ; 3 bytes @ 0x38
   839  0058                     	ds	3
   840  005B                     ___ftdiv@exp:	
   841                           
   842                           ; 1 bytes @ 0x3B
   843  005B                     	ds	1
   844  005C                     ___ftdiv@sign:	
   845                           
   846                           ; 1 bytes @ 0x3C
   847  005C                     	ds	1
   848  005D                     ??_sampleReference:	
   849  005D                     ??_sampleCurrent:	
   850                           ; 0 bytes @ 0x3D
   851                           
   852  005D                     ?_sampleVoltage:	
   853                           ; 0 bytes @ 0x3D
   854                           
   855  005D                     ?___fttol:	
   856                           ; 3 bytes @ 0x3D
   857                           
   858  005D                     ___fttol@f1:	
   859                           ; 4 bytes @ 0x3D
   860                           
   861  005D                     _sampleCurrent$872:	
   862                           ; 3 bytes @ 0x3D
   863                           
   864                           
   865                           ; 3 bytes @ 0x3D
   866  005D                     	ds	2
   867  005F                     sampleReference@i:	
   868                           
   869                           ; 2 bytes @ 0x3F
   870  005F                     	ds	1
   871  0060                     sampleCurrent@i:	
   872                           
   873                           ; 2 bytes @ 0x40
   874  0060                     	ds	1
   875  0061                     ??_sampleVoltage:	
   876  0061                     ??___fttol:	
   877                           ; 0 bytes @ 0x41
   878                           
   879  0061                     sampleVoltage@chan:	
   880                           ; 0 bytes @ 0x41
   881                           
   882                           
   883                           ; 1 bytes @ 0x41
   884  0061                     	ds	1
   885  0062                     sampleVoltage@i:	
   886  0062                     sampleCurrent@temp:	
   887                           ; 2 bytes @ 0x42
   888                           
   889                           
   890                           ; 2 bytes @ 0x42
   891  0062                     	ds	2
   892  0064                     sampleVoltage@temp:	
   893                           
   894                           ; 2 bytes @ 0x44
   895  0064                     	ds	1
   896  0065                     ___fttol@sign1:	
   897                           
   898                           ; 1 bytes @ 0x45
   899  0065                     	ds	1
   900  0066                     ??_sampleBatteryCells:	
   901  0066                     ___fttol@lval:	
   902                           ; 0 bytes @ 0x46
   903                           
   904                           
   905                           ; 4 bytes @ 0x46
   906  0066                     	ds	4
   907  006A                     ___fttol@exp1:	
   908  006A                     _sampleBatteryCells$871:	
   909                           ; 1 bytes @ 0x4A
   910                           
   911                           
   912                           ; 3 bytes @ 0x4A
   913  006A                     	ds	1
   914  006B                     ?_floatToASCII:	
   915  006B                     ?_stopWatch:	
   916                           ; 0 bytes @ 0x4B
   917                           
   918  006B                     floatToASCII@num:	
   919                           ; 4 bytes @ 0x4B
   920                           
   921                           
   922                           ; 3 bytes @ 0x4B
   923  006B                     	ds	3
   924  006E                     floatToASCII@precision:	
   925                           
   926                           ; 1 bytes @ 0x4E
   927  006E                     	ds	1
   928                           
   929                           	psect	maintext
   930  1723                     __pmaintext:	
   931 ;;
   932 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   933 ;;
   934 ;; *************** function _main *****************
   935 ;; Defined at:
   936 ;;		line 64 in file "PIC16F917 Battery Management.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;		None               void
   943 ;; Registers used:
   944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : B00/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0
   952 ;;      Temps:          0       0       2       0       0
   953 ;;      Totals:         0       0       2       0       0
   954 ;;Total ram usage:        2 bytes
   955 ;; Hardware stack levels required when called:    6
   956 ;; This function calls:
   957 ;;		_currentGainInit
   958 ;;		_displayLCD
   959 ;;		_handlePB
   960 ;;		_initController
   961 ;;		_sampleBatteryCells
   962 ;;		_sampleCurrent
   963 ;;		_sampleReference
   964 ;; This function is called by:
   965 ;;		Startup code after reset
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           
   970                           ;psect for function _main
   971  1723                     _main:	
   972                           
   973                           ;PIC16F917 Battery Management.c: 66: initController();
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   977  1723  160A  118A  2756  160A  118A  	fcall	_initController
   978                           
   979                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
   980  1728  1283               	bcf	3,5	;RP0=0, select bank0
   981  1729  1303               	bcf	3,6	;RP1=0, select bank0
   982  172A  1608               	bsf	8,4	;volatile
   983                           
   984                           ;PIC16F917 Battery Management.c: 72: currentGainInit(200);
   985  172B  30C8               	movlw	200
   986  172C  160A  118A  265C  160A  118A  	fcall	_currentGainInit
   987  1731                     l2478:	
   988                           ;PIC16F917 Battery Management.c: 75: while(1)
   989                           
   990                           
   991                           ;PIC16F917 Battery Management.c: 76: {
   992                           ;PIC16F917 Battery Management.c: 77: sampleReference();
   993  1731  120A  158A  2369  160A  118A  	fcall	_sampleReference
   994                           
   995                           ;PIC16F917 Battery Management.c: 78: sampleCurrent();
   996  1736  120A  158A  2562  160A  118A  	fcall	_sampleCurrent
   997                           
   998                           ;PIC16F917 Battery Management.c: 79: sampleBatteryCells();
   999  173B  120A  118A  235C  160A  118A  	fcall	_sampleBatteryCells
  1000                           
  1001                           ;PIC16F917 Battery Management.c: 81: handlePB();
  1002  1740  120A  158A  2131  160A  118A  	fcall	_handlePB
  1003                           
  1004                           ;PIC16F917 Battery Management.c: 83: displayLCD(LCDDisplayMode);
  1005  1745  1283               	bcf	3,5	;RP0=0, select bank0
  1006  1746  1303               	bcf	3,6	;RP1=0, select bank0
  1007  1747  086F               	movf	_LCDDisplayMode,w
  1008  1748  1683               	bsf	3,5	;RP0=1, select bank1
  1009  1749  1303               	bcf	3,6	;RP1=0, select bank1
  1010  174A  00C9               	movwf	??_main^(0+128)
  1011  174B  01CA               	clrf	(??_main^(0+128)+1)
  1012  174C  0849               	movf	??_main^(0+128),w
  1013  174D  00B3               	movwf	displayLCD@disp^(0+128)
  1014  174E  084A               	movf	(??_main+1)^(0+128),w
  1015  174F  00B4               	movwf	(displayLCD@disp+1)^(0+128)
  1016  1750  120A  118A  2740  160A  118A  	fcall	_displayLCD
  1017  1755  2F31               	goto	l2478
  1018  1756                     __end_of_main:	
  1019                           
  1020                           	psect	text1
  1021  0B69                     __ptext1:	
  1022 ;; *************** function _sampleReference *****************
  1023 ;; Defined at:
  1024 ;;		line 119 in file "PIC16F917 Battery Management.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  i               2   63[BANK0 ] int 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;		None               void
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1038 ;;      Params:         0       0       0       0       0
  1039 ;;      Locals:         0       2       0       0       0
  1040 ;;      Temps:          0       2       0       0       0
  1041 ;;      Totals:         0       4       0       0       0
  1042 ;;Total ram usage:        4 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    4
  1045 ;; This function calls:
  1046 ;;		___ftdiv
  1047 ;;		___ftmul
  1048 ;;		___lwdiv
  1049 ;;		___lwtoft
  1050 ;;		_analogRead
  1051 ;; This function is called by:
  1052 ;;		_main
  1053 ;;		_checkCurrent
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           
  1058                           ;psect for function _sampleReference
  1059  0B69                     _sampleReference:	
  1060                           
  1061                           ;PIC16F917 Battery Management.c: 122: RD1 = 1;
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1065  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0B6B  1488               	bsf	8,1	;volatile
  1068                           
  1069                           ;PIC16F917 Battery Management.c: 124: RC2 = 1;
  1070  0B6C  1507               	bsf	7,2	;volatile
  1071                           
  1072                           ;PIC16F917 Battery Management.c: 126: _delay((unsigned long)((5)*(8000000/4000.0)));
  1073  0B6D  300D               	movlw	13
  1074  0B6E  00DE               	movwf	??_sampleReference+1
  1075  0B6F  30FB               	movlw	251
  1076  0B70  00DD               	movwf	??_sampleReference
  1077  0B71                     u2967:	
  1078  0B71  0BDD               	decfsz	??_sampleReference,f
  1079  0B72  2B71               	goto	u2967
  1080  0B73  0BDE               	decfsz	??_sampleReference+1,f
  1081  0B74  2B71               	goto	u2967
  1082  0B75  2B76               	nop2
  1083                           
  1084                           ;PIC16F917 Battery Management.c: 128: refValue = 0;
  1085  0B76  01FC               	clrf	_refValue
  1086  0B77  01FD               	clrf	_refValue+1
  1087                           
  1088                           ;PIC16F917 Battery Management.c: 130: for ( int i = 0; i <= 10; i++)
  1089  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0B7A  01DF               	clrf	sampleReference@i
  1092  0B7B  01E0               	clrf	sampleReference@i+1
  1093  0B7C  0860               	movf	sampleReference@i+1,w
  1094  0B7D  3A80               	xorlw	128
  1095  0B7E  00FF               	movwf	127
  1096  0B7F  3080               	movlw	128
  1097  0B80  027F               	subwf	127,w
  1098  0B81  1D03               	skipz
  1099  0B82  2B85               	goto	u2725
  1100  0B83  300B               	movlw	11
  1101  0B84  025F               	subwf	sampleReference@i,w
  1102  0B85                     u2725:	
  1103  0B85  1803               	btfsc	3,0
  1104  0B86  2BA6               	goto	l2318
  1105  0B87                     l2312:	
  1106                           
  1107                           ;PIC16F917 Battery Management.c: 131: {
  1108                           ;PIC16F917 Battery Management.c: 132: refValue += analogRead(REFV);
  1109  0B87  3002               	movlw	2
  1110  0B88  160A  118A  27C7  120A  158A  	fcall	_analogRead
  1111  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0B8F  0820               	movf	?_analogRead,w
  1114  0B90  07FC               	addwf	_refValue,f
  1115  0B91  1803               	skipnc
  1116  0B92  0AFD               	incf	_refValue+1,f
  1117  0B93  0821               	movf	?_analogRead+1,w
  1118  0B94  07FD               	addwf	_refValue+1,f
  1119  0B95  3001               	movlw	1
  1120  0B96  07DF               	addwf	sampleReference@i,f
  1121  0B97  1803               	skipnc
  1122  0B98  0AE0               	incf	sampleReference@i+1,f
  1123  0B99  3000               	movlw	0
  1124  0B9A  07E0               	addwf	sampleReference@i+1,f
  1125  0B9B  0860               	movf	sampleReference@i+1,w
  1126  0B9C  3A80               	xorlw	128
  1127  0B9D  00FF               	movwf	127
  1128  0B9E  3080               	movlw	128
  1129  0B9F  027F               	subwf	127,w
  1130  0BA0  1D03               	skipz
  1131  0BA1  2BA4               	goto	u2735
  1132  0BA2  300B               	movlw	11
  1133  0BA3  025F               	subwf	sampleReference@i,w
  1134  0BA4                     u2735:	
  1135  0BA4  1C03               	skipc
  1136  0BA5  2B87               	goto	l2312
  1137  0BA6                     l2318:	
  1138                           
  1139                           ;PIC16F917 Battery Management.c: 133: }
  1140                           ;PIC16F917 Battery Management.c: 135: refValue = refValue / 10;
  1141  0BA6  300A               	movlw	10
  1142  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0BA9  00A0               	movwf	___lwdiv@divisor
  1145  0BAA  3000               	movlw	0
  1146  0BAB  00A1               	movwf	___lwdiv@divisor+1
  1147  0BAC  087D               	movf	_refValue+1,w
  1148  0BAD  00A3               	movwf	___lwdiv@dividend+1
  1149  0BAE  087C               	movf	_refValue,w
  1150  0BAF  00A2               	movwf	___lwdiv@dividend
  1151  0BB0  120A  158A  2071  120A  158A  	fcall	___lwdiv
  1152  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0BB7  0821               	movf	?___lwdiv+1,w
  1155  0BB8  00FD               	movwf	_refValue+1
  1156  0BB9  0820               	movf	?___lwdiv,w
  1157  0BBA  00FC               	movwf	_refValue
  1158                           
  1159                           ;PIC16F917 Battery Management.c: 138: RD1 = 0;
  1160  0BBB  1088               	bcf	8,1	;volatile
  1161                           
  1162                           ;PIC16F917 Battery Management.c: 140: RC2 = 0;
  1163  0BBC  1107               	bcf	7,2	;volatile
  1164                           
  1165                           ;PIC16F917 Battery Management.c: 142: supVolt = (refVolt * 1023)/refValue;
  1166  0BBD  087D               	movf	_refValue+1,w
  1167  0BBE  00A9               	movwf	___lwtoft@c+1
  1168  0BBF  087C               	movf	_refValue,w
  1169  0BC0  00A8               	movwf	___lwtoft@c
  1170  0BC1  160A  118A  2644  120A  158A  	fcall	___lwtoft
  1171  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  1172  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  1173  0BC8  0828               	movf	?___lwtoft,w
  1174  0BC9  00CD               	movwf	___ftdiv@f2
  1175  0BCA  0829               	movf	?___lwtoft+1,w
  1176  0BCB  00CE               	movwf	___ftdiv@f2+1
  1177  0BCC  082A               	movf	?___lwtoft+2,w
  1178  0BCD  00CF               	movwf	___ftdiv@f2+2
  1179  0BCE  30C0               	movlw	192
  1180  0BCF  00B0               	movwf	___ftmul@f1
  1181  0BD0  307F               	movlw	127
  1182  0BD1  00B1               	movwf	___ftmul@f1+1
  1183  0BD2  3044               	movlw	68
  1184  0BD3  00B2               	movwf	___ftmul@f1+2
  1185  0BD4  3004               	movlw	low (_refVolt-__stringbase)
  1186  0BD5  0084               	movwf	4
  1187  0BD6  120A  158A  200A  120A  158A  	fcall	stringdir
  1188  0BDB  00B3               	movwf	___ftmul@f2
  1189  0BDC  120A  158A  200A  120A  158A  	fcall	stringdir
  1190  0BE1  00B4               	movwf	___ftmul@f2+1
  1191  0BE2  120A  158A  200A  120A  158A  	fcall	stringdir
  1192  0BE7  00B5               	movwf	___ftmul@f2+2
  1193  0BE8  120A  158A  2627  120A  158A  	fcall	___ftmul
  1194  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0BEF  0830               	movf	?___ftmul,w
  1197  0BF0  00D0               	movwf	___ftdiv@f1
  1198  0BF1  0831               	movf	?___ftmul+1,w
  1199  0BF2  00D1               	movwf	___ftdiv@f1+1
  1200  0BF3  0832               	movf	?___ftmul+2,w
  1201  0BF4  00D2               	movwf	___ftdiv@f1+2
  1202  0BF5  120A  158A  24AA   	fcall	___ftdiv
  1203  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0BFA  084D               	movf	?___ftdiv,w
  1206  0BFB  00F8               	movwf	_supVolt
  1207  0BFC  084E               	movf	?___ftdiv+1,w
  1208  0BFD  00F9               	movwf	_supVolt+1
  1209  0BFE  084F               	movf	?___ftdiv+2,w
  1210  0BFF  00FA               	movwf	_supVolt+2
  1211  0C00  0008               	return
  1212  0C01                     __end_of_sampleReference:	
  1213                           
  1214                           	psect	text2
  1215  0D62                     __ptext2:	
  1216 ;; *************** function _sampleCurrent *****************
  1217 ;; Defined at:
  1218 ;;		line 160 in file "PIC16F917 Battery Management.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  i               2   64[BANK0 ] int 
  1223 ;;  temp            2   66[BANK0 ] unsigned int 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;		None               void
  1226 ;; Registers used:
  1227 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1233 ;;      Params:         0       0       0       0       0
  1234 ;;      Locals:         0       7       0       0       0
  1235 ;;      Temps:          0       0       0       0       0
  1236 ;;      Totals:         0       7       0       0       0
  1237 ;;Total ram usage:        7 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    4
  1240 ;; This function calls:
  1241 ;;		___ftdiv
  1242 ;;		___ftmul
  1243 ;;		___lbtoft
  1244 ;;		___lwdiv
  1245 ;;		___lwtoft
  1246 ;;		_analogRead
  1247 ;; This function is called by:
  1248 ;;		_main
  1249 ;;		_checkCurrent
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _sampleCurrent
  1255  0D62                     _sampleCurrent:	
  1256                           
  1257                           ;PIC16F917 Battery Management.c: 162: uint16_t temp = 0;
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _sampleCurrent: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1261  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0D64  01E2               	clrf	sampleCurrent@temp
  1264  0D65  01E3               	clrf	sampleCurrent@temp+1
  1265                           
  1266                           ;PIC16F917 Battery Management.c: 164: for ( int i = 0; i <= 10; i++)
  1267  0D66  01E0               	clrf	sampleCurrent@i
  1268  0D67  01E1               	clrf	sampleCurrent@i+1
  1269  0D68  0861               	movf	sampleCurrent@i+1,w
  1270  0D69  3A80               	xorlw	128
  1271  0D6A  00FF               	movwf	127
  1272  0D6B  3080               	movlw	128
  1273  0D6C  027F               	subwf	127,w
  1274  0D6D  1D03               	skipz
  1275  0D6E  2D71               	goto	u2745
  1276  0D6F  300B               	movlw	11
  1277  0D70  0260               	subwf	sampleCurrent@i,w
  1278  0D71                     u2745:	
  1279  0D71  1803               	btfsc	3,0
  1280  0D72  2D92               	goto	l2338
  1281  0D73                     l2332:	
  1282                           
  1283                           ;PIC16F917 Battery Management.c: 165: {
  1284                           ;PIC16F917 Battery Management.c: 166: temp += analogRead(CURRENT);
  1285  0D73  3007               	movlw	7
  1286  0D74  160A  118A  27C7  120A  158A  	fcall	_analogRead
  1287  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0D7B  0820               	movf	?_analogRead,w
  1290  0D7C  07E2               	addwf	sampleCurrent@temp,f
  1291  0D7D  1803               	skipnc
  1292  0D7E  0AE3               	incf	sampleCurrent@temp+1,f
  1293  0D7F  0821               	movf	?_analogRead+1,w
  1294  0D80  07E3               	addwf	sampleCurrent@temp+1,f
  1295  0D81  3001               	movlw	1
  1296  0D82  07E0               	addwf	sampleCurrent@i,f
  1297  0D83  1803               	skipnc
  1298  0D84  0AE1               	incf	sampleCurrent@i+1,f
  1299  0D85  3000               	movlw	0
  1300  0D86  07E1               	addwf	sampleCurrent@i+1,f
  1301  0D87  0861               	movf	sampleCurrent@i+1,w
  1302  0D88  3A80               	xorlw	128
  1303  0D89  00FF               	movwf	127
  1304  0D8A  3080               	movlw	128
  1305  0D8B  027F               	subwf	127,w
  1306  0D8C  1D03               	skipz
  1307  0D8D  2D90               	goto	u2755
  1308  0D8E  300B               	movlw	11
  1309  0D8F  0260               	subwf	sampleCurrent@i,w
  1310  0D90                     u2755:	
  1311  0D90  1C03               	skipc
  1312  0D91  2D73               	goto	l2332
  1313  0D92                     l2338:	
  1314                           
  1315                           ;PIC16F917 Battery Management.c: 167: }
  1316                           ;PIC16F917 Battery Management.c: 169: temp = temp / 10;
  1317  0D92  300A               	movlw	10
  1318  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0D95  00A0               	movwf	___lwdiv@divisor
  1321  0D96  3000               	movlw	0
  1322  0D97  00A1               	movwf	___lwdiv@divisor+1
  1323  0D98  0863               	movf	sampleCurrent@temp+1,w
  1324  0D99  00A3               	movwf	___lwdiv@dividend+1
  1325  0D9A  0862               	movf	sampleCurrent@temp,w
  1326  0D9B  00A2               	movwf	___lwdiv@dividend
  1327  0D9C  120A  158A  2071  120A  158A  	fcall	___lwdiv
  1328  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0DA3  0821               	movf	?___lwdiv+1,w
  1331  0DA4  00E3               	movwf	sampleCurrent@temp+1
  1332  0DA5  0820               	movf	?___lwdiv,w
  1333  0DA6  00E2               	movwf	sampleCurrent@temp
  1334                           
  1335                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1336  0DA7  30C0               	movlw	192
  1337  0DA8  00CD               	movwf	___ftdiv@f2
  1338  0DA9  307F               	movlw	127
  1339  0DAA  00CE               	movwf	___ftdiv@f2+1
  1340  0DAB  3044               	movlw	68
  1341  0DAC  00CF               	movwf	___ftdiv@f2+2
  1342  0DAD  0878               	movf	_supVolt,w
  1343  0DAE  00B0               	movwf	___ftmul@f1
  1344  0DAF  0879               	movf	_supVolt+1,w
  1345  0DB0  00B1               	movwf	___ftmul@f1+1
  1346  0DB1  087A               	movf	_supVolt+2,w
  1347  0DB2  00B2               	movwf	___ftmul@f1+2
  1348  0DB3  0863               	movf	sampleCurrent@temp+1,w
  1349  0DB4  00A9               	movwf	___lwtoft@c+1
  1350  0DB5  0862               	movf	sampleCurrent@temp,w
  1351  0DB6  00A8               	movwf	___lwtoft@c
  1352  0DB7  160A  118A  2644  120A  158A  	fcall	___lwtoft
  1353  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0DBE  0828               	movf	?___lwtoft,w
  1356  0DBF  00B3               	movwf	___ftmul@f2
  1357  0DC0  0829               	movf	?___lwtoft+1,w
  1358  0DC1  00B4               	movwf	___ftmul@f2+1
  1359  0DC2  082A               	movf	?___lwtoft+2,w
  1360  0DC3  00B5               	movwf	___ftmul@f2+2
  1361  0DC4  120A  158A  2627  120A  158A  	fcall	___ftmul
  1362  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0DCB  0830               	movf	?___ftmul,w
  1365  0DCC  00D0               	movwf	___ftdiv@f1
  1366  0DCD  0831               	movf	?___ftmul+1,w
  1367  0DCE  00D1               	movwf	___ftdiv@f1+1
  1368  0DCF  0832               	movf	?___ftmul+2,w
  1369  0DD0  00D2               	movwf	___ftdiv@f1+2
  1370  0DD1  120A  158A  24AA  120A  158A  	fcall	___ftdiv
  1371  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0DD8  084D               	movf	?___ftdiv,w
  1374  0DD9  00DD               	movwf	_sampleCurrent$872
  1375  0DDA  084E               	movf	?___ftdiv+1,w
  1376  0DDB  00DE               	movwf	_sampleCurrent$872+1
  1377  0DDC  084F               	movf	?___ftdiv+2,w
  1378  0DDD  00DF               	movwf	_sampleCurrent$872+2
  1379                           
  1380                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1381  0DDE  1683               	bsf	3,5	;RP0=1, select bank1
  1382  0DDF  1303               	bcf	3,6	;RP1=0, select bank1
  1383  0DE0  0868               	movf	_shuntRes^(0+128),w
  1384  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  1386  0DE3  00B0               	movwf	___ftmul@f1
  1387  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  1388  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  1389  0DE6  0869               	movf	(_shuntRes+1)^(0+128),w
  1390  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0DE9  00B1               	movwf	___ftmul@f1+1
  1393  0DEA  1683               	bsf	3,5	;RP0=1, select bank1
  1394  0DEB  1303               	bcf	3,6	;RP1=0, select bank1
  1395  0DEC  086A               	movf	(_shuntRes+2)^(0+128),w
  1396  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0DEF  00B2               	movwf	___ftmul@f1+2
  1399  0DF0  087B               	movf	_currentGain,w
  1400  0DF1  120A  158A  2053  120A  158A  	fcall	___lbtoft
  1401  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0DF8  0828               	movf	?___lbtoft,w
  1404  0DF9  00B3               	movwf	___ftmul@f2
  1405  0DFA  0829               	movf	?___lbtoft+1,w
  1406  0DFB  00B4               	movwf	___ftmul@f2+1
  1407  0DFC  082A               	movf	?___lbtoft+2,w
  1408  0DFD  00B5               	movwf	___ftmul@f2+2
  1409  0DFE  120A  158A  2627  120A  158A  	fcall	___ftmul
  1410  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0E05  0830               	movf	?___ftmul,w
  1413  0E06  00CD               	movwf	___ftdiv@f2
  1414  0E07  0831               	movf	?___ftmul+1,w
  1415  0E08  00CE               	movwf	___ftdiv@f2+1
  1416  0E09  0832               	movf	?___ftmul+2,w
  1417  0E0A  00CF               	movwf	___ftdiv@f2+2
  1418  0E0B  085D               	movf	_sampleCurrent$872,w
  1419  0E0C  00D0               	movwf	___ftdiv@f1
  1420  0E0D  085E               	movf	_sampleCurrent$872+1,w
  1421  0E0E  00D1               	movwf	___ftdiv@f1+1
  1422  0E0F  085F               	movf	_sampleCurrent$872+2,w
  1423  0E10  00D2               	movwf	___ftdiv@f1+2
  1424  0E11  120A  158A  24AA   	fcall	___ftdiv
  1425  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0E16  084D               	movf	?___ftdiv,w
  1428  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  1429  0E18  1303               	bcf	3,6	;RP1=0, select bank1
  1430  0E19  00E5               	movwf	_current^(0+128)
  1431  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0E1C  084E               	movf	?___ftdiv+1,w
  1434  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  1435  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  1436  0E1F  00E6               	movwf	(_current+1)^(0+128)
  1437  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0E22  084F               	movf	?___ftdiv+2,w
  1440  0E23  1683               	bsf	3,5	;RP0=1, select bank1
  1441  0E24  1303               	bcf	3,6	;RP1=0, select bank1
  1442  0E25  00E7               	movwf	(_current+2)^(0+128)
  1443  0E26  0008               	return
  1444  0E27                     __end_of_sampleCurrent:	
  1445                           
  1446                           	psect	text3
  1447  0853                     __ptext3:	
  1448 ;; *************** function ___lbtoft *****************
  1449 ;; Defined at:
  1450 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  c               1    wreg     unsigned char 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  c               1   15[BANK0 ] unsigned char 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  3    8[BANK0 ] float 
  1457 ;; Registers used:
  1458 ;;		wreg, status,2, status,0, pclath, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1464 ;;      Params:         0       3       0       0       0
  1465 ;;      Locals:         0       1       0       0       0
  1466 ;;      Temps:          0       4       0       0       0
  1467 ;;      Totals:         0       8       0       0       0
  1468 ;;Total ram usage:        8 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    3
  1471 ;; This function calls:
  1472 ;;		___ftpack
  1473 ;; This function is called by:
  1474 ;;		_sampleCurrent
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           
  1479                           ;psect for function ___lbtoft
  1480  0853                     ___lbtoft:	
  1481                           
  1482                           ;incstack = 0
  1483                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1484                           ;___lbtoft@c stored from wreg
  1485  0853  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0854  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0855  00AF               	movwf	___lbtoft@c
  1488  0856  082F               	movf	___lbtoft@c,w
  1489  0857  00AB               	movwf	??___lbtoft
  1490  0858  01AC               	clrf	??___lbtoft+1
  1491  0859  01AD               	clrf	??___lbtoft+2
  1492  085A  082B               	movf	??___lbtoft,w
  1493  085B  00A0               	movwf	___ftpack@arg
  1494  085C  082C               	movf	??___lbtoft+1,w
  1495  085D  00A1               	movwf	___ftpack@arg+1
  1496  085E  082D               	movf	??___lbtoft+2,w
  1497  085F  00A2               	movwf	___ftpack@arg+2
  1498  0860  308E               	movlw	142
  1499  0861  00AE               	movwf	??___lbtoft+3
  1500  0862  082E               	movf	??___lbtoft+3,w
  1501  0863  00A3               	movwf	___ftpack@exp
  1502  0864  01A4               	clrf	___ftpack@sign
  1503  0865  120A  158A  21EF   	fcall	___ftpack
  1504  0868  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0869  1303               	bcf	3,6	;RP1=0, select bank0
  1506  086A  0820               	movf	?___ftpack,w
  1507  086B  00A8               	movwf	?___lbtoft
  1508  086C  0821               	movf	?___ftpack+1,w
  1509  086D  00A9               	movwf	?___lbtoft+1
  1510  086E  0822               	movf	?___ftpack+2,w
  1511  086F  00AA               	movwf	?___lbtoft+2
  1512  0870  0008               	return
  1513  0871                     __end_of___lbtoft:	
  1514                           
  1515                           	psect	text4
  1516  035C                     __ptext4:	
  1517 ;; *************** function _sampleBatteryCells *****************
  1518 ;; Defined at:
  1519 ;;		line 89 in file "PIC16F917 Battery Management.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;		None               void
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1533 ;;      Params:         0       0       0       0       0
  1534 ;;      Locals:         0       3       0       0       0
  1535 ;;      Temps:          0       4       0       0       0
  1536 ;;      Totals:         0       7       0       0       0
  1537 ;;Total ram usage:        7 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    5
  1540 ;; This function calls:
  1541 ;;		___ftmul
  1542 ;;		___lwdiv
  1543 ;;		___lwtoft
  1544 ;;		_sampleVoltage
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function _sampleBatteryCells
  1552  035C                     _sampleBatteryCells:	
  1553                           
  1554                           ;PIC16F917 Battery Management.c: 92: RC2 = 1;
  1555                           
  1556                           ;incstack = 0
  1557                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1558  035C  1283               	bcf	3,5	;RP0=0, select bank0
  1559  035D  1303               	bcf	3,6	;RP1=0, select bank0
  1560  035E  1507               	bsf	7,2	;volatile
  1561                           
  1562                           ;PIC16F917 Battery Management.c: 95: RD0 = 1;
  1563  035F  1408               	bsf	8,0	;volatile
  1564                           
  1565                           ;PIC16F917 Battery Management.c: 97: _delay((unsigned long)((5)*(8000000/4000.0)));
  1566  0360  300D               	movlw	13
  1567  0361  00E7               	movwf	??_sampleBatteryCells+1
  1568  0362  30FB               	movlw	251
  1569  0363  00E6               	movwf	??_sampleBatteryCells
  1570  0364                     u2977:	
  1571  0364  0BE6               	decfsz	??_sampleBatteryCells,f
  1572  0365  2B64               	goto	u2977
  1573  0366  0BE7               	decfsz	??_sampleBatteryCells+1,f
  1574  0367  2B64               	goto	u2977
  1575  0368  2B69               	nop2
  1576                           
  1577                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1578  0369  3000               	movlw	0
  1579  036A  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  1580  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0371  085D               	movf	?_sampleVoltage,w
  1583  0372  00EA               	movwf	_sampleBatteryCells$871
  1584  0373  085E               	movf	?_sampleVoltage+1,w
  1585  0374  00EB               	movwf	_sampleBatteryCells$871+1
  1586  0375  085F               	movf	?_sampleVoltage+2,w
  1587  0376  00EC               	movwf	_sampleBatteryCells$871+2
  1588                           
  1589                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1590  0377  086A               	movf	_sampleBatteryCells$871,w
  1591  0378  00B0               	movwf	___ftmul@f1
  1592  0379  086B               	movf	_sampleBatteryCells$871+1,w
  1593  037A  00B1               	movwf	___ftmul@f1+1
  1594  037B  086C               	movf	_sampleBatteryCells$871+2,w
  1595  037C  00B2               	movwf	___ftmul@f1+2
  1596  037D  3013               	movlw	low (_cellRDB-__stringbase)
  1597  037E  0084               	movwf	4
  1598  037F  120A  158A  200A  120A  118A  	fcall	stringdir
  1599  0384  00A0               	movwf	___lwdiv@divisor
  1600  0385  120A  158A  200A  120A  118A  	fcall	stringdir
  1601  038A  00A1               	movwf	___lwdiv@divisor+1
  1602  038B  3013               	movlw	low (_cellRDB-__stringbase)
  1603  038C  0084               	movwf	4
  1604  038D  120A  158A  200A  120A  118A  	fcall	stringdir
  1605  0392  00E6               	movwf	??_sampleBatteryCells
  1606  0393  120A  158A  200A  120A  118A  	fcall	stringdir
  1607  0398  00E7               	movwf	??_sampleBatteryCells+1
  1608  0399  3007               	movlw	low (_cell1RDT-__stringbase)
  1609  039A  0084               	movwf	4
  1610  039B  120A  158A  200A  120A  118A  	fcall	stringdir
  1611  03A0  00E8               	movwf	??_sampleBatteryCells+2
  1612  03A1  120A  158A  200A  120A  118A  	fcall	stringdir
  1613  03A6  00E9               	movwf	??_sampleBatteryCells+3
  1614  03A7  0866               	movf	??_sampleBatteryCells,w
  1615  03A8  0768               	addwf	??_sampleBatteryCells+2,w
  1616  03A9  00A2               	movwf	___lwdiv@dividend
  1617  03AA  0867               	movf	??_sampleBatteryCells+1,w
  1618  03AB  1803               	skipnc
  1619  03AC  0A67               	incf	??_sampleBatteryCells+1,w
  1620  03AD  0769               	addwf	??_sampleBatteryCells+3,w
  1621  03AE  00A3               	movwf	___lwdiv@dividend+1
  1622  03AF  120A  158A  2071  120A  118A  	fcall	___lwdiv
  1623  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  1624  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  1625  03B6  0821               	movf	?___lwdiv+1,w
  1626  03B7  00A9               	movwf	___lwtoft@c+1
  1627  03B8  0820               	movf	?___lwdiv,w
  1628  03B9  00A8               	movwf	___lwtoft@c
  1629  03BA  160A  118A  2644  120A  118A  	fcall	___lwtoft
  1630  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  1631  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  1632  03C1  0828               	movf	?___lwtoft,w
  1633  03C2  00B3               	movwf	___ftmul@f2
  1634  03C3  0829               	movf	?___lwtoft+1,w
  1635  03C4  00B4               	movwf	___ftmul@f2+1
  1636  03C5  082A               	movf	?___lwtoft+2,w
  1637  03C6  00B5               	movwf	___ftmul@f2+2
  1638  03C7  120A  158A  2627  120A  118A  	fcall	___ftmul
  1639  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1640  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1641  03CE  0830               	movf	?___ftmul,w
  1642  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  1643  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  1644  03D1  00CB               	movwf	_cellVolt^(0+128)
  1645  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  1646  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  1647  03D4  0831               	movf	?___ftmul+1,w
  1648  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  1649  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  1650  03D7  00CC               	movwf	(_cellVolt+1)^(0+128)
  1651  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  1652  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  1653  03DA  0832               	movf	?___ftmul+2,w
  1654  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  1655  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  1656  03DD  00CD               	movwf	(_cellVolt+2)^(0+128)
  1657                           
  1658                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1659  03DE  3001               	movlw	1
  1660  03DF  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  1661  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  1662  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  1663  03E6  085D               	movf	?_sampleVoltage,w
  1664  03E7  00EA               	movwf	_sampleBatteryCells$871
  1665  03E8  085E               	movf	?_sampleVoltage+1,w
  1666  03E9  00EB               	movwf	_sampleBatteryCells$871+1
  1667  03EA  085F               	movf	?_sampleVoltage+2,w
  1668  03EB  00EC               	movwf	_sampleBatteryCells$871+2
  1669                           
  1670                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1671  03EC  086A               	movf	_sampleBatteryCells$871,w
  1672  03ED  00B0               	movwf	___ftmul@f1
  1673  03EE  086B               	movf	_sampleBatteryCells$871+1,w
  1674  03EF  00B1               	movwf	___ftmul@f1+1
  1675  03F0  086C               	movf	_sampleBatteryCells$871+2,w
  1676  03F1  00B2               	movwf	___ftmul@f1+2
  1677  03F2  3013               	movlw	low (_cellRDB-__stringbase)
  1678  03F3  0084               	movwf	4
  1679  03F4  120A  158A  200A  120A  118A  	fcall	stringdir
  1680  03F9  00A0               	movwf	___lwdiv@divisor
  1681  03FA  120A  158A  200A  120A  118A  	fcall	stringdir
  1682  03FF  00A1               	movwf	___lwdiv@divisor+1
  1683  0400  3013               	movlw	low (_cellRDB-__stringbase)
  1684  0401  0084               	movwf	4
  1685  0402  120A  158A  200A  120A  118A  	fcall	stringdir
  1686  0407  00E6               	movwf	??_sampleBatteryCells
  1687  0408  120A  158A  200A  120A  118A  	fcall	stringdir
  1688  040D  00E7               	movwf	??_sampleBatteryCells+1
  1689  040E  3009               	movlw	low (_cell2RDT-__stringbase)
  1690  040F  0084               	movwf	4
  1691  0410  120A  158A  200A  120A  118A  	fcall	stringdir
  1692  0415  00E8               	movwf	??_sampleBatteryCells+2
  1693  0416  120A  158A  200A  120A  118A  	fcall	stringdir
  1694  041B  00E9               	movwf	??_sampleBatteryCells+3
  1695  041C  0866               	movf	??_sampleBatteryCells,w
  1696  041D  0768               	addwf	??_sampleBatteryCells+2,w
  1697  041E  00A2               	movwf	___lwdiv@dividend
  1698  041F  0867               	movf	??_sampleBatteryCells+1,w
  1699  0420  1803               	skipnc
  1700  0421  0A67               	incf	??_sampleBatteryCells+1,w
  1701  0422  0769               	addwf	??_sampleBatteryCells+3,w
  1702  0423  00A3               	movwf	___lwdiv@dividend+1
  1703  0424  120A  158A  2071  120A  118A  	fcall	___lwdiv
  1704  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1705  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1706  042B  0821               	movf	?___lwdiv+1,w
  1707  042C  00A9               	movwf	___lwtoft@c+1
  1708  042D  0820               	movf	?___lwdiv,w
  1709  042E  00A8               	movwf	___lwtoft@c
  1710  042F  160A  118A  2644  120A  118A  	fcall	___lwtoft
  1711  0434  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0435  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0436  0828               	movf	?___lwtoft,w
  1714  0437  00B3               	movwf	___ftmul@f2
  1715  0438  0829               	movf	?___lwtoft+1,w
  1716  0439  00B4               	movwf	___ftmul@f2+1
  1717  043A  082A               	movf	?___lwtoft+2,w
  1718  043B  00B5               	movwf	___ftmul@f2+2
  1719  043C  120A  158A  2627  120A  118A  	fcall	___ftmul
  1720  0441  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0442  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0443  0830               	movf	?___ftmul,w
  1723  0444  1683               	bsf	3,5	;RP0=1, select bank1
  1724  0445  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0446  00CE               	movwf	(_cellVolt^(0+128)+3)
  1726  0447  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0448  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0449  0831               	movf	?___ftmul+1,w
  1729  044A  1683               	bsf	3,5	;RP0=1, select bank1
  1730  044B  1303               	bcf	3,6	;RP1=0, select bank1
  1731  044C  00CF               	movwf	((_cellVolt+1)^(0+128)+3)
  1732  044D  1283               	bcf	3,5	;RP0=0, select bank0
  1733  044E  1303               	bcf	3,6	;RP1=0, select bank0
  1734  044F  0832               	movf	?___ftmul+2,w
  1735  0450  1683               	bsf	3,5	;RP0=1, select bank1
  1736  0451  1303               	bcf	3,6	;RP1=0, select bank1
  1737  0452  00D0               	movwf	((_cellVolt+2)^(0+128)+3)
  1738                           
  1739                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  1740  0453  3005               	movlw	5
  1741  0454  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  1742  0459  1283               	bcf	3,5	;RP0=0, select bank0
  1743  045A  1303               	bcf	3,6	;RP1=0, select bank0
  1744  045B  085D               	movf	?_sampleVoltage,w
  1745  045C  00EA               	movwf	_sampleBatteryCells$871
  1746  045D  085E               	movf	?_sampleVoltage+1,w
  1747  045E  00EB               	movwf	_sampleBatteryCells$871+1
  1748  045F  085F               	movf	?_sampleVoltage+2,w
  1749  0460  00EC               	movwf	_sampleBatteryCells$871+2
  1750                           
  1751                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  1752  0461  086A               	movf	_sampleBatteryCells$871,w
  1753  0462  00B0               	movwf	___ftmul@f1
  1754  0463  086B               	movf	_sampleBatteryCells$871+1,w
  1755  0464  00B1               	movwf	___ftmul@f1+1
  1756  0465  086C               	movf	_sampleBatteryCells$871+2,w
  1757  0466  00B2               	movwf	___ftmul@f1+2
  1758  0467  3013               	movlw	low (_cellRDB-__stringbase)
  1759  0468  0084               	movwf	4
  1760  0469  120A  158A  200A  120A  118A  	fcall	stringdir
  1761  046E  00A0               	movwf	___lwdiv@divisor
  1762  046F  120A  158A  200A  120A  118A  	fcall	stringdir
  1763  0474  00A1               	movwf	___lwdiv@divisor+1
  1764  0475  3013               	movlw	low (_cellRDB-__stringbase)
  1765  0476  0084               	movwf	4
  1766  0477  120A  158A  200A  120A  118A  	fcall	stringdir
  1767  047C  00E6               	movwf	??_sampleBatteryCells
  1768  047D  120A  158A  200A  120A  118A  	fcall	stringdir
  1769  0482  00E7               	movwf	??_sampleBatteryCells+1
  1770  0483  300B               	movlw	low (_cell3RDT-__stringbase)
  1771  0484  0084               	movwf	4
  1772  0485  120A  158A  200A  120A  118A  	fcall	stringdir
  1773  048A  00E8               	movwf	??_sampleBatteryCells+2
  1774  048B  120A  158A  200A  120A  118A  	fcall	stringdir
  1775  0490  00E9               	movwf	??_sampleBatteryCells+3
  1776  0491  0866               	movf	??_sampleBatteryCells,w
  1777  0492  0768               	addwf	??_sampleBatteryCells+2,w
  1778  0493  00A2               	movwf	___lwdiv@dividend
  1779  0494  0867               	movf	??_sampleBatteryCells+1,w
  1780  0495  1803               	skipnc
  1781  0496  0A67               	incf	??_sampleBatteryCells+1,w
  1782  0497  0769               	addwf	??_sampleBatteryCells+3,w
  1783  0498  00A3               	movwf	___lwdiv@dividend+1
  1784  0499  120A  158A  2071  120A  118A  	fcall	___lwdiv
  1785  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1786  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1787  04A0  0821               	movf	?___lwdiv+1,w
  1788  04A1  00A9               	movwf	___lwtoft@c+1
  1789  04A2  0820               	movf	?___lwdiv,w
  1790  04A3  00A8               	movwf	___lwtoft@c
  1791  04A4  160A  118A  2644  120A  118A  	fcall	___lwtoft
  1792  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1793  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1794  04AB  0828               	movf	?___lwtoft,w
  1795  04AC  00B3               	movwf	___ftmul@f2
  1796  04AD  0829               	movf	?___lwtoft+1,w
  1797  04AE  00B4               	movwf	___ftmul@f2+1
  1798  04AF  082A               	movf	?___lwtoft+2,w
  1799  04B0  00B5               	movwf	___ftmul@f2+2
  1800  04B1  120A  158A  2627  120A  118A  	fcall	___ftmul
  1801  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1802  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1803  04B8  0830               	movf	?___ftmul,w
  1804  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  1805  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  1806  04BB  00D1               	movwf	(_cellVolt^(0+128)+6)
  1807  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1808  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1809  04BE  0831               	movf	?___ftmul+1,w
  1810  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  1811  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  1812  04C1  00D2               	movwf	((_cellVolt+1)^(0+128)+6)
  1813  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  1814  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  1815  04C4  0832               	movf	?___ftmul+2,w
  1816  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  1817  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  1818  04C7  00D3               	movwf	((_cellVolt+2)^(0+128)+6)
  1819                           
  1820                           ;PIC16F917 Battery Management.c: 104: RD0 = 0;
  1821  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1822  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1823  04CA  1008               	bcf	8,0	;volatile
  1824                           
  1825                           ;PIC16F917 Battery Management.c: 105: RC3 = 1;
  1826  04CB  1587               	bsf	7,3	;volatile
  1827                           
  1828                           ;PIC16F917 Battery Management.c: 107: _delay((unsigned long)((5)*(8000000/4000.0)));
  1829  04CC  300D               	movlw	13
  1830  04CD  00E7               	movwf	??_sampleBatteryCells+1
  1831  04CE  30FB               	movlw	251
  1832  04CF  00E6               	movwf	??_sampleBatteryCells
  1833  04D0                     u2987:	
  1834  04D0  0BE6               	decfsz	??_sampleBatteryCells,f
  1835  04D1  2CD0               	goto	u2987
  1836  04D2  0BE7               	decfsz	??_sampleBatteryCells+1,f
  1837  04D3  2CD0               	goto	u2987
  1838  04D4  2CD5               	nop2
  1839                           
  1840                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  1841  04D5  3006               	movlw	6
  1842  04D6  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  1843  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  1844  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  1845  04DD  085D               	movf	?_sampleVoltage,w
  1846  04DE  00EA               	movwf	_sampleBatteryCells$871
  1847  04DF  085E               	movf	?_sampleVoltage+1,w
  1848  04E0  00EB               	movwf	_sampleBatteryCells$871+1
  1849  04E1  085F               	movf	?_sampleVoltage+2,w
  1850  04E2  00EC               	movwf	_sampleBatteryCells$871+2
  1851                           
  1852                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  1853  04E3  086A               	movf	_sampleBatteryCells$871,w
  1854  04E4  00B0               	movwf	___ftmul@f1
  1855  04E5  086B               	movf	_sampleBatteryCells$871+1,w
  1856  04E6  00B1               	movwf	___ftmul@f1+1
  1857  04E7  086C               	movf	_sampleBatteryCells$871+2,w
  1858  04E8  00B2               	movwf	___ftmul@f1+2
  1859  04E9  3013               	movlw	low (_cellRDB-__stringbase)
  1860  04EA  0084               	movwf	4
  1861  04EB  120A  158A  200A  120A  118A  	fcall	stringdir
  1862  04F0  00A0               	movwf	___lwdiv@divisor
  1863  04F1  120A  158A  200A  120A  118A  	fcall	stringdir
  1864  04F6  00A1               	movwf	___lwdiv@divisor+1
  1865  04F7  3013               	movlw	low (_cellRDB-__stringbase)
  1866  04F8  0084               	movwf	4
  1867  04F9  120A  158A  200A  120A  118A  	fcall	stringdir
  1868  04FE  00E6               	movwf	??_sampleBatteryCells
  1869  04FF  120A  158A  200A  120A  118A  	fcall	stringdir
  1870  0504  00E7               	movwf	??_sampleBatteryCells+1
  1871  0505  300D               	movlw	low (_cell4RDT-__stringbase)
  1872  0506  0084               	movwf	4
  1873  0507  120A  158A  200A  120A  118A  	fcall	stringdir
  1874  050C  00E8               	movwf	??_sampleBatteryCells+2
  1875  050D  120A  158A  200A  120A  118A  	fcall	stringdir
  1876  0512  00E9               	movwf	??_sampleBatteryCells+3
  1877  0513  0866               	movf	??_sampleBatteryCells,w
  1878  0514  0768               	addwf	??_sampleBatteryCells+2,w
  1879  0515  00A2               	movwf	___lwdiv@dividend
  1880  0516  0867               	movf	??_sampleBatteryCells+1,w
  1881  0517  1803               	skipnc
  1882  0518  0A67               	incf	??_sampleBatteryCells+1,w
  1883  0519  0769               	addwf	??_sampleBatteryCells+3,w
  1884  051A  00A3               	movwf	___lwdiv@dividend+1
  1885  051B  120A  158A  2071  120A  118A  	fcall	___lwdiv
  1886  0520  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0521  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0522  0821               	movf	?___lwdiv+1,w
  1889  0523  00A9               	movwf	___lwtoft@c+1
  1890  0524  0820               	movf	?___lwdiv,w
  1891  0525  00A8               	movwf	___lwtoft@c
  1892  0526  160A  118A  2644  120A  118A  	fcall	___lwtoft
  1893  052B  1283               	bcf	3,5	;RP0=0, select bank0
  1894  052C  1303               	bcf	3,6	;RP1=0, select bank0
  1895  052D  0828               	movf	?___lwtoft,w
  1896  052E  00B3               	movwf	___ftmul@f2
  1897  052F  0829               	movf	?___lwtoft+1,w
  1898  0530  00B4               	movwf	___ftmul@f2+1
  1899  0531  082A               	movf	?___lwtoft+2,w
  1900  0532  00B5               	movwf	___ftmul@f2+2
  1901  0533  120A  158A  2627  120A  118A  	fcall	___ftmul
  1902  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1904  053A  0830               	movf	?___ftmul,w
  1905  053B  1683               	bsf	3,5	;RP0=1, select bank1
  1906  053C  1303               	bcf	3,6	;RP1=0, select bank1
  1907  053D  00D4               	movwf	(_cellVolt^(0+128)+9)
  1908  053E  1283               	bcf	3,5	;RP0=0, select bank0
  1909  053F  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0540  0831               	movf	?___ftmul+1,w
  1911  0541  1683               	bsf	3,5	;RP0=1, select bank1
  1912  0542  1303               	bcf	3,6	;RP1=0, select bank1
  1913  0543  00D5               	movwf	((_cellVolt+1)^(0+128)+9)
  1914  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1915  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1916  0546  0832               	movf	?___ftmul+2,w
  1917  0547  1683               	bsf	3,5	;RP0=1, select bank1
  1918  0548  1303               	bcf	3,6	;RP1=0, select bank1
  1919  0549  00D6               	movwf	((_cellVolt+2)^(0+128)+9)
  1920                           
  1921                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  1922  054A  3003               	movlw	3
  1923  054B  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  1924  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0552  085D               	movf	?_sampleVoltage,w
  1927  0553  00EA               	movwf	_sampleBatteryCells$871
  1928  0554  085E               	movf	?_sampleVoltage+1,w
  1929  0555  00EB               	movwf	_sampleBatteryCells$871+1
  1930  0556  085F               	movf	?_sampleVoltage+2,w
  1931  0557  00EC               	movwf	_sampleBatteryCells$871+2
  1932                           
  1933                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  1934  0558  086A               	movf	_sampleBatteryCells$871,w
  1935  0559  00B0               	movwf	___ftmul@f1
  1936  055A  086B               	movf	_sampleBatteryCells$871+1,w
  1937  055B  00B1               	movwf	___ftmul@f1+1
  1938  055C  086C               	movf	_sampleBatteryCells$871+2,w
  1939  055D  00B2               	movwf	___ftmul@f1+2
  1940  055E  3013               	movlw	low (_cellRDB-__stringbase)
  1941  055F  0084               	movwf	4
  1942  0560  120A  158A  200A  120A  118A  	fcall	stringdir
  1943  0565  00A0               	movwf	___lwdiv@divisor
  1944  0566  120A  158A  200A  120A  118A  	fcall	stringdir
  1945  056B  00A1               	movwf	___lwdiv@divisor+1
  1946  056C  3013               	movlw	low (_cellRDB-__stringbase)
  1947  056D  0084               	movwf	4
  1948  056E  120A  158A  200A  120A  118A  	fcall	stringdir
  1949  0573  00E6               	movwf	??_sampleBatteryCells
  1950  0574  120A  158A  200A  120A  118A  	fcall	stringdir
  1951  0579  00E7               	movwf	??_sampleBatteryCells+1
  1952  057A  300F               	movlw	low (_cell5RDT-__stringbase)
  1953  057B  0084               	movwf	4
  1954  057C  120A  158A  200A  120A  118A  	fcall	stringdir
  1955  0581  00E8               	movwf	??_sampleBatteryCells+2
  1956  0582  120A  158A  200A  120A  118A  	fcall	stringdir
  1957  0587  00E9               	movwf	??_sampleBatteryCells+3
  1958  0588  0866               	movf	??_sampleBatteryCells,w
  1959  0589  0768               	addwf	??_sampleBatteryCells+2,w
  1960  058A  00A2               	movwf	___lwdiv@dividend
  1961  058B  0867               	movf	??_sampleBatteryCells+1,w
  1962  058C  1803               	skipnc
  1963  058D  0A67               	incf	??_sampleBatteryCells+1,w
  1964  058E  0769               	addwf	??_sampleBatteryCells+3,w
  1965  058F  00A3               	movwf	___lwdiv@dividend+1
  1966  0590  120A  158A  2071  120A  118A  	fcall	___lwdiv
  1967  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0597  0821               	movf	?___lwdiv+1,w
  1970  0598  00A9               	movwf	___lwtoft@c+1
  1971  0599  0820               	movf	?___lwdiv,w
  1972  059A  00A8               	movwf	___lwtoft@c
  1973  059B  160A  118A  2644  120A  118A  	fcall	___lwtoft
  1974  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  1975  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  1976  05A2  0828               	movf	?___lwtoft,w
  1977  05A3  00B3               	movwf	___ftmul@f2
  1978  05A4  0829               	movf	?___lwtoft+1,w
  1979  05A5  00B4               	movwf	___ftmul@f2+1
  1980  05A6  082A               	movf	?___lwtoft+2,w
  1981  05A7  00B5               	movwf	___ftmul@f2+2
  1982  05A8  120A  158A  2627  120A  118A  	fcall	___ftmul
  1983  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1984  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1985  05AF  0830               	movf	?___ftmul,w
  1986  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  1987  05B1  1303               	bcf	3,6	;RP1=0, select bank1
  1988  05B2  00D7               	movwf	(_cellVolt^(0+128)+12)
  1989  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1990  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1991  05B5  0831               	movf	?___ftmul+1,w
  1992  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1993  05B7  1303               	bcf	3,6	;RP1=0, select bank1
  1994  05B8  00D8               	movwf	((_cellVolt+1)^(0+128)+12)
  1995  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1996  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1997  05BB  0832               	movf	?___ftmul+2,w
  1998  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  1999  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  2000  05BE  00D9               	movwf	((_cellVolt+2)^(0+128)+12)
  2001                           
  2002                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2003  05BF  3004               	movlw	4
  2004  05C0  120A  158A  225D  120A  118A  	fcall	_sampleVoltage
  2005  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  2006  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  2007  05C7  085D               	movf	?_sampleVoltage,w
  2008  05C8  00EA               	movwf	_sampleBatteryCells$871
  2009  05C9  085E               	movf	?_sampleVoltage+1,w
  2010  05CA  00EB               	movwf	_sampleBatteryCells$871+1
  2011  05CB  085F               	movf	?_sampleVoltage+2,w
  2012  05CC  00EC               	movwf	_sampleBatteryCells$871+2
  2013                           
  2014                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2015  05CD  086A               	movf	_sampleBatteryCells$871,w
  2016  05CE  00B0               	movwf	___ftmul@f1
  2017  05CF  086B               	movf	_sampleBatteryCells$871+1,w
  2018  05D0  00B1               	movwf	___ftmul@f1+1
  2019  05D1  086C               	movf	_sampleBatteryCells$871+2,w
  2020  05D2  00B2               	movwf	___ftmul@f1+2
  2021  05D3  3013               	movlw	low (_cellRDB-__stringbase)
  2022  05D4  0084               	movwf	4
  2023  05D5  120A  158A  200A  120A  118A  	fcall	stringdir
  2024  05DA  00A0               	movwf	___lwdiv@divisor
  2025  05DB  120A  158A  200A  120A  118A  	fcall	stringdir
  2026  05E0  00A1               	movwf	___lwdiv@divisor+1
  2027  05E1  3013               	movlw	low (_cellRDB-__stringbase)
  2028  05E2  0084               	movwf	4
  2029  05E3  120A  158A  200A  120A  118A  	fcall	stringdir
  2030  05E8  00E6               	movwf	??_sampleBatteryCells
  2031  05E9  120A  158A  200A  120A  118A  	fcall	stringdir
  2032  05EE  00E7               	movwf	??_sampleBatteryCells+1
  2033  05EF  3011               	movlw	low (_cell6RDT-__stringbase)
  2034  05F0  0084               	movwf	4
  2035  05F1  120A  158A  200A  120A  118A  	fcall	stringdir
  2036  05F6  00E8               	movwf	??_sampleBatteryCells+2
  2037  05F7  120A  158A  200A  120A  118A  	fcall	stringdir
  2038  05FC  00E9               	movwf	??_sampleBatteryCells+3
  2039  05FD  0866               	movf	??_sampleBatteryCells,w
  2040  05FE  0768               	addwf	??_sampleBatteryCells+2,w
  2041  05FF  00A2               	movwf	___lwdiv@dividend
  2042  0600  0867               	movf	??_sampleBatteryCells+1,w
  2043  0601  1803               	skipnc
  2044  0602  0A67               	incf	??_sampleBatteryCells+1,w
  2045  0603  0769               	addwf	??_sampleBatteryCells+3,w
  2046  0604  00A3               	movwf	___lwdiv@dividend+1
  2047  0605  120A  158A  2071  120A  118A  	fcall	___lwdiv
  2048  060A  1283               	bcf	3,5	;RP0=0, select bank0
  2049  060B  1303               	bcf	3,6	;RP1=0, select bank0
  2050  060C  0821               	movf	?___lwdiv+1,w
  2051  060D  00A9               	movwf	___lwtoft@c+1
  2052  060E  0820               	movf	?___lwdiv,w
  2053  060F  00A8               	movwf	___lwtoft@c
  2054  0610  160A  118A  2644  120A  118A  	fcall	___lwtoft
  2055  0615  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0616  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0617  0828               	movf	?___lwtoft,w
  2058  0618  00B3               	movwf	___ftmul@f2
  2059  0619  0829               	movf	?___lwtoft+1,w
  2060  061A  00B4               	movwf	___ftmul@f2+1
  2061  061B  082A               	movf	?___lwtoft+2,w
  2062  061C  00B5               	movwf	___ftmul@f2+2
  2063  061D  120A  158A  2627   	fcall	___ftmul
  2064  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0622  0830               	movf	?___ftmul,w
  2067  0623  1683               	bsf	3,5	;RP0=1, select bank1
  2068  0624  1303               	bcf	3,6	;RP1=0, select bank1
  2069  0625  00DA               	movwf	(_cellVolt^(0+128)+15)
  2070  0626  1283               	bcf	3,5	;RP0=0, select bank0
  2071  0627  1303               	bcf	3,6	;RP1=0, select bank0
  2072  0628  0831               	movf	?___ftmul+1,w
  2073  0629  1683               	bsf	3,5	;RP0=1, select bank1
  2074  062A  1303               	bcf	3,6	;RP1=0, select bank1
  2075  062B  00DB               	movwf	((_cellVolt+1)^(0+128)+15)
  2076  062C  1283               	bcf	3,5	;RP0=0, select bank0
  2077  062D  1303               	bcf	3,6	;RP1=0, select bank0
  2078  062E  0832               	movf	?___ftmul+2,w
  2079  062F  1683               	bsf	3,5	;RP0=1, select bank1
  2080  0630  1303               	bcf	3,6	;RP1=0, select bank1
  2081  0631  00DC               	movwf	((_cellVolt+2)^(0+128)+15)
  2082                           
  2083                           ;PIC16F917 Battery Management.c: 113: RC3 = 0;
  2084  0632  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0633  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0634  1187               	bcf	7,3	;volatile
  2087                           
  2088                           ;PIC16F917 Battery Management.c: 115: RC2 = 0;
  2089  0635  1107               	bcf	7,2	;volatile
  2090  0636  0008               	return
  2091  0637                     __end_of_sampleBatteryCells:	
  2092                           
  2093                           	psect	text5
  2094  0A5D                     __ptext5:	
  2095 ;; *************** function _sampleVoltage *****************
  2096 ;; Defined at:
  2097 ;;		line 145 in file "PIC16F917 Battery Management.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  chan            1    wreg     enum E2718
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  chan            1   65[BANK0 ] enum E2718
  2102 ;;  i               2   66[BANK0 ] int 
  2103 ;;  temp            2   68[BANK0 ] unsigned int 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  3   61[BANK0 ] float 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         0       4       0       0       0
  2114 ;;      Locals:         0       5       0       0       0
  2115 ;;      Temps:          0       0       0       0       0
  2116 ;;      Totals:         0       9       0       0       0
  2117 ;;Total ram usage:        9 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    4
  2120 ;; This function calls:
  2121 ;;		___ftdiv
  2122 ;;		___ftmul
  2123 ;;		___lwdiv
  2124 ;;		___lwtoft
  2125 ;;		_analogRead
  2126 ;; This function is called by:
  2127 ;;		_sampleBatteryCells
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _sampleVoltage
  2133  0A5D                     _sampleVoltage:	
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _sampleVoltage: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2137                           ;sampleVoltage@chan stored from wreg
  2138  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0A5F  00E1               	movwf	sampleVoltage@chan
  2141                           
  2142                           ;PIC16F917 Battery Management.c: 147: uint16_t temp = 0;
  2143  0A60  01E4               	clrf	sampleVoltage@temp
  2144  0A61  01E5               	clrf	sampleVoltage@temp+1
  2145                           
  2146                           ;PIC16F917 Battery Management.c: 149: for ( int i = 0; i <= 10; i++)
  2147  0A62  01E2               	clrf	sampleVoltage@i
  2148  0A63  01E3               	clrf	sampleVoltage@i+1
  2149  0A64  0863               	movf	sampleVoltage@i+1,w
  2150  0A65  3A80               	xorlw	128
  2151  0A66  00FF               	movwf	127
  2152  0A67  3080               	movlw	128
  2153  0A68  027F               	subwf	127,w
  2154  0A69  1D03               	skipz
  2155  0A6A  2A6D               	goto	u2645
  2156  0A6B  300B               	movlw	11
  2157  0A6C  0262               	subwf	sampleVoltage@i,w
  2158  0A6D                     u2645:	
  2159  0A6D  1803               	btfsc	3,0
  2160  0A6E  2A90               	goto	l2224
  2161  0A6F                     l2218:	
  2162                           
  2163                           ;PIC16F917 Battery Management.c: 150: {
  2164                           ;PIC16F917 Battery Management.c: 151: temp += analogRead(chan);
  2165  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  2166  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0A71  0861               	movf	sampleVoltage@chan,w
  2168  0A72  160A  118A  27C7  120A  158A  	fcall	_analogRead
  2169  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  2170  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  2171  0A79  0820               	movf	?_analogRead,w
  2172  0A7A  07E4               	addwf	sampleVoltage@temp,f
  2173  0A7B  1803               	skipnc
  2174  0A7C  0AE5               	incf	sampleVoltage@temp+1,f
  2175  0A7D  0821               	movf	?_analogRead+1,w
  2176  0A7E  07E5               	addwf	sampleVoltage@temp+1,f
  2177  0A7F  3001               	movlw	1
  2178  0A80  07E2               	addwf	sampleVoltage@i,f
  2179  0A81  1803               	skipnc
  2180  0A82  0AE3               	incf	sampleVoltage@i+1,f
  2181  0A83  3000               	movlw	0
  2182  0A84  07E3               	addwf	sampleVoltage@i+1,f
  2183  0A85  0863               	movf	sampleVoltage@i+1,w
  2184  0A86  3A80               	xorlw	128
  2185  0A87  00FF               	movwf	127
  2186  0A88  3080               	movlw	128
  2187  0A89  027F               	subwf	127,w
  2188  0A8A  1D03               	skipz
  2189  0A8B  2A8E               	goto	u2655
  2190  0A8C  300B               	movlw	11
  2191  0A8D  0262               	subwf	sampleVoltage@i,w
  2192  0A8E                     u2655:	
  2193  0A8E  1C03               	skipc
  2194  0A8F  2A6F               	goto	l2218
  2195  0A90                     l2224:	
  2196                           
  2197                           ;PIC16F917 Battery Management.c: 152: }
  2198                           ;PIC16F917 Battery Management.c: 154: temp = temp / 10;
  2199  0A90  300A               	movlw	10
  2200  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0A93  00A0               	movwf	___lwdiv@divisor
  2203  0A94  3000               	movlw	0
  2204  0A95  00A1               	movwf	___lwdiv@divisor+1
  2205  0A96  0865               	movf	sampleVoltage@temp+1,w
  2206  0A97  00A3               	movwf	___lwdiv@dividend+1
  2207  0A98  0864               	movf	sampleVoltage@temp,w
  2208  0A99  00A2               	movwf	___lwdiv@dividend
  2209  0A9A  120A  158A  2071  120A  158A  	fcall	___lwdiv
  2210  0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  2211  0AA0  1303               	bcf	3,6	;RP1=0, select bank0
  2212  0AA1  0821               	movf	?___lwdiv+1,w
  2213  0AA2  00E5               	movwf	sampleVoltage@temp+1
  2214  0AA3  0820               	movf	?___lwdiv,w
  2215  0AA4  00E4               	movwf	sampleVoltage@temp
  2216                           
  2217                           ;PIC16F917 Battery Management.c: 157: return (temp * supVolt)/1023;
  2218  0AA5  30C0               	movlw	192
  2219  0AA6  00CD               	movwf	___ftdiv@f2
  2220  0AA7  307F               	movlw	127
  2221  0AA8  00CE               	movwf	___ftdiv@f2+1
  2222  0AA9  3044               	movlw	68
  2223  0AAA  00CF               	movwf	___ftdiv@f2+2
  2224  0AAB  0878               	movf	_supVolt,w
  2225  0AAC  00B0               	movwf	___ftmul@f1
  2226  0AAD  0879               	movf	_supVolt+1,w
  2227  0AAE  00B1               	movwf	___ftmul@f1+1
  2228  0AAF  087A               	movf	_supVolt+2,w
  2229  0AB0  00B2               	movwf	___ftmul@f1+2
  2230  0AB1  0865               	movf	sampleVoltage@temp+1,w
  2231  0AB2  00A9               	movwf	___lwtoft@c+1
  2232  0AB3  0864               	movf	sampleVoltage@temp,w
  2233  0AB4  00A8               	movwf	___lwtoft@c
  2234  0AB5  160A  118A  2644  120A  158A  	fcall	___lwtoft
  2235  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0ABC  0828               	movf	?___lwtoft,w
  2238  0ABD  00B3               	movwf	___ftmul@f2
  2239  0ABE  0829               	movf	?___lwtoft+1,w
  2240  0ABF  00B4               	movwf	___ftmul@f2+1
  2241  0AC0  082A               	movf	?___lwtoft+2,w
  2242  0AC1  00B5               	movwf	___ftmul@f2+2
  2243  0AC2  120A  158A  2627  120A  158A  	fcall	___ftmul
  2244  0AC7  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0AC8  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0AC9  0830               	movf	?___ftmul,w
  2247  0ACA  00D0               	movwf	___ftdiv@f1
  2248  0ACB  0831               	movf	?___ftmul+1,w
  2249  0ACC  00D1               	movwf	___ftdiv@f1+1
  2250  0ACD  0832               	movf	?___ftmul+2,w
  2251  0ACE  00D2               	movwf	___ftdiv@f1+2
  2252  0ACF  120A  158A  24AA   	fcall	___ftdiv
  2253  0AD2  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0AD3  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0AD4  084D               	movf	?___ftdiv,w
  2256  0AD5  00DD               	movwf	?_sampleVoltage
  2257  0AD6  084E               	movf	?___ftdiv+1,w
  2258  0AD7  00DE               	movwf	?_sampleVoltage+1
  2259  0AD8  084F               	movf	?___ftdiv+2,w
  2260  0AD9  00DF               	movwf	?_sampleVoltage+2
  2261  0ADA  0008               	return
  2262  0ADB                     __end_of_sampleVoltage:	
  2263                           
  2264                           	psect	text6
  2265  17C7                     __ptext6:	
  2266 ;; *************** function _analogRead *****************
  2267 ;; Defined at:
  2268 ;;		line 73 in file "adc.h"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  chan            1    wreg     unsigned char 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  chan            1    4[BANK0 ] unsigned char 
  2273 ;;  returnVal       2    5[BANK0 ] unsigned int 
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  2    0[BANK0 ] unsigned int 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2283 ;;      Params:         0       2       0       0       0
  2284 ;;      Locals:         0       3       0       0       0
  2285 ;;      Temps:          0       2       0       0       0
  2286 ;;      Totals:         0       7       0       0       0
  2287 ;;Total ram usage:        7 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    2
  2290 ;; This function calls:
  2291 ;;		Nothing
  2292 ;; This function is called by:
  2293 ;;		_sampleReference
  2294 ;;		_sampleVoltage
  2295 ;;		_sampleCurrent
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           
  2300                           ;psect for function _analogRead
  2301  17C7                     _analogRead:	
  2302                           
  2303                           ;incstack = 0
  2304                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2305                           ;analogRead@chan stored from wreg
  2306  17C7  1283               	bcf	3,5	;RP0=0, select bank0
  2307  17C8  1303               	bcf	3,6	;RP1=0, select bank0
  2308  17C9  00A4               	movwf	analogRead@chan
  2309                           
  2310                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2311  17CA  0824               	movf	analogRead@chan,w
  2312  17CB  00A2               	movwf	??_analogRead
  2313  17CC  0DA2               	rlf	??_analogRead,f
  2314  17CD  0DA2               	rlf	??_analogRead,f
  2315  17CE  081F               	movf	31,w	;volatile
  2316  17CF  0622               	xorwf	??_analogRead,w
  2317  17D0  39E3               	andlw	-29
  2318  17D1  0622               	xorwf	??_analogRead,w
  2319  17D2  009F               	movwf	31	;volatile
  2320                           
  2321                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2322  17D3  141F               	bsf	31,0	;volatile
  2323                           
  2324                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2325  17D4  3006               	movlw	6
  2326  17D5  00A2               	movwf	??_analogRead
  2327  17D6                     u2997:	
  2328  17D6  0BA2               	decfsz	??_analogRead,f
  2329  17D7  2FD6               	goto	u2997
  2330  17D8  0000               	nop
  2331                           
  2332                           ;adc.h: 81: ADCON0bits.GO = 1;
  2333  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  2334  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  2335  17DB  149F               	bsf	31,1	;volatile
  2336                           
  2337                           ;adc.h: 83: unsigned int returnVal = 0;
  2338  17DC  01A5               	clrf	analogRead@returnVal
  2339  17DD  01A6               	clrf	analogRead@returnVal+1
  2340  17DE                     l224:	
  2341                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2342                           
  2343  17DE  189F               	btfsc	31,1	;volatile
  2344  17DF  2FDE               	goto	l224
  2345                           
  2346                           ;adc.h: 89: returnVal = ADRESH;
  2347  17E0  081E               	movf	30,w	;volatile
  2348  17E1  00A2               	movwf	??_analogRead
  2349  17E2  01A3               	clrf	??_analogRead+1
  2350  17E3  0822               	movf	??_analogRead,w
  2351  17E4  00A5               	movwf	analogRead@returnVal
  2352  17E5  0823               	movf	??_analogRead+1,w
  2353  17E6  00A6               	movwf	analogRead@returnVal+1
  2354                           
  2355                           ;adc.h: 90: returnVal = returnVal << 8;
  2356  17E7  0825               	movf	analogRead@returnVal,w
  2357  17E8  00A3               	movwf	??_analogRead+1
  2358  17E9  01A2               	clrf	??_analogRead
  2359  17EA  0822               	movf	??_analogRead,w
  2360  17EB  00A5               	movwf	analogRead@returnVal
  2361  17EC  0823               	movf	??_analogRead+1,w
  2362  17ED  00A6               	movwf	analogRead@returnVal+1
  2363                           
  2364                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2365  17EE  0825               	movf	analogRead@returnVal,w
  2366  17EF  1683               	bsf	3,5	;RP0=1, select bank1
  2367  17F0  1303               	bcf	3,6	;RP1=0, select bank1
  2368  17F1  041E               	iorwf	30,w	;volatile
  2369  17F2  1283               	bcf	3,5	;RP0=0, select bank0
  2370  17F3  1303               	bcf	3,6	;RP1=0, select bank0
  2371  17F4  00A2               	movwf	??_analogRead
  2372  17F5  0826               	movf	analogRead@returnVal+1,w
  2373  17F6  00A3               	movwf	??_analogRead+1
  2374  17F7  0822               	movf	??_analogRead,w
  2375  17F8  00A5               	movwf	analogRead@returnVal
  2376  17F9  0823               	movf	??_analogRead+1,w
  2377  17FA  00A6               	movwf	analogRead@returnVal+1
  2378                           
  2379                           ;adc.h: 93: return returnVal;
  2380  17FB  0826               	movf	analogRead@returnVal+1,w
  2381  17FC  00A1               	movwf	?_analogRead+1
  2382  17FD  0825               	movf	analogRead@returnVal,w
  2383  17FE  00A0               	movwf	?_analogRead
  2384  17FF  0008               	return
  2385  1800                     __end_of_analogRead:	
  2386                           
  2387                           	psect	text7
  2388  1644                     __ptext7:	
  2389 ;; *************** function ___lwtoft *****************
  2390 ;; Defined at:
  2391 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  c               2    8[BANK0 ] unsigned int 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  3    8[BANK0 ] float 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2405 ;;      Params:         0       3       0       0       0
  2406 ;;      Locals:         0       0       0       0       0
  2407 ;;      Temps:          0       1       0       0       0
  2408 ;;      Totals:         0       4       0       0       0
  2409 ;;Total ram usage:        4 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		___ftpack
  2414 ;; This function is called by:
  2415 ;;		_sampleBatteryCells
  2416 ;;		_sampleReference
  2417 ;;		_sampleVoltage
  2418 ;;		_sampleCurrent
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function ___lwtoft
  2424  1644                     ___lwtoft:	
  2425                           
  2426                           ;incstack = 0
  2427                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2428  1644  1283               	bcf	3,5	;RP0=0, select bank0
  2429  1645  1303               	bcf	3,6	;RP1=0, select bank0
  2430  1646  0828               	movf	___lwtoft@c,w
  2431  1647  00A0               	movwf	___ftpack@arg
  2432  1648  0829               	movf	___lwtoft@c+1,w
  2433  1649  00A1               	movwf	___ftpack@arg+1
  2434  164A  01A2               	clrf	___ftpack@arg+2
  2435  164B  308E               	movlw	142
  2436  164C  00AB               	movwf	??___lwtoft
  2437  164D  082B               	movf	??___lwtoft,w
  2438  164E  00A3               	movwf	___ftpack@exp
  2439  164F  01A4               	clrf	___ftpack@sign
  2440  1650  120A  158A  21EF   	fcall	___ftpack
  2441  1653  1283               	bcf	3,5	;RP0=0, select bank0
  2442  1654  1303               	bcf	3,6	;RP1=0, select bank0
  2443  1655  0820               	movf	?___ftpack,w
  2444  1656  00A8               	movwf	?___lwtoft
  2445  1657  0821               	movf	?___ftpack+1,w
  2446  1658  00A9               	movwf	?___lwtoft+1
  2447  1659  0822               	movf	?___ftpack+2,w
  2448  165A  00AA               	movwf	?___lwtoft+2
  2449  165B  0008               	return
  2450  165C                     __end_of___lwtoft:	
  2451                           
  2452                           	psect	text8
  2453  0871                     __ptext8:	
  2454 ;; *************** function ___lwdiv *****************
  2455 ;; Defined at:
  2456 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  divisor         2    0[BANK0 ] unsigned int 
  2459 ;;  dividend        2    2[BANK0 ] unsigned int 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  quotient        2    5[BANK0 ] unsigned int 
  2462 ;;  counter         1    7[BANK0 ] unsigned char 
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  2    0[BANK0 ] unsigned int 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2472 ;;      Params:         0       4       0       0       0
  2473 ;;      Locals:         0       3       0       0       0
  2474 ;;      Temps:          0       1       0       0       0
  2475 ;;      Totals:         0       8       0       0       0
  2476 ;;Total ram usage:        8 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    2
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_sampleBatteryCells
  2483 ;;		_sampleReference
  2484 ;;		_sampleVoltage
  2485 ;;		_sampleCurrent
  2486 ;;		_uint16ToASCII
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function ___lwdiv
  2492  0871                     ___lwdiv:	
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2496  0871  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0872  1303               	bcf	3,6	;RP1=0, select bank0
  2498  0873  01A5               	clrf	___lwdiv@quotient
  2499  0874  01A6               	clrf	___lwdiv@quotient+1
  2500  0875  0820               	movf	___lwdiv@divisor,w
  2501  0876  0421               	iorwf	___lwdiv@divisor+1,w
  2502  0877  1903               	btfsc	3,2
  2503  0878  28AA               	goto	l2046
  2504  0879  01A7               	clrf	___lwdiv@counter
  2505  087A  0AA7               	incf	___lwdiv@counter,f
  2506  087B                     l2034:	
  2507  087B  1BA1               	btfsc	___lwdiv@divisor+1,7
  2508  087C  2889               	goto	l2036
  2509  087D  3001               	movlw	1
  2510  087E                     u2405:	
  2511  087E  1003               	clrc
  2512  087F  0DA0               	rlf	___lwdiv@divisor,f
  2513  0880  0DA1               	rlf	___lwdiv@divisor+1,f
  2514  0881  3EFF               	addlw	-1
  2515  0882  1D03               	skipz
  2516  0883  287E               	goto	u2405
  2517  0884  3001               	movlw	1
  2518  0885  00A4               	movwf	??___lwdiv
  2519  0886  0824               	movf	??___lwdiv,w
  2520  0887  07A7               	addwf	___lwdiv@counter,f
  2521  0888  287B               	goto	l2034
  2522  0889                     l2036:	
  2523  0889  3001               	movlw	1
  2524  088A                     u2425:	
  2525  088A  1003               	clrc
  2526  088B  0DA5               	rlf	___lwdiv@quotient,f
  2527  088C  0DA6               	rlf	___lwdiv@quotient+1,f
  2528  088D  3EFF               	addlw	-1
  2529  088E  1D03               	skipz
  2530  088F  288A               	goto	u2425
  2531  0890  0821               	movf	___lwdiv@divisor+1,w
  2532  0891  0223               	subwf	___lwdiv@dividend+1,w
  2533  0892  1D03               	skipz
  2534  0893  2896               	goto	u2435
  2535  0894  0820               	movf	___lwdiv@divisor,w
  2536  0895  0222               	subwf	___lwdiv@dividend,w
  2537  0896                     u2435:	
  2538  0896  1C03               	skipc
  2539  0897  289F               	goto	l2042
  2540  0898  0820               	movf	___lwdiv@divisor,w
  2541  0899  02A2               	subwf	___lwdiv@dividend,f
  2542  089A  0821               	movf	___lwdiv@divisor+1,w
  2543  089B  1C03               	skipc
  2544  089C  03A3               	decf	___lwdiv@dividend+1,f
  2545  089D  02A3               	subwf	___lwdiv@dividend+1,f
  2546  089E  1425               	bsf	___lwdiv@quotient,0
  2547  089F                     l2042:	
  2548  089F  3001               	movlw	1
  2549  08A0                     u2445:	
  2550  08A0  1003               	clrc
  2551  08A1  0CA1               	rrf	___lwdiv@divisor+1,f
  2552  08A2  0CA0               	rrf	___lwdiv@divisor,f
  2553  08A3  3EFF               	addlw	-1
  2554  08A4  1D03               	skipz
  2555  08A5  28A0               	goto	u2445
  2556  08A6  3001               	movlw	1
  2557  08A7  02A7               	subwf	___lwdiv@counter,f
  2558  08A8  1D03               	btfss	3,2
  2559  08A9  2889               	goto	l2036
  2560  08AA                     l2046:	
  2561  08AA  0826               	movf	___lwdiv@quotient+1,w
  2562  08AB  00A1               	movwf	?___lwdiv+1
  2563  08AC  0825               	movf	___lwdiv@quotient,w
  2564  08AD  00A0               	movwf	?___lwdiv
  2565  08AE  0008               	return
  2566  08AF                     __end_of___lwdiv:	
  2567                           
  2568                           	psect	text9
  2569  1756                     __ptext9:	
  2570 ;; *************** function _initController *****************
  2571 ;; Defined at:
  2572 ;;		line 211 in file "setup.h"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2586 ;;      Params:         0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    5
  2593 ;; This function calls:
  2594 ;;		_initADC
  2595 ;;		_initLCD
  2596 ;;		_timeSetup
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _initController
  2604  1756                     _initController:	
  2605                           
  2606                           ;setup.h: 214: OSCCONbits.IRCF = 0b111;
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  2610  1756  3070               	movlw	112
  2611  1757  1683               	bsf	3,5	;RP0=1, select bank1
  2612  1758  1303               	bcf	3,6	;RP1=0, select bank1
  2613  1759  048F               	iorwf	15,f	;volatile
  2614                           
  2615                           ;setup.h: 215: OSCCONbits.SCS = 0;
  2616  175A  100F               	bcf	15,0	;volatile
  2617                           
  2618                           ;setup.h: 218: TRISA = 0b00111111;
  2619  175B  303F               	movlw	63
  2620  175C  0085               	movwf	5	;volatile
  2621                           
  2622                           ;setup.h: 219: TRISB = 0b00000000;
  2623  175D  0186               	clrf	6	;volatile
  2624                           
  2625                           ;setup.h: 220: TRISC = 0b00000000;
  2626  175E  0187               	clrf	7	;volatile
  2627                           
  2628                           ;setup.h: 221: TRISD = 0b00100000;
  2629  175F  3020               	movlw	32
  2630  1760  0088               	movwf	8	;volatile
  2631                           
  2632                           ;setup.h: 222: TRISE = 0b00000111;
  2633  1761  3007               	movlw	7
  2634  1762  0089               	movwf	9	;volatile
  2635                           
  2636                           ;setup.h: 224: ANSEL = 0xFF;
  2637  1763  30FF               	movlw	255
  2638  1764  0091               	movwf	17	;volatile
  2639                           
  2640                           ;setup.h: 226: PORTA = 0;
  2641  1765  1283               	bcf	3,5	;RP0=0, select bank0
  2642  1766  1303               	bcf	3,6	;RP1=0, select bank0
  2643  1767  0185               	clrf	5	;volatile
  2644                           
  2645                           ;setup.h: 227: PORTB = 0;
  2646  1768  0186               	clrf	6	;volatile
  2647                           
  2648                           ;setup.h: 228: PORTC = 0;
  2649  1769  0187               	clrf	7	;volatile
  2650                           
  2651                           ;setup.h: 229: PORTD = 0;
  2652  176A  0188               	clrf	8	;volatile
  2653                           
  2654                           ;setup.h: 230: PORTE = 0;
  2655  176B  0189               	clrf	9	;volatile
  2656                           
  2657                           ;setup.h: 232: CMCON0bits.CM = 0b111;
  2658  176C  3007               	movlw	7
  2659  176D  1683               	bsf	3,5	;RP0=1, select bank1
  2660  176E  1303               	bcf	3,6	;RP1=0, select bank1
  2661  176F  049C               	iorwf	28,f	;volatile
  2662                           
  2663                           ;setup.h: 233: LCDCON = 0;
  2664  1770  1283               	bcf	3,5	;RP0=0, select bank2
  2665  1771  1703               	bsf	3,6	;RP1=1, select bank2
  2666  1772  0187               	clrf	7	;volatile
  2667                           
  2668                           ;setup.h: 234: LVDCONbits.LVDEN = 0;
  2669  1773  1209               	bcf	9,4	;volatile
  2670                           
  2671                           ;setup.h: 235: CCP1CON = 0;
  2672  1774  1283               	bcf	3,5	;RP0=0, select bank0
  2673  1775  1303               	bcf	3,6	;RP1=0, select bank0
  2674  1776  0197               	clrf	23	;volatile
  2675                           
  2676                           ;setup.h: 236: CCP2CON = 0;
  2677  1777  019D               	clrf	29	;volatile
  2678                           
  2679                           ;setup.h: 237: OPTION_REGbits.nRBPU = 1;
  2680  1778  1683               	bsf	3,5	;RP0=1, select bank1
  2681  1779  1303               	bcf	3,6	;RP1=0, select bank1
  2682  177A  1781               	bsf	1,7	;volatile
  2683                           
  2684                           ;setup.h: 239: RD2 = 0;
  2685  177B  1283               	bcf	3,5	;RP0=0, select bank0
  2686  177C  1303               	bcf	3,6	;RP1=0, select bank0
  2687  177D  1108               	bcf	8,2	;volatile
  2688                           
  2689                           ;setup.h: 241: RD6 = 0;
  2690  177E  1308               	bcf	8,6	;volatile
  2691                           
  2692                           ;setup.h: 244: RC0 = 1;
  2693  177F  1407               	bsf	7,0	;volatile
  2694                           
  2695                           ;setup.h: 247: initADC();
  2696  1780  160A  118A  25EA  160A  118A  	fcall	_initADC
  2697                           
  2698                           ;setup.h: 249: timeSetup();
  2699  1785  160A  118A  25DE  160A  118A  	fcall	_timeSetup
  2700                           
  2701                           ;setup.h: 251: initLCD();
  2702  178A  120A  158A  2401   	fcall	_initLCD
  2703  178D  0008               	return
  2704  178E                     __end_of_initController:	
  2705                           
  2706                           	psect	text10
  2707  15DE                     __ptext10:	
  2708 ;; *************** function _timeSetup *****************
  2709 ;; Defined at:
  2710 ;;		line 49 in file "timer0.h"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;		None
  2715 ;; Return value:  Size  Location     Type
  2716 ;;		None               void
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2724 ;;      Params:         0       0       0       0       0
  2725 ;;      Locals:         0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0
  2727 ;;      Totals:         0       0       0       0       0
  2728 ;;Total ram usage:        0 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    2
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_initController
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _timeSetup
  2740  15DE                     _timeSetup:	
  2741                           
  2742                           ;timer0.h: 51: OPTION_REGbits.T0CS = 0;
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _timeSetup: [wreg+status,2+status,0]
  2746  15DE  1683               	bsf	3,5	;RP0=1, select bank1
  2747  15DF  1303               	bcf	3,6	;RP1=0, select bank1
  2748  15E0  1281               	bcf	1,5	;volatile
  2749                           
  2750                           ;timer0.h: 52: OPTION_REGbits.T0SE = 1;
  2751  15E1  1601               	bsf	1,4	;volatile
  2752                           
  2753                           ;timer0.h: 53: OPTION_REGbits.PSA = 0 ;
  2754  15E2  1181               	bcf	1,3	;volatile
  2755                           
  2756                           ;timer0.h: 54: OPTION_REGbits.PS = 0b111;
  2757  15E3  3007               	movlw	7
  2758  15E4  0481               	iorwf	1,f	;volatile
  2759                           
  2760                           ;timer0.h: 57: INTCONbits.T0IE = 1;
  2761  15E5  168B               	bsf	11,5	;volatile
  2762                           
  2763                           ;timer0.h: 58: INTCONbits.T0IF = 0;
  2764  15E6  110B               	bcf	11,2	;volatile
  2765                           
  2766                           ;timer0.h: 59: INTCONbits.PEIE = 1;
  2767  15E7  170B               	bsf	11,6	;volatile
  2768                           
  2769                           ;timer0.h: 60: INTCONbits.GIE = 1;
  2770  15E8  178B               	bsf	11,7	;volatile
  2771  15E9  0008               	return
  2772  15EA                     __end_of_timeSetup:	
  2773                           
  2774                           	psect	text11
  2775  15EA                     __ptext11:	
  2776 ;; *************** function _initADC *****************
  2777 ;; Defined at:
  2778 ;;		line 56 in file "adc.h"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, status,2
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2792 ;;      Params:         0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    2
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_initController
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _initADC
  2808  15EA                     _initADC:	
  2809                           
  2810                           ;adc.h: 58: ADCON0 = 0b10000001;
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in _initADC: [wreg+status,2]
  2814  15EA  3081               	movlw	129
  2815  15EB  1283               	bcf	3,5	;RP0=0, select bank0
  2816  15EC  1303               	bcf	3,6	;RP1=0, select bank0
  2817  15ED  009F               	movwf	31	;volatile
  2818                           
  2819                           ;adc.h: 65: ADCON1 = 0b01110000;
  2820  15EE  3070               	movlw	112
  2821  15EF  1683               	bsf	3,5	;RP0=1, select bank1
  2822  15F0  1303               	bcf	3,6	;RP1=0, select bank1
  2823  15F1  009F               	movwf	31	;volatile
  2824                           
  2825                           ;adc.h: 68: ADRESH = 0x00;
  2826  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  2827  15F3  1303               	bcf	3,6	;RP1=0, select bank0
  2828  15F4  019E               	clrf	30	;volatile
  2829                           
  2830                           ;adc.h: 69: ADRESL = 0x00;
  2831  15F5  1683               	bsf	3,5	;RP0=1, select bank1
  2832  15F6  1303               	bcf	3,6	;RP1=0, select bank1
  2833  15F7  019E               	clrf	30	;volatile
  2834  15F8  0008               	return
  2835  15F9                     __end_of_initADC:	
  2836                           
  2837                           	psect	text12
  2838  0931                     __ptext12:	
  2839 ;; *************** function _handlePB *****************
  2840 ;; Defined at:
  2841 ;;		line 298 in file "PIC16F917 Battery Management.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;		None               void
  2848 ;; Registers used:
  2849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2855 ;;      Params:         0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0
  2857 ;;      Temps:          0       0       3       0       0
  2858 ;;      Totals:         0       0       3       0       0
  2859 ;;Total ram usage:        3 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    5
  2862 ;; This function calls:
  2863 ;;		_initLCD
  2864 ;;		_stopWatch
  2865 ;; This function is called by:
  2866 ;;		_main
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _handlePB
  2872  0931                     _handlePB:	
  2873                           
  2874                           ;PIC16F917 Battery Management.c: 300: if( RD5 == 1 )
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _handlePB: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2878  0931  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0932  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0933  1A88               	btfsc	8,5	;volatile
  2881  0934  0008               	return
  2882                           
  2883                           ;PIC16F917 Battery Management.c: 303: _delay((unsigned long)((50)*(8000000/4000.0)));
  2884                           
  2885                           ;PIC16F917 Battery Management.c: 301: return;
  2886  0935  3082               	movlw	130
  2887  0936  1683               	bsf	3,5	;RP0=1, select bank1
  2888  0937  1303               	bcf	3,6	;RP1=0, select bank1
  2889  0938  00B2               	movwf	(??_handlePB^(0+128)+1)
  2890  0939  30DD               	movlw	221
  2891  093A  00B1               	movwf	??_handlePB^(0+128)
  2892  093B                     u3007:	
  2893  093B  0BB1               	decfsz	??_handlePB^(0+128),f
  2894  093C  293B               	goto	u3007
  2895  093D  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  2896  093E  293B               	goto	u3007
  2897  093F  2940               	nop2
  2898                           
  2899                           ;PIC16F917 Battery Management.c: 305: if( RD5 == 1 )
  2900  0940  1283               	bcf	3,5	;RP0=0, select bank0
  2901  0941  1303               	bcf	3,6	;RP1=0, select bank0
  2902  0942  1A88               	btfsc	8,5	;volatile
  2903  0943  0008               	return
  2904                           
  2905                           ;PIC16F917 Battery Management.c: 308: stopWatch(0);
  2906                           
  2907                           ;PIC16F917 Battery Management.c: 306: return;
  2908  0944  3000               	movlw	0
  2909  0945  120A  158A  26FA  120A  158A  	fcall	_stopWatch
  2910  094A                     l315:	
  2911                           ;PIC16F917 Battery Management.c: 309: while( RD5 == 0 )
  2912                           
  2913  094A  1283               	bcf	3,5	;RP0=0, select bank0
  2914  094B  1303               	bcf	3,6	;RP1=0, select bank0
  2915  094C  1A88               	btfsc	8,5	;volatile
  2916  094D  2981               	goto	l2398
  2917                           
  2918                           ;PIC16F917 Battery Management.c: 310: {
  2919                           ;PIC16F917 Battery Management.c: 311: if(stopWatch(1) >= 1000)
  2920  094E  3001               	movlw	1
  2921  094F  120A  158A  26FA  120A  158A  	fcall	_stopWatch
  2922  0954  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0955  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0956  086E               	movf	?_stopWatch+3,w
  2925  0957  1D03               	btfss	3,2
  2926  0958  2966               	goto	l2388
  2927  0959  086D               	movf	?_stopWatch+2,w
  2928  095A  1D03               	btfss	3,2
  2929  095B  2966               	goto	l2388
  2930  095C  3003               	movlw	3
  2931  095D  026C               	subwf	?_stopWatch+1,w
  2932  095E  1D03               	skipz
  2933  095F  2964               	goto	u2783
  2934  0960  30E8               	movlw	232
  2935  0961  026B               	subwf	?_stopWatch,w
  2936  0962  1D03               	skipz
  2937  0963  2964               	goto	u2783
  2938  0964                     u2783:	
  2939  0964  1C03               	btfss	3,0
  2940  0965  294A               	goto	l315
  2941  0966                     l2388:	
  2942                           
  2943                           ;PIC16F917 Battery Management.c: 312: {
  2944                           ;PIC16F917 Battery Management.c: 313: initLCD();
  2945  0966  120A  158A  2401  120A  158A  	fcall	_initLCD
  2946                           
  2947                           ;PIC16F917 Battery Management.c: 315: RC1 = 1;
  2948  096B  1283               	bcf	3,5	;RP0=0, select bank0
  2949  096C  1303               	bcf	3,6	;RP1=0, select bank0
  2950  096D  1487               	bsf	7,1	;volatile
  2951                           
  2952                           ;PIC16F917 Battery Management.c: 316: _delay((unsigned long)((100)*(8000000/4000.0)));
  2953  096E  3002               	movlw	2
  2954  096F  1683               	bsf	3,5	;RP0=1, select bank1
  2955  0970  1303               	bcf	3,6	;RP1=0, select bank1
  2956  0971  00B3               	movwf	(??_handlePB^(0+128)+2)
  2957  0972  3004               	movlw	4
  2958  0973  00B2               	movwf	(??_handlePB^(0+128)+1)
  2959  0974  30BA               	movlw	186
  2960  0975  00B1               	movwf	??_handlePB^(0+128)
  2961  0976                     u3017:	
  2962  0976  0BB1               	decfsz	??_handlePB^(0+128),f
  2963  0977  2976               	goto	u3017
  2964  0978  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  2965  0979  2976               	goto	u3017
  2966  097A  0BB3               	decfsz	(??_handlePB^(0+128)+2),f
  2967  097B  2976               	goto	u3017
  2968  097C  0000               	nop
  2969                           
  2970                           ;PIC16F917 Battery Management.c: 317: RC1 = 0;
  2971  097D  1283               	bcf	3,5	;RP0=0, select bank0
  2972  097E  1303               	bcf	3,6	;RP1=0, select bank0
  2973  097F  1087               	bcf	7,1	;volatile
  2974                           
  2975                           ;PIC16F917 Battery Management.c: 318: return;
  2976  0980  0008               	return
  2977  0981                     l2398:	
  2978                           
  2979                           ;PIC16F917 Battery Management.c: 319: }
  2980                           ;PIC16F917 Battery Management.c: 320: }
  2981                           ;PIC16F917 Battery Management.c: 322: LCDDisplayMode++;
  2982  0981  3001               	movlw	1
  2983  0982  1683               	bsf	3,5	;RP0=1, select bank1
  2984  0983  1303               	bcf	3,6	;RP1=0, select bank1
  2985  0984  00B1               	movwf	??_handlePB^(0+128)
  2986  0985  0831               	movf	??_handlePB^(0+128),w
  2987  0986  1283               	bcf	3,5	;RP0=0, select bank0
  2988  0987  1303               	bcf	3,6	;RP1=0, select bank0
  2989  0988  07EF               	addwf	_LCDDisplayMode,f
  2990                           
  2991                           ;PIC16F917 Battery Management.c: 324: if (LCDDisplayMode > 3)
  2992  0989  3004               	movlw	4
  2993  098A  026F               	subwf	_LCDDisplayMode,w
  2994  098B  1C03               	skipc
  2995  098C  0008               	return
  2996                           
  2997                           ;PIC16F917 Battery Management.c: 325: LCDDisplayMode = 0;
  2998  098D  01EF               	clrf	_LCDDisplayMode
  2999  098E  0008               	return
  3000  098F                     __end_of_handlePB:	
  3001                           
  3002                           	psect	text13
  3003  0EFA                     __ptext13:	
  3004 ;; *************** function _stopWatch *****************
  3005 ;; Defined at:
  3006 ;;		line 81 in file "timer0.h"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  mode            1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  mode            1   12[BANK1 ] unsigned char 
  3011 ;;  temp            4   13[BANK1 ] unsigned long 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  4   75[BANK0 ] unsigned long 
  3014 ;; Registers used:
  3015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3021 ;;      Params:         0       4       0       0       0
  3022 ;;      Locals:         0       0       5       0       0
  3023 ;;      Temps:          0       0      12       0       0
  3024 ;;      Totals:         0       4      17       0       0
  3025 ;;Total ram usage:       21 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    4
  3028 ;; This function calls:
  3029 ;;		___ftmul
  3030 ;;		___fttol
  3031 ;;		___lltoft
  3032 ;; This function is called by:
  3033 ;;		_handlePB
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           
  3038                           ;psect for function _stopWatch
  3039  0EFA                     _stopWatch:	
  3040                           
  3041                           ;incstack = 0
  3042                           ; Regs used in _stopWatch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3043                           ;stopWatch@mode stored from wreg
  3044  0EFA  1683               	bsf	3,5	;RP0=1, select bank1
  3045  0EFB  1303               	bcf	3,6	;RP1=0, select bank1
  3046  0EFC  00AC               	movwf	stopWatch@mode^(0+128)
  3047                           
  3048                           ;timer0.h: 83: static unsigned long startTime = 0;
  3049                           ;timer0.h: 85: unsigned long temp = 0;
  3050  0EFD  3000               	movlw	0
  3051  0EFE  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3052  0EFF  3000               	movlw	0
  3053  0F00  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3054  0F01  3000               	movlw	0
  3055  0F02  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3056  0F03  3000               	movlw	0
  3057  0F04  00AD               	movwf	stopWatch@temp^(0+128)
  3058                           
  3059                           ;timer0.h: 87: switch (mode)
  3060  0F05  2FEC               	goto	l2200
  3061  0F06                     l2186:	
  3062                           ;timer0.h: 88: {
  3063                           ;timer0.h: 89: case(0):
  3064                           
  3065                           
  3066                           ;timer0.h: 90: {
  3067                           ;timer0.h: 91: startTime = time + TMR0;
  3068  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0F08  0801               	movf	1,w	;volatile
  3071  0F09  1683               	bsf	3,5	;RP0=1, select bank1
  3072  0F0A  1303               	bcf	3,6	;RP1=0, select bank1
  3073  0F0B  075D               	addwf	_time^(0+128),w
  3074  0F0C  00E1               	movwf	stopWatch@startTime^(0+128)
  3075  0F0D  085E               	movf	(_time+1)^(0+128),w
  3076  0F0E  1803               	skipnc
  3077  0F0F  0F5E               	incfsz	(_time+1)^(0+128),w
  3078  0F10  1003               	clrc
  3079  0F11  00E2               	movwf	(stopWatch@startTime^(0+128)+1)
  3080  0F12  085F               	movf	(_time+2)^(0+128),w
  3081  0F13  1803               	skipnc
  3082  0F14  0F5F               	incfsz	(_time+2)^(0+128),w
  3083  0F15  1003               	clrc
  3084  0F16  00E3               	movwf	(stopWatch@startTime^(0+128)+2)
  3085  0F17  0860               	movf	(_time+3)^(0+128),w
  3086  0F18  1803               	skipnc
  3087  0F19  0A60               	incf	(_time+3)^(0+128),w
  3088  0F1A  00E4               	movwf	(stopWatch@startTime^(0+128)+3)
  3089                           
  3090                           ;timer0.h: 93: return 1;
  3091  0F1B  3000               	movlw	0
  3092  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0F1E  00EE               	movwf	?_stopWatch+3
  3095  0F1F  3000               	movlw	0
  3096  0F20  00ED               	movwf	?_stopWatch+2
  3097  0F21  3000               	movlw	0
  3098  0F22  00EC               	movwf	?_stopWatch+1
  3099  0F23  3001               	movlw	1
  3100  0F24  00EB               	movwf	?_stopWatch
  3101  0F25  0008               	return
  3102  0F26                     l2190:	
  3103                           ;timer0.h: 94: }
  3104                           ;timer0.h: 96: case (1):
  3105                           
  3106                           
  3107                           ;timer0.h: 97: {
  3108                           ;timer0.h: 98: temp = time + TMR0 - startTime;
  3109  0F26  1683               	bsf	3,5	;RP0=1, select bank1
  3110  0F27  1303               	bcf	3,6	;RP1=0, select bank1
  3111  0F28  085D               	movf	_time^(0+128),w
  3112  0F29  00A0               	movwf	??_stopWatch^(0+128)
  3113  0F2A  085E               	movf	(_time+1)^(0+128),w
  3114  0F2B  00A1               	movwf	(??_stopWatch^(0+128)+1)
  3115  0F2C  085F               	movf	(_time+2)^(0+128),w
  3116  0F2D  00A2               	movwf	(??_stopWatch^(0+128)+2)
  3117  0F2E  0860               	movf	(_time+3)^(0+128),w
  3118  0F2F  00A3               	movwf	(??_stopWatch^(0+128)+3)
  3119  0F30  0961               	comf	stopWatch@startTime^(0+128),w
  3120  0F31  00A4               	movwf	(??_stopWatch+4)^(0+128)
  3121  0F32  0962               	comf	(stopWatch@startTime+1)^(0+128),w
  3122  0F33  00A5               	movwf	((??_stopWatch+4)^(0+128)+1)
  3123  0F34  0963               	comf	(stopWatch@startTime+2)^(0+128),w
  3124  0F35  00A6               	movwf	((??_stopWatch+4)^(0+128)+2)
  3125  0F36  0964               	comf	(stopWatch@startTime+3)^(0+128),w
  3126  0F37  00A7               	movwf	((??_stopWatch+4)^(0+128)+3)
  3127  0F38  0AA4               	incf	(??_stopWatch+4)^(0+128),f
  3128  0F39  1903               	skipnz
  3129  0F3A  0AA5               	incf	((??_stopWatch+4)^(0+128)+1),f
  3130  0F3B  1903               	skipnz
  3131  0F3C  0AA6               	incf	((??_stopWatch+4)^(0+128)+2),f
  3132  0F3D  1903               	skipnz
  3133  0F3E  0AA7               	incf	((??_stopWatch+4)^(0+128)+3),f
  3134  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0F41  0801               	movf	1,w	;volatile
  3137  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  3139  0F44  00A8               	movwf	(??_stopWatch+8)^(0+128)
  3140  0F45  01A9               	clrf	((??_stopWatch+8)^(0+128)+1)
  3141  0F46  01AA               	clrf	((??_stopWatch+8)^(0+128)+2)
  3142  0F47  01AB               	clrf	((??_stopWatch+8)^(0+128)+3)
  3143  0F48  0828               	movf	(??_stopWatch+8)^(0+128),w
  3144  0F49  07A4               	addwf	(??_stopWatch+4)^(0+128),f
  3145  0F4A  0829               	movf	(??_stopWatch+9)^(0+128),w
  3146  0F4B  1803               	skipnc
  3147  0F4C  0F29               	incfsz	(??_stopWatch+9)^(0+128),w
  3148  0F4D  2F4F               	goto	u2620
  3149  0F4E  2F50               	goto	u2621
  3150  0F4F                     u2620:	
  3151  0F4F  07A5               	addwf	((??_stopWatch+4)^(0+128)+1),f
  3152  0F50                     u2621:	
  3153  0F50  082A               	movf	(??_stopWatch+10)^(0+128),w
  3154  0F51  1803               	skipnc
  3155  0F52  0F2A               	incfsz	(??_stopWatch+10)^(0+128),w
  3156  0F53  2F55               	goto	u2622
  3157  0F54  2F56               	goto	u2623
  3158  0F55                     u2622:	
  3159  0F55  07A6               	addwf	((??_stopWatch+4)^(0+128)+2),f
  3160  0F56                     u2623:	
  3161  0F56  082B               	movf	(??_stopWatch+11)^(0+128),w
  3162  0F57  1803               	skipnc
  3163  0F58  0A2B               	incf	(??_stopWatch+11)^(0+128),w
  3164  0F59  07A7               	addwf	((??_stopWatch+4)^(0+128)+3),f
  3165  0F5A  0824               	movf	(??_stopWatch+4)^(0+128),w
  3166  0F5B  07A0               	addwf	??_stopWatch^(0+128),f
  3167  0F5C  0825               	movf	(??_stopWatch+5)^(0+128),w
  3168  0F5D  1803               	skipnc
  3169  0F5E  0F25               	incfsz	(??_stopWatch+5)^(0+128),w
  3170  0F5F  2F61               	goto	u2630
  3171  0F60  2F62               	goto	u2631
  3172  0F61                     u2630:	
  3173  0F61  07A1               	addwf	(??_stopWatch^(0+128)+1),f
  3174  0F62                     u2631:	
  3175  0F62  0826               	movf	(??_stopWatch+6)^(0+128),w
  3176  0F63  1803               	skipnc
  3177  0F64  0F26               	incfsz	(??_stopWatch+6)^(0+128),w
  3178  0F65  2F67               	goto	u2632
  3179  0F66  2F68               	goto	u2633
  3180  0F67                     u2632:	
  3181  0F67  07A2               	addwf	(??_stopWatch^(0+128)+2),f
  3182  0F68                     u2633:	
  3183  0F68  0827               	movf	(??_stopWatch+7)^(0+128),w
  3184  0F69  1803               	skipnc
  3185  0F6A  0A27               	incf	(??_stopWatch+7)^(0+128),w
  3186  0F6B  07A3               	addwf	(??_stopWatch^(0+128)+3),f
  3187  0F6C  0823               	movf	(??_stopWatch+3)^(0+128),w
  3188  0F6D  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3189  0F6E  0822               	movf	(??_stopWatch+2)^(0+128),w
  3190  0F6F  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3191  0F70  0821               	movf	(??_stopWatch+1)^(0+128),w
  3192  0F71  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3193  0F72  0820               	movf	??_stopWatch^(0+128),w
  3194  0F73  00AD               	movwf	stopWatch@temp^(0+128)
  3195                           
  3196                           ;timer0.h: 100: temp = convConst * temp;
  3197  0F74  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3198  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0F76  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0F77  00AB               	movwf	___lltoft@c+3
  3201  0F78  1683               	bsf	3,5	;RP0=1, select bank1
  3202  0F79  1303               	bcf	3,6	;RP1=0, select bank1
  3203  0F7A  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3204  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  3205  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  3206  0F7D  00AA               	movwf	___lltoft@c+2
  3207  0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  3208  0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  3209  0F80  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3210  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0F83  00A9               	movwf	___lltoft@c+1
  3213  0F84  1683               	bsf	3,5	;RP0=1, select bank1
  3214  0F85  1303               	bcf	3,6	;RP1=0, select bank1
  3215  0F86  082D               	movf	stopWatch@temp^(0+128),w
  3216  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0F89  00A8               	movwf	___lltoft@c
  3219  0F8A  160A  118A  26F4  120A  158A  	fcall	___lltoft
  3220  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  3221  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  3222  0F91  0828               	movf	?___lltoft,w
  3223  0F92  00B3               	movwf	___ftmul@f2
  3224  0F93  0829               	movf	?___lltoft+1,w
  3225  0F94  00B4               	movwf	___ftmul@f2+1
  3226  0F95  082A               	movf	?___lltoft+2,w
  3227  0F96  00B5               	movwf	___ftmul@f2+2
  3228  0F97  3001               	movlw	low (_convConst-__stringbase)
  3229  0F98  0084               	movwf	4
  3230  0F99  120A  158A  200A  120A  158A  	fcall	stringdir
  3231  0F9E  00B0               	movwf	___ftmul@f1
  3232  0F9F  120A  158A  200A  120A  158A  	fcall	stringdir
  3233  0FA4  00B1               	movwf	___ftmul@f1+1
  3234  0FA5  120A  158A  200A  120A  158A  	fcall	stringdir
  3235  0FAA  00B2               	movwf	___ftmul@f1+2
  3236  0FAB  120A  158A  2627  120A  158A  	fcall	___ftmul
  3237  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3239  0FB2  0830               	movf	?___ftmul,w
  3240  0FB3  00DD               	movwf	___fttol@f1
  3241  0FB4  0831               	movf	?___ftmul+1,w
  3242  0FB5  00DE               	movwf	___fttol@f1+1
  3243  0FB6  0832               	movf	?___ftmul+2,w
  3244  0FB7  00DF               	movwf	___fttol@f1+2
  3245  0FB8  120A  158A  22DB  120A  158A  	fcall	___fttol
  3246  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0FBF  0860               	movf	?___fttol+3,w
  3249  0FC0  1683               	bsf	3,5	;RP0=1, select bank1
  3250  0FC1  1303               	bcf	3,6	;RP1=0, select bank1
  3251  0FC2  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3252  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  3253  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  3254  0FC5  085F               	movf	?___fttol+2,w
  3255  0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  3256  0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  3257  0FC8  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3258  0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  3260  0FCB  085E               	movf	?___fttol+1,w
  3261  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  3262  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  3263  0FCE  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3264  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3265  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3266  0FD1  085D               	movf	?___fttol,w
  3267  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  3268  0FD3  1303               	bcf	3,6	;RP1=0, select bank1
  3269  0FD4  00AD               	movwf	stopWatch@temp^(0+128)
  3270                           
  3271                           ;timer0.h: 102: return temp;
  3272  0FD5  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3273  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  3274  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  3275  0FD8  00EE               	movwf	?_stopWatch+3
  3276  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  3277  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  3278  0FDB  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3279  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0FDE  00ED               	movwf	?_stopWatch+2
  3282  0FDF  1683               	bsf	3,5	;RP0=1, select bank1
  3283  0FE0  1303               	bcf	3,6	;RP1=0, select bank1
  3284  0FE1  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3285  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0FE4  00EC               	movwf	?_stopWatch+1
  3288  0FE5  1683               	bsf	3,5	;RP0=1, select bank1
  3289  0FE6  1303               	bcf	3,6	;RP1=0, select bank1
  3290  0FE7  082D               	movf	stopWatch@temp^(0+128),w
  3291  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  3292  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  3293  0FEA  00EB               	movwf	?_stopWatch
  3294  0FEB  0008               	return
  3295  0FEC                     l2200:	
  3296                           ;timer0.h: 103: }
  3297                           ;timer0.h: 104: }
  3298                           
  3299  0FEC  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0FED  1303               	bcf	3,6	;RP1=0, select bank1
  3301  0FEE  082C               	movf	stopWatch@mode^(0+128),w
  3302                           
  3303                           ; Switch size 1, requested type "space"
  3304                           ; Number of cases is 2, Range of values is 0 to 1
  3305                           ; switch strategies available:
  3306                           ; Name         Instructions Cycles
  3307                           ; simple_byte            7     4 (average)
  3308                           ; direct_byte           14     8 (fixed)
  3309                           ; jumptable            260     6 (fixed)
  3310                           ;	Chosen strategy is simple_byte
  3311  0FEF  3A00               	xorlw	0	; case 0
  3312  0FF0  1903               	skipnz
  3313  0FF1  2F06               	goto	l2186
  3314  0FF2  3A01               	xorlw	1	; case 1
  3315  0FF3  1903               	skipnz
  3316  0FF4  2F26               	goto	l2190
  3317  0FF5  2FF6               	goto	l2202
  3318  0FF6                     l2202:	
  3319                           
  3320                           ;timer0.h: 106: return 0;
  3321  0FF6  3000               	movlw	0
  3322  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0FF8  00EE               	movwf	?_stopWatch+3
  3324  0FF9  3000               	movlw	0
  3325  0FFA  00ED               	movwf	?_stopWatch+2
  3326  0FFB  3000               	movlw	0
  3327  0FFC  00EC               	movwf	?_stopWatch+1
  3328  0FFD  3000               	movlw	0
  3329  0FFE  00EB               	movwf	?_stopWatch
  3330  0FFF  0008               	return
  3331  1000                     __end_of_stopWatch:	
  3332                           
  3333                           	psect	text14
  3334  0C01                     __ptext14:	
  3335 ;; *************** function _initLCD *****************
  3336 ;; Defined at:
  3337 ;;		line 52 in file "lcd.h"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, pclath, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0
  3353 ;;      Temps:          0       3       0       0       0
  3354 ;;      Totals:         0       3       0       0       0
  3355 ;;Total ram usage:        3 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    4
  3358 ;; This function calls:
  3359 ;;		_LCDSetBits
  3360 ;;		_LCDcmd
  3361 ;;		_pulse
  3362 ;; This function is called by:
  3363 ;;		_initController
  3364 ;;		_handlePB
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _initLCD
  3370  0C01                     _initLCD:	
  3371                           
  3372                           ;lcd.h: 54: RB0 = 0;
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3376  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0C03  1006               	bcf	6,0	;volatile
  3379                           
  3380                           ;lcd.h: 55: RD7 = 0;
  3381  0C04  1388               	bcf	8,7	;volatile
  3382                           
  3383                           ;lcd.h: 56: LCDSetBits(0x00);
  3384  0C05  3000               	movlw	0
  3385  0C06  160A  118A  262C  120A  158A  	fcall	_LCDSetBits
  3386                           
  3387                           ;lcd.h: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  3388  0C0B  3002               	movlw	2
  3389  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0C0E  00A7               	movwf	??_initLCD+2
  3392  0C0F  3004               	movlw	4
  3393  0C10  00A6               	movwf	??_initLCD+1
  3394  0C11  30BA               	movlw	186
  3395  0C12  00A5               	movwf	??_initLCD
  3396  0C13                     u3027:	
  3397  0C13  0BA5               	decfsz	??_initLCD,f
  3398  0C14  2C13               	goto	u3027
  3399  0C15  0BA6               	decfsz	??_initLCD+1,f
  3400  0C16  2C13               	goto	u3027
  3401  0C17  0BA7               	decfsz	??_initLCD+2,f
  3402  0C18  2C13               	goto	u3027
  3403  0C19  0000               	nop
  3404                           
  3405                           ;lcd.h: 58: LCDSetBits(0x30);
  3406  0C1A  3030               	movlw	48
  3407  0C1B  160A  118A  262C  120A  158A  	fcall	_LCDSetBits
  3408                           
  3409                           ;lcd.h: 59: _delay((unsigned long)((30)*(8000000/4000.0)));
  3410  0C20  304E               	movlw	78
  3411  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  3413  0C23  00A6               	movwf	??_initLCD+1
  3414  0C24  30EB               	movlw	235
  3415  0C25  00A5               	movwf	??_initLCD
  3416  0C26                     u3037:	
  3417  0C26  0BA5               	decfsz	??_initLCD,f
  3418  0C27  2C26               	goto	u3037
  3419  0C28  0BA6               	decfsz	??_initLCD+1,f
  3420  0C29  2C26               	goto	u3037
  3421                           
  3422                           ;lcd.h: 60: pulse();
  3423  0C2A  160A  118A  25F9  120A  158A  	fcall	_pulse
  3424                           
  3425                           ;lcd.h: 61: _delay((unsigned long)((10)*(8000000/4000.0)));
  3426  0C2F  301A               	movlw	26
  3427  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  3429  0C32  00A6               	movwf	??_initLCD+1
  3430  0C33  30F8               	movlw	248
  3431  0C34  00A5               	movwf	??_initLCD
  3432  0C35                     u3047:	
  3433  0C35  0BA5               	decfsz	??_initLCD,f
  3434  0C36  2C35               	goto	u3047
  3435  0C37  0BA6               	decfsz	??_initLCD+1,f
  3436  0C38  2C35               	goto	u3047
  3437  0C39  0000               	nop
  3438                           
  3439                           ;lcd.h: 62: pulse();
  3440  0C3A  160A  118A  25F9  120A  158A  	fcall	_pulse
  3441                           
  3442                           ;lcd.h: 63: _delay((unsigned long)((10)*(8000000/4000.0)));
  3443  0C3F  301A               	movlw	26
  3444  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  3445  0C41  1303               	bcf	3,6	;RP1=0, select bank0
  3446  0C42  00A6               	movwf	??_initLCD+1
  3447  0C43  30F8               	movlw	248
  3448  0C44  00A5               	movwf	??_initLCD
  3449  0C45                     u3057:	
  3450  0C45  0BA5               	decfsz	??_initLCD,f
  3451  0C46  2C45               	goto	u3057
  3452  0C47  0BA6               	decfsz	??_initLCD+1,f
  3453  0C48  2C45               	goto	u3057
  3454  0C49  0000               	nop
  3455                           
  3456                           ;lcd.h: 64: pulse();
  3457  0C4A  160A  118A  25F9  120A  158A  	fcall	_pulse
  3458                           
  3459                           ;lcd.h: 65: _delay((unsigned long)((10)*(8000000/4000.0)));
  3460  0C4F  301A               	movlw	26
  3461  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  3462  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  3463  0C52  00A6               	movwf	??_initLCD+1
  3464  0C53  30F8               	movlw	248
  3465  0C54  00A5               	movwf	??_initLCD
  3466  0C55                     u3067:	
  3467  0C55  0BA5               	decfsz	??_initLCD,f
  3468  0C56  2C55               	goto	u3067
  3469  0C57  0BA6               	decfsz	??_initLCD+1,f
  3470  0C58  2C55               	goto	u3067
  3471  0C59  0000               	nop
  3472                           
  3473                           ;lcd.h: 66: LCDSetBits(0x20);
  3474  0C5A  3020               	movlw	32
  3475  0C5B  160A  118A  262C  120A  158A  	fcall	_LCDSetBits
  3476                           
  3477                           ;lcd.h: 67: pulse();
  3478  0C60  160A  118A  25F9  120A  158A  	fcall	_pulse
  3479                           
  3480                           ;lcd.h: 69: LCDcmd(0x28);
  3481  0C65  3028               	movlw	40
  3482  0C66  160A  118A  26C9  120A  158A  	fcall	_LCDcmd
  3483                           
  3484                           ;lcd.h: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  3485  0C6B  301A               	movlw	26
  3486  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0C6E  00A6               	movwf	??_initLCD+1
  3489  0C6F  30F8               	movlw	248
  3490  0C70  00A5               	movwf	??_initLCD
  3491  0C71                     u3077:	
  3492  0C71  0BA5               	decfsz	??_initLCD,f
  3493  0C72  2C71               	goto	u3077
  3494  0C73  0BA6               	decfsz	??_initLCD+1,f
  3495  0C74  2C71               	goto	u3077
  3496  0C75  0000               	nop
  3497                           
  3498                           ;lcd.h: 71: LCDcmd(0x10);
  3499  0C76  3010               	movlw	16
  3500  0C77  160A  118A  26C9  120A  158A  	fcall	_LCDcmd
  3501                           
  3502                           ;lcd.h: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  3503  0C7C  301A               	movlw	26
  3504  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0C7F  00A6               	movwf	??_initLCD+1
  3507  0C80  30F8               	movlw	248
  3508  0C81  00A5               	movwf	??_initLCD
  3509  0C82                     u3087:	
  3510  0C82  0BA5               	decfsz	??_initLCD,f
  3511  0C83  2C82               	goto	u3087
  3512  0C84  0BA6               	decfsz	??_initLCD+1,f
  3513  0C85  2C82               	goto	u3087
  3514  0C86  0000               	nop
  3515                           
  3516                           ;lcd.h: 73: LCDcmd(0x0F);
  3517  0C87  300F               	movlw	15
  3518  0C88  160A  118A  26C9  120A  158A  	fcall	_LCDcmd
  3519                           
  3520                           ;lcd.h: 74: _delay((unsigned long)((10)*(8000000/4000.0)));
  3521  0C8D  301A               	movlw	26
  3522  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0C90  00A6               	movwf	??_initLCD+1
  3525  0C91  30F8               	movlw	248
  3526  0C92  00A5               	movwf	??_initLCD
  3527  0C93                     u3097:	
  3528  0C93  0BA5               	decfsz	??_initLCD,f
  3529  0C94  2C93               	goto	u3097
  3530  0C95  0BA6               	decfsz	??_initLCD+1,f
  3531  0C96  2C93               	goto	u3097
  3532  0C97  0000               	nop
  3533                           
  3534                           ;lcd.h: 75: LCDcmd(0x06);
  3535  0C98  3006               	movlw	6
  3536  0C99  160A  118A  26C9  120A  158A  	fcall	_LCDcmd
  3537                           
  3538                           ;lcd.h: 76: _delay((unsigned long)((10)*(8000000/4000.0)));
  3539  0C9E  301A               	movlw	26
  3540  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0CA1  00A6               	movwf	??_initLCD+1
  3543  0CA2  30F8               	movlw	248
  3544  0CA3  00A5               	movwf	??_initLCD
  3545  0CA4                     u3107:	
  3546  0CA4  0BA5               	decfsz	??_initLCD,f
  3547  0CA5  2CA4               	goto	u3107
  3548  0CA6  0BA6               	decfsz	??_initLCD+1,f
  3549  0CA7  2CA4               	goto	u3107
  3550  0CA8  0000               	nop
  3551  0CA9  0008               	return
  3552  0CAA                     __end_of_initLCD:	
  3553                           
  3554                           	psect	text15
  3555  16C9                     __ptext15:	
  3556 ;; *************** function _LCDcmd *****************
  3557 ;; Defined at:
  3558 ;;		line 111 in file "lcd.h"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  a               1    wreg     unsigned char 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  a               1    4[BANK0 ] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, pclath, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3572 ;;      Params:         0       0       0       0       0
  3573 ;;      Locals:         0       1       0       0       0
  3574 ;;      Temps:          0       2       0       0       0
  3575 ;;      Totals:         0       3       0       0       0
  3576 ;;Total ram usage:        3 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    3
  3579 ;; This function calls:
  3580 ;;		_LCDSetBits
  3581 ;;		_pulse
  3582 ;; This function is called by:
  3583 ;;		_initLCD
  3584 ;;		_clearLCD
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _LCDcmd
  3590  16C9                     _LCDcmd:	
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  3594                           ;LCDcmd@a stored from wreg
  3595  16C9  1283               	bcf	3,5	;RP0=0, select bank0
  3596  16CA  1303               	bcf	3,6	;RP1=0, select bank0
  3597  16CB  00A4               	movwf	LCDcmd@a
  3598                           
  3599                           ;lcd.h: 113: LCDSetBits(a);
  3600  16CC  0824               	movf	LCDcmd@a,w
  3601  16CD  160A  118A  262C  160A  118A  	fcall	_LCDSetBits
  3602                           
  3603                           ;lcd.h: 114: RB0 = 0;
  3604  16D2  1283               	bcf	3,5	;RP0=0, select bank0
  3605  16D3  1303               	bcf	3,6	;RP1=0, select bank0
  3606  16D4  1006               	bcf	6,0	;volatile
  3607                           
  3608                           ;lcd.h: 115: RD7 = 0;
  3609  16D5  1388               	bcf	8,7	;volatile
  3610                           
  3611                           ;lcd.h: 116: pulse();
  3612  16D6  160A  118A  25F9  160A  118A  	fcall	_pulse
  3613                           
  3614                           ;lcd.h: 117: a = a<<4;
  3615  16DB  1283               	bcf	3,5	;RP0=0, select bank0
  3616  16DC  1303               	bcf	3,6	;RP1=0, select bank0
  3617  16DD  0824               	movf	LCDcmd@a,w
  3618  16DE  00A2               	movwf	??_LCDcmd
  3619  16DF  3003               	movlw	3
  3620  16E0                     u1655:	
  3621  16E0  1003               	clrc
  3622  16E1  0DA2               	rlf	??_LCDcmd,f
  3623  16E2  3EFF               	addlw	-1
  3624  16E3  1D03               	skipz
  3625  16E4  2EE0               	goto	u1655
  3626  16E5  1003               	clrc
  3627  16E6  0D22               	rlf	??_LCDcmd,w
  3628  16E7  00A3               	movwf	??_LCDcmd+1
  3629  16E8  0823               	movf	??_LCDcmd+1,w
  3630  16E9  00A4               	movwf	LCDcmd@a
  3631                           
  3632                           ;lcd.h: 118: LCDSetBits(a);
  3633  16EA  0824               	movf	LCDcmd@a,w
  3634  16EB  160A  118A  262C  160A  118A  	fcall	_LCDSetBits
  3635                           
  3636                           ;lcd.h: 119: pulse();
  3637  16F0  160A  118A  25F9   	fcall	_pulse
  3638  16F3  0008               	return
  3639  16F4                     __end_of_LCDcmd:	
  3640                           
  3641                           	psect	text16
  3642  0740                     __ptext16:	
  3643 ;; *************** function _displayLCD *****************
  3644 ;; Defined at:
  3645 ;;		line 179 in file "PIC16F917 Battery Management.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  disp            2   19[BANK1 ] int 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  temp2           8   33[BANK1 ] unsigned char [8]
  3650 ;;  temp1           8   25[BANK1 ] unsigned char [8]
  3651 ;; Return value:  Size  Location     Type
  3652 ;;		None               void
  3653 ;; Registers used:
  3654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3660 ;;      Params:         0       0       2       0       0
  3661 ;;      Locals:         0       0      16       0       0
  3662 ;;      Temps:          0       0       4       0       0
  3663 ;;      Totals:         0       0      22       0       0
  3664 ;;Total ram usage:       22 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    5
  3667 ;; This function calls:
  3668 ;;		_LCDSetCursor
  3669 ;;		_LCDWriteString
  3670 ;;		_floatToASCII
  3671 ;; This function is called by:
  3672 ;;		_main
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _displayLCD
  3678  0740                     _displayLCD:	
  3679                           
  3680                           ;PIC16F917 Battery Management.c: 181: char temp1[8] = {0,0,0,0,0,0,0,0};
  3681                           
  3682                           ;incstack = 0
  3683                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3684  0740  30B9               	movlw	displayLCD@temp1& (0+255)
  3685  0741  0084               	movwf	4
  3686  0742  30B0               	movlw	low displayLCD@F2777
  3687  0743  1683               	bsf	3,5	;RP0=1, select bank1
  3688  0744  1303               	bcf	3,6	;RP1=0, select bank1
  3689  0745  00B5               	movwf	??_displayLCD^(0+128)
  3690  0746  0804               	movf	4,w
  3691  0747  00B6               	movwf	(??_displayLCD^(0+128)+1)
  3692  0748  3008               	movlw	8
  3693  0749  00B7               	movwf	(??_displayLCD^(0+128)+2)
  3694  074A                     u2810:	
  3695  074A  0835               	movf	??_displayLCD^(0+128),w
  3696  074B  0084               	movwf	4
  3697  074C  1783               	bsf	3,7	;select IRP bank3
  3698  074D  0800               	movf	0,w
  3699  074E  00B8               	movwf	(??_displayLCD^(0+128)+3)
  3700  074F  0AB5               	incf	??_displayLCD^(0+128),f
  3701  0750  0836               	movf	(??_displayLCD^(0+128)+1),w
  3702  0751  0084               	movwf	4
  3703  0752  1383               	bcf	3,7	;select IRP bank1
  3704  0753  0838               	movf	(??_displayLCD^(0+128)+3),w
  3705  0754  0080               	movwf	0
  3706  0755  0AB6               	incf	(??_displayLCD^(0+128)+1),f
  3707  0756  0BB7               	decfsz	(??_displayLCD^(0+128)+2),f
  3708  0757  2F4A               	goto	u2810
  3709                           
  3710                           ;PIC16F917 Battery Management.c: 182: char temp2[8] = {0,0,0,0,0,0,0,0};
  3711  0758  30C1               	movlw	displayLCD@temp2& (0+255)
  3712  0759  0084               	movwf	4
  3713  075A  30B8               	movlw	low displayLCD@F2779
  3714  075B  00B5               	movwf	??_displayLCD^(0+128)
  3715  075C  0804               	movf	4,w
  3716  075D  00B6               	movwf	(??_displayLCD^(0+128)+1)
  3717  075E  3008               	movlw	8
  3718  075F  00B7               	movwf	(??_displayLCD^(0+128)+2)
  3719  0760                     u2820:	
  3720  0760  0835               	movf	??_displayLCD^(0+128),w
  3721  0761  0084               	movwf	4
  3722  0762  1783               	bsf	3,7	;select IRP bank3
  3723  0763  0800               	movf	0,w
  3724  0764  00B8               	movwf	(??_displayLCD^(0+128)+3)
  3725  0765  0AB5               	incf	??_displayLCD^(0+128),f
  3726  0766  0836               	movf	(??_displayLCD^(0+128)+1),w
  3727  0767  0084               	movwf	4
  3728  0768  1383               	bcf	3,7	;select IRP bank1
  3729  0769  0838               	movf	(??_displayLCD^(0+128)+3),w
  3730  076A  0080               	movwf	0
  3731  076B  0AB6               	incf	(??_displayLCD^(0+128)+1),f
  3732  076C  0BB7               	decfsz	(??_displayLCD^(0+128)+2),f
  3733  076D  2F60               	goto	u2820
  3734                           
  3735                           ;PIC16F917 Battery Management.c: 184: switch( disp )
  3736  076E  2FE8               	goto	l2422
  3737  076F                     l2406:	
  3738                           ;PIC16F917 Battery Management.c: 185: {
  3739                           ;PIC16F917 Battery Management.c: 188: case 0:
  3740                           
  3741                           
  3742                           ;PIC16F917 Battery Management.c: 189: {
  3743                           ;PIC16F917 Battery Management.c: 190: floatToASCII( temp1, 12.345, 3);
  3744  076F  3085               	movlw	133
  3745  0770  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0771  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0772  00EB               	movwf	floatToASCII@num
  3748  0773  3045               	movlw	69
  3749  0774  00EC               	movwf	floatToASCII@num+1
  3750  0775  3041               	movlw	65
  3751  0776  00ED               	movwf	floatToASCII@num+2
  3752  0777  3003               	movlw	3
  3753  0778  1683               	bsf	3,5	;RP0=1, select bank1
  3754  0779  1303               	bcf	3,6	;RP1=0, select bank1
  3755  077A  00B5               	movwf	??_displayLCD^(0+128)
  3756  077B  0835               	movf	??_displayLCD^(0+128),w
  3757  077C  1283               	bcf	3,5	;RP0=0, select bank0
  3758  077D  1303               	bcf	3,6	;RP1=0, select bank0
  3759  077E  00EE               	movwf	floatToASCII@precision
  3760  077F  30B9               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3761  0780  120A  118A  2058  120A  118A  	fcall	_floatToASCII
  3762                           
  3763                           ;PIC16F917 Battery Management.c: 191: LCDSetCursor(0x00);
  3764  0785  3000               	movlw	0
  3765  0786  160A  118A  278E  120A  118A  	fcall	_LCDSetCursor
  3766                           
  3767                           ;PIC16F917 Battery Management.c: 192: LCDWriteString("Voltage:");
  3768  078B  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3769  078C  1283               	bcf	3,5	;RP0=0, select bank0
  3770  078D  1303               	bcf	3,6	;RP1=0, select bank0
  3771  078E  00A5               	movwf	LCDWriteString@a
  3772  078F  3080               	movlw	128
  3773  0790  00A6               	movwf	LCDWriteString@a+1
  3774  0791  120A  158A  20AF  120A  118A  	fcall	_LCDWriteString
  3775                           
  3776                           ;PIC16F917 Battery Management.c: 193: LCDWriteString(temp1);
  3777  0796  30B9               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3778  0797  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0798  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0799  00A5               	movwf	LCDWriteString@a
  3781  079A  3000               	movlw	0
  3782  079B  00A6               	movwf	LCDWriteString@a+1
  3783  079C  120A  158A  20AF  120A  118A  	fcall	_LCDWriteString
  3784                           
  3785                           ;PIC16F917 Battery Management.c: 194: LCDWriteString(" V      ");
  3786  07A1  301F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3787  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3788  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  3789  07A4  00A5               	movwf	LCDWriteString@a
  3790  07A5  3080               	movlw	128
  3791  07A6  00A6               	movwf	LCDWriteString@a+1
  3792  07A7  120A  158A  20AF  120A  118A  	fcall	_LCDWriteString
  3793                           
  3794                           ;PIC16F917 Battery Management.c: 196: floatToASCII( temp2, 543.210, 3);
  3795  07AC  30CD               	movlw	205
  3796  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  3797  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  3798  07AF  00EB               	movwf	floatToASCII@num
  3799  07B0  3007               	movlw	7
  3800  07B1  00EC               	movwf	floatToASCII@num+1
  3801  07B2  3044               	movlw	68
  3802  07B3  00ED               	movwf	floatToASCII@num+2
  3803  07B4  3003               	movlw	3
  3804  07B5  1683               	bsf	3,5	;RP0=1, select bank1
  3805  07B6  1303               	bcf	3,6	;RP1=0, select bank1
  3806  07B7  00B5               	movwf	??_displayLCD^(0+128)
  3807  07B8  0835               	movf	??_displayLCD^(0+128),w
  3808  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  3809  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  3810  07BB  00EE               	movwf	floatToASCII@precision
  3811  07BC  30C1               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3812  07BD  120A  118A  2058  120A  118A  	fcall	_floatToASCII
  3813                           
  3814                           ;PIC16F917 Battery Management.c: 197: LCDSetCursor(0x10);
  3815  07C2  3010               	movlw	16
  3816  07C3  160A  118A  278E  120A  118A  	fcall	_LCDSetCursor
  3817                           
  3818                           ;PIC16F917 Battery Management.c: 198: LCDWriteString("Current:");
  3819  07C8  3031               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3820  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  3821  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  3822  07CB  00A5               	movwf	LCDWriteString@a
  3823  07CC  3080               	movlw	128
  3824  07CD  00A6               	movwf	LCDWriteString@a+1
  3825  07CE  120A  158A  20AF  120A  118A  	fcall	_LCDWriteString
  3826                           
  3827                           ;PIC16F917 Battery Management.c: 199: LCDWriteString(temp2);
  3828  07D3  30C1               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3829  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  3830  07D5  1303               	bcf	3,6	;RP1=0, select bank0
  3831  07D6  00A5               	movwf	LCDWriteString@a
  3832  07D7  3000               	movlw	0
  3833  07D8  00A6               	movwf	LCDWriteString@a+1
  3834  07D9  120A  158A  20AF  120A  118A  	fcall	_LCDWriteString
  3835                           
  3836                           ;PIC16F917 Battery Management.c: 200: LCDWriteString(" A       ");
  3837  07DE  3015               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3838  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  3839  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  3840  07E1  00A5               	movwf	LCDWriteString@a
  3841  07E2  3080               	movlw	128
  3842  07E3  00A6               	movwf	LCDWriteString@a+1
  3843  07E4  120A  158A  20AF   	fcall	_LCDWriteString
  3844                           
  3845                           ;PIC16F917 Battery Management.c: 254: }
  3846                           ;PIC16F917 Battery Management.c: 255: }
  3847                           
  3848                           ;PIC16F917 Battery Management.c: 241: {
  3849                           ;PIC16F917 Battery Management.c: 253: break;
  3850                           
  3851                           ;PIC16F917 Battery Management.c: 237: }
  3852                           ;PIC16F917 Battery Management.c: 240: case 3:
  3853                           
  3854                           ;PIC16F917 Battery Management.c: 224: {
  3855                           ;PIC16F917 Battery Management.c: 236: break;
  3856                           
  3857                           ;PIC16F917 Battery Management.c: 220: }
  3858                           ;PIC16F917 Battery Management.c: 223: case 2:
  3859                           
  3860                           ;PIC16F917 Battery Management.c: 207: {
  3861                           ;PIC16F917 Battery Management.c: 219: break;
  3862                           
  3863                           ;PIC16F917 Battery Management.c: 203: }
  3864                           ;PIC16F917 Battery Management.c: 206: case 1:
  3865                           
  3866                           ;PIC16F917 Battery Management.c: 202: break;
  3867  07E7  0008               	return
  3868  07E8                     l2422:	
  3869                           
  3870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3871                           ; Switch size 1, requested type "space"
  3872                           ; Number of cases is 1, Range of values is 0 to 0
  3873                           ; switch strategies available:
  3874                           ; Name         Instructions Cycles
  3875                           ; simple_byte            4     3 (average)
  3876                           ; direct_byte           11     8 (fixed)
  3877                           ; jumptable            260     6 (fixed)
  3878                           ;	Chosen strategy is simple_byte
  3879  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  3880  07E9  1303               	bcf	3,6	;RP1=0, select bank1
  3881  07EA  0834               	movf	(displayLCD@disp+1)^(0+128),w
  3882  07EB  3A00               	xorlw	0	; case 0
  3883  07EC  1903               	skipnz
  3884  07ED  2FEF               	goto	l2538
  3885  07EE  2FFD               	goto	l300
  3886  07EF                     l2538:	
  3887                           
  3888                           ; Switch size 1, requested type "space"
  3889                           ; Number of cases is 4, Range of values is 0 to 3
  3890                           ; switch strategies available:
  3891                           ; Name         Instructions Cycles
  3892                           ; simple_byte           13     7 (average)
  3893                           ; direct_byte           20     8 (fixed)
  3894                           ; jumptable            260     6 (fixed)
  3895                           ;	Chosen strategy is simple_byte
  3896  07EF  0833               	movf	displayLCD@disp^(0+128),w
  3897  07F0  3A00               	xorlw	0	; case 0
  3898  07F1  1903               	skipnz
  3899  07F2  2F6F               	goto	l2406
  3900  07F3  3A01               	xorlw	1	; case 1
  3901  07F4  1903               	skipnz
  3902  07F5  2FFD               	goto	l300
  3903  07F6  3A03               	xorlw	3	; case 2
  3904  07F7  1903               	skipnz
  3905  07F8  2FFD               	goto	l300
  3906  07F9  3A01               	xorlw	1	; case 3
  3907  07FA  1903               	skipnz
  3908  07FB  2FFD               	goto	l300
  3909  07FC  2FFD               	goto	l300
  3910  07FD                     l300:	
  3911  07FD  0008               	return
  3912  07FE                     __end_of_displayLCD:	
  3913                           
  3914                           	psect	text17
  3915  0058                     __ptext17:	
  3916 ;; *************** function _floatToASCII *****************
  3917 ;; Defined at:
  3918 ;;		line 274 in file "lcd.h"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  returnVal       1    wreg     PTR unsigned char 
  3921 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  3922 ;;  num             3   75[BANK0 ] float 
  3923 ;;  precision       1   78[BANK0 ] unsigned char 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  returnVal       1   17[BANK1 ] PTR unsigned char 
  3926 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  3927 ;;  j               1    5[BANK1 ] unsigned char 
  3928 ;;  j               2    7[BANK1 ] int 
  3929 ;;  scaler          4   13[BANK1 ] unsigned long 
  3930 ;;  prevSum         4    9[BANK1 ] unsigned long 
  3931 ;;  i               1   18[BANK1 ] unsigned char 
  3932 ;;  leading         1    6[BANK1 ] unsigned char 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3942 ;;      Params:         0       4       0       0       0
  3943 ;;      Locals:         0       0      14       0       0
  3944 ;;      Temps:          0       0       5       0       0
  3945 ;;      Totals:         0       4      19       0       0
  3946 ;;Total ram usage:       23 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    4
  3949 ;; This function calls:
  3950 ;;		___ftadd
  3951 ;;		___ftdiv
  3952 ;;		___ftmul
  3953 ;;		___ftneg
  3954 ;;		___fttol
  3955 ;;		___lldiv
  3956 ;;		___lltoft
  3957 ;;		___lmul
  3958 ;; This function is called by:
  3959 ;;		_displayLCD
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           
  3964                           ;psect for function _floatToASCII
  3965  0058                     _floatToASCII:	
  3966                           
  3967                           ;incstack = 0
  3968                           ; Regs used in _floatToASCII: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3969                           ;floatToASCII@returnVal stored from wreg
  3970  0058  1683               	bsf	3,5	;RP0=1, select bank1
  3971  0059  1303               	bcf	3,6	;RP1=0, select bank1
  3972  005A  00B1               	movwf	floatToASCII@returnVal^(0+128)
  3973                           
  3974                           ;lcd.h: 276: uint32_t scaler = 100;
  3975  005B  3000               	movlw	0
  3976  005C  00B0               	movwf	(floatToASCII@scaler+3)^(0+128)
  3977  005D  3000               	movlw	0
  3978  005E  00AF               	movwf	(floatToASCII@scaler+2)^(0+128)
  3979  005F  3000               	movlw	0
  3980  0060  00AE               	movwf	(floatToASCII@scaler+1)^(0+128)
  3981  0061  3064               	movlw	100
  3982  0062  00AD               	movwf	floatToASCII@scaler^(0+128)
  3983                           
  3984                           ;lcd.h: 277: uint32_t prevSum = 0;
  3985  0063  3000               	movlw	0
  3986  0064  00AC               	movwf	(floatToASCII@prevSum+3)^(0+128)
  3987  0065  3000               	movlw	0
  3988  0066  00AB               	movwf	(floatToASCII@prevSum+2)^(0+128)
  3989  0067  3000               	movlw	0
  3990  0068  00AA               	movwf	(floatToASCII@prevSum+1)^(0+128)
  3991  0069  3000               	movlw	0
  3992  006A  00A9               	movwf	floatToASCII@prevSum^(0+128)
  3993                           
  3994                           ;lcd.h: 278: bool leading = 1;
  3995  006B  01A6               	clrf	floatToASCII@leading^(0+128)
  3996  006C  0AA6               	incf	floatToASCII@leading^(0+128),f
  3997                           
  3998                           ;lcd.h: 279: uint8_t i = 0;
  3999  006D  01B2               	clrf	floatToASCII@i^(0+128)
  4000                           
  4001                           ;lcd.h: 282: for (int j = 0; j <= 6; j++)
  4002  006E  01A7               	clrf	floatToASCII@j^(0+128)
  4003  006F  01A8               	clrf	(floatToASCII@j+1)^(0+128)
  4004  0070  0828               	movf	(floatToASCII@j+1)^(0+128),w
  4005  0071  3A80               	xorlw	128
  4006  0072  00FF               	movwf	127
  4007  0073  3080               	movlw	128
  4008  0074  027F               	subwf	127,w
  4009  0075  1D03               	skipz
  4010  0076  2879               	goto	u2525
  4011  0077  3007               	movlw	7
  4012  0078  0227               	subwf	floatToASCII@j^(0+128),w
  4013  0079                     u2525:	
  4014  0079  1803               	btfsc	3,0
  4015  007A  2895               	goto	l2126
  4016  007B                     l2120:	
  4017                           
  4018                           ;lcd.h: 283: {
  4019                           ;lcd.h: 284: returnVal[j] = 0x00;
  4020  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4021  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4022  007D  0827               	movf	floatToASCII@j^(0+128),w
  4023  007E  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4024  007F  00A0               	movwf	??_floatToASCII^(0+128)
  4025  0080  0820               	movf	??_floatToASCII^(0+128),w
  4026  0081  0084               	movwf	4
  4027  0082  1383               	bcf	3,7	;select IRP bank0
  4028  0083  0180               	clrf	0
  4029  0084  3001               	movlw	1
  4030  0085  07A7               	addwf	floatToASCII@j^(0+128),f
  4031  0086  1803               	skipnc
  4032  0087  0AA8               	incf	(floatToASCII@j+1)^(0+128),f
  4033  0088  3000               	movlw	0
  4034  0089  07A8               	addwf	(floatToASCII@j+1)^(0+128),f
  4035  008A  0828               	movf	(floatToASCII@j+1)^(0+128),w
  4036  008B  3A80               	xorlw	128
  4037  008C  00FF               	movwf	127
  4038  008D  3080               	movlw	128
  4039  008E  027F               	subwf	127,w
  4040  008F  1D03               	skipz
  4041  0090  2893               	goto	u2535
  4042  0091  3007               	movlw	7
  4043  0092  0227               	subwf	floatToASCII@j^(0+128),w
  4044  0093                     u2535:	
  4045  0093  1C03               	skipc
  4046  0094  287B               	goto	l2120
  4047  0095                     l2126:	
  4048                           ;lcd.h: 285: }
  4049                           ;lcd.h: 288: do
  4050                           
  4051                           
  4052                           ;lcd.h: 289: {
  4053                           ;lcd.h: 294: returnVal[i] = ( num - prevSum ) / scaler;
  4054  0095  1683               	bsf	3,5	;RP0=1, select bank1
  4055  0096  1303               	bcf	3,6	;RP1=0, select bank1
  4056  0097  082C               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4057  0098  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0099  1303               	bcf	3,6	;RP1=0, select bank0
  4059  009A  00AB               	movwf	___lltoft@c+3
  4060  009B  1683               	bsf	3,5	;RP0=1, select bank1
  4061  009C  1303               	bcf	3,6	;RP1=0, select bank1
  4062  009D  082B               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4063  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4064  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4065  00A0  00AA               	movwf	___lltoft@c+2
  4066  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  4067  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  4068  00A3  082A               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4069  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  4070  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  4071  00A6  00A9               	movwf	___lltoft@c+1
  4072  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  4073  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  4074  00A9  0829               	movf	floatToASCII@prevSum^(0+128),w
  4075  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  4076  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  4077  00AC  00A8               	movwf	___lltoft@c
  4078  00AD  160A  118A  26F4  120A  118A  	fcall	___lltoft
  4079  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  4080  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  4081  00B4  0828               	movf	?___lltoft,w
  4082  00B5  00AE               	movwf	___ftneg@f1
  4083  00B6  0829               	movf	?___lltoft+1,w
  4084  00B7  00AF               	movwf	___ftneg@f1+1
  4085  00B8  082A               	movf	?___lltoft+2,w
  4086  00B9  00B0               	movwf	___ftneg@f1+2
  4087  00BA  120A  158A  2049  120A  118A  	fcall	___ftneg
  4088  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  4089  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  4090  00C1  082E               	movf	?___ftneg,w
  4091  00C2  00C3               	movwf	___ftadd@f2
  4092  00C3  082F               	movf	?___ftneg+1,w
  4093  00C4  00C4               	movwf	___ftadd@f2+1
  4094  00C5  0830               	movf	?___ftneg+2,w
  4095  00C6  00C5               	movwf	___ftadd@f2+2
  4096  00C7  086B               	movf	floatToASCII@num,w
  4097  00C8  00C0               	movwf	___ftadd@f1
  4098  00C9  086C               	movf	floatToASCII@num+1,w
  4099  00CA  00C1               	movwf	___ftadd@f1+1
  4100  00CB  086D               	movf	floatToASCII@num+2,w
  4101  00CC  00C2               	movwf	___ftadd@f1+2
  4102  00CD  120A  118A  2637  120A  118A  	fcall	___ftadd
  4103  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  4104  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  4105  00D4  0840               	movf	?___ftadd,w
  4106  00D5  00D0               	movwf	___ftdiv@f1
  4107  00D6  0841               	movf	?___ftadd+1,w
  4108  00D7  00D1               	movwf	___ftdiv@f1+1
  4109  00D8  0842               	movf	?___ftadd+2,w
  4110  00D9  00D2               	movwf	___ftdiv@f1+2
  4111  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  4112  00DB  1303               	bcf	3,6	;RP1=0, select bank1
  4113  00DC  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4114  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  4115  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  4116  00DF  00AB               	movwf	___lltoft@c+3
  4117  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  4118  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  4119  00E2  082F               	movf	(floatToASCII@scaler+2)^(0+128),w
  4120  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4121  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4122  00E5  00AA               	movwf	___lltoft@c+2
  4123  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  4124  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  4125  00E8  082E               	movf	(floatToASCII@scaler+1)^(0+128),w
  4126  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  4127  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  4128  00EB  00A9               	movwf	___lltoft@c+1
  4129  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  4130  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  4131  00EE  082D               	movf	floatToASCII@scaler^(0+128),w
  4132  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  4133  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  4134  00F1  00A8               	movwf	___lltoft@c
  4135  00F2  160A  118A  26F4  120A  118A  	fcall	___lltoft
  4136  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  4137  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  4138  00F9  0828               	movf	?___lltoft,w
  4139  00FA  00CD               	movwf	___ftdiv@f2
  4140  00FB  0829               	movf	?___lltoft+1,w
  4141  00FC  00CE               	movwf	___ftdiv@f2+1
  4142  00FD  082A               	movf	?___lltoft+2,w
  4143  00FE  00CF               	movwf	___ftdiv@f2+2
  4144  00FF  120A  158A  24AA  120A  118A  	fcall	___ftdiv
  4145  0104  1283               	bcf	3,5	;RP0=0, select bank0
  4146  0105  1303               	bcf	3,6	;RP1=0, select bank0
  4147  0106  084D               	movf	?___ftdiv,w
  4148  0107  00DD               	movwf	___fttol@f1
  4149  0108  084E               	movf	?___ftdiv+1,w
  4150  0109  00DE               	movwf	___fttol@f1+1
  4151  010A  084F               	movf	?___ftdiv+2,w
  4152  010B  00DF               	movwf	___fttol@f1+2
  4153  010C  120A  158A  22DB  120A  118A  	fcall	___fttol
  4154  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4155  0112  1303               	bcf	3,6	;RP1=0, select bank0
  4156  0113  085D               	movf	?___fttol,w
  4157  0114  1683               	bsf	3,5	;RP0=1, select bank1
  4158  0115  1303               	bcf	3,6	;RP1=0, select bank1
  4159  0116  00A0               	movwf	??_floatToASCII^(0+128)
  4160  0117  0832               	movf	floatToASCII@i^(0+128),w
  4161  0118  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4162  0119  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4163  011A  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4164  011B  0084               	movwf	4
  4165  011C  0820               	movf	??_floatToASCII^(0+128),w
  4166  011D  1383               	bcf	3,7	;select IRP bank0
  4167  011E  0080               	movwf	0
  4168                           
  4169                           ;lcd.h: 296: prevSum += returnVal[i]*scaler;
  4170  011F  0832               	movf	floatToASCII@i^(0+128),w
  4171  0120  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4172  0121  00A0               	movwf	??_floatToASCII^(0+128)
  4173  0122  0820               	movf	??_floatToASCII^(0+128),w
  4174  0123  0084               	movwf	4
  4175  0124  0800               	movf	0,w
  4176  0125  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4177  0126  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  4178  0127  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  4179  0128  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  4180  0129  0824               	movf	(??_floatToASCII+4)^(0+128),w
  4181  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4182  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4183  012C  00A3               	movwf	___lmul@multiplier+3
  4184  012D  1683               	bsf	3,5	;RP0=1, select bank1
  4185  012E  1303               	bcf	3,6	;RP1=0, select bank1
  4186  012F  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4187  0130  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0131  1303               	bcf	3,6	;RP1=0, select bank0
  4189  0132  00A2               	movwf	___lmul@multiplier+2
  4190  0133  1683               	bsf	3,5	;RP0=1, select bank1
  4191  0134  1303               	bcf	3,6	;RP1=0, select bank1
  4192  0135  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4193  0136  1283               	bcf	3,5	;RP0=0, select bank0
  4194  0137  1303               	bcf	3,6	;RP1=0, select bank0
  4195  0138  00A1               	movwf	___lmul@multiplier+1
  4196  0139  1683               	bsf	3,5	;RP0=1, select bank1
  4197  013A  1303               	bcf	3,6	;RP1=0, select bank1
  4198  013B  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4199  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4200  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4201  013E  00A0               	movwf	___lmul@multiplier
  4202  013F  1683               	bsf	3,5	;RP0=1, select bank1
  4203  0140  1303               	bcf	3,6	;RP1=0, select bank1
  4204  0141  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4205  0142  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0143  1303               	bcf	3,6	;RP1=0, select bank0
  4207  0144  00A7               	movwf	___lmul@multiplicand+3
  4208  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4209  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4210  0147  082F               	movf	(floatToASCII@scaler+2)^(0+128),w
  4211  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4212  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4213  014A  00A6               	movwf	___lmul@multiplicand+2
  4214  014B  1683               	bsf	3,5	;RP0=1, select bank1
  4215  014C  1303               	bcf	3,6	;RP1=0, select bank1
  4216  014D  082E               	movf	(floatToASCII@scaler+1)^(0+128),w
  4217  014E  1283               	bcf	3,5	;RP0=0, select bank0
  4218  014F  1303               	bcf	3,6	;RP1=0, select bank0
  4219  0150  00A5               	movwf	___lmul@multiplicand+1
  4220  0151  1683               	bsf	3,5	;RP0=1, select bank1
  4221  0152  1303               	bcf	3,6	;RP1=0, select bank1
  4222  0153  082D               	movf	floatToASCII@scaler^(0+128),w
  4223  0154  1283               	bcf	3,5	;RP0=0, select bank0
  4224  0155  1303               	bcf	3,6	;RP1=0, select bank0
  4225  0156  00A4               	movwf	___lmul@multiplicand
  4226  0157  120A  158A  20F0  120A  118A  	fcall	___lmul
  4227  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4228  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4229  015E  0820               	movf	?___lmul,w
  4230  015F  1683               	bsf	3,5	;RP0=1, select bank1
  4231  0160  1303               	bcf	3,6	;RP1=0, select bank1
  4232  0161  07A9               	addwf	floatToASCII@prevSum^(0+128),f
  4233  0162  1283               	bcf	3,5	;RP0=0, select bank0
  4234  0163  1303               	bcf	3,6	;RP1=0, select bank0
  4235  0164  0821               	movf	?___lmul+1,w
  4236  0165  1103               	clrz
  4237  0166  1803               	skipnc
  4238  0167  3E01               	addlw	1
  4239  0168  1903               	skipnz
  4240  0169  296D               	goto	u2541
  4241  016A  1683               	bsf	3,5	;RP0=1, select bank1
  4242  016B  1303               	bcf	3,6	;RP1=0, select bank1
  4243  016C  07AA               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  4244  016D                     u2541:	
  4245  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4246  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4247  016F  0822               	movf	?___lmul+2,w
  4248  0170  1103               	clrz
  4249  0171  1803               	skipnc
  4250  0172  3E01               	addlw	1
  4251  0173  1903               	skipnz
  4252  0174  2978               	goto	u2542
  4253  0175  1683               	bsf	3,5	;RP0=1, select bank1
  4254  0176  1303               	bcf	3,6	;RP1=0, select bank1
  4255  0177  07AB               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  4256  0178                     u2542:	
  4257  0178  1283               	bcf	3,5	;RP0=0, select bank0
  4258  0179  1303               	bcf	3,6	;RP1=0, select bank0
  4259  017A  0823               	movf	?___lmul+3,w
  4260  017B  1103               	clrz
  4261  017C  1803               	skipnc
  4262  017D  3E01               	addlw	1
  4263  017E  1903               	skipnz
  4264  017F  2983               	goto	u2543
  4265  0180  1683               	bsf	3,5	;RP0=1, select bank1
  4266  0181  1303               	bcf	3,6	;RP1=0, select bank1
  4267  0182  07AC               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  4268  0183                     u2543:	
  4269  0183  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0185  1683               	bsf	3,5	;RP0=1, select bank1
  4272  0186  1303               	bcf	3,6	;RP1=0, select bank1
  4273                           
  4274                           ;lcd.h: 298: scaler = scaler/10;
  4275  0187  3000               	movlw	0
  4276  0188  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0189  1303               	bcf	3,6	;RP1=0, select bank0
  4278  018A  00A3               	movwf	___lldiv@divisor+3
  4279  018B  3000               	movlw	0
  4280  018C  00A2               	movwf	___lldiv@divisor+2
  4281  018D  3000               	movlw	0
  4282  018E  00A1               	movwf	___lldiv@divisor+1
  4283  018F  300A               	movlw	10
  4284  0190  00A0               	movwf	___lldiv@divisor
  4285  0191  1683               	bsf	3,5	;RP0=1, select bank1
  4286  0192  1303               	bcf	3,6	;RP1=0, select bank1
  4287  0193  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4288  0194  1283               	bcf	3,5	;RP0=0, select bank0
  4289  0195  1303               	bcf	3,6	;RP1=0, select bank0
  4290  0196  00A7               	movwf	___lldiv@dividend+3
  4291  0197  1683               	bsf	3,5	;RP0=1, select bank1
  4292  0198  1303               	bcf	3,6	;RP1=0, select bank1
  4293  0199  082F               	movf	(floatToASCII@scaler+2)^(0+128),w
  4294  019A  1283               	bcf	3,5	;RP0=0, select bank0
  4295  019B  1303               	bcf	3,6	;RP1=0, select bank0
  4296  019C  00A6               	movwf	___lldiv@dividend+2
  4297  019D  1683               	bsf	3,5	;RP0=1, select bank1
  4298  019E  1303               	bcf	3,6	;RP1=0, select bank1
  4299  019F  082E               	movf	(floatToASCII@scaler+1)^(0+128),w
  4300  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  4301  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  4302  01A2  00A5               	movwf	___lldiv@dividend+1
  4303  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  4304  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  4305  01A5  082D               	movf	floatToASCII@scaler^(0+128),w
  4306  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4307  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  4308  01A8  00A4               	movwf	___lldiv@dividend
  4309  01A9  120A  158A  218F  120A  118A  	fcall	___lldiv
  4310  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  4311  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  4312  01B0  0823               	movf	?___lldiv+3,w
  4313  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4314  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4315  01B3  00B0               	movwf	(floatToASCII@scaler+3)^(0+128)
  4316  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4317  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4318  01B6  0822               	movf	?___lldiv+2,w
  4319  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  4320  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  4321  01B9  00AF               	movwf	(floatToASCII@scaler+2)^(0+128)
  4322  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4323  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4324  01BC  0821               	movf	?___lldiv+1,w
  4325  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  4326  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  4327  01BF  00AE               	movwf	(floatToASCII@scaler+1)^(0+128)
  4328  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  4329  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  4330  01C2  0820               	movf	?___lldiv,w
  4331  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  4332  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  4333  01C5  00AD               	movwf	floatToASCII@scaler^(0+128)
  4334                           
  4335                           ;lcd.h: 300: if (leading == 1)
  4336  01C6  0326               	decf	floatToASCII@leading^(0+128),w
  4337  01C7  1D03               	btfss	3,2
  4338  01C8  29D8               	goto	l2138
  4339                           
  4340                           ;lcd.h: 301: {
  4341                           ;lcd.h: 302: if ( returnVal[i] != 0 )
  4342  01C9  0832               	movf	floatToASCII@i^(0+128),w
  4343  01CA  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4344  01CB  00A0               	movwf	??_floatToASCII^(0+128)
  4345  01CC  0820               	movf	??_floatToASCII^(0+128),w
  4346  01CD  0084               	movwf	4
  4347  01CE  1383               	bcf	3,7	;select IRP bank0
  4348  01CF  0800               	movf	0,w
  4349  01D0  1903               	btfsc	3,2
  4350  01D1  29DC               	goto	l2140
  4351                           
  4352                           ;lcd.h: 303: {
  4353                           ;lcd.h: 305: i++;
  4354  01D2  3001               	movlw	1
  4355  01D3  00A0               	movwf	??_floatToASCII^(0+128)
  4356  01D4  0820               	movf	??_floatToASCII^(0+128),w
  4357  01D5  07B2               	addwf	floatToASCII@i^(0+128),f
  4358                           
  4359                           ;lcd.h: 306: leading = 0;
  4360  01D6  01A6               	clrf	floatToASCII@leading^(0+128)
  4361                           
  4362                           ;lcd.h: 307: }
  4363                           ;lcd.h: 308: }
  4364  01D7  29DC               	goto	l2140
  4365  01D8                     l2138:	
  4366                           
  4367                           ;lcd.h: 309: else
  4368                           ;lcd.h: 310: i++;
  4369  01D8  3001               	movlw	1
  4370  01D9  00A0               	movwf	??_floatToASCII^(0+128)
  4371  01DA  0820               	movf	??_floatToASCII^(0+128),w
  4372  01DB  07B2               	addwf	floatToASCII@i^(0+128),f
  4373  01DC                     l2140:	
  4374                           
  4375                           ;lcd.h: 312: } while ( scaler > 0 );
  4376  01DC  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4377  01DD  042F               	iorwf	(floatToASCII@scaler+2)^(0+128),w
  4378  01DE  042E               	iorwf	(floatToASCII@scaler+1)^(0+128),w
  4379  01DF  042D               	iorwf	floatToASCII@scaler^(0+128),w
  4380  01E0  1D03               	skipz
  4381  01E1  2895               	goto	l2126
  4382                           
  4383                           ;lcd.h: 314: returnVal[i] = 0x3E;
  4384  01E2  303E               	movlw	62
  4385  01E3  00A0               	movwf	??_floatToASCII^(0+128)
  4386  01E4  0832               	movf	floatToASCII@i^(0+128),w
  4387  01E5  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4388  01E6  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4389  01E7  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4390  01E8  0084               	movwf	4
  4391  01E9  0820               	movf	??_floatToASCII^(0+128),w
  4392  01EA  1383               	bcf	3,7	;select IRP bank0
  4393  01EB  0080               	movwf	0
  4394                           
  4395                           ;lcd.h: 318: scaler = 10;
  4396  01EC  3000               	movlw	0
  4397  01ED  00B0               	movwf	(floatToASCII@scaler+3)^(0+128)
  4398  01EE  3000               	movlw	0
  4399  01EF  00AF               	movwf	(floatToASCII@scaler+2)^(0+128)
  4400  01F0  3000               	movlw	0
  4401  01F1  00AE               	movwf	(floatToASCII@scaler+1)^(0+128)
  4402  01F2  300A               	movlw	10
  4403  01F3  00AD               	movwf	floatToASCII@scaler^(0+128)
  4404                           
  4405                           ;lcd.h: 320: for (uint8_t j = i; i - j <= precision ; i++)
  4406  01F4  0832               	movf	floatToASCII@i^(0+128),w
  4407  01F5  00A0               	movwf	??_floatToASCII^(0+128)
  4408  01F6  0820               	movf	??_floatToASCII^(0+128),w
  4409  01F7  00A5               	movwf	floatToASCII@j_342^(0+128)
  4410  01F8                     l2158:	
  4411  01F8  0825               	movf	floatToASCII@j_342^(0+128),w
  4412  01F9  00A0               	movwf	??_floatToASCII^(0+128)
  4413  01FA  01A1               	clrf	(??_floatToASCII^(0+128)+1)
  4414  01FB  09A0               	comf	??_floatToASCII^(0+128),f
  4415  01FC  09A1               	comf	(??_floatToASCII^(0+128)+1),f
  4416  01FD  0AA0               	incf	??_floatToASCII^(0+128),f
  4417  01FE  1903               	skipnz
  4418  01FF  0AA1               	incf	(??_floatToASCII^(0+128)+1),f
  4419  0200  0832               	movf	floatToASCII@i^(0+128),w
  4420  0201  0720               	addwf	??_floatToASCII^(0+128),w
  4421  0202  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  4422  0203  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4423  0204  1803               	skipnc
  4424  0205  0A21               	incf	(??_floatToASCII+1)^(0+128),w
  4425  0206  00A3               	movwf	((??_floatToASCII+2)^(0+128)+1)
  4426  0207  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4427  0208  3A80               	xorlw	128
  4428  0209  3C80               	sublw	128
  4429  020A  1D03               	skipz
  4430  020B  2A10               	goto	u2595
  4431  020C  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4432  020D  1283               	bcf	3,5	;RP0=0, select bank0
  4433  020E  1303               	bcf	3,6	;RP1=0, select bank0
  4434  020F  026E               	subwf	floatToASCII@precision,w
  4435  0210                     u2595:	
  4436  0210  1C03               	btfss	3,0
  4437  0211  2B36               	goto	l2160
  4438                           
  4439                           ;lcd.h: 321: {
  4440                           ;lcd.h: 322: prevSum = prevSum * 10;
  4441  0212  1683               	bsf	3,5	;RP0=1, select bank1
  4442  0213  1303               	bcf	3,6	;RP1=0, select bank1
  4443  0214  082C               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4444  0215  1283               	bcf	3,5	;RP0=0, select bank0
  4445  0216  1303               	bcf	3,6	;RP1=0, select bank0
  4446  0217  00A3               	movwf	___lmul@multiplier+3
  4447  0218  1683               	bsf	3,5	;RP0=1, select bank1
  4448  0219  1303               	bcf	3,6	;RP1=0, select bank1
  4449  021A  082B               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4450  021B  1283               	bcf	3,5	;RP0=0, select bank0
  4451  021C  1303               	bcf	3,6	;RP1=0, select bank0
  4452  021D  00A2               	movwf	___lmul@multiplier+2
  4453  021E  1683               	bsf	3,5	;RP0=1, select bank1
  4454  021F  1303               	bcf	3,6	;RP1=0, select bank1
  4455  0220  082A               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4456  0221  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0222  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0223  00A1               	movwf	___lmul@multiplier+1
  4459  0224  1683               	bsf	3,5	;RP0=1, select bank1
  4460  0225  1303               	bcf	3,6	;RP1=0, select bank1
  4461  0226  0829               	movf	floatToASCII@prevSum^(0+128),w
  4462  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0228  1303               	bcf	3,6	;RP1=0, select bank0
  4464  0229  00A0               	movwf	___lmul@multiplier
  4465  022A  3000               	movlw	0
  4466  022B  00A7               	movwf	___lmul@multiplicand+3
  4467  022C  3000               	movlw	0
  4468  022D  00A6               	movwf	___lmul@multiplicand+2
  4469  022E  3000               	movlw	0
  4470  022F  00A5               	movwf	___lmul@multiplicand+1
  4471  0230  300A               	movlw	10
  4472  0231  00A4               	movwf	___lmul@multiplicand
  4473  0232  120A  158A  20F0  120A  118A  	fcall	___lmul
  4474  0237  1283               	bcf	3,5	;RP0=0, select bank0
  4475  0238  1303               	bcf	3,6	;RP1=0, select bank0
  4476  0239  0823               	movf	?___lmul+3,w
  4477  023A  1683               	bsf	3,5	;RP0=1, select bank1
  4478  023B  1303               	bcf	3,6	;RP1=0, select bank1
  4479  023C  00AC               	movwf	(floatToASCII@prevSum+3)^(0+128)
  4480  023D  1283               	bcf	3,5	;RP0=0, select bank0
  4481  023E  1303               	bcf	3,6	;RP1=0, select bank0
  4482  023F  0822               	movf	?___lmul+2,w
  4483  0240  1683               	bsf	3,5	;RP0=1, select bank1
  4484  0241  1303               	bcf	3,6	;RP1=0, select bank1
  4485  0242  00AB               	movwf	(floatToASCII@prevSum+2)^(0+128)
  4486  0243  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0244  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0245  0821               	movf	?___lmul+1,w
  4489  0246  1683               	bsf	3,5	;RP0=1, select bank1
  4490  0247  1303               	bcf	3,6	;RP1=0, select bank1
  4491  0248  00AA               	movwf	(floatToASCII@prevSum+1)^(0+128)
  4492  0249  1283               	bcf	3,5	;RP0=0, select bank0
  4493  024A  1303               	bcf	3,6	;RP1=0, select bank0
  4494  024B  0820               	movf	?___lmul,w
  4495  024C  1683               	bsf	3,5	;RP0=1, select bank1
  4496  024D  1303               	bcf	3,6	;RP1=0, select bank1
  4497  024E  00A9               	movwf	floatToASCII@prevSum^(0+128)
  4498                           
  4499                           ;lcd.h: 323: returnVal[i] = num * scaler - prevSum;
  4500  024F  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4501  0250  1283               	bcf	3,5	;RP0=0, select bank0
  4502  0251  1303               	bcf	3,6	;RP1=0, select bank0
  4503  0252  00AB               	movwf	___lltoft@c+3
  4504  0253  1683               	bsf	3,5	;RP0=1, select bank1
  4505  0254  1303               	bcf	3,6	;RP1=0, select bank1
  4506  0255  082F               	movf	(floatToASCII@scaler+2)^(0+128),w
  4507  0256  1283               	bcf	3,5	;RP0=0, select bank0
  4508  0257  1303               	bcf	3,6	;RP1=0, select bank0
  4509  0258  00AA               	movwf	___lltoft@c+2
  4510  0259  1683               	bsf	3,5	;RP0=1, select bank1
  4511  025A  1303               	bcf	3,6	;RP1=0, select bank1
  4512  025B  082E               	movf	(floatToASCII@scaler+1)^(0+128),w
  4513  025C  1283               	bcf	3,5	;RP0=0, select bank0
  4514  025D  1303               	bcf	3,6	;RP1=0, select bank0
  4515  025E  00A9               	movwf	___lltoft@c+1
  4516  025F  1683               	bsf	3,5	;RP0=1, select bank1
  4517  0260  1303               	bcf	3,6	;RP1=0, select bank1
  4518  0261  082D               	movf	floatToASCII@scaler^(0+128),w
  4519  0262  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0263  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0264  00A8               	movwf	___lltoft@c
  4522  0265  160A  118A  26F4  120A  118A  	fcall	___lltoft
  4523  026A  1283               	bcf	3,5	;RP0=0, select bank0
  4524  026B  1303               	bcf	3,6	;RP1=0, select bank0
  4525  026C  0828               	movf	?___lltoft,w
  4526  026D  00B3               	movwf	___ftmul@f2
  4527  026E  0829               	movf	?___lltoft+1,w
  4528  026F  00B4               	movwf	___ftmul@f2+1
  4529  0270  082A               	movf	?___lltoft+2,w
  4530  0271  00B5               	movwf	___ftmul@f2+2
  4531  0272  086B               	movf	floatToASCII@num,w
  4532  0273  00B0               	movwf	___ftmul@f1
  4533  0274  086C               	movf	floatToASCII@num+1,w
  4534  0275  00B1               	movwf	___ftmul@f1+1
  4535  0276  086D               	movf	floatToASCII@num+2,w
  4536  0277  00B2               	movwf	___ftmul@f1+2
  4537  0278  120A  158A  2627  120A  118A  	fcall	___ftmul
  4538  027D  1283               	bcf	3,5	;RP0=0, select bank0
  4539  027E  1303               	bcf	3,6	;RP1=0, select bank0
  4540  027F  0830               	movf	?___ftmul,w
  4541  0280  00C3               	movwf	___ftadd@f2
  4542  0281  0831               	movf	?___ftmul+1,w
  4543  0282  00C4               	movwf	___ftadd@f2+1
  4544  0283  0832               	movf	?___ftmul+2,w
  4545  0284  00C5               	movwf	___ftadd@f2+2
  4546  0285  1683               	bsf	3,5	;RP0=1, select bank1
  4547  0286  1303               	bcf	3,6	;RP1=0, select bank1
  4548  0287  082C               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4549  0288  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0289  1303               	bcf	3,6	;RP1=0, select bank0
  4551  028A  00AB               	movwf	___lltoft@c+3
  4552  028B  1683               	bsf	3,5	;RP0=1, select bank1
  4553  028C  1303               	bcf	3,6	;RP1=0, select bank1
  4554  028D  082B               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4555  028E  1283               	bcf	3,5	;RP0=0, select bank0
  4556  028F  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0290  00AA               	movwf	___lltoft@c+2
  4558  0291  1683               	bsf	3,5	;RP0=1, select bank1
  4559  0292  1303               	bcf	3,6	;RP1=0, select bank1
  4560  0293  082A               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4561  0294  1283               	bcf	3,5	;RP0=0, select bank0
  4562  0295  1303               	bcf	3,6	;RP1=0, select bank0
  4563  0296  00A9               	movwf	___lltoft@c+1
  4564  0297  1683               	bsf	3,5	;RP0=1, select bank1
  4565  0298  1303               	bcf	3,6	;RP1=0, select bank1
  4566  0299  0829               	movf	floatToASCII@prevSum^(0+128),w
  4567  029A  1283               	bcf	3,5	;RP0=0, select bank0
  4568  029B  1303               	bcf	3,6	;RP1=0, select bank0
  4569  029C  00A8               	movwf	___lltoft@c
  4570  029D  160A  118A  26F4  120A  118A  	fcall	___lltoft
  4571  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  4572  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  4573  02A4  0828               	movf	?___lltoft,w
  4574  02A5  00AE               	movwf	___ftneg@f1
  4575  02A6  0829               	movf	?___lltoft+1,w
  4576  02A7  00AF               	movwf	___ftneg@f1+1
  4577  02A8  082A               	movf	?___lltoft+2,w
  4578  02A9  00B0               	movwf	___ftneg@f1+2
  4579  02AA  120A  158A  2049  120A  118A  	fcall	___ftneg
  4580  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  4581  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  4582  02B1  082E               	movf	?___ftneg,w
  4583  02B2  00C0               	movwf	___ftadd@f1
  4584  02B3  082F               	movf	?___ftneg+1,w
  4585  02B4  00C1               	movwf	___ftadd@f1+1
  4586  02B5  0830               	movf	?___ftneg+2,w
  4587  02B6  00C2               	movwf	___ftadd@f1+2
  4588  02B7  120A  118A  2637  120A  118A  	fcall	___ftadd
  4589  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  4590  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  4591  02BE  0840               	movf	?___ftadd,w
  4592  02BF  00DD               	movwf	___fttol@f1
  4593  02C0  0841               	movf	?___ftadd+1,w
  4594  02C1  00DE               	movwf	___fttol@f1+1
  4595  02C2  0842               	movf	?___ftadd+2,w
  4596  02C3  00DF               	movwf	___fttol@f1+2
  4597  02C4  120A  158A  22DB  120A  118A  	fcall	___fttol
  4598  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  4599  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  4600  02CB  085D               	movf	?___fttol,w
  4601  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  4602  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  4603  02CE  00A0               	movwf	??_floatToASCII^(0+128)
  4604  02CF  0832               	movf	floatToASCII@i^(0+128),w
  4605  02D0  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4606  02D1  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4607  02D2  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4608  02D3  0084               	movwf	4
  4609  02D4  0820               	movf	??_floatToASCII^(0+128),w
  4610  02D5  1383               	bcf	3,7	;select IRP bank0
  4611  02D6  0080               	movwf	0
  4612                           
  4613                           ;lcd.h: 325: scaler = scaler * 10;
  4614  02D7  0830               	movf	(floatToASCII@scaler+3)^(0+128),w
  4615  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  4616  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  4617  02DA  00A3               	movwf	___lmul@multiplier+3
  4618  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  4619  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  4620  02DD  082F               	movf	(floatToASCII@scaler+2)^(0+128),w
  4621  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  4622  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  4623  02E0  00A2               	movwf	___lmul@multiplier+2
  4624  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  4625  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  4626  02E3  082E               	movf	(floatToASCII@scaler+1)^(0+128),w
  4627  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  4628  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  4629  02E6  00A1               	movwf	___lmul@multiplier+1
  4630  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  4631  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  4632  02E9  082D               	movf	floatToASCII@scaler^(0+128),w
  4633  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  4634  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  4635  02EC  00A0               	movwf	___lmul@multiplier
  4636  02ED  3000               	movlw	0
  4637  02EE  00A7               	movwf	___lmul@multiplicand+3
  4638  02EF  3000               	movlw	0
  4639  02F0  00A6               	movwf	___lmul@multiplicand+2
  4640  02F1  3000               	movlw	0
  4641  02F2  00A5               	movwf	___lmul@multiplicand+1
  4642  02F3  300A               	movlw	10
  4643  02F4  00A4               	movwf	___lmul@multiplicand
  4644  02F5  120A  158A  20F0  120A  118A  	fcall	___lmul
  4645  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  4646  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  4647  02FC  0823               	movf	?___lmul+3,w
  4648  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  4649  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  4650  02FF  00B0               	movwf	(floatToASCII@scaler+3)^(0+128)
  4651  0300  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0301  1303               	bcf	3,6	;RP1=0, select bank0
  4653  0302  0822               	movf	?___lmul+2,w
  4654  0303  1683               	bsf	3,5	;RP0=1, select bank1
  4655  0304  1303               	bcf	3,6	;RP1=0, select bank1
  4656  0305  00AF               	movwf	(floatToASCII@scaler+2)^(0+128)
  4657  0306  1283               	bcf	3,5	;RP0=0, select bank0
  4658  0307  1303               	bcf	3,6	;RP1=0, select bank0
  4659  0308  0821               	movf	?___lmul+1,w
  4660  0309  1683               	bsf	3,5	;RP0=1, select bank1
  4661  030A  1303               	bcf	3,6	;RP1=0, select bank1
  4662  030B  00AE               	movwf	(floatToASCII@scaler+1)^(0+128)
  4663  030C  1283               	bcf	3,5	;RP0=0, select bank0
  4664  030D  1303               	bcf	3,6	;RP1=0, select bank0
  4665  030E  0820               	movf	?___lmul,w
  4666  030F  1683               	bsf	3,5	;RP0=1, select bank1
  4667  0310  1303               	bcf	3,6	;RP1=0, select bank1
  4668  0311  00AD               	movwf	floatToASCII@scaler^(0+128)
  4669                           
  4670                           ;lcd.h: 327: prevSum += returnVal[i];
  4671  0312  0832               	movf	floatToASCII@i^(0+128),w
  4672  0313  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4673  0314  00A0               	movwf	??_floatToASCII^(0+128)
  4674  0315  0820               	movf	??_floatToASCII^(0+128),w
  4675  0316  0084               	movwf	4
  4676  0317  1383               	bcf	3,7	;select IRP bank0
  4677  0318  0800               	movf	0,w
  4678  0319  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4679  031A  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  4680  031B  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  4681  031C  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  4682  031D  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4683  031E  07A9               	addwf	floatToASCII@prevSum^(0+128),f
  4684  031F  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4685  0320  1103               	clrz
  4686  0321  1803               	skipnc
  4687  0322  3E01               	addlw	1
  4688  0323  1D03               	btfss	3,2
  4689  0324  07AA               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  4690  0325  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4691  0326  1103               	clrz
  4692  0327  1803               	skipnc
  4693  0328  3E01               	addlw	1
  4694  0329  1D03               	btfss	3,2
  4695  032A  07AB               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  4696  032B  0824               	movf	(??_floatToASCII+4)^(0+128),w
  4697  032C  1103               	clrz
  4698  032D  1803               	skipnc
  4699  032E  3E01               	addlw	1
  4700  032F  1D03               	btfss	3,2
  4701  0330  07AC               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  4702  0331  3001               	movlw	1
  4703  0332  00A0               	movwf	??_floatToASCII^(0+128)
  4704  0333  0820               	movf	??_floatToASCII^(0+128),w
  4705  0334  07B2               	addwf	floatToASCII@i^(0+128),f
  4706  0335  29F8               	goto	l2158
  4707  0336                     l2160:	
  4708                           
  4709                           ;lcd.h: 328: }
  4710                           ;lcd.h: 330: for (; i > 0; i--)
  4711  0336  1683               	bsf	3,5	;RP0=1, select bank1
  4712  0337  1303               	bcf	3,6	;RP1=0, select bank1
  4713  0338  0832               	movf	floatToASCII@i^(0+128),w
  4714  0339  1903               	btfsc	3,2
  4715  033A  2B50               	goto	l2170
  4716  033B                     l2164:	
  4717                           
  4718                           ;lcd.h: 331: {
  4719                           ;lcd.h: 334: returnVal[i] = returnVal[i] & 0x3F;
  4720  033B  0832               	movf	floatToASCII@i^(0+128),w
  4721  033C  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4722  033D  00A0               	movwf	??_floatToASCII^(0+128)
  4723  033E  0820               	movf	??_floatToASCII^(0+128),w
  4724  033F  0084               	movwf	4
  4725  0340  1383               	bcf	3,7	;select IRP bank0
  4726  0341  0800               	movf	0,w
  4727  0342  393F               	andlw	63
  4728  0343  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4729  0344  0832               	movf	floatToASCII@i^(0+128),w
  4730  0345  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4731  0346  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  4732  0347  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4733  0348  0084               	movwf	4
  4734  0349  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4735  034A  0080               	movwf	0
  4736  034B  3001               	movlw	1
  4737  034C  02B2               	subwf	floatToASCII@i^(0+128),f
  4738  034D  0832               	movf	floatToASCII@i^(0+128),w
  4739  034E  1D03               	btfss	3,2
  4740  034F  2B3B               	goto	l2164
  4741  0350                     l2170:	
  4742                           
  4743                           ;lcd.h: 335: }
  4744                           ;lcd.h: 338: returnVal[++i] = '\0';
  4745  0350  3001               	movlw	1
  4746  0351  00A0               	movwf	??_floatToASCII^(0+128)
  4747  0352  0820               	movf	??_floatToASCII^(0+128),w
  4748  0353  07B2               	addwf	floatToASCII@i^(0+128),f
  4749  0354  0832               	movf	floatToASCII@i^(0+128),w
  4750  0355  0731               	addwf	floatToASCII@returnVal^(0+128),w
  4751  0356  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4752  0357  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4753  0358  0084               	movwf	4
  4754  0359  1383               	bcf	3,7	;select IRP bank0
  4755  035A  0180               	clrf	0
  4756  035B  0008               	return
  4757  035C                     __end_of_floatToASCII:	
  4758                           
  4759                           	psect	text18
  4760  08F0                     __ptext18:	
  4761 ;; *************** function ___lmul *****************
  4762 ;; Defined at:
  4763 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4766 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  product         4    9[BANK0 ] unsigned long 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  4    0[BANK0 ] unsigned long 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4778 ;;      Params:         0       8       0       0       0
  4779 ;;      Locals:         0       4       0       0       0
  4780 ;;      Temps:          0       1       0       0       0
  4781 ;;      Totals:         0      13       0       0       0
  4782 ;;Total ram usage:       13 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    2
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_floatToASCII
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function ___lmul
  4794  08F0                     ___lmul:	
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4798  08F0  3000               	movlw	0
  4799  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  4800  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  4801  08F3  00AC               	movwf	___lmul@product+3
  4802  08F4  3000               	movlw	0
  4803  08F5  00AB               	movwf	___lmul@product+2
  4804  08F6  3000               	movlw	0
  4805  08F7  00AA               	movwf	___lmul@product+1
  4806  08F8  3000               	movlw	0
  4807  08F9  00A9               	movwf	___lmul@product
  4808  08FA                     l1766:	
  4809  08FA  1C20               	btfss	___lmul@multiplier,0
  4810  08FB  2910               	goto	l1770
  4811  08FC  0824               	movf	___lmul@multiplicand,w
  4812  08FD  07A9               	addwf	___lmul@product,f
  4813  08FE  0825               	movf	___lmul@multiplicand+1,w
  4814  08FF  1103               	clrz
  4815  0900  1803               	skipnc
  4816  0901  3E01               	addlw	1
  4817  0902  1D03               	btfss	3,2
  4818  0903  07AA               	addwf	___lmul@product+1,f
  4819  0904  0826               	movf	___lmul@multiplicand+2,w
  4820  0905  1103               	clrz
  4821  0906  1803               	skipnc
  4822  0907  3E01               	addlw	1
  4823  0908  1D03               	btfss	3,2
  4824  0909  07AB               	addwf	___lmul@product+2,f
  4825  090A  0827               	movf	___lmul@multiplicand+3,w
  4826  090B  1103               	clrz
  4827  090C  1803               	skipnc
  4828  090D  3E01               	addlw	1
  4829  090E  1D03               	btfss	3,2
  4830  090F  07AC               	addwf	___lmul@product+3,f
  4831  0910                     l1770:	
  4832  0910  3001               	movlw	1
  4833  0911  00A8               	movwf	??___lmul
  4834  0912                     u1705:	
  4835  0912  1003               	clrc
  4836  0913  0DA4               	rlf	___lmul@multiplicand,f
  4837  0914  0DA5               	rlf	___lmul@multiplicand+1,f
  4838  0915  0DA6               	rlf	___lmul@multiplicand+2,f
  4839  0916  0DA7               	rlf	___lmul@multiplicand+3,f
  4840  0917  0BA8               	decfsz	??___lmul,f
  4841  0918  2912               	goto	u1705
  4842  0919  3001               	movlw	1
  4843  091A                     u1715:	
  4844  091A  1003               	clrc
  4845  091B  0CA3               	rrf	___lmul@multiplier+3,f
  4846  091C  0CA2               	rrf	___lmul@multiplier+2,f
  4847  091D  0CA1               	rrf	___lmul@multiplier+1,f
  4848  091E  0CA0               	rrf	___lmul@multiplier,f
  4849  091F  3EFF               	addlw	-1
  4850  0920  1D03               	skipz
  4851  0921  291A               	goto	u1715
  4852  0922  0823               	movf	___lmul@multiplier+3,w
  4853  0923  0422               	iorwf	___lmul@multiplier+2,w
  4854  0924  0421               	iorwf	___lmul@multiplier+1,w
  4855  0925  0420               	iorwf	___lmul@multiplier,w
  4856  0926  1D03               	skipz
  4857  0927  28FA               	goto	l1766
  4858  0928  082C               	movf	___lmul@product+3,w
  4859  0929  00A3               	movwf	?___lmul+3
  4860  092A  082B               	movf	___lmul@product+2,w
  4861  092B  00A2               	movwf	?___lmul+2
  4862  092C  082A               	movf	___lmul@product+1,w
  4863  092D  00A1               	movwf	?___lmul+1
  4864  092E  0829               	movf	___lmul@product,w
  4865  092F  00A0               	movwf	?___lmul
  4866  0930  0008               	return
  4867  0931                     __end_of___lmul:	
  4868                           
  4869                           	psect	text19
  4870  16F4                     __ptext19:	
  4871 ;; *************** function ___lltoft *****************
  4872 ;; Defined at:
  4873 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  c               4    8[BANK0 ] unsigned long 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  exp             1   13[BANK0 ] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  3    8[BANK0 ] float 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4887 ;;      Params:         0       4       0       0       0
  4888 ;;      Locals:         0       1       0       0       0
  4889 ;;      Temps:          0       1       0       0       0
  4890 ;;      Totals:         0       6       0       0       0
  4891 ;;Total ram usage:        6 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    3
  4894 ;; This function calls:
  4895 ;;		___ftpack
  4896 ;; This function is called by:
  4897 ;;		_floatToASCII
  4898 ;;		_stopWatch
  4899 ;;		_currentTime
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function ___lltoft
  4905  16F4                     ___lltoft:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4909  16F4  308E               	movlw	142
  4910  16F5  1283               	bcf	3,5	;RP0=0, select bank0
  4911  16F6  1303               	bcf	3,6	;RP1=0, select bank0
  4912  16F7  00AC               	movwf	??___lltoft
  4913  16F8  082C               	movf	??___lltoft,w
  4914  16F9  00AD               	movwf	___lltoft@exp
  4915  16FA                     l2018:	
  4916  16FA  30FF               	movlw	255
  4917  16FB  052B               	andwf	___lltoft@c+3,w
  4918  16FC  1903               	btfsc	3,2
  4919  16FD  2F0C               	goto	l2020
  4920  16FE  3001               	movlw	1
  4921  16FF                     u2375:	
  4922  16FF  1003               	clrc
  4923  1700  0CAB               	rrf	___lltoft@c+3,f
  4924  1701  0CAA               	rrf	___lltoft@c+2,f
  4925  1702  0CA9               	rrf	___lltoft@c+1,f
  4926  1703  0CA8               	rrf	___lltoft@c,f
  4927  1704  3EFF               	addlw	-1
  4928  1705  1D03               	skipz
  4929  1706  2EFF               	goto	u2375
  4930  1707  3001               	movlw	1
  4931  1708  00AC               	movwf	??___lltoft
  4932  1709  082C               	movf	??___lltoft,w
  4933  170A  07AD               	addwf	___lltoft@exp,f
  4934  170B  2EFA               	goto	l2018
  4935  170C                     l2020:	
  4936  170C  0828               	movf	___lltoft@c,w
  4937  170D  00A0               	movwf	___ftpack@arg
  4938  170E  0829               	movf	___lltoft@c+1,w
  4939  170F  00A1               	movwf	___ftpack@arg+1
  4940  1710  082A               	movf	___lltoft@c+2,w
  4941  1711  00A2               	movwf	___ftpack@arg+2
  4942  1712  082D               	movf	___lltoft@exp,w
  4943  1713  00AC               	movwf	??___lltoft
  4944  1714  082C               	movf	??___lltoft,w
  4945  1715  00A3               	movwf	___ftpack@exp
  4946  1716  01A4               	clrf	___ftpack@sign
  4947  1717  120A  158A  21EF   	fcall	___ftpack
  4948  171A  1283               	bcf	3,5	;RP0=0, select bank0
  4949  171B  1303               	bcf	3,6	;RP1=0, select bank0
  4950  171C  0820               	movf	?___ftpack,w
  4951  171D  00A8               	movwf	?___lltoft
  4952  171E  0821               	movf	?___ftpack+1,w
  4953  171F  00A9               	movwf	?___lltoft+1
  4954  1720  0822               	movf	?___ftpack+2,w
  4955  1721  00AA               	movwf	?___lltoft+2
  4956  1722  0008               	return
  4957  1723                     __end_of___lltoft:	
  4958                           
  4959                           	psect	text20
  4960  098F                     __ptext20:	
  4961 ;; *************** function ___lldiv *****************
  4962 ;; Defined at:
  4963 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  divisor         4    0[BANK0 ] unsigned long 
  4966 ;;  dividend        4    4[BANK0 ] unsigned long 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  quotient        4    9[BANK0 ] unsigned long 
  4969 ;;  counter         1   13[BANK0 ] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  4    0[BANK0 ] unsigned long 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         0       8       0       0       0
  4980 ;;      Locals:         0       5       0       0       0
  4981 ;;      Temps:          0       1       0       0       0
  4982 ;;      Totals:         0      14       0       0       0
  4983 ;;Total ram usage:       14 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    2
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_floatToASCII
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function ___lldiv
  4995  098F                     ___lldiv:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4999  098F  3000               	movlw	0
  5000  0990  1283               	bcf	3,5	;RP0=0, select bank0
  5001  0991  1303               	bcf	3,6	;RP1=0, select bank0
  5002  0992  00AC               	movwf	___lldiv@quotient+3
  5003  0993  3000               	movlw	0
  5004  0994  00AB               	movwf	___lldiv@quotient+2
  5005  0995  3000               	movlw	0
  5006  0996  00AA               	movwf	___lldiv@quotient+1
  5007  0997  3000               	movlw	0
  5008  0998  00A9               	movwf	___lldiv@quotient
  5009  0999  0823               	movf	___lldiv@divisor+3,w
  5010  099A  0422               	iorwf	___lldiv@divisor+2,w
  5011  099B  0421               	iorwf	___lldiv@divisor+1,w
  5012  099C  0420               	iorwf	___lldiv@divisor,w
  5013  099D  1903               	skipnz
  5014  099E  29E6               	goto	l2010
  5015  099F  01AD               	clrf	___lldiv@counter
  5016  09A0  0AAD               	incf	___lldiv@counter,f
  5017  09A1                     l1996:	
  5018  09A1  1BA3               	btfsc	___lldiv@divisor+3,7
  5019  09A2  29B1               	goto	l1998
  5020  09A3  3001               	movlw	1
  5021  09A4  00A8               	movwf	??___lldiv
  5022  09A5                     u2315:	
  5023  09A5  1003               	clrc
  5024  09A6  0DA0               	rlf	___lldiv@divisor,f
  5025  09A7  0DA1               	rlf	___lldiv@divisor+1,f
  5026  09A8  0DA2               	rlf	___lldiv@divisor+2,f
  5027  09A9  0DA3               	rlf	___lldiv@divisor+3,f
  5028  09AA  0BA8               	decfsz	??___lldiv,f
  5029  09AB  29A5               	goto	u2315
  5030  09AC  3001               	movlw	1
  5031  09AD  00A8               	movwf	??___lldiv
  5032  09AE  0828               	movf	??___lldiv,w
  5033  09AF  07AD               	addwf	___lldiv@counter,f
  5034  09B0  29A1               	goto	l1996
  5035  09B1                     l1998:	
  5036  09B1  3001               	movlw	1
  5037  09B2  00A8               	movwf	??___lldiv
  5038  09B3                     u2335:	
  5039  09B3  1003               	clrc
  5040  09B4  0DA9               	rlf	___lldiv@quotient,f
  5041  09B5  0DAA               	rlf	___lldiv@quotient+1,f
  5042  09B6  0DAB               	rlf	___lldiv@quotient+2,f
  5043  09B7  0DAC               	rlf	___lldiv@quotient+3,f
  5044  09B8  0BA8               	decfsz	??___lldiv,f
  5045  09B9  29B3               	goto	u2335
  5046  09BA  0823               	movf	___lldiv@divisor+3,w
  5047  09BB  0227               	subwf	___lldiv@dividend+3,w
  5048  09BC  1D03               	skipz
  5049  09BD  29C8               	goto	u2345
  5050  09BE  0822               	movf	___lldiv@divisor+2,w
  5051  09BF  0226               	subwf	___lldiv@dividend+2,w
  5052  09C0  1D03               	skipz
  5053  09C1  29C8               	goto	u2345
  5054  09C2  0821               	movf	___lldiv@divisor+1,w
  5055  09C3  0225               	subwf	___lldiv@dividend+1,w
  5056  09C4  1D03               	skipz
  5057  09C5  29C8               	goto	u2345
  5058  09C6  0820               	movf	___lldiv@divisor,w
  5059  09C7  0224               	subwf	___lldiv@dividend,w
  5060  09C8                     u2345:	
  5061  09C8  1C03               	skipc
  5062  09C9  29D9               	goto	l2006
  5063  09CA  0820               	movf	___lldiv@divisor,w
  5064  09CB  02A4               	subwf	___lldiv@dividend,f
  5065  09CC  0821               	movf	___lldiv@divisor+1,w
  5066  09CD  1C03               	skipc
  5067  09CE  0F21               	incfsz	___lldiv@divisor+1,w
  5068  09CF  02A5               	subwf	___lldiv@dividend+1,f
  5069  09D0  0822               	movf	___lldiv@divisor+2,w
  5070  09D1  1C03               	skipc
  5071  09D2  0F22               	incfsz	___lldiv@divisor+2,w
  5072  09D3  02A6               	subwf	___lldiv@dividend+2,f
  5073  09D4  0823               	movf	___lldiv@divisor+3,w
  5074  09D5  1C03               	skipc
  5075  09D6  0F23               	incfsz	___lldiv@divisor+3,w
  5076  09D7  02A7               	subwf	___lldiv@dividend+3,f
  5077  09D8  1429               	bsf	___lldiv@quotient,0
  5078  09D9                     l2006:	
  5079  09D9  3001               	movlw	1
  5080  09DA                     u2355:	
  5081  09DA  1003               	clrc
  5082  09DB  0CA3               	rrf	___lldiv@divisor+3,f
  5083  09DC  0CA2               	rrf	___lldiv@divisor+2,f
  5084  09DD  0CA1               	rrf	___lldiv@divisor+1,f
  5085  09DE  0CA0               	rrf	___lldiv@divisor,f
  5086  09DF  3EFF               	addlw	-1
  5087  09E0  1D03               	skipz
  5088  09E1  29DA               	goto	u2355
  5089  09E2  3001               	movlw	1
  5090  09E3  02AD               	subwf	___lldiv@counter,f
  5091  09E4  1D03               	btfss	3,2
  5092  09E5  29B1               	goto	l1998
  5093  09E6                     l2010:	
  5094  09E6  082C               	movf	___lldiv@quotient+3,w
  5095  09E7  00A3               	movwf	?___lldiv+3
  5096  09E8  082B               	movf	___lldiv@quotient+2,w
  5097  09E9  00A2               	movwf	?___lldiv+2
  5098  09EA  082A               	movf	___lldiv@quotient+1,w
  5099  09EB  00A1               	movwf	?___lldiv+1
  5100  09EC  0829               	movf	___lldiv@quotient,w
  5101  09ED  00A0               	movwf	?___lldiv
  5102  09EE  0008               	return
  5103  09EF                     __end_of___lldiv:	
  5104                           
  5105                           	psect	text21
  5106  0ADB                     __ptext21:	
  5107 ;; *************** function ___fttol *****************
  5108 ;; Defined at:
  5109 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  f1              3   61[BANK0 ] float 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  lval            4   70[BANK0 ] unsigned long 
  5114 ;;  exp1            1   74[BANK0 ] unsigned char 
  5115 ;;  sign1           1   69[BANK0 ] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  4   61[BANK0 ] long 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5125 ;;      Params:         0       4       0       0       0
  5126 ;;      Locals:         0       6       0       0       0
  5127 ;;      Temps:          0       4       0       0       0
  5128 ;;      Totals:         0      14       0       0       0
  5129 ;;Total ram usage:       14 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    2
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_floatToASCII
  5136 ;;		_stopWatch
  5137 ;;		_currentTime
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           
  5142                           ;psect for function ___fttol
  5143  0ADB                     ___fttol:	
  5144                           
  5145                           ;incstack = 0
  5146                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5147  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0ADD  085D               	movf	___fttol@f1,w
  5150  0ADE  00E1               	movwf	??___fttol
  5151  0ADF  085E               	movf	___fttol@f1+1,w
  5152  0AE0  00E2               	movwf	??___fttol+1
  5153  0AE1  085F               	movf	___fttol@f1+2,w
  5154  0AE2  00E3               	movwf	??___fttol+2
  5155  0AE3  1003               	clrc
  5156  0AE4  0D62               	rlf	??___fttol+1,w
  5157  0AE5  0D63               	rlf	??___fttol+2,w
  5158  0AE6  00E4               	movwf	??___fttol+3
  5159  0AE7  0864               	movf	??___fttol+3,w
  5160  0AE8  00EA               	movwf	___fttol@exp1
  5161  0AE9  086A               	movf	___fttol@exp1,w
  5162  0AEA  1D03               	btfss	3,2
  5163  0AEB  2AF5               	goto	l1954
  5164  0AEC  3000               	movlw	0
  5165  0AED  00E0               	movwf	?___fttol+3
  5166  0AEE  3000               	movlw	0
  5167  0AEF  00DF               	movwf	?___fttol+2
  5168  0AF0  3000               	movlw	0
  5169  0AF1  00DE               	movwf	?___fttol+1
  5170  0AF2  3000               	movlw	0
  5171  0AF3  00DD               	movwf	?___fttol
  5172  0AF4  0008               	return
  5173  0AF5                     l1954:	
  5174  0AF5  085D               	movf	___fttol@f1,w
  5175  0AF6  00E1               	movwf	??___fttol
  5176  0AF7  085E               	movf	___fttol@f1+1,w
  5177  0AF8  00E2               	movwf	??___fttol+1
  5178  0AF9  085F               	movf	___fttol@f1+2,w
  5179  0AFA  00E3               	movwf	??___fttol+2
  5180  0AFB  3017               	movlw	23
  5181  0AFC                     u2215:	
  5182  0AFC  1003               	clrc
  5183  0AFD  0CE3               	rrf	??___fttol+2,f
  5184  0AFE  0CE2               	rrf	??___fttol+1,f
  5185  0AFF  0CE1               	rrf	??___fttol,f
  5186  0B00  3EFF               	addlw	-1
  5187  0B01  1D03               	skipz
  5188  0B02  2AFC               	goto	u2215
  5189  0B03  0861               	movf	??___fttol,w
  5190  0B04  00E4               	movwf	??___fttol+3
  5191  0B05  0864               	movf	??___fttol+3,w
  5192  0B06  00E5               	movwf	___fttol@sign1
  5193  0B07  17DE               	bsf	___fttol@f1+1,7
  5194  0B08  30FF               	movlw	255
  5195  0B09  05DD               	andwf	___fttol@f1,f
  5196  0B0A  30FF               	movlw	255
  5197  0B0B  05DE               	andwf	___fttol@f1+1,f
  5198  0B0C  3000               	movlw	0
  5199  0B0D  05DF               	andwf	___fttol@f1+2,f
  5200  0B0E  085D               	movf	___fttol@f1,w
  5201  0B0F  00E6               	movwf	___fttol@lval
  5202  0B10  085E               	movf	___fttol@f1+1,w
  5203  0B11  00E7               	movwf	___fttol@lval+1
  5204  0B12  085F               	movf	___fttol@f1+2,w
  5205  0B13  00E8               	movwf	___fttol@lval+2
  5206  0B14  01E9               	clrf	___fttol@lval+3
  5207  0B15  308E               	movlw	142
  5208  0B16  02EA               	subwf	___fttol@exp1,f
  5209  0B17  1FEA               	btfss	___fttol@exp1,7
  5210  0B18  2B37               	goto	l1974
  5211  0B19  086A               	movf	___fttol@exp1,w
  5212  0B1A  3A80               	xorlw	128
  5213  0B1B  3E8F               	addlw	143
  5214  0B1C  1803               	skipnc
  5215  0B1D  2B27               	goto	l1972
  5216  0B1E  3000               	movlw	0
  5217  0B1F  00E0               	movwf	?___fttol+3
  5218  0B20  3000               	movlw	0
  5219  0B21  00DF               	movwf	?___fttol+2
  5220  0B22  3000               	movlw	0
  5221  0B23  00DE               	movwf	?___fttol+1
  5222  0B24  3000               	movlw	0
  5223  0B25  00DD               	movwf	?___fttol
  5224  0B26  0008               	return
  5225  0B27                     l1972:	
  5226  0B27  3001               	movlw	1
  5227  0B28                     u2245:	
  5228  0B28  1003               	clrc
  5229  0B29  0CE9               	rrf	___fttol@lval+3,f
  5230  0B2A  0CE8               	rrf	___fttol@lval+2,f
  5231  0B2B  0CE7               	rrf	___fttol@lval+1,f
  5232  0B2C  0CE6               	rrf	___fttol@lval,f
  5233  0B2D  3EFF               	addlw	-1
  5234  0B2E  1D03               	skipz
  5235  0B2F  2B28               	goto	u2245
  5236  0B30  3001               	movlw	1
  5237  0B31  00E1               	movwf	??___fttol
  5238  0B32  0861               	movf	??___fttol,w
  5239  0B33  07EA               	addwf	___fttol@exp1,f
  5240  0B34  1903               	btfsc	3,2
  5241  0B35  2B52               	goto	l1982
  5242  0B36  2B27               	goto	l1972
  5243  0B37                     l1974:	
  5244  0B37  3018               	movlw	24
  5245  0B38  026A               	subwf	___fttol@exp1,w
  5246  0B39  1C03               	skipc
  5247  0B3A  2B4F               	goto	l660
  5248  0B3B  3000               	movlw	0
  5249  0B3C  00E0               	movwf	?___fttol+3
  5250  0B3D  3000               	movlw	0
  5251  0B3E  00DF               	movwf	?___fttol+2
  5252  0B3F  3000               	movlw	0
  5253  0B40  00DE               	movwf	?___fttol+1
  5254  0B41  3000               	movlw	0
  5255  0B42  00DD               	movwf	?___fttol
  5256  0B43  0008               	return
  5257  0B44                     l1980:	
  5258  0B44  3001               	movlw	1
  5259  0B45  00E1               	movwf	??___fttol
  5260  0B46                     u2275:	
  5261  0B46  1003               	clrc
  5262  0B47  0DE6               	rlf	___fttol@lval,f
  5263  0B48  0DE7               	rlf	___fttol@lval+1,f
  5264  0B49  0DE8               	rlf	___fttol@lval+2,f
  5265  0B4A  0DE9               	rlf	___fttol@lval+3,f
  5266  0B4B  0BE1               	decfsz	??___fttol,f
  5267  0B4C  2B46               	goto	u2275
  5268  0B4D  3001               	movlw	1
  5269  0B4E  02EA               	subwf	___fttol@exp1,f
  5270  0B4F                     l660:	
  5271  0B4F  086A               	movf	___fttol@exp1,w
  5272  0B50  1D03               	btfss	3,2
  5273  0B51  2B44               	goto	l1980
  5274  0B52                     l1982:	
  5275  0B52  0865               	movf	___fttol@sign1,w
  5276  0B53  1903               	btfsc	3,2
  5277  0B54  2B60               	goto	l1986
  5278  0B55  09E6               	comf	___fttol@lval,f
  5279  0B56  09E7               	comf	___fttol@lval+1,f
  5280  0B57  09E8               	comf	___fttol@lval+2,f
  5281  0B58  09E9               	comf	___fttol@lval+3,f
  5282  0B59  0AE6               	incf	___fttol@lval,f
  5283  0B5A  1903               	skipnz
  5284  0B5B  0AE7               	incf	___fttol@lval+1,f
  5285  0B5C  1903               	skipnz
  5286  0B5D  0AE8               	incf	___fttol@lval+2,f
  5287  0B5E  1903               	skipnz
  5288  0B5F  0AE9               	incf	___fttol@lval+3,f
  5289  0B60                     l1986:	
  5290  0B60  0869               	movf	___fttol@lval+3,w
  5291  0B61  00E0               	movwf	?___fttol+3
  5292  0B62  0868               	movf	___fttol@lval+2,w
  5293  0B63  00DF               	movwf	?___fttol+2
  5294  0B64  0867               	movf	___fttol@lval+1,w
  5295  0B65  00DE               	movwf	?___fttol+1
  5296  0B66  0866               	movf	___fttol@lval,w
  5297  0B67  00DD               	movwf	?___fttol
  5298  0B68  0008               	return
  5299  0B69                     __end_of___fttol:	
  5300                           
  5301                           	psect	text22
  5302  0849                     __ptext22:	
  5303 ;; *************** function ___ftneg *****************
  5304 ;; Defined at:
  5305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  f1              3   14[BANK0 ] float 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  3   14[BANK0 ] float 
  5312 ;; Registers used:
  5313 ;;		wreg
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5319 ;;      Params:         0       3       0       0       0
  5320 ;;      Locals:         0       0       0       0       0
  5321 ;;      Temps:          0       0       0       0       0
  5322 ;;      Totals:         0       3       0       0       0
  5323 ;;Total ram usage:        3 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    2
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_floatToASCII
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function ___ftneg
  5335  0849                     ___ftneg:	
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in ___ftneg: [wreg]
  5339  0849  1283               	bcf	3,5	;RP0=0, select bank0
  5340  084A  1303               	bcf	3,6	;RP1=0, select bank0
  5341  084B  0830               	movf	___ftneg@f1+2,w
  5342  084C  042F               	iorwf	___ftneg@f1+1,w
  5343  084D  042E               	iorwf	___ftneg@f1,w
  5344  084E  1903               	skipnz
  5345  084F  0008               	return
  5346  0850  3080               	movlw	128
  5347  0851  06B0               	xorwf	___ftneg@f1+2,f
  5348  0852  0008               	return
  5349  0853                     __end_of___ftneg:	
  5350                           
  5351                           	psect	text23
  5352  0E27                     __ptext23:	
  5353 ;; *************** function ___ftmul *****************
  5354 ;; Defined at:
  5355 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;  f1              3   16[BANK0 ] float 
  5358 ;;  f2              3   19[BANK0 ] float 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  5361 ;;  sign            1   31[BANK0 ] unsigned char 
  5362 ;;  cntr            1   30[BANK0 ] unsigned char 
  5363 ;;  exp             1   26[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  3   16[BANK0 ] float 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5373 ;;      Params:         0       6       0       0       0
  5374 ;;      Locals:         0       6       0       0       0
  5375 ;;      Temps:          0       4       0       0       0
  5376 ;;      Totals:         0      16       0       0       0
  5377 ;;Total ram usage:       16 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    3
  5380 ;; This function calls:
  5381 ;;		___ftpack
  5382 ;; This function is called by:
  5383 ;;		_floatToASCII
  5384 ;;		_stopWatch
  5385 ;;		_sampleBatteryCells
  5386 ;;		_sampleReference
  5387 ;;		_sampleVoltage
  5388 ;;		_sampleCurrent
  5389 ;;		_currentTime
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function ___ftmul
  5395  0E27                     ___ftmul:	
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5399  0E27  1283               	bcf	3,5	;RP0=0, select bank0
  5400  0E28  1303               	bcf	3,6	;RP1=0, select bank0
  5401  0E29  0830               	movf	___ftmul@f1,w
  5402  0E2A  00B6               	movwf	??___ftmul
  5403  0E2B  0831               	movf	___ftmul@f1+1,w
  5404  0E2C  00B7               	movwf	??___ftmul+1
  5405  0E2D  0832               	movf	___ftmul@f1+2,w
  5406  0E2E  00B8               	movwf	??___ftmul+2
  5407  0E2F  1003               	clrc
  5408  0E30  0D37               	rlf	??___ftmul+1,w
  5409  0E31  0D38               	rlf	??___ftmul+2,w
  5410  0E32  00B9               	movwf	??___ftmul+3
  5411  0E33  0839               	movf	??___ftmul+3,w
  5412  0E34  00BA               	movwf	___ftmul@exp
  5413  0E35  083A               	movf	___ftmul@exp,w
  5414  0E36  1D03               	btfss	3,2
  5415  0E37  2E3F               	goto	l1896
  5416  0E38  3000               	movlw	0
  5417  0E39  00B0               	movwf	?___ftmul
  5418  0E3A  3000               	movlw	0
  5419  0E3B  00B1               	movwf	?___ftmul+1
  5420  0E3C  3000               	movlw	0
  5421  0E3D  00B2               	movwf	?___ftmul+2
  5422  0E3E  0008               	return
  5423  0E3F                     l1896:	
  5424  0E3F  0833               	movf	___ftmul@f2,w
  5425  0E40  00B6               	movwf	??___ftmul
  5426  0E41  0834               	movf	___ftmul@f2+1,w
  5427  0E42  00B7               	movwf	??___ftmul+1
  5428  0E43  0835               	movf	___ftmul@f2+2,w
  5429  0E44  00B8               	movwf	??___ftmul+2
  5430  0E45  1003               	clrc
  5431  0E46  0D37               	rlf	??___ftmul+1,w
  5432  0E47  0D38               	rlf	??___ftmul+2,w
  5433  0E48  00B9               	movwf	??___ftmul+3
  5434  0E49  0839               	movf	??___ftmul+3,w
  5435  0E4A  00BF               	movwf	___ftmul@sign
  5436  0E4B  083F               	movf	___ftmul@sign,w
  5437  0E4C  1D03               	btfss	3,2
  5438  0E4D  2E55               	goto	l1902
  5439  0E4E  3000               	movlw	0
  5440  0E4F  00B0               	movwf	?___ftmul
  5441  0E50  3000               	movlw	0
  5442  0E51  00B1               	movwf	?___ftmul+1
  5443  0E52  3000               	movlw	0
  5444  0E53  00B2               	movwf	?___ftmul+2
  5445  0E54  0008               	return
  5446  0E55                     l1902:	
  5447  0E55  083F               	movf	___ftmul@sign,w
  5448  0E56  3E7B               	addlw	123
  5449  0E57  00B6               	movwf	??___ftmul
  5450  0E58  0836               	movf	??___ftmul,w
  5451  0E59  07BA               	addwf	___ftmul@exp,f
  5452  0E5A  0830               	movf	___ftmul@f1,w
  5453  0E5B  00B6               	movwf	??___ftmul
  5454  0E5C  0831               	movf	___ftmul@f1+1,w
  5455  0E5D  00B7               	movwf	??___ftmul+1
  5456  0E5E  0832               	movf	___ftmul@f1+2,w
  5457  0E5F  00B8               	movwf	??___ftmul+2
  5458  0E60  3010               	movlw	16
  5459  0E61                     u2075:	
  5460  0E61  1003               	clrc
  5461  0E62  0CB8               	rrf	??___ftmul+2,f
  5462  0E63  0CB7               	rrf	??___ftmul+1,f
  5463  0E64  0CB6               	rrf	??___ftmul,f
  5464  0E65  3EFF               	addlw	-1
  5465  0E66  1D03               	skipz
  5466  0E67  2E61               	goto	u2075
  5467  0E68  0836               	movf	??___ftmul,w
  5468  0E69  00B9               	movwf	??___ftmul+3
  5469  0E6A  0839               	movf	??___ftmul+3,w
  5470  0E6B  00BF               	movwf	___ftmul@sign
  5471  0E6C  0833               	movf	___ftmul@f2,w
  5472  0E6D  00B6               	movwf	??___ftmul
  5473  0E6E  0834               	movf	___ftmul@f2+1,w
  5474  0E6F  00B7               	movwf	??___ftmul+1
  5475  0E70  0835               	movf	___ftmul@f2+2,w
  5476  0E71  00B8               	movwf	??___ftmul+2
  5477  0E72  3010               	movlw	16
  5478  0E73                     u2085:	
  5479  0E73  1003               	clrc
  5480  0E74  0CB8               	rrf	??___ftmul+2,f
  5481  0E75  0CB7               	rrf	??___ftmul+1,f
  5482  0E76  0CB6               	rrf	??___ftmul,f
  5483  0E77  3EFF               	addlw	-1
  5484  0E78  1D03               	skipz
  5485  0E79  2E73               	goto	u2085
  5486  0E7A  0836               	movf	??___ftmul,w
  5487  0E7B  00B9               	movwf	??___ftmul+3
  5488  0E7C  0839               	movf	??___ftmul+3,w
  5489  0E7D  06BF               	xorwf	___ftmul@sign,f
  5490  0E7E  3080               	movlw	128
  5491  0E7F  00B6               	movwf	??___ftmul
  5492  0E80  0836               	movf	??___ftmul,w
  5493  0E81  05BF               	andwf	___ftmul@sign,f
  5494  0E82  17B1               	bsf	___ftmul@f1+1,7
  5495  0E83  17B4               	bsf	___ftmul@f2+1,7
  5496  0E84  30FF               	movlw	255
  5497  0E85  05B3               	andwf	___ftmul@f2,f
  5498  0E86  30FF               	movlw	255
  5499  0E87  05B4               	andwf	___ftmul@f2+1,f
  5500  0E88  3000               	movlw	0
  5501  0E89  05B5               	andwf	___ftmul@f2+2,f
  5502  0E8A  3000               	movlw	0
  5503  0E8B  00BB               	movwf	___ftmul@f3_as_product
  5504  0E8C  3000               	movlw	0
  5505  0E8D  00BC               	movwf	___ftmul@f3_as_product+1
  5506  0E8E  3000               	movlw	0
  5507  0E8F  00BD               	movwf	___ftmul@f3_as_product+2
  5508  0E90  3007               	movlw	7
  5509  0E91  00B6               	movwf	??___ftmul
  5510  0E92  0836               	movf	??___ftmul,w
  5511  0E93  00BE               	movwf	___ftmul@cntr
  5512  0E94                     l1914:	
  5513  0E94  1C30               	btfss	___ftmul@f1,0
  5514  0E95  2EA4               	goto	l1918
  5515  0E96  0833               	movf	___ftmul@f2,w
  5516  0E97  07BB               	addwf	___ftmul@f3_as_product,f
  5517  0E98  0834               	movf	___ftmul@f2+1,w
  5518  0E99  1103               	clrz
  5519  0E9A  1803               	skipnc
  5520  0E9B  0A34               	incf	___ftmul@f2+1,w
  5521  0E9C  1D03               	btfss	3,2
  5522  0E9D  07BC               	addwf	___ftmul@f3_as_product+1,f
  5523  0E9E  0835               	movf	___ftmul@f2+2,w
  5524  0E9F  1103               	clrz
  5525  0EA0  1803               	skipnc
  5526  0EA1  0A35               	incf	___ftmul@f2+2,w
  5527  0EA2  1D03               	btfss	3,2
  5528  0EA3  07BD               	addwf	___ftmul@f3_as_product+2,f
  5529  0EA4                     l1918:	
  5530  0EA4  3001               	movlw	1
  5531  0EA5                     u2115:	
  5532  0EA5  1003               	clrc
  5533  0EA6  0CB2               	rrf	___ftmul@f1+2,f
  5534  0EA7  0CB1               	rrf	___ftmul@f1+1,f
  5535  0EA8  0CB0               	rrf	___ftmul@f1,f
  5536  0EA9  3EFF               	addlw	-1
  5537  0EAA  1D03               	skipz
  5538  0EAB  2EA5               	goto	u2115
  5539  0EAC  3001               	movlw	1
  5540  0EAD                     u2125:	
  5541  0EAD  1003               	clrc
  5542  0EAE  0DB3               	rlf	___ftmul@f2,f
  5543  0EAF  0DB4               	rlf	___ftmul@f2+1,f
  5544  0EB0  0DB5               	rlf	___ftmul@f2+2,f
  5545  0EB1  3EFF               	addlw	-1
  5546  0EB2  1D03               	skipz
  5547  0EB3  2EAD               	goto	u2125
  5548  0EB4  3001               	movlw	1
  5549  0EB5  02BE               	subwf	___ftmul@cntr,f
  5550  0EB6  1D03               	btfss	3,2
  5551  0EB7  2E94               	goto	l1914
  5552  0EB8  3009               	movlw	9
  5553  0EB9  00B6               	movwf	??___ftmul
  5554  0EBA  0836               	movf	??___ftmul,w
  5555  0EBB  00BE               	movwf	___ftmul@cntr
  5556  0EBC                     l1926:	
  5557  0EBC  1C30               	btfss	___ftmul@f1,0
  5558  0EBD  2ECC               	goto	l1930
  5559  0EBE  0833               	movf	___ftmul@f2,w
  5560  0EBF  07BB               	addwf	___ftmul@f3_as_product,f
  5561  0EC0  0834               	movf	___ftmul@f2+1,w
  5562  0EC1  1103               	clrz
  5563  0EC2  1803               	skipnc
  5564  0EC3  0A34               	incf	___ftmul@f2+1,w
  5565  0EC4  1D03               	btfss	3,2
  5566  0EC5  07BC               	addwf	___ftmul@f3_as_product+1,f
  5567  0EC6  0835               	movf	___ftmul@f2+2,w
  5568  0EC7  1103               	clrz
  5569  0EC8  1803               	skipnc
  5570  0EC9  0A35               	incf	___ftmul@f2+2,w
  5571  0ECA  1D03               	btfss	3,2
  5572  0ECB  07BD               	addwf	___ftmul@f3_as_product+2,f
  5573  0ECC                     l1930:	
  5574  0ECC  3001               	movlw	1
  5575  0ECD                     u2165:	
  5576  0ECD  1003               	clrc
  5577  0ECE  0CB2               	rrf	___ftmul@f1+2,f
  5578  0ECF  0CB1               	rrf	___ftmul@f1+1,f
  5579  0ED0  0CB0               	rrf	___ftmul@f1,f
  5580  0ED1  3EFF               	addlw	-1
  5581  0ED2  1D03               	skipz
  5582  0ED3  2ECD               	goto	u2165
  5583  0ED4  3001               	movlw	1
  5584  0ED5                     u2175:	
  5585  0ED5  1003               	clrc
  5586  0ED6  0CBD               	rrf	___ftmul@f3_as_product+2,f
  5587  0ED7  0CBC               	rrf	___ftmul@f3_as_product+1,f
  5588  0ED8  0CBB               	rrf	___ftmul@f3_as_product,f
  5589  0ED9  3EFF               	addlw	-1
  5590  0EDA  1D03               	skipz
  5591  0EDB  2ED5               	goto	u2175
  5592  0EDC  3001               	movlw	1
  5593  0EDD  02BE               	subwf	___ftmul@cntr,f
  5594  0EDE  1D03               	btfss	3,2
  5595  0EDF  2EBC               	goto	l1926
  5596  0EE0  083B               	movf	___ftmul@f3_as_product,w
  5597  0EE1  00A0               	movwf	___ftpack@arg
  5598  0EE2  083C               	movf	___ftmul@f3_as_product+1,w
  5599  0EE3  00A1               	movwf	___ftpack@arg+1
  5600  0EE4  083D               	movf	___ftmul@f3_as_product+2,w
  5601  0EE5  00A2               	movwf	___ftpack@arg+2
  5602  0EE6  083A               	movf	___ftmul@exp,w
  5603  0EE7  00B6               	movwf	??___ftmul
  5604  0EE8  0836               	movf	??___ftmul,w
  5605  0EE9  00A3               	movwf	___ftpack@exp
  5606  0EEA  083F               	movf	___ftmul@sign,w
  5607  0EEB  00B7               	movwf	??___ftmul+1
  5608  0EEC  0837               	movf	??___ftmul+1,w
  5609  0EED  00A4               	movwf	___ftpack@sign
  5610  0EEE  120A  158A  21EF   	fcall	___ftpack
  5611  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  5612  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  5613  0EF3  0820               	movf	?___ftpack,w
  5614  0EF4  00B0               	movwf	?___ftmul
  5615  0EF5  0821               	movf	?___ftpack+1,w
  5616  0EF6  00B1               	movwf	?___ftmul+1
  5617  0EF7  0822               	movf	?___ftpack+2,w
  5618  0EF8  00B2               	movwf	?___ftmul+2
  5619  0EF9  0008               	return
  5620  0EFA                     __end_of___ftmul:	
  5621                           
  5622                           	psect	text24
  5623  0CAA                     __ptext24:	
  5624 ;; *************** function ___ftdiv *****************
  5625 ;; Defined at:
  5626 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  f2              3   45[BANK0 ] float 
  5629 ;;  f1              3   48[BANK0 ] float 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  f3              3   56[BANK0 ] float 
  5632 ;;  sign            1   60[BANK0 ] unsigned char 
  5633 ;;  exp             1   59[BANK0 ] unsigned char 
  5634 ;;  cntr            1   55[BANK0 ] unsigned char 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  3   45[BANK0 ] float 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, pclath, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5644 ;;      Params:         0       6       0       0       0
  5645 ;;      Locals:         0       6       0       0       0
  5646 ;;      Temps:          0       4       0       0       0
  5647 ;;      Totals:         0      16       0       0       0
  5648 ;;Total ram usage:       16 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    3
  5651 ;; This function calls:
  5652 ;;		___ftpack
  5653 ;; This function is called by:
  5654 ;;		_floatToASCII
  5655 ;;		_sampleReference
  5656 ;;		_sampleVoltage
  5657 ;;		_sampleCurrent
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function ___ftdiv
  5663  0CAA                     ___ftdiv:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5667  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5668  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5669  0CAC  0850               	movf	___ftdiv@f1,w
  5670  0CAD  00D3               	movwf	??___ftdiv
  5671  0CAE  0851               	movf	___ftdiv@f1+1,w
  5672  0CAF  00D4               	movwf	??___ftdiv+1
  5673  0CB0  0852               	movf	___ftdiv@f1+2,w
  5674  0CB1  00D5               	movwf	??___ftdiv+2
  5675  0CB2  1003               	clrc
  5676  0CB3  0D54               	rlf	??___ftdiv+1,w
  5677  0CB4  0D55               	rlf	??___ftdiv+2,w
  5678  0CB5  00D6               	movwf	??___ftdiv+3
  5679  0CB6  0856               	movf	??___ftdiv+3,w
  5680  0CB7  00DB               	movwf	___ftdiv@exp
  5681  0CB8  085B               	movf	___ftdiv@exp,w
  5682  0CB9  1D03               	btfss	3,2
  5683  0CBA  2CC2               	goto	l1854
  5684  0CBB  3000               	movlw	0
  5685  0CBC  00CD               	movwf	?___ftdiv
  5686  0CBD  3000               	movlw	0
  5687  0CBE  00CE               	movwf	?___ftdiv+1
  5688  0CBF  3000               	movlw	0
  5689  0CC0  00CF               	movwf	?___ftdiv+2
  5690  0CC1  0008               	return
  5691  0CC2                     l1854:	
  5692  0CC2  084D               	movf	___ftdiv@f2,w
  5693  0CC3  00D3               	movwf	??___ftdiv
  5694  0CC4  084E               	movf	___ftdiv@f2+1,w
  5695  0CC5  00D4               	movwf	??___ftdiv+1
  5696  0CC6  084F               	movf	___ftdiv@f2+2,w
  5697  0CC7  00D5               	movwf	??___ftdiv+2
  5698  0CC8  1003               	clrc
  5699  0CC9  0D54               	rlf	??___ftdiv+1,w
  5700  0CCA  0D55               	rlf	??___ftdiv+2,w
  5701  0CCB  00D6               	movwf	??___ftdiv+3
  5702  0CCC  0856               	movf	??___ftdiv+3,w
  5703  0CCD  00DC               	movwf	___ftdiv@sign
  5704  0CCE  085C               	movf	___ftdiv@sign,w
  5705  0CCF  1D03               	btfss	3,2
  5706  0CD0  2CD8               	goto	l1860
  5707  0CD1  3000               	movlw	0
  5708  0CD2  00CD               	movwf	?___ftdiv
  5709  0CD3  3000               	movlw	0
  5710  0CD4  00CE               	movwf	?___ftdiv+1
  5711  0CD5  3000               	movlw	0
  5712  0CD6  00CF               	movwf	?___ftdiv+2
  5713  0CD7  0008               	return
  5714  0CD8                     l1860:	
  5715  0CD8  3000               	movlw	0
  5716  0CD9  00D8               	movwf	___ftdiv@f3
  5717  0CDA  3000               	movlw	0
  5718  0CDB  00D9               	movwf	___ftdiv@f3+1
  5719  0CDC  3000               	movlw	0
  5720  0CDD  00DA               	movwf	___ftdiv@f3+2
  5721  0CDE  3089               	movlw	137
  5722  0CDF  075C               	addwf	___ftdiv@sign,w
  5723  0CE0  00D3               	movwf	??___ftdiv
  5724  0CE1  0853               	movf	??___ftdiv,w
  5725  0CE2  02DB               	subwf	___ftdiv@exp,f
  5726  0CE3  0850               	movf	___ftdiv@f1,w
  5727  0CE4  00D3               	movwf	??___ftdiv
  5728  0CE5  0851               	movf	___ftdiv@f1+1,w
  5729  0CE6  00D4               	movwf	??___ftdiv+1
  5730  0CE7  0852               	movf	___ftdiv@f1+2,w
  5731  0CE8  00D5               	movwf	??___ftdiv+2
  5732  0CE9  3010               	movlw	16
  5733  0CEA                     u1995:	
  5734  0CEA  1003               	clrc
  5735  0CEB  0CD5               	rrf	??___ftdiv+2,f
  5736  0CEC  0CD4               	rrf	??___ftdiv+1,f
  5737  0CED  0CD3               	rrf	??___ftdiv,f
  5738  0CEE  3EFF               	addlw	-1
  5739  0CEF  1D03               	skipz
  5740  0CF0  2CEA               	goto	u1995
  5741  0CF1  0853               	movf	??___ftdiv,w
  5742  0CF2  00D6               	movwf	??___ftdiv+3
  5743  0CF3  0856               	movf	??___ftdiv+3,w
  5744  0CF4  00DC               	movwf	___ftdiv@sign
  5745  0CF5  084D               	movf	___ftdiv@f2,w
  5746  0CF6  00D3               	movwf	??___ftdiv
  5747  0CF7  084E               	movf	___ftdiv@f2+1,w
  5748  0CF8  00D4               	movwf	??___ftdiv+1
  5749  0CF9  084F               	movf	___ftdiv@f2+2,w
  5750  0CFA  00D5               	movwf	??___ftdiv+2
  5751  0CFB  3010               	movlw	16
  5752  0CFC                     u2005:	
  5753  0CFC  1003               	clrc
  5754  0CFD  0CD5               	rrf	??___ftdiv+2,f
  5755  0CFE  0CD4               	rrf	??___ftdiv+1,f
  5756  0CFF  0CD3               	rrf	??___ftdiv,f
  5757  0D00  3EFF               	addlw	-1
  5758  0D01  1D03               	skipz
  5759  0D02  2CFC               	goto	u2005
  5760  0D03  0853               	movf	??___ftdiv,w
  5761  0D04  00D6               	movwf	??___ftdiv+3
  5762  0D05  0856               	movf	??___ftdiv+3,w
  5763  0D06  06DC               	xorwf	___ftdiv@sign,f
  5764  0D07  3080               	movlw	128
  5765  0D08  00D3               	movwf	??___ftdiv
  5766  0D09  0853               	movf	??___ftdiv,w
  5767  0D0A  05DC               	andwf	___ftdiv@sign,f
  5768  0D0B  17D1               	bsf	___ftdiv@f1+1,7
  5769  0D0C  30FF               	movlw	255
  5770  0D0D  05D0               	andwf	___ftdiv@f1,f
  5771  0D0E  30FF               	movlw	255
  5772  0D0F  05D1               	andwf	___ftdiv@f1+1,f
  5773  0D10  3000               	movlw	0
  5774  0D11  05D2               	andwf	___ftdiv@f1+2,f
  5775  0D12  17CE               	bsf	___ftdiv@f2+1,7
  5776  0D13  30FF               	movlw	255
  5777  0D14  05CD               	andwf	___ftdiv@f2,f
  5778  0D15  30FF               	movlw	255
  5779  0D16  05CE               	andwf	___ftdiv@f2+1,f
  5780  0D17  3000               	movlw	0
  5781  0D18  05CF               	andwf	___ftdiv@f2+2,f
  5782  0D19  3018               	movlw	24
  5783  0D1A  00D3               	movwf	??___ftdiv
  5784  0D1B  0853               	movf	??___ftdiv,w
  5785  0D1C  00D7               	movwf	___ftdiv@cntr
  5786  0D1D                     l1874:	
  5787  0D1D  3001               	movlw	1
  5788  0D1E                     u2015:	
  5789  0D1E  1003               	clrc
  5790  0D1F  0DD8               	rlf	___ftdiv@f3,f
  5791  0D20  0DD9               	rlf	___ftdiv@f3+1,f
  5792  0D21  0DDA               	rlf	___ftdiv@f3+2,f
  5793  0D22  3EFF               	addlw	-1
  5794  0D23  1D03               	skipz
  5795  0D24  2D1E               	goto	u2015
  5796  0D25  084F               	movf	___ftdiv@f2+2,w
  5797  0D26  0252               	subwf	___ftdiv@f1+2,w
  5798  0D27  1D03               	skipz
  5799  0D28  2D2F               	goto	u2025
  5800  0D29  084E               	movf	___ftdiv@f2+1,w
  5801  0D2A  0251               	subwf	___ftdiv@f1+1,w
  5802  0D2B  1D03               	skipz
  5803  0D2C  2D2F               	goto	u2025
  5804  0D2D  084D               	movf	___ftdiv@f2,w
  5805  0D2E  0250               	subwf	___ftdiv@f1,w
  5806  0D2F                     u2025:	
  5807  0D2F  1C03               	skipc
  5808  0D30  2D3C               	goto	l1882
  5809  0D31  084D               	movf	___ftdiv@f2,w
  5810  0D32  02D0               	subwf	___ftdiv@f1,f
  5811  0D33  084E               	movf	___ftdiv@f2+1,w
  5812  0D34  1C03               	skipc
  5813  0D35  0F4E               	incfsz	___ftdiv@f2+1,w
  5814  0D36  02D1               	subwf	___ftdiv@f1+1,f
  5815  0D37  084F               	movf	___ftdiv@f2+2,w
  5816  0D38  1C03               	skipc
  5817  0D39  0A4F               	incf	___ftdiv@f2+2,w
  5818  0D3A  02D2               	subwf	___ftdiv@f1+2,f
  5819  0D3B  1458               	bsf	___ftdiv@f3,0
  5820  0D3C                     l1882:	
  5821  0D3C  3001               	movlw	1
  5822  0D3D                     u2035:	
  5823  0D3D  1003               	clrc
  5824  0D3E  0DD0               	rlf	___ftdiv@f1,f
  5825  0D3F  0DD1               	rlf	___ftdiv@f1+1,f
  5826  0D40  0DD2               	rlf	___ftdiv@f1+2,f
  5827  0D41  3EFF               	addlw	-1
  5828  0D42  1D03               	skipz
  5829  0D43  2D3D               	goto	u2035
  5830  0D44  3001               	movlw	1
  5831  0D45  02D7               	subwf	___ftdiv@cntr,f
  5832  0D46  1D03               	btfss	3,2
  5833  0D47  2D1D               	goto	l1874
  5834  0D48  0858               	movf	___ftdiv@f3,w
  5835  0D49  00A0               	movwf	___ftpack@arg
  5836  0D4A  0859               	movf	___ftdiv@f3+1,w
  5837  0D4B  00A1               	movwf	___ftpack@arg+1
  5838  0D4C  085A               	movf	___ftdiv@f3+2,w
  5839  0D4D  00A2               	movwf	___ftpack@arg+2
  5840  0D4E  085B               	movf	___ftdiv@exp,w
  5841  0D4F  00D3               	movwf	??___ftdiv
  5842  0D50  0853               	movf	??___ftdiv,w
  5843  0D51  00A3               	movwf	___ftpack@exp
  5844  0D52  085C               	movf	___ftdiv@sign,w
  5845  0D53  00D4               	movwf	??___ftdiv+1
  5846  0D54  0854               	movf	??___ftdiv+1,w
  5847  0D55  00A4               	movwf	___ftpack@sign
  5848  0D56  120A  158A  21EF   	fcall	___ftpack
  5849  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  5850  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  5851  0D5B  0820               	movf	?___ftpack,w
  5852  0D5C  00CD               	movwf	?___ftdiv
  5853  0D5D  0821               	movf	?___ftpack+1,w
  5854  0D5E  00CE               	movwf	?___ftdiv+1
  5855  0D5F  0822               	movf	?___ftpack+2,w
  5856  0D60  00CF               	movwf	?___ftdiv+2
  5857  0D61  0008               	return
  5858  0D62                     __end_of___ftdiv:	
  5859                           
  5860                           	psect	text25
  5861  0637                     __ptext25:	
  5862 ;; *************** function ___ftadd *****************
  5863 ;; Defined at:
  5864 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  f1              3   32[BANK0 ] float 
  5867 ;;  f2              3   35[BANK0 ] float 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  exp1            1   44[BANK0 ] unsigned char 
  5870 ;;  exp2            1   43[BANK0 ] unsigned char 
  5871 ;;  sign            1   42[BANK0 ] unsigned char 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  3   32[BANK0 ] float 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5881 ;;      Params:         0       6       0       0       0
  5882 ;;      Locals:         0       3       0       0       0
  5883 ;;      Temps:          0       4       0       0       0
  5884 ;;      Totals:         0      13       0       0       0
  5885 ;;Total ram usage:       13 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    3
  5888 ;; This function calls:
  5889 ;;		___ftpack
  5890 ;; This function is called by:
  5891 ;;		_floatToASCII
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function ___ftadd
  5897  0637                     ___ftadd:	
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5901  0637  1283               	bcf	3,5	;RP0=0, select bank0
  5902  0638  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0639  0840               	movf	___ftadd@f1,w
  5904  063A  00C6               	movwf	??___ftadd
  5905  063B  0841               	movf	___ftadd@f1+1,w
  5906  063C  00C7               	movwf	??___ftadd+1
  5907  063D  0842               	movf	___ftadd@f1+2,w
  5908  063E  00C8               	movwf	??___ftadd+2
  5909  063F  1003               	clrc
  5910  0640  0D47               	rlf	??___ftadd+1,w
  5911  0641  0D48               	rlf	??___ftadd+2,w
  5912  0642  00C9               	movwf	??___ftadd+3
  5913  0643  0849               	movf	??___ftadd+3,w
  5914  0644  00CC               	movwf	___ftadd@exp1
  5915  0645  0843               	movf	___ftadd@f2,w
  5916  0646  00C6               	movwf	??___ftadd
  5917  0647  0844               	movf	___ftadd@f2+1,w
  5918  0648  00C7               	movwf	??___ftadd+1
  5919  0649  0845               	movf	___ftadd@f2+2,w
  5920  064A  00C8               	movwf	??___ftadd+2
  5921  064B  1003               	clrc
  5922  064C  0D47               	rlf	??___ftadd+1,w
  5923  064D  0D48               	rlf	??___ftadd+2,w
  5924  064E  00C9               	movwf	??___ftadd+3
  5925  064F  0849               	movf	??___ftadd+3,w
  5926  0650  00CB               	movwf	___ftadd@exp2
  5927  0651  084C               	movf	___ftadd@exp1,w
  5928  0652  1903               	btfsc	3,2
  5929  0653  2E60               	goto	l1784
  5930  0654  084B               	movf	___ftadd@exp2,w
  5931  0655  024C               	subwf	___ftadd@exp1,w
  5932  0656  1803               	skipnc
  5933  0657  2E67               	goto	l1788
  5934  0658  034C               	decf	___ftadd@exp1,w
  5935  0659  3AFF               	xorlw	255
  5936  065A  074B               	addwf	___ftadd@exp2,w
  5937  065B  00C6               	movwf	??___ftadd
  5938  065C  3019               	movlw	25
  5939  065D  0246               	subwf	??___ftadd,w
  5940  065E  1C03               	skipc
  5941  065F  2E67               	goto	l1788
  5942  0660                     l1784:	
  5943  0660  0843               	movf	___ftadd@f2,w
  5944  0661  00C0               	movwf	?___ftadd
  5945  0662  0844               	movf	___ftadd@f2+1,w
  5946  0663  00C1               	movwf	?___ftadd+1
  5947  0664  0845               	movf	___ftadd@f2+2,w
  5948  0665  00C2               	movwf	?___ftadd+2
  5949  0666  0008               	return
  5950  0667                     l1788:	
  5951  0667  084B               	movf	___ftadd@exp2,w
  5952  0668  1903               	btfsc	3,2
  5953  0669  0008               	return
  5954  066A  084C               	movf	___ftadd@exp1,w
  5955  066B  024B               	subwf	___ftadd@exp2,w
  5956  066C  1803               	skipnc
  5957  066D  2E76               	goto	l1794
  5958  066E  034B               	decf	___ftadd@exp2,w
  5959  066F  3AFF               	xorlw	255
  5960  0670  074C               	addwf	___ftadd@exp1,w
  5961  0671  00C6               	movwf	??___ftadd
  5962  0672  3019               	movlw	25
  5963  0673  0246               	subwf	??___ftadd,w
  5964  0674  1803               	btfsc	3,0
  5965  0675  0008               	return
  5966  0676                     l1794:	
  5967  0676  3006               	movlw	6
  5968  0677  00C6               	movwf	??___ftadd
  5969  0678  0846               	movf	??___ftadd,w
  5970  0679  00CA               	movwf	___ftadd@sign
  5971  067A  1BC2               	btfsc	___ftadd@f1+2,7
  5972  067B  17CA               	bsf	___ftadd@sign,7
  5973  067C  1BC5               	btfsc	___ftadd@f2+2,7
  5974  067D  174A               	bsf	___ftadd@sign,6
  5975  067E  17C1               	bsf	___ftadd@f1+1,7
  5976  067F  30FF               	movlw	255
  5977  0680  05C0               	andwf	___ftadd@f1,f
  5978  0681  30FF               	movlw	255
  5979  0682  05C1               	andwf	___ftadd@f1+1,f
  5980  0683  3000               	movlw	0
  5981  0684  05C2               	andwf	___ftadd@f1+2,f
  5982  0685  17C4               	bsf	___ftadd@f2+1,7
  5983  0686  30FF               	movlw	255
  5984  0687  05C3               	andwf	___ftadd@f2,f
  5985  0688  30FF               	movlw	255
  5986  0689  05C4               	andwf	___ftadd@f2+1,f
  5987  068A  3000               	movlw	0
  5988  068B  05C5               	andwf	___ftadd@f2+2,f
  5989  068C  084B               	movf	___ftadd@exp2,w
  5990  068D  024C               	subwf	___ftadd@exp1,w
  5991  068E  1803               	skipnc
  5992  068F  2EB6               	goto	l1816
  5993  0690                     l1806:	
  5994  0690  3001               	movlw	1
  5995  0691                     u1825:	
  5996  0691  1003               	clrc
  5997  0692  0DC3               	rlf	___ftadd@f2,f
  5998  0693  0DC4               	rlf	___ftadd@f2+1,f
  5999  0694  0DC5               	rlf	___ftadd@f2+2,f
  6000  0695  3EFF               	addlw	-1
  6001  0696  1D03               	skipz
  6002  0697  2E91               	goto	u1825
  6003  0698  3001               	movlw	1
  6004  0699  02CB               	subwf	___ftadd@exp2,f
  6005  069A  084B               	movf	___ftadd@exp2,w
  6006  069B  064C               	xorwf	___ftadd@exp1,w
  6007  069C  1903               	skipnz
  6008  069D  2EB1               	goto	l1814
  6009  069E  3001               	movlw	1
  6010  069F  02CA               	subwf	___ftadd@sign,f
  6011  06A0  084A               	movf	___ftadd@sign,w
  6012  06A1  3907               	andlw	7
  6013  06A2  1903               	btfsc	3,2
  6014  06A3  2EB1               	goto	l1814
  6015  06A4  2E90               	goto	l1806
  6016  06A5                     l1812:	
  6017  06A5  3001               	movlw	1
  6018  06A6                     u1855:	
  6019  06A6  1003               	clrc
  6020  06A7  0CC2               	rrf	___ftadd@f1+2,f
  6021  06A8  0CC1               	rrf	___ftadd@f1+1,f
  6022  06A9  0CC0               	rrf	___ftadd@f1,f
  6023  06AA  3EFF               	addlw	-1
  6024  06AB  1D03               	skipz
  6025  06AC  2EA6               	goto	u1855
  6026  06AD  3001               	movlw	1
  6027  06AE  00C6               	movwf	??___ftadd
  6028  06AF  0846               	movf	??___ftadd,w
  6029  06B0  07CC               	addwf	___ftadd@exp1,f
  6030  06B1                     l1814:	
  6031  06B1  084C               	movf	___ftadd@exp1,w
  6032  06B2  064B               	xorwf	___ftadd@exp2,w
  6033  06B3  1903               	btfsc	3,2
  6034  06B4  2EDF               	goto	l600
  6035  06B5  2EA5               	goto	l1812
  6036  06B6                     l1816:	
  6037  06B6  084C               	movf	___ftadd@exp1,w
  6038  06B7  024B               	subwf	___ftadd@exp2,w
  6039  06B8  1803               	skipnc
  6040  06B9  2EDF               	goto	l600
  6041  06BA                     l1818:	
  6042  06BA  3001               	movlw	1
  6043  06BB                     u1885:	
  6044  06BB  1003               	clrc
  6045  06BC  0DC0               	rlf	___ftadd@f1,f
  6046  06BD  0DC1               	rlf	___ftadd@f1+1,f
  6047  06BE  0DC2               	rlf	___ftadd@f1+2,f
  6048  06BF  3EFF               	addlw	-1
  6049  06C0  1D03               	skipz
  6050  06C1  2EBB               	goto	u1885
  6051  06C2  3001               	movlw	1
  6052  06C3  02CC               	subwf	___ftadd@exp1,f
  6053  06C4  084B               	movf	___ftadd@exp2,w
  6054  06C5  064C               	xorwf	___ftadd@exp1,w
  6055  06C6  1903               	skipnz
  6056  06C7  2EDB               	goto	l1826
  6057  06C8  3001               	movlw	1
  6058  06C9  02CA               	subwf	___ftadd@sign,f
  6059  06CA  084A               	movf	___ftadd@sign,w
  6060  06CB  3907               	andlw	7
  6061  06CC  1903               	btfsc	3,2
  6062  06CD  2EDB               	goto	l1826
  6063  06CE  2EBA               	goto	l1818
  6064  06CF                     l1824:	
  6065  06CF  3001               	movlw	1
  6066  06D0                     u1915:	
  6067  06D0  1003               	clrc
  6068  06D1  0CC5               	rrf	___ftadd@f2+2,f
  6069  06D2  0CC4               	rrf	___ftadd@f2+1,f
  6070  06D3  0CC3               	rrf	___ftadd@f2,f
  6071  06D4  3EFF               	addlw	-1
  6072  06D5  1D03               	skipz
  6073  06D6  2ED0               	goto	u1915
  6074  06D7  3001               	movlw	1
  6075  06D8  00C6               	movwf	??___ftadd
  6076  06D9  0846               	movf	??___ftadd,w
  6077  06DA  07CB               	addwf	___ftadd@exp2,f
  6078  06DB                     l1826:	
  6079  06DB  084C               	movf	___ftadd@exp1,w
  6080  06DC  064B               	xorwf	___ftadd@exp2,w
  6081  06DD  1D03               	skipz
  6082  06DE  2ECF               	goto	l1824
  6083  06DF                     l600:	
  6084  06DF  1FCA               	btfss	___ftadd@sign,7
  6085  06E0  2EF1               	goto	l1830
  6086  06E1  30FF               	movlw	255
  6087  06E2  06C0               	xorwf	___ftadd@f1,f
  6088  06E3  30FF               	movlw	255
  6089  06E4  06C1               	xorwf	___ftadd@f1+1,f
  6090  06E5  30FF               	movlw	255
  6091  06E6  06C2               	xorwf	___ftadd@f1+2,f
  6092  06E7  3001               	movlw	1
  6093  06E8  07C0               	addwf	___ftadd@f1,f
  6094  06E9  3000               	movlw	0
  6095  06EA  1803               	skipnc
  6096  06EB  3001               	movlw	1
  6097  06EC  07C1               	addwf	___ftadd@f1+1,f
  6098  06ED  3000               	movlw	0
  6099  06EE  1803               	skipnc
  6100  06EF  3001               	movlw	1
  6101  06F0  07C2               	addwf	___ftadd@f1+2,f
  6102  06F1                     l1830:	
  6103  06F1  1F4A               	btfss	___ftadd@sign,6
  6104  06F2  2F03               	goto	l1834
  6105  06F3  30FF               	movlw	255
  6106  06F4  06C3               	xorwf	___ftadd@f2,f
  6107  06F5  30FF               	movlw	255
  6108  06F6  06C4               	xorwf	___ftadd@f2+1,f
  6109  06F7  30FF               	movlw	255
  6110  06F8  06C5               	xorwf	___ftadd@f2+2,f
  6111  06F9  3001               	movlw	1
  6112  06FA  07C3               	addwf	___ftadd@f2,f
  6113  06FB  3000               	movlw	0
  6114  06FC  1803               	skipnc
  6115  06FD  3001               	movlw	1
  6116  06FE  07C4               	addwf	___ftadd@f2+1,f
  6117  06FF  3000               	movlw	0
  6118  0700  1803               	skipnc
  6119  0701  3001               	movlw	1
  6120  0702  07C5               	addwf	___ftadd@f2+2,f
  6121  0703                     l1834:	
  6122  0703  01CA               	clrf	___ftadd@sign
  6123  0704  0840               	movf	___ftadd@f1,w
  6124  0705  07C3               	addwf	___ftadd@f2,f
  6125  0706  0841               	movf	___ftadd@f1+1,w
  6126  0707  1103               	clrz
  6127  0708  1803               	skipnc
  6128  0709  0A41               	incf	___ftadd@f1+1,w
  6129  070A  1D03               	btfss	3,2
  6130  070B  07C4               	addwf	___ftadd@f2+1,f
  6131  070C  0842               	movf	___ftadd@f1+2,w
  6132  070D  1103               	clrz
  6133  070E  1803               	skipnc
  6134  070F  0A42               	incf	___ftadd@f1+2,w
  6135  0710  1D03               	btfss	3,2
  6136  0711  07C5               	addwf	___ftadd@f2+2,f
  6137  0712  1FC5               	btfss	___ftadd@f2+2,7
  6138  0713  2F26               	goto	l1844
  6139  0714  30FF               	movlw	255
  6140  0715  06C3               	xorwf	___ftadd@f2,f
  6141  0716  30FF               	movlw	255
  6142  0717  06C4               	xorwf	___ftadd@f2+1,f
  6143  0718  30FF               	movlw	255
  6144  0719  06C5               	xorwf	___ftadd@f2+2,f
  6145  071A  3001               	movlw	1
  6146  071B  07C3               	addwf	___ftadd@f2,f
  6147  071C  3000               	movlw	0
  6148  071D  1803               	skipnc
  6149  071E  3001               	movlw	1
  6150  071F  07C4               	addwf	___ftadd@f2+1,f
  6151  0720  3000               	movlw	0
  6152  0721  1803               	skipnc
  6153  0722  3001               	movlw	1
  6154  0723  07C5               	addwf	___ftadd@f2+2,f
  6155  0724  01CA               	clrf	___ftadd@sign
  6156  0725  0ACA               	incf	___ftadd@sign,f
  6157  0726                     l1844:	
  6158  0726  0843               	movf	___ftadd@f2,w
  6159  0727  00A0               	movwf	___ftpack@arg
  6160  0728  0844               	movf	___ftadd@f2+1,w
  6161  0729  00A1               	movwf	___ftpack@arg+1
  6162  072A  0845               	movf	___ftadd@f2+2,w
  6163  072B  00A2               	movwf	___ftpack@arg+2
  6164  072C  084C               	movf	___ftadd@exp1,w
  6165  072D  00C6               	movwf	??___ftadd
  6166  072E  0846               	movf	??___ftadd,w
  6167  072F  00A3               	movwf	___ftpack@exp
  6168  0730  084A               	movf	___ftadd@sign,w
  6169  0731  00C7               	movwf	??___ftadd+1
  6170  0732  0847               	movf	??___ftadd+1,w
  6171  0733  00A4               	movwf	___ftpack@sign
  6172  0734  120A  158A  21EF   	fcall	___ftpack
  6173  0737  1283               	bcf	3,5	;RP0=0, select bank0
  6174  0738  1303               	bcf	3,6	;RP1=0, select bank0
  6175  0739  0820               	movf	?___ftpack,w
  6176  073A  00C0               	movwf	?___ftadd
  6177  073B  0821               	movf	?___ftpack+1,w
  6178  073C  00C1               	movwf	?___ftadd+1
  6179  073D  0822               	movf	?___ftpack+2,w
  6180  073E  00C2               	movwf	?___ftadd+2
  6181  073F  0008               	return
  6182  0740                     __end_of___ftadd:	
  6183                           
  6184                           	psect	text26
  6185  09EF                     __ptext26:	
  6186 ;; *************** function ___ftpack *****************
  6187 ;; Defined at:
  6188 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  arg             3    0[BANK0 ] unsigned um
  6191 ;;  exp             1    3[BANK0 ] unsigned char 
  6192 ;;  sign            1    4[BANK0 ] unsigned char 
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  3    0[BANK0 ] float 
  6197 ;; Registers used:
  6198 ;;		wreg, status,2, status,0
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6204 ;;      Params:         0       5       0       0       0
  6205 ;;      Locals:         0       0       0       0       0
  6206 ;;      Temps:          0       3       0       0       0
  6207 ;;      Totals:         0       8       0       0       0
  6208 ;;Total ram usage:        8 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    2
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		___ftadd
  6215 ;;		___ftdiv
  6216 ;;		___ftmul
  6217 ;;		___lbtoft
  6218 ;;		___lltoft
  6219 ;;		___lwtoft
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function ___ftpack
  6225  09EF                     ___ftpack:	
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6229  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  6230  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  6231  09F1  0823               	movf	___ftpack@exp,w
  6232  09F2  1903               	btfsc	3,2
  6233  09F3  29F9               	goto	l1694
  6234  09F4  0822               	movf	___ftpack@arg+2,w
  6235  09F5  0421               	iorwf	___ftpack@arg+1,w
  6236  09F6  0420               	iorwf	___ftpack@arg,w
  6237  09F7  1D03               	skipz
  6238  09F8  2A0C               	goto	l1700
  6239  09F9                     l1694:	
  6240  09F9  3000               	movlw	0
  6241  09FA  00A0               	movwf	?___ftpack
  6242  09FB  3000               	movlw	0
  6243  09FC  00A1               	movwf	?___ftpack+1
  6244  09FD  3000               	movlw	0
  6245  09FE  00A2               	movwf	?___ftpack+2
  6246  09FF  0008               	return
  6247  0A00                     l1698:	
  6248  0A00  3001               	movlw	1
  6249  0A01  00A5               	movwf	??___ftpack
  6250  0A02  0825               	movf	??___ftpack,w
  6251  0A03  07A3               	addwf	___ftpack@exp,f
  6252  0A04  3001               	movlw	1
  6253  0A05                     u1555:	
  6254  0A05  1003               	clrc
  6255  0A06  0CA2               	rrf	___ftpack@arg+2,f
  6256  0A07  0CA1               	rrf	___ftpack@arg+1,f
  6257  0A08  0CA0               	rrf	___ftpack@arg,f
  6258  0A09  3EFF               	addlw	-1
  6259  0A0A  1D03               	skipz
  6260  0A0B  2A05               	goto	u1555
  6261  0A0C                     l1700:	
  6262  0A0C  30FE               	movlw	254
  6263  0A0D  0522               	andwf	___ftpack@arg+2,w
  6264  0A0E  1903               	btfsc	3,2
  6265  0A0F  2A27               	goto	l569
  6266  0A10  2A00               	goto	l1698
  6267  0A11                     l1702:	
  6268  0A11  3001               	movlw	1
  6269  0A12  00A5               	movwf	??___ftpack
  6270  0A13  0825               	movf	??___ftpack,w
  6271  0A14  07A3               	addwf	___ftpack@exp,f
  6272  0A15  3001               	movlw	1
  6273  0A16  07A0               	addwf	___ftpack@arg,f
  6274  0A17  3000               	movlw	0
  6275  0A18  1803               	skipnc
  6276  0A19  3001               	movlw	1
  6277  0A1A  07A1               	addwf	___ftpack@arg+1,f
  6278  0A1B  3000               	movlw	0
  6279  0A1C  1803               	skipnc
  6280  0A1D  3001               	movlw	1
  6281  0A1E  07A2               	addwf	___ftpack@arg+2,f
  6282  0A1F  3001               	movlw	1
  6283  0A20                     u1575:	
  6284  0A20  1003               	clrc
  6285  0A21  0CA2               	rrf	___ftpack@arg+2,f
  6286  0A22  0CA1               	rrf	___ftpack@arg+1,f
  6287  0A23  0CA0               	rrf	___ftpack@arg,f
  6288  0A24  3EFF               	addlw	-1
  6289  0A25  1D03               	skipz
  6290  0A26  2A20               	goto	u1575
  6291  0A27                     l569:	
  6292  0A27  30FF               	movlw	255
  6293  0A28  0522               	andwf	___ftpack@arg+2,w
  6294  0A29  1903               	btfsc	3,2
  6295  0A2A  2A3A               	goto	l1710
  6296  0A2B  2A11               	goto	l1702
  6297  0A2C                     l1712:	
  6298  0A2C  3002               	movlw	2
  6299  0A2D  0223               	subwf	___ftpack@exp,w
  6300  0A2E  1C03               	btfss	3,0
  6301  0A2F  2A3C               	goto	l576
  6302  0A30  3001               	movlw	1
  6303  0A31  02A3               	subwf	___ftpack@exp,f
  6304  0A32  3001               	movlw	1
  6305  0A33                     u1595:	
  6306  0A33  1003               	clrc
  6307  0A34  0DA0               	rlf	___ftpack@arg,f
  6308  0A35  0DA1               	rlf	___ftpack@arg+1,f
  6309  0A36  0DA2               	rlf	___ftpack@arg+2,f
  6310  0A37  3EFF               	addlw	-1
  6311  0A38  1D03               	skipz
  6312  0A39  2A33               	goto	u1595
  6313  0A3A                     l1710:	
  6314  0A3A  1FA1               	btfss	___ftpack@arg+1,7
  6315  0A3B  2A2C               	goto	l1712
  6316  0A3C                     l576:	
  6317  0A3C  1823               	btfsc	___ftpack@exp,0
  6318  0A3D  2A44               	goto	l577
  6319  0A3E  30FF               	movlw	255
  6320  0A3F  05A0               	andwf	___ftpack@arg,f
  6321  0A40  307F               	movlw	127
  6322  0A41  05A1               	andwf	___ftpack@arg+1,f
  6323  0A42  30FF               	movlw	255
  6324  0A43  05A2               	andwf	___ftpack@arg+2,f
  6325  0A44                     l577:	
  6326  0A44  1003               	clrc
  6327  0A45  0CA3               	rrf	___ftpack@exp,f
  6328  0A46  0823               	movf	___ftpack@exp,w
  6329  0A47  00A5               	movwf	??___ftpack
  6330  0A48  01A6               	clrf	??___ftpack+1
  6331  0A49  01A7               	clrf	??___ftpack+2
  6332  0A4A  3010               	movlw	16
  6333  0A4B                     u1635:	
  6334  0A4B  1003               	clrc
  6335  0A4C  0DA5               	rlf	??___ftpack,f
  6336  0A4D  0DA6               	rlf	??___ftpack+1,f
  6337  0A4E  0DA7               	rlf	??___ftpack+2,f
  6338  0A4F  3EFF               	addlw	-1
  6339  0A50  1D03               	skipz
  6340  0A51  2A4B               	goto	u1635
  6341  0A52  0825               	movf	??___ftpack,w
  6342  0A53  04A0               	iorwf	___ftpack@arg,f
  6343  0A54  0826               	movf	??___ftpack+1,w
  6344  0A55  04A1               	iorwf	___ftpack@arg+1,f
  6345  0A56  0827               	movf	??___ftpack+2,w
  6346  0A57  04A2               	iorwf	___ftpack@arg+2,f
  6347  0A58  0824               	movf	___ftpack@sign,w
  6348  0A59  1903               	btfsc	3,2
  6349  0A5A  0008               	return
  6350  0A5B  17A2               	bsf	___ftpack@arg+2,7
  6351  0A5C  0008               	return
  6352  0A5D                     __end_of___ftpack:	
  6353                           
  6354                           	psect	text27
  6355  08AF                     __ptext27:	
  6356 ;; *************** function _LCDWriteString *****************
  6357 ;; Defined at:
  6358 ;;		line 163 in file "lcd.h"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  a               2    5[BANK0 ] PTR const unsigned char 
  6361 ;;		 -> STR_4(10), STR_3(9), STR_2(9), STR_1(9), 
  6362 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  i               2   10[BANK0 ] int 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6374 ;;      Params:         0       2       0       0       0
  6375 ;;      Locals:         0       2       0       0       0
  6376 ;;      Temps:          0       3       0       0       0
  6377 ;;      Totals:         0       7       0       0       0
  6378 ;;Total ram usage:        7 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    4
  6381 ;; This function calls:
  6382 ;;		_LCDWriteChar
  6383 ;; This function is called by:
  6384 ;;		_displayLCD
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _LCDWriteString
  6390  08AF                     _LCDWriteString:	
  6391                           
  6392                           ;lcd.h: 165: for(int i=0;a[i]!='\0';i++)
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6396  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  6397  08B0  1303               	bcf	3,6	;RP1=0, select bank0
  6398  08B1  01AA               	clrf	LCDWriteString@i
  6399  08B2  01AB               	clrf	LCDWriteString@i+1
  6400  08B3                     l2106:	
  6401  08B3  082A               	movf	LCDWriteString@i,w
  6402  08B4  0725               	addwf	LCDWriteString@a,w
  6403  08B5  00A8               	movwf	??_LCDWriteString+1
  6404  08B6  0826               	movf	LCDWriteString@a+1,w
  6405  08B7  00A7               	movwf	??_LCDWriteString
  6406  08B8  1803               	skipnc
  6407  08B9  0AA7               	incf	??_LCDWriteString,f
  6408  08BA  1BAA               	btfsc	LCDWriteString@i,7
  6409  08BB  03A7               	decf	??_LCDWriteString,f
  6410  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  6411  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  6412  08BE  0827               	movf	??_LCDWriteString,w
  6413  08BF  00A9               	movwf	??_LCDWriteString+2
  6414  08C0  0829               	movf	??_LCDWriteString+2,w
  6415  08C1  00FF               	movwf	127
  6416  08C2  0828               	movf	??_LCDWriteString+1,w
  6417  08C3  0084               	movwf	4
  6418  08C4  120A  158A  2000  120A  158A  	fcall	stringtab
  6419  08C9  3A00               	xorlw	0
  6420  08CA  1903               	btfsc	3,2
  6421  08CB  0008               	return
  6422                           
  6423                           ;lcd.h: 166: {
  6424                           ;lcd.h: 167: LCDWriteChar(a[i]);
  6425  08CC  082A               	movf	LCDWriteString@i,w
  6426  08CD  0725               	addwf	LCDWriteString@a,w
  6427  08CE  00A8               	movwf	??_LCDWriteString+1
  6428  08CF  0826               	movf	LCDWriteString@a+1,w
  6429  08D0  00A7               	movwf	??_LCDWriteString
  6430  08D1  1803               	skipnc
  6431  08D2  0AA7               	incf	??_LCDWriteString,f
  6432  08D3  1BAA               	btfsc	LCDWriteString@i,7
  6433  08D4  03A7               	decf	??_LCDWriteString,f
  6434  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  6435  08D6  1303               	bcf	3,6	;RP1=0, select bank0
  6436  08D7  0827               	movf	??_LCDWriteString,w
  6437  08D8  00A9               	movwf	??_LCDWriteString+2
  6438  08D9  0829               	movf	??_LCDWriteString+2,w
  6439  08DA  00FF               	movwf	127
  6440  08DB  0828               	movf	??_LCDWriteString+1,w
  6441  08DC  0084               	movwf	4
  6442  08DD  120A  158A  2000  120A  158A  	fcall	stringtab
  6443  08E2  160A  118A  269F  120A  158A  	fcall	_LCDWriteChar
  6444  08E7  3001               	movlw	1
  6445  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  6446  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  6447  08EA  07AA               	addwf	LCDWriteString@i,f
  6448  08EB  1803               	skipnc
  6449  08EC  0AAB               	incf	LCDWriteString@i+1,f
  6450  08ED  3000               	movlw	0
  6451  08EE  07AB               	addwf	LCDWriteString@i+1,f
  6452  08EF  28B3               	goto	l2106
  6453  08F0                     __end_of_LCDWriteString:	
  6454                           
  6455                           	psect	text28
  6456  169F                     __ptext28:	
  6457 ;; *************** function _LCDWriteChar *****************
  6458 ;; Defined at:
  6459 ;;		line 131 in file "lcd.h"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  a               1    wreg     unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  a               1    4[BANK0 ] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;		None               void
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0, pclath, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6473 ;;      Params:         0       0       0       0       0
  6474 ;;      Locals:         0       1       0       0       0
  6475 ;;      Temps:          0       2       0       0       0
  6476 ;;      Totals:         0       3       0       0       0
  6477 ;;Total ram usage:        3 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    3
  6480 ;; This function calls:
  6481 ;;		_LCDSetBits
  6482 ;;		_pulse
  6483 ;; This function is called by:
  6484 ;;		_LCDWriteString
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _LCDWriteChar
  6490  169F                     _LCDWriteChar:	
  6491                           
  6492                           ;incstack = 0
  6493                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
  6494                           ;LCDWriteChar@a stored from wreg
  6495  169F  1283               	bcf	3,5	;RP0=0, select bank0
  6496  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  6497  16A1  00A4               	movwf	LCDWriteChar@a
  6498                           
  6499                           ;lcd.h: 133: LCDSetBits(a);
  6500  16A2  0824               	movf	LCDWriteChar@a,w
  6501  16A3  160A  118A  262C  160A  118A  	fcall	_LCDSetBits
  6502                           
  6503                           ;lcd.h: 134: RB0 = 1;
  6504  16A8  1283               	bcf	3,5	;RP0=0, select bank0
  6505  16A9  1303               	bcf	3,6	;RP1=0, select bank0
  6506  16AA  1406               	bsf	6,0	;volatile
  6507                           
  6508                           ;lcd.h: 136: pulse();
  6509  16AB  160A  118A  25F9  160A  118A  	fcall	_pulse
  6510                           
  6511                           ;lcd.h: 137: a = a<<4;
  6512  16B0  1283               	bcf	3,5	;RP0=0, select bank0
  6513  16B1  1303               	bcf	3,6	;RP1=0, select bank0
  6514  16B2  0824               	movf	LCDWriteChar@a,w
  6515  16B3  00A2               	movwf	??_LCDWriteChar
  6516  16B4  3003               	movlw	3
  6517  16B5                     u1665:	
  6518  16B5  1003               	clrc
  6519  16B6  0DA2               	rlf	??_LCDWriteChar,f
  6520  16B7  3EFF               	addlw	-1
  6521  16B8  1D03               	skipz
  6522  16B9  2EB5               	goto	u1665
  6523  16BA  1003               	clrc
  6524  16BB  0D22               	rlf	??_LCDWriteChar,w
  6525  16BC  00A3               	movwf	??_LCDWriteChar+1
  6526  16BD  0823               	movf	??_LCDWriteChar+1,w
  6527  16BE  00A4               	movwf	LCDWriteChar@a
  6528                           
  6529                           ;lcd.h: 138: LCDSetBits(a);
  6530  16BF  0824               	movf	LCDWriteChar@a,w
  6531  16C0  160A  118A  262C  160A  118A  	fcall	_LCDSetBits
  6532                           
  6533                           ;lcd.h: 139: pulse();
  6534  16C5  160A  118A  25F9   	fcall	_pulse
  6535  16C8  0008               	return
  6536  16C9                     __end_of_LCDWriteChar:	
  6537                           
  6538                           	psect	text29
  6539  178E                     __ptext29:	
  6540 ;; *************** function _LCDSetCursor *****************
  6541 ;; Defined at:
  6542 ;;		line 146 in file "lcd.h"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  a               1    wreg     unsigned char 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  a               1    5[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6556 ;;      Params:         0       0       0       0       0
  6557 ;;      Locals:         0       1       0       0       0
  6558 ;;      Temps:          0       2       0       0       0
  6559 ;;      Totals:         0       3       0       0       0
  6560 ;;Total ram usage:        3 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    4
  6563 ;; This function calls:
  6564 ;;		_LCD4bitCmd
  6565 ;; This function is called by:
  6566 ;;		_displayLCD
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _LCDSetCursor
  6572  178E                     _LCDSetCursor:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
  6576                           ;LCDSetCursor@a stored from wreg
  6577  178E  1283               	bcf	3,5	;RP0=0, select bank0
  6578  178F  1303               	bcf	3,6	;RP1=0, select bank0
  6579  1790  00A5               	movwf	LCDSetCursor@a
  6580                           
  6581                           ;lcd.h: 148: if (a & 16)
  6582  1791  1E25               	btfss	LCDSetCursor@a,4
  6583  1792  2FAD               	goto	l2094
  6584                           
  6585                           ;lcd.h: 149: {
  6586                           ;lcd.h: 150: LCD4bitCmd(0xC0);
  6587  1793  30C0               	movlw	192
  6588  1794  160A  118A  2609  160A  118A  	fcall	_LCD4bitCmd
  6589                           
  6590                           ;lcd.h: 151: a = a << 4;
  6591  1799  1283               	bcf	3,5	;RP0=0, select bank0
  6592  179A  1303               	bcf	3,6	;RP1=0, select bank0
  6593  179B  0825               	movf	LCDSetCursor@a,w
  6594  179C  00A3               	movwf	??_LCDSetCursor
  6595  179D  3003               	movlw	3
  6596  179E                     u2475:	
  6597  179E  1003               	clrc
  6598  179F  0DA3               	rlf	??_LCDSetCursor,f
  6599  17A0  3EFF               	addlw	-1
  6600  17A1  1D03               	skipz
  6601  17A2  2F9E               	goto	u2475
  6602  17A3  1003               	clrc
  6603  17A4  0D23               	rlf	??_LCDSetCursor,w
  6604  17A5  00A4               	movwf	??_LCDSetCursor+1
  6605  17A6  0824               	movf	??_LCDSetCursor+1,w
  6606  17A7  00A5               	movwf	LCDSetCursor@a
  6607                           
  6608                           ;lcd.h: 152: LCD4bitCmd(a);
  6609  17A8  0825               	movf	LCDSetCursor@a,w
  6610  17A9  160A  118A  2609   	fcall	_LCD4bitCmd
  6611                           
  6612                           ;lcd.h: 153: }
  6613  17AC  0008               	return
  6614  17AD                     l2094:	
  6615                           
  6616                           ;lcd.h: 155: else
  6617                           ;lcd.h: 156: {
  6618                           ;lcd.h: 157: LCD4bitCmd(0x80);
  6619  17AD  3080               	movlw	128
  6620  17AE  160A  118A  2609  160A  118A  	fcall	_LCD4bitCmd
  6621                           
  6622                           ;lcd.h: 158: a = a << 4;
  6623  17B3  1283               	bcf	3,5	;RP0=0, select bank0
  6624  17B4  1303               	bcf	3,6	;RP1=0, select bank0
  6625  17B5  0825               	movf	LCDSetCursor@a,w
  6626  17B6  00A3               	movwf	??_LCDSetCursor
  6627  17B7  3003               	movlw	3
  6628  17B8                     u2485:	
  6629  17B8  1003               	clrc
  6630  17B9  0DA3               	rlf	??_LCDSetCursor,f
  6631  17BA  3EFF               	addlw	-1
  6632  17BB  1D03               	skipz
  6633  17BC  2FB8               	goto	u2485
  6634  17BD  1003               	clrc
  6635  17BE  0D23               	rlf	??_LCDSetCursor,w
  6636  17BF  00A4               	movwf	??_LCDSetCursor+1
  6637  17C0  0824               	movf	??_LCDSetCursor+1,w
  6638  17C1  00A5               	movwf	LCDSetCursor@a
  6639                           
  6640                           ;lcd.h: 159: LCD4bitCmd(a);
  6641  17C2  0825               	movf	LCDSetCursor@a,w
  6642  17C3  160A  118A  2609   	fcall	_LCD4bitCmd
  6643  17C6  0008               	return
  6644  17C7                     __end_of_LCDSetCursor:	
  6645                           
  6646                           	psect	text30
  6647  1609                     __ptext30:	
  6648 ;; *************** function _LCD4bitCmd *****************
  6649 ;; Defined at:
  6650 ;;		line 123 in file "lcd.h"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  a               1    wreg     unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  a               1    2[BANK0 ] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, pclath, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6664 ;;      Params:         0       0       0       0       0
  6665 ;;      Locals:         0       1       0       0       0
  6666 ;;      Temps:          0       0       0       0       0
  6667 ;;      Totals:         0       1       0       0       0
  6668 ;;Total ram usage:        1 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    3
  6671 ;; This function calls:
  6672 ;;		_LCDSetBits
  6673 ;;		_pulse
  6674 ;; This function is called by:
  6675 ;;		_LCDSetCursor
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _LCD4bitCmd
  6681  1609                     _LCD4bitCmd:	
  6682                           
  6683                           ;incstack = 0
  6684                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
  6685                           ;LCD4bitCmd@a stored from wreg
  6686  1609  1283               	bcf	3,5	;RP0=0, select bank0
  6687  160A  1303               	bcf	3,6	;RP1=0, select bank0
  6688  160B  00A2               	movwf	LCD4bitCmd@a
  6689                           
  6690                           ;lcd.h: 125: LCDSetBits(a);
  6691  160C  0822               	movf	LCD4bitCmd@a,w
  6692  160D  160A  118A  262C  160A  118A  	fcall	_LCDSetBits
  6693                           
  6694                           ;lcd.h: 126: RB0 = 0;
  6695  1612  1283               	bcf	3,5	;RP0=0, select bank0
  6696  1613  1303               	bcf	3,6	;RP1=0, select bank0
  6697  1614  1006               	bcf	6,0	;volatile
  6698                           
  6699                           ;lcd.h: 127: RD7 = 0;
  6700  1615  1388               	bcf	8,7	;volatile
  6701                           
  6702                           ;lcd.h: 128: pulse();
  6703  1616  160A  118A  25F9   	fcall	_pulse
  6704  1619  0008               	return
  6705  161A                     __end_of_LCD4bitCmd:	
  6706                           
  6707                           	psect	text31
  6708  15F9                     __ptext31:	
  6709 ;; *************** function _pulse *****************
  6710 ;; Defined at:
  6711 ;;		line 102 in file "lcd.h"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;		None               void
  6718 ;; Registers used:
  6719 ;;		wreg
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6725 ;;      Params:         0       0       0       0       0
  6726 ;;      Locals:         0       0       0       0       0
  6727 ;;      Temps:          0       2       0       0       0
  6728 ;;      Totals:         0       2       0       0       0
  6729 ;;Total ram usage:        2 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    2
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_initLCD
  6736 ;;		_LCDcmd
  6737 ;;		_LCD4bitCmd
  6738 ;;		_LCDWriteChar
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _pulse
  6744  15F9                     _pulse:	
  6745                           
  6746                           ;lcd.h: 104: RB1 = 1;
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _pulse: [wreg]
  6750  15F9  1283               	bcf	3,5	;RP0=0, select bank0
  6751  15FA  1303               	bcf	3,6	;RP1=0, select bank0
  6752  15FB  1486               	bsf	6,1	;volatile
  6753                           
  6754                           ;lcd.h: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  6755  15FC  3003               	movlw	3
  6756  15FD  00A1               	movwf	??_pulse+1
  6757  15FE  3097               	movlw	151
  6758  15FF  00A0               	movwf	??_pulse
  6759  1600                     u3117:	
  6760  1600  0BA0               	decfsz	??_pulse,f
  6761  1601  2E00               	goto	u3117
  6762  1602  0BA1               	decfsz	??_pulse+1,f
  6763  1603  2E00               	goto	u3117
  6764  1604  2E05               	nop2
  6765                           
  6766                           ;lcd.h: 106: RB1 = 0;
  6767  1605  1283               	bcf	3,5	;RP0=0, select bank0
  6768  1606  1303               	bcf	3,6	;RP1=0, select bank0
  6769  1607  1086               	bcf	6,1	;volatile
  6770  1608  0008               	return
  6771  1609                     __end_of_pulse:	
  6772                           
  6773                           	psect	text32
  6774  162C                     __ptext32:	
  6775 ;; *************** function _LCDSetBits *****************
  6776 ;; Defined at:
  6777 ;;		line 79 in file "lcd.h"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  a               1    wreg     unsigned char 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  a               1    0[BANK0 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6791 ;;      Params:         0       0       0       0       0
  6792 ;;      Locals:         0       1       0       0       0
  6793 ;;      Temps:          0       0       0       0       0
  6794 ;;      Totals:         0       1       0       0       0
  6795 ;;Total ram usage:        1 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    2
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_initLCD
  6802 ;;		_LCDcmd
  6803 ;;		_LCD4bitCmd
  6804 ;;		_LCDWriteChar
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _LCDSetBits
  6810  162C                     _LCDSetBits:	
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _LCDSetBits: [wreg]
  6814                           ;LCDSetBits@a stored from wreg
  6815  162C  1283               	bcf	3,5	;RP0=0, select bank0
  6816  162D  1303               	bcf	3,6	;RP1=0, select bank0
  6817  162E  00A0               	movwf	LCDSetBits@a
  6818                           
  6819                           ;lcd.h: 81: if(a & 16)
  6820  162F  1E20               	btfss	LCDSetBits@a,4
  6821  1630  2E33               	goto	l120
  6822                           
  6823                           ;lcd.h: 82: RB2 = 1;
  6824  1631  1506               	bsf	6,2	;volatile
  6825  1632  2E34               	goto	l121
  6826  1633                     l120:	
  6827                           
  6828                           ;lcd.h: 83: else
  6829                           ;lcd.h: 84: RB2 = 0;
  6830  1633  1106               	bcf	6,2	;volatile
  6831  1634                     l121:	
  6832                           
  6833                           ;lcd.h: 86: if(a & 32)
  6834  1634  1EA0               	btfss	LCDSetBits@a,5
  6835  1635  2E38               	goto	l122
  6836                           
  6837                           ;lcd.h: 87: RB3 = 1;
  6838  1636  1586               	bsf	6,3	;volatile
  6839  1637  2E39               	goto	l123
  6840  1638                     l122:	
  6841                           
  6842                           ;lcd.h: 88: else
  6843                           ;lcd.h: 89: RB3 = 0;
  6844  1638  1186               	bcf	6,3	;volatile
  6845  1639                     l123:	
  6846                           
  6847                           ;lcd.h: 91: if(a & 64)
  6848  1639  1F20               	btfss	LCDSetBits@a,6
  6849  163A  2E3D               	goto	l124
  6850                           
  6851                           ;lcd.h: 92: RB4 = 1;
  6852  163B  1606               	bsf	6,4	;volatile
  6853  163C  2E3E               	goto	l125
  6854  163D                     l124:	
  6855                           
  6856                           ;lcd.h: 93: else
  6857                           ;lcd.h: 94: RB4 = 0;
  6858  163D  1206               	bcf	6,4	;volatile
  6859  163E                     l125:	
  6860                           
  6861                           ;lcd.h: 96: if(a & 128)
  6862  163E  1FA0               	btfss	LCDSetBits@a,7
  6863  163F  2E42               	goto	l126
  6864                           
  6865                           ;lcd.h: 97: RB5 = 1;
  6866  1640  1686               	bsf	6,5	;volatile
  6867  1641  0008               	return
  6868  1642                     l126:	
  6869                           
  6870                           ;lcd.h: 98: else
  6871                           ;lcd.h: 99: RB5 = 0;
  6872  1642  1286               	bcf	6,5	;volatile
  6873  1643  0008               	return
  6874  1644                     __end_of_LCDSetBits:	
  6875                           
  6876                           	psect	text33
  6877  165C                     __ptext33:	
  6878 ;; *************** function _currentGainInit *****************
  6879 ;; Defined at:
  6880 ;;		line 260 in file "PIC16F917 Battery Management.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  gain            1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  gain            1    0[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6894 ;;      Params:         0       0       0       0       0
  6895 ;;      Locals:         0       1       0       0       0
  6896 ;;      Temps:          0       0       0       0       0
  6897 ;;      Totals:         0       1       0       0       0
  6898 ;;Total ram usage:        1 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    2
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_main
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           
  6909                           ;psect for function _currentGainInit
  6910  165C                     _currentGainInit:	
  6911                           
  6912                           ;incstack = 0
  6913                           ; Regs used in _currentGainInit: [wreg+status,2+status,0]
  6914                           ;currentGainInit@gain stored from wreg
  6915  165C  1283               	bcf	3,5	;RP0=0, select bank0
  6916  165D  1303               	bcf	3,6	;RP1=0, select bank0
  6917  165E  00A0               	movwf	currentGainInit@gain
  6918                           
  6919                           ;PIC16F917 Battery Management.c: 262: if ( gain >= 100 )
  6920  165F  3064               	movlw	100
  6921  1660  0220               	subwf	currentGainInit@gain,w
  6922  1661  1C03               	skipc
  6923  1662  2E6C               	goto	l303
  6924                           
  6925                           ;PIC16F917 Battery Management.c: 263: {
  6926                           ;PIC16F917 Battery Management.c: 264: RA6 = 1;
  6927  1663  1705               	bsf	5,6	;volatile
  6928                           
  6929                           ;PIC16F917 Battery Management.c: 266: if ( gain == 100 )
  6930  1664  3064               	movlw	100
  6931  1665  0620               	xorwf	currentGainInit@gain,w
  6932  1666  1D03               	btfss	3,2
  6933  1667  2E6A               	goto	l304
  6934                           
  6935                           ;PIC16F917 Battery Management.c: 267: {
  6936                           ;PIC16F917 Battery Management.c: 268: RA7 = 0;
  6937  1668  1385               	bcf	5,7	;volatile
  6938                           
  6939                           ;PIC16F917 Battery Management.c: 270: }
  6940                           
  6941                           ;PIC16F917 Battery Management.c: 269: return;
  6942  1669  0008               	return
  6943  166A                     l304:	
  6944                           
  6945                           ;PIC16F917 Battery Management.c: 271: else
  6946                           ;PIC16F917 Battery Management.c: 272: {
  6947                           ;PIC16F917 Battery Management.c: 273: RA7 = 1;
  6948  166A  1785               	bsf	5,7	;volatile
  6949                           
  6950                           ;PIC16F917 Battery Management.c: 275: }
  6951                           ;PIC16F917 Battery Management.c: 277: }
  6952                           
  6953                           ;PIC16F917 Battery Management.c: 274: return;
  6954  166B  0008               	return
  6955  166C                     l303:	
  6956                           
  6957                           ;PIC16F917 Battery Management.c: 279: else
  6958                           ;PIC16F917 Battery Management.c: 280: {
  6959                           ;PIC16F917 Battery Management.c: 281: RA6 = 0;
  6960  166C  1305               	bcf	5,6	;volatile
  6961                           
  6962                           ;PIC16F917 Battery Management.c: 283: if ( gain == 25 )
  6963  166D  3019               	movlw	25
  6964  166E  0620               	xorwf	currentGainInit@gain,w
  6965  166F  1D03               	btfss	3,2
  6966  1670  2E73               	goto	l308
  6967                           
  6968                           ;PIC16F917 Battery Management.c: 284: {
  6969                           ;PIC16F917 Battery Management.c: 285: RA7 = 0;
  6970  1671  1385               	bcf	5,7	;volatile
  6971                           
  6972                           ;PIC16F917 Battery Management.c: 287: }
  6973                           
  6974                           ;PIC16F917 Battery Management.c: 286: return;
  6975  1672  0008               	return
  6976  1673                     l308:	
  6977                           
  6978                           ;PIC16F917 Battery Management.c: 288: else
  6979                           ;PIC16F917 Battery Management.c: 289: {
  6980                           ;PIC16F917 Battery Management.c: 290: RA7 = 1;
  6981  1673  1785               	bsf	5,7	;volatile
  6982                           
  6983                           ;PIC16F917 Battery Management.c: 291: return;
  6984  1674  0008               	return
  6985  1675                     __end_of_currentGainInit:	
  6986                           
  6987                           	psect	text34
  6988  161A                     __ptext34:	
  6989 ;; *************** function _isr *****************
  6990 ;; Defined at:
  6991 ;;		line 255 in file "setup.h"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;		None               void
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, pclath, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7005 ;;      Params:         0       0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0
  7007 ;;      Temps:          4       0       0       0       0
  7008 ;;      Totals:         4       0       0       0       0
  7009 ;;Total ram usage:        4 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    1
  7012 ;; This function calls:
  7013 ;;		_isrTimer0
  7014 ;; This function is called by:
  7015 ;;		Interrupt level 1
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function _isr
  7021  161A                     _isr:	
  7022                           
  7023                           ;setup.h: 257: isrTimer0();
  7024  161A  160A  118A  2675  160A  118A  	fcall	_isrTimer0
  7025  161F  0877               	movf	??_isr+3,w
  7026  1620  1283               	bcf	3,5	;RP0=0, select bank0
  7027  1621  1303               	bcf	3,6	;RP1=0, select bank0
  7028  1622  00FF               	movwf	127
  7029  1623  0876               	movf	??_isr+2,w
  7030  1624  008A               	movwf	10
  7031  1625  0875               	movf	??_isr+1,w
  7032  1626  0084               	movwf	4
  7033  1627  0E74               	swapf	??_isr^(0+-128),w
  7034  1628  0083               	movwf	3
  7035  1629  0EFE               	swapf	126,f
  7036  162A  0E7E               	swapf	126,w
  7037  162B  0009               	retfie
  7038  162C                     __end_of_isr:	
  7039                           
  7040                           	psect	intentry
  7041  0004                     __pintentry:	
  7042                           ;incstack = 0
  7043                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  7044                           
  7045  0004                     interrupt_function:	
  7046  007E                     saved_w	set	btemp
  7047  0004  00FE               	movwf	btemp
  7048  0005  0E03               	swapf	3,w
  7049  0006  00F4               	movwf	??_isr
  7050  0007  0804               	movf	4,w
  7051  0008  00F5               	movwf	??_isr+1
  7052  0009  080A               	movf	10,w
  7053  000A  00F6               	movwf	??_isr+2
  7054  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7055  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7056  000D  087F               	movf	btemp+1,w
  7057  000E  00F7               	movwf	??_isr+3
  7058  000F  160A  118A  2E1A   	ljmp	_isr
  7059                           
  7060                           	psect	text35
  7061  1675                     __ptext35:	
  7062 ;; *************** function _isrTimer0 *****************
  7063 ;; Defined at:
  7064 ;;		line 64 in file "timer0.h"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7078 ;;      Params:         0       0       0       0       0
  7079 ;;      Locals:         0       0       0       0       0
  7080 ;;      Temps:          4       0       0       0       0
  7081 ;;      Totals:         4       0       0       0       0
  7082 ;;Total ram usage:        4 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_isr
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function _isrTimer0
  7093  1675                     _isrTimer0:	
  7094                           
  7095                           ;timer0.h: 66: if (INTCONbits.T0IF == 1 && INTCONbits.T0IE == 1)
  7096                           
  7097                           ;incstack = 0
  7098                           ; Regs used in _isrTimer0: [wreg]
  7099  1675  1D0B               	btfss	11,2	;volatile
  7100  1676  0008               	return
  7101  1677  1E8B               	btfss	11,5	;volatile
  7102  1678  0008               	return
  7103                           
  7104                           ;timer0.h: 67: {
  7105                           ;timer0.h: 70: time = time + 255;
  7106  1679  30FF               	movlw	255
  7107  167A  00F0               	movwf	??_isrTimer0
  7108  167B  3000               	movlw	0
  7109  167C  00F1               	movwf	??_isrTimer0+1
  7110  167D  3000               	movlw	0
  7111  167E  00F2               	movwf	??_isrTimer0+2
  7112  167F  3000               	movlw	0
  7113  1680  00F3               	movwf	??_isrTimer0+3
  7114  1681  1683               	bsf	3,5	;RP0=1, select bank1
  7115  1682  1303               	bcf	3,6	;RP1=0, select bank1
  7116  1683  085D               	movf	_time^(0+128),w
  7117  1684  07F0               	addwf	??_isrTimer0,f
  7118  1685  085E               	movf	(_time+1)^(0+128),w
  7119  1686  1803               	skipnc
  7120  1687  0F5E               	incfsz	(_time+1)^(0+128),w
  7121  1688  2E8A               	goto	u268_20
  7122  1689  2E8B               	goto	u268_21
  7123  168A                     u268_20:	
  7124  168A  07F1               	addwf	??_isrTimer0+1,f
  7125  168B                     u268_21:	
  7126  168B  085F               	movf	(_time+2)^(0+128),w
  7127  168C  1803               	skipnc
  7128  168D  0F5F               	incfsz	(_time+2)^(0+128),w
  7129  168E  2E90               	goto	u268_22
  7130  168F  2E91               	goto	u268_23
  7131  1690                     u268_22:	
  7132  1690  07F2               	addwf	??_isrTimer0+2,f
  7133  1691                     u268_23:	
  7134  1691  0860               	movf	(_time+3)^(0+128),w
  7135  1692  1803               	skipnc
  7136  1693  0A60               	incf	(_time+3)^(0+128),w
  7137  1694  07F3               	addwf	??_isrTimer0+3,f
  7138  1695  0873               	movf	??_isrTimer0+3,w
  7139  1696  00E0               	movwf	(_time+3)^(0+128)
  7140  1697  0872               	movf	??_isrTimer0+2,w
  7141  1698  00DF               	movwf	(_time+2)^(0+128)
  7142  1699  0871               	movf	??_isrTimer0+1,w
  7143  169A  00DE               	movwf	(_time+1)^(0+128)
  7144  169B  0870               	movf	??_isrTimer0,w
  7145  169C  00DD               	movwf	_time^(0+128)
  7146                           
  7147                           ;timer0.h: 72: INTCONbits.T0IF = 0;
  7148  169D  110B               	bcf	11,2	;volatile
  7149  169E  0008               	return
  7150  169F                     __end_of_isrTimer0:	
  7151  007E                     btemp	set	126	;btemp
  7152  007E                     wtemp	set	126
  7153  007E                     wtemp0	set	126
  7154  0080                     wtemp1	set	128
  7155  0082                     wtemp2	set	130
  7156  0084                     wtemp3	set	132
  7157  0086                     wtemp4	set	134
  7158  0088                     wtemp5	set	136
  7159  007F                     wtemp6	set	127
  7160  007E                     ttemp	set	126
  7161  007E                     ttemp0	set	126
  7162  0081                     ttemp1	set	129
  7163  0084                     ttemp2	set	132
  7164  0087                     ttemp3	set	135
  7165  007F                     ttemp4	set	127
  7166  007E                     ltemp	set	126
  7167  007E                     ltemp0	set	126
  7168  0082                     ltemp1	set	130
  7169  0086                     ltemp2	set	134
  7170  0080                     ltemp3	set	128


Data Sizes:
    Strings     37
    Constant    20
    Data        7
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80     43      75
    BANK3            96      0      48
    BANK2            80      0       0

Pointer List with Targets:

    floatToASCII@returnVal	PTR unsigned char  size(1) Largest target is 8
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 

    LCDWriteString@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_4(CODE[10]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrTimer0

Critical Paths under _main in BANK0

    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___lwtoft->___lwdiv
    _initController->_initLCD
    _handlePB->_stopWatch
    _stopWatch->___fttol
    _initLCD->_LCDcmd
    _LCDcmd->_pulse
    _displayLCD->_floatToASCII
    _floatToASCII->___fttol
    ___lltoft->___ftpack
    ___fttol->___ftdiv
    ___ftneg->___lltoft
    ___ftmul->___lbtoft
    ___ftdiv->___ftadd
    ___ftadd->___ftmul
    _LCDWriteString->_LCDWriteChar
    _LCDWriteChar->_pulse
    _LCDSetCursor->_LCD4bitCmd
    _LCD4bitCmd->_pulse

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_displayLCD
    _handlePB->_stopWatch
    _displayLCD->_floatToASCII

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   71332
                                             41 BANK1      2     2      0
                    _currentGainInit
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      4     4      0   11660
                                             61 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        7     7      0   13900
                                             61 BANK0      7     7      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2170
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  22    22      0   21011
                                             70 BANK0      7     7      0
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                        9     5      4   11729
                                             61 BANK0      9     5      4
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2      92
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2746
                                              8 BANK0      4     1      3
                           ___ftpack
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1570
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     243
                            _initADC
                            _initLCD
                          _timeSetup
 ---------------------------------------------------------------------------------
 (2) _timeSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             3     3      0    7559
                                             17 BANK1      3     3      0
                            _initLCD
                          _stopWatch
 ---------------------------------------------------------------------------------
 (2) _stopWatch                                           21    17      4    7316
                                             75 BANK0      4     0      4
                                              0 BANK1     17    17      0
                            ___ftmul
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     243
                                              5 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                          22    20      2   16893
                                             19 BANK1     22    20      2
                       _LCDSetCursor
                     _LCDWriteString
                       _floatToASCII
 ---------------------------------------------------------------------------------
 (2) _floatToASCII                                        23    19      4   15830
                                             75 BANK0      4     0      4
                                              0 BANK1     19    19      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                           ___lltoft
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     476
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2601
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     508
                                             61 BANK0     14    10      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     173
                                             14 BANK0      3     0      3
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4138
                                             16 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3068
                                             45 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3346
                                             32 BANK0     13     7      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       7     5      2     629
                                              5 BANK0      7     5      2
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     222
                                              3 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     110
                                              2 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _currentGainInit                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0       0
                                              4 COMMON     4     4      0
                          _isrTimer0
 ---------------------------------------------------------------------------------
 (6) _isrTimer0                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _currentGainInit
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     _floatToASCII
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftneg
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwdiv (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___lwdiv (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
   _handlePB
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _stopWatch
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwdiv (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___lwdiv (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _timeSetup
   _sampleBatteryCells
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _sampleVoltage
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___lwdiv
       ___lwtoft
         ___ftpack
         ___lwdiv (ARG)
       _analogRead
   _sampleCurrent
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lbtoft
       ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead

 _isr (ROOT)
   _isrTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      30       8       50.0%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2B      4B       6       93.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D9      12        0.0%
ABS                  0      0      D9      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jul 06 22:29:14 2015

                ?_LCDSetBits 0070                            pc 0002                  __CFG_CP$OFF 0000  
                         fsr 0004                 ___ftadd@exp1 004C                 ___ftadd@exp2 004B  
               ___ftadd@sign 004A                          l120 1633                          l121 1634  
                        l122 1638                          l123 1639                          l124 163D  
                        l300 07FD                          l125 163E                          l126 1642  
                        l303 166C                          l304 166A                          l224 17DE  
                        l315 094A                          l308 1673                          l600 06DF  
                        l660 0B4F                          l576 0A3C                          l577 0A44  
                        l569 0A27                          _RB0 0030                          _RB1 0031  
                        _RC0 0038                          _RB2 0032                          _RC1 0039  
                        _RB3 0033                          _RD0 0040                          _RC2 003A  
                        _RB4 0034                          _RA6 002E                          _RD1 0041  
                        _RC3 003B                          _RB5 0035                          _RA7 002F  
                        _RD2 0042                          _RD4 0044                          _RD5 0045  
                        _RD6 0046                          _RD7 0047                 __CFG_CPD$OFF 0000  
              ?_floatToASCII 006B                          _isr 161A                          fsr0 0004  
                        indf 0000                ?_LCDSetCursor 0070                 __CFG_IESO$ON 0000  
               ___ftdiv@cntr 0057                 ___ftdiv@sign 005C                         l2010 09E6  
                       l2020 170C                         l2006 09D9                         l2120 007B  
                       l2200 0FEC                         l2106 08B3                         l2018 16FA  
                       l2202 0FF6                         l2042 089F                         l2034 087B  
                       l2140 01DC                         l2036 0889                         l2126 0095  
                       l2046 08AA                         l2160 0336                         l2224 0A90  
                       l2312 0B87                         l2170 0350                         l2138 01D8  
                       l2218 0A6F                         l1700 0A0C                         l2164 033B  
                       l2332 0D73                         l2094 17AD                         l1710 0A3A  
                       l1702 0A11                         l2158 01F8                         l2406 076F  
                       l2422 07E8                         l2190 0F26                         l2318 0BA6  
                       l1712 0A2C                         l2186 0F06                         l2338 0D92  
                       l1812 06A5                         l1830 06F1                         l1814 06B1  
                       l1806 0690                         l1902 0E55                         l1824 06CF  
                       l1816 06B6                         l1834 0703                         l1826 06DB  
                       l1818 06BA                         l1930 0ECC                         l1914 0E94  
                       l1770 0910                         l2538 07EF                         l1844 0726  
                       l1860 0CD8                         l2388 0966                         l1694 09F9  
                       l1854 0CC2                         l1926 0EBC                         l1918 0EA4  
                       l1766 08FA                         l2398 0981                         l2478 1731  
                       l1784 0660                         l1698 0A00                         l1794 0676  
                       l1882 0D3C                         l1874 0D1D                         l1954 0AF5  
                       l1788 0667                         l1980 0B44                         l1972 0B27  
                       l1982 0B52                         l1974 0B37                         l1896 0E3F  
                       l1986 0B60                         l1996 09A1                         l1998 09B1  
                       ?_isr 0070                         STR_1 0837                         STR_2 082E  
                       STR_3 0840                         STR_4 0824                         u2005 0CFC  
                       u2015 0D1E                         u2025 0D2F                         u2035 0D3D  
                       u2115 0EA5                         u2125 0EAD                         u2215 0AFC  
                       u3007 093B                         u3017 0976                         u2075 0E61  
                       u2315 09A5                         u3107 0CA4                         u3027 0C13  
                       u3117 1600                         u2165 0ECD                         u2085 0E73  
                       u2245 0B28                         u3037 0C26                         u2405 087E  
                       u2175 0ED5                         u2335 09B3                         u3047 0C35  
                       u2345 09C8                         u1705 0912                         u3057 0C45  
                       u2425 088A                         u1635 0A4B                         u1555 0A05  
                       u2275 0B46                         u2355 09DA                         u1715 091A  
                       u3067 0C55                         u2435 0896                         u2620 0F4F  
              __CFG_DEBUG$ON 0000                         u2541 016D                         u2525 0079  
                       u3077 0C71                         u2621 0F50                         u2445 08A0  
                       u2542 0178                         u2630 0F61                         u2622 0F55  
                       u1575 0A20                         u2375 16FF                         u2543 0183  
                       u2535 0093                         u1655 16E0                         u3087 0C82  
                       u2631 0F62                         u2623 0F56                         u2632 0F67  
                       u1665 16B5                         u1825 0691                         u3097 0C93  
                       u2633 0F68                         u2810 074A                         u2475 179E  
                       u1595 0A33                         u1915 06D0                         u2820 0760  
                       u2485 17B8                         u2645 0A6D                         u2725 0B85  
                       u1855 06A6                         u2655 0A8E                         u2735 0BA4  
                       u2745 0D71                         u2595 0210                         u2755 0D90  
                       u1885 06BB                         u2783 0964                         u1995 0CEA  
                       u2967 0B71                         u2977 0364                         u2987 04D0  
                       u2997 17D6                         _TMR0 0001                         _main 1723  
               ___ftpack@arg 0020                 ___ftpack@exp 0023                         _time 00DD  
                       btemp 007E                         ltemp 007E                         start 0012  
                       ttemp 007E                         wtemp 007E                  LCDSetBits@a 0020  
              __CFG_MCLRE$ON 0000                 ___ftmul@cntr 003E                 ___ftmul@sign 003F  
               ___fttol@exp1 006A                 ___fttol@lval 0066                        ??_isr 0074  
              ?_LCDWriteChar 0070          __size_of_LCD4bitCmd 0011                        ?_main 0070  
            __end_of___ftadd 0740                __CFG_WDTE$OFF 0000              __end_of___ftdiv 0D62  
            __end_of___ftneg 0853                        _ANSEL 0091              __end_of___lldiv 09EF  
            __end_of___ftmul 0EFA              __end_of___fttol 0B69               ??_floatToASCII 00A0  
            __end_of___lwdiv 08AF              __end_of_cellRDB 0824                        _PORTA 0005  
                      _PORTB 0006                        _PORTC 0007                        _PORTD 0008  
                      _PORTE 0009               ??_LCDSetCursor 0023                        _TRISA 0085  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _TRISE 0089          ___lmul@multiplicand 0024                 ___lltoft@exp 002D  
             __CFG_FCMEN$OFF 0000              __end_of_initADC 15F9              __end_of_initLCD 0CAA  
            __end_of_refVolt 0816                ___ftpack@sign 0024                        _pulse 15F9  
        __size_of_LCDSetBits 0018               __CFG_BOREN$OFF 0000                        pclath 000A  
                      ltemp0 007E                        ltemp1 0082                        ltemp2 0086  
                      ltemp3 0080                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F        __end_of_sampleCurrent 0E27  
          ??_sampleReference 005D              __initialization 0015        __end_of_sampleVoltage 0ADB  
               __end_of_main 1756               ??_LCDWriteChar 0022                       ??_main 00C9  
              ___fttol@sign1 0065       _sampleBatteryCells$871 006A                       _ADCON0 001F  
                     _ADCON1 009F                       _ADRESH 001E                       _ADRESL 009E  
                     ?_pulse 0070             __end_of___ftpack 0A5D             __end_of___lbtoft 0871  
                     _LCDCON 0107             __end_of___lltoft 1723                       _LCDcmd 16C9  
           __end_of_cell1RDT 0818             __end_of_cell2RDT 081A             __end_of_cell3RDT 081C  
           __end_of_cell4RDT 081E             __end_of___lwtoft 165C             __end_of_cell5RDT 0820  
           __end_of_cell6RDT 0822                       u268_20 168A                       u268_21 168B  
                     u268_22 1690                       u268_23 1691              _currentGainInit 165C  
             __CFG_PWRTE$OFF 0000             __end_of_handlePB 098F               _LCDWriteString 08AF  
                     ___lmul 08F0                    ??___ftadd 0046                    ??___ftdiv 0053  
                  ??___ftneg 0031                    ??___lldiv 0028                    ??___ftmul 0036  
                  ??___fttol 0061                    ??___lwdiv 0024                       _btmStr 0190  
                     _topStr 01A0                    ??_initADC 0020        ___ftmul@f3_as_product 003B  
                  ??_initLCD 0025                 __pdataCOMMON 0078      __size_of_initController 0038  
                     saved_w 007E            sampleCurrent@temp 0062                 ??_LCD4bitCmd 0022  
              floatToASCII@i 00B2                floatToASCII@j 00A7      __end_of__initialization 0054  
                 ___ftadd@f1 0040                   ___ftadd@f2 0043       __end_of_LCDWriteString 08F0  
                 ___ftdiv@f1 0050                   ___ftdiv@f2 004D                   ___ftdiv@f3 0058  
       __end_of_floatToASCII 035C                   ___ftneg@f1 002E                   ___lbtoft@c 002F  
       __end_of_LCDSetCursor 17C7                LCDSetCursor@a 0025                   ___ftmul@f1 0030  
                 ___ftmul@f2 0033                   ___fttol@f1 005D               __pcstackCOMMON 0070  
               __pidataBANK1 15CF                 ??_LCDSetBits 0020                   ___lltoft@c 0028  
              __end_of_pulse 1609   __end_of_sampleBatteryCells 0637           __end_of_LCD4bitCmd 161A  
                 ___lwtoft@c 0028               _OPTION_REGbits 0081      __end_of_currentGainInit 1675  
                    ??_pulse 0020         __end_of_LCDWriteChar 16C9                   __pbssBANK0 006F  
                 __pbssBANK1 00CB                   __pbssBANK3 0190                      ?_LCDcmd 0070  
         __end_of_LCDSetBits 1644          currentGainInit@gain 0020                      LCDcmd@a 0024  
                 _analogRead 17C7              ?_LCDWriteString 0025           __size_of_isrTimer0 002A  
                 __pmaintext 1723                      ?___lmul 0020                   __pintentry 0004  
                    _CCP1CON 0017                      _CCP2CON 001D               ___lmul@product 0029  
                  ?___ftpack 0020                    ?___lbtoft 0028                    ?___lltoft 0028  
                  ?___lwtoft 0028               displayLCD@disp 00B3           __size_of_timeSetup 000C  
                  ?_handlePB 0070                   _displayLCD 0740              _sampleReference 0B69  
                 __stringtab 0800           __size_of_stopWatch 0106              __size_of_LCDcmd 002B  
          __end_of_convConst 0813              __size_of___lmul 0041                      ___ftadd 0637  
                    ___ftdiv 0CAA                      ___ftneg 0849                      ___lldiv 098F  
                    ___ftmul 0E27                      ___fttol 0ADB                      ___lwdiv 0871  
                    _cellRDB 0822                   ??___ftpack 0025                   ??___lbtoft 002B  
                 ??___lltoft 002C                      __ptext1 0B69                      __ptext2 0D62  
                    __ptext3 0853                      __ptext4 035C                      __ptext5 0A5D  
                    __ptext6 17C7                      __ptext7 1644                      __ptext8 0871  
                    __ptext9 1756                   ??___lwtoft 002B                      _initADC 15EA  
                    _initLCD 0C01               _initController 1756                      _current 00E5  
               __size_of_isr 0012                      _refVolt 0813            __end_of_isrTimer0 169F  
                 ??_handlePB 00B1                      _supVolt 0078                      clrloop0 15D7  
           ?_currentGainInit 0070         end_of_initialization 0054        __size_of_floatToASCII 0304  
          _sampleCurrent$872 005D        __size_of_LCDSetCursor 0039                LCDWriteChar@a 0024  
          __end_of_timeSetup 15EA                  ?_analogRead 0020              ___lldiv@divisor 0020  
            ___lldiv@counter 002D            __end_of_stopWatch 1000       __end_of_initController 178E  
     __size_of_sampleCurrent 00C5      __end_of_sampleReference 0C01                 _floatToASCII 0058  
      __size_of_LCDWriteChar 002A                 _LCDSetCursor 178E                  ?_displayLCD 00B3  
     __size_of_sampleVoltage 007E                  ___ftdiv@exp 005B               __end_of_LCDcmd 16F4  
                ___ftmul@exp 003A               __end_of___lmul 0931                 _LCDWriteChar 169F  
              __pidataCOMMON 15D2              ?_initController 0070          __size_of_analogRead 0039  
        start_initialization 0015        floatToASCII@precision 006E                  __end_of_isr 162C  
      floatToASCII@returnVal 00B1           _sampleBatteryCells 035C             ??_LCDWriteString 0027  
                   ??_LCDcmd 0022          ?_sampleBatteryCells 0070                _sampleCurrent 0D62  
                   ??___lmul 0028                _sampleVoltage 0A5D          __size_of_displayLCD 00BE  
                __pdataBANK1 00E8         ??_sampleBatteryCells 0066            __size_of___ftpack 006E  
          __size_of___lbtoft 001E            __size_of___lltoft 002F             ?_sampleReference 0070  
                __pbssCOMMON 007C                    ___latbits 0002            __size_of___lwtoft 0018  
              __pcstackBANK0 0020                __pcstackBANK1 00A0            __size_of_handlePB 005E  
             ?_sampleCurrent 0070             ___lwdiv@dividend 0022             sampleReference@i 005F  
             ?_sampleVoltage 005D                     ?___ftadd 0040                     ?___ftdiv 004D  
                   ?___ftneg 002E                     ?___lldiv 0020                     ?___ftmul 0030  
                   ?___fttol 005D                     ?___lwdiv 0020                stopWatch@mode 00AC  
              stopWatch@temp 00AD                    _convConst 0810                    __pstrings 0800  
            displayLCD@F2777 01B0              displayLCD@F2779 01B8                     ?_initADC 0070  
                   ?_initLCD 0070             ___lwdiv@quotient 0025            sampleVoltage@chan 0061  
             __size_of_pulse 0010            sampleVoltage@temp 0064                    _isrTimer0 1675  
            displayLCD@temp1 00B9              displayLCD@temp2 00C1            interrupt_function 0004  
               ??_analogRead 0022                    clear_ram0 15D6                    _timeSetup 15DE  
                 _ADCON0bits 001F                  __stringbase 080F                    _stopWatch 0EFA  
         __end_of_analogRead 1800                 ??_displayLCD 00B5           stopWatch@startTime 00E1  
          ___lmul@multiplier 0020                   ?_isrTimer0 0070              ??_sampleCurrent 005D  
   __size_of_currentGainInit 0019              ??_sampleVoltage 0061                   ?_timeSetup 0070  
           ??_initController 0028                   _CMCON0bits 009C           __end_of_displayLCD 07FE  
           __size_of___ftadd 0109             __size_of___ftdiv 00B8             __size_of___ftneg 000A  
           __size_of___lldiv 0060             __size_of___ftmul 00D3             __size_of___fttol 008E  
           __size_of___lwdiv 003E                     ___ftpack 09EF                     ___lbtoft 0853  
         __end_of__stringtab 0810                     ___lltoft 16F4                     _cell1RDT 0816  
                   _cell2RDT 0818                     _cell3RDT 081A                     _cell4RDT 081C  
                   _cell5RDT 081E                     ___lwtoft 1644                     _cell6RDT 0820  
                _currentGain 007B             __size_of_initADC 000F             __size_of_initLCD 00A9  
                 ?_stopWatch 006B                     _cellVolt 00CB              ___lwdiv@divisor 0020  
                   _handlePB 0931              ___lwdiv@counter 0027                     __ptext10 15DE  
                   __ptext11 15EA                     __ptext20 098F                     __ptext12 0931  
                   __ptext21 0ADB                     __ptext13 0EFA                     __ptext30 1609  
                   __ptext22 0849                     __ptext14 0C01                     __ptext31 15F9  
                   __ptext23 0E27                     __ptext15 16C9                     __ptext32 162C  
                   __ptext24 0CAA                     __ptext16 0740                     __ptext33 165C  
                   __ptext25 0637                     __ptext17 0058                     __ptext34 161A  
                   __ptext26 09EF                     __ptext18 08F0                     __ptext35 1675  
                   __ptext27 08AF                     __ptext19 16F4                     __ptext28 169F  
                   __ptext29 178E                   _LCD4bitCmd 1609               _LCDDisplayMode 006F  
              __size_of_main 0033                     _refValue 007C              LCDWriteString@a 0025  
            LCDWriteString@i 002A                   _LCDSetBits 162C                     _shuntRes 00E8  
        floatToASCII@leading 00A6          floatToASCII@prevSum 00A9                   _INTCONbits 000B  
             analogRead@chan 0024               sampleCurrent@i 0060                  ??_isrTimer0 0070  
                   intlevel1 0000             ___lldiv@dividend 0024                   _LVDCONbits 0109  
                LCD4bitCmd@a 0022                    stringcode 080A                   _OSCCONbits 008F  
                ??_timeSetup 0020           floatToASCII@scaler 00AD            ??_currentGainInit 0020  
__size_of_sampleBatteryCells 02DB             ___lldiv@quotient 0029                  ??_stopWatch 00A0  
          floatToASCII@j_342 00A5               sampleVoltage@i 0062                     stringdir 080A  
                   stringtab 0800          analogRead@returnVal 0025                  ?_LCD4bitCmd 0070  
         __CFG_FOSC$INTOSCIO 0000     __size_of_sampleReference 0098              floatToASCII@num 006B  
    __size_of_LCDWriteString 0041  
