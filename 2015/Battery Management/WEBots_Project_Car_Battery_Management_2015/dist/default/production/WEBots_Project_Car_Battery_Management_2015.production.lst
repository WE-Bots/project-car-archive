

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jul 12 15:09:13 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011B                     	;# 
   138  011C                     	;# 
   139  011D                     	;# 
   140  011E                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143                           
   144                           	psect	idataCOMMON
   145  146E                     __pidataCOMMON:	
   146                           
   147                           ;initializer for _supVolt
   148  146E  3466               	retlw	102
   149  146F  3486               	retlw	134
   150  1470  3440               	retlw	64
   151                           
   152                           ;initializer for _currentGain
   153  1471  34C8               	retlw	200
   154                           
   155                           	psect	idataBANK1
   156  146B                     __pidataBANK1:	
   157                           
   158                           ;initializer for _shuntRes
   159  146B  34D7               	retlw	215
   160  146C  3423               	retlw	35
   161  146D  343C               	retlw	60
   162                           
   163                           	psect	strings
   164  0800                     __pstrings:	
   165  0800                     stringtab:	
   166  0800                     __stringtab:	
   167                           
   168                           ;	String table - string pointers are 1 byte each
   169  0800  1BFF               	btfsc	btemp+1,7
   170  0801  280A               	ljmp	stringcode
   171  0802  1383               	bcf	3,7
   172  0803  187F               	btfsc	btemp+1,0
   173  0804  1783               	bsf	3,7
   174  0805  0800               	movf	0,w
   175  0806  0A84               	incf	4,f
   176  0807  1903               	skipnz
   177  0808  0AFF               	incf	btemp+1,f
   178  0809  0008               	return
   179  080A                     stringcode:	
   180  080A                     stringdir:	
   181  080A  3008               	movlw	high stringdir
   182  080B  008A               	movwf	10
   183  080C  0804               	movf	4,w
   184  080D  0A84               	incf	4,f
   185  080E  0782               	addwf	2,f
   186  080F                     __stringbase:	
   187  080F  3400               	retlw	0
   188  0810                     __end_of__stringtab:	
   189  0810                     _cell1RR:	
   190  0810  34CD               	retlw	205
   191  0811  347C               	retlw	124
   192  0812  343F               	retlw	63
   193  0813                     __end_of_cell1RR:	
   194  0813                     _cell2RR:	
   195  0813  3472               	retlw	114
   196  0814  3407               	retlw	7
   197  0815  3440               	retlw	64
   198  0816                     __end_of_cell2RR:	
   199  0816                     _cell3RR:	
   200  0816  34AF               	retlw	175
   201  0817  3490               	retlw	144
   202  0818  3440               	retlw	64
   203  0819                     __end_of_cell3RR:	
   204  0819                     _cell4RR:	
   205  0819  3462               	retlw	98
   206  081A  34D4               	retlw	212
   207  081B  3440               	retlw	64
   208  081C                     __end_of_cell4RR:	
   209  081C                     _cell5RR:	
   210  081C  3481               	retlw	129
   211  081D  3410               	retlw	16
   212  081E  3441               	retlw	65
   213  081F                     __end_of_cell5RR:	
   214  081F                     _cell6RR:	
   215  081F  341F               	retlw	31
   216  0820  3432               	retlw	50
   217  0821  3441               	retlw	65
   218  0822                     __end_of_cell6RR:	
   219  0822                     _cellVoltL:	
   220  0822  34CD               	retlw	205
   221  0823  344C               	retlw	76
   222  0824  3440               	retlw	64
   223  0825                     __end_of_cellVoltL:	
   224  0825                     _convConst:	
   225  0825  3412               	retlw	18
   226  0826  3403               	retlw	3
   227  0827  343E               	retlw	62
   228  0828                     __end_of_convConst:	
   229  0828                     _refVolt:	
   230  0828  3462               	retlw	98
   231  0829  3490               	retlw	144
   232  082A  343F               	retlw	63
   233  082B                     __end_of_refVolt:	
   234  082B                     _sampleNum:	
   235  082B  342C               	retlw	44
   236  082C                     __end_of_sampleNum:	
   237  001F                     _ADCON0	set	31
   238  001F                     _ADCON0bits	set	31
   239  001E                     _ADRESH	set	30
   240  0017                     _CCP1CON	set	23
   241  001D                     _CCP2CON	set	29
   242  000B                     _INTCONbits	set	11
   243  0005                     _PORTA	set	5
   244  0006                     _PORTB	set	6
   245  0007                     _PORTC	set	7
   246  0008                     _PORTD	set	8
   247  0009                     _PORTE	set	9
   248  0001                     _TMR0	set	1
   249  002E                     _RA6	set	46
   250  002F                     _RA7	set	47
   251  0030                     _RB0	set	48
   252  0031                     _RB1	set	49
   253  0032                     _RB2	set	50
   254  0033                     _RB3	set	51
   255  0034                     _RB4	set	52
   256  0035                     _RB5	set	53
   257  0038                     _RC0	set	56
   258  0039                     _RC1	set	57
   259  003A                     _RC2	set	58
   260  003B                     _RC3	set	59
   261  0040                     _RD0	set	64
   262  0041                     _RD1	set	65
   263  0042                     _RD2	set	66
   264  0044                     _RD4	set	68
   265  0045                     _RD5	set	69
   266  0047                     _RD7	set	71
   267  009F                     _ADCON1	set	159
   268  009E                     _ADRESL	set	158
   269  0091                     _ANSEL	set	145
   270  009C                     _CMCON0bits	set	156
   271  0081                     _OPTION_REGbits	set	129
   272  008F                     _OSCCONbits	set	143
   273  0085                     _TRISA	set	133
   274  0086                     _TRISB	set	134
   275  0087                     _TRISC	set	135
   276  0088                     _TRISD	set	136
   277  0089                     _TRISE	set	137
   278  0107                     _LCDCON	set	263
   279  0109                     _LVDCONbits	set	265
   280  082C                     STR_4:	
   281  082C  3420               	retlw	32	;' '
   282  082D  3441               	retlw	65	;'A'
   283  082E  3420               	retlw	32	;' '
   284  082F  3420               	retlw	32	;' '
   285  0830  3420               	retlw	32	;' '
   286  0831  3420               	retlw	32	;' '
   287  0832  3420               	retlw	32	;' '
   288  0833  3420               	retlw	32	;' '
   289  0834  3420               	retlw	32	;' '
   290  0835  3400               	retlw	0
   291  0836                     STR_8:	
   292  0836  3420               	retlw	32	;' '
   293  0837  3456               	retlw	86	;'V'
   294  0838  3420               	retlw	32	;' '
   295  0839  3420               	retlw	32	;' '
   296  083A  3420               	retlw	32	;' '
   297  083B  3420               	retlw	32	;' '
   298  083C  3420               	retlw	32	;' '
   299  083D  3420               	retlw	32	;' '
   300  083E  3420               	retlw	32	;' '
   301  083F  3400               	retlw	0
   302  0840                     STR_2:	
   303  0840  3420               	retlw	32	;' '
   304  0841  3456               	retlw	86	;'V'
   305  0842  3420               	retlw	32	;' '
   306  0843  3420               	retlw	32	;' '
   307  0844  3420               	retlw	32	;' '
   308  0845  3420               	retlw	32	;' '
   309  0846  3420               	retlw	32	;' '
   310  0847  3420               	retlw	32	;' '
   311  0848  3400               	retlw	0
   312  0849                     STR_1:	
   313  0849  3456               	retlw	86	;'V'
   314  084A  346F               	retlw	111	;'o'
   315  084B  346C               	retlw	108	;'l'
   316  084C  3474               	retlw	116	;'t'
   317  084D  3461               	retlw	97	;'a'
   318  084E  3467               	retlw	103	;'g'
   319  084F  3465               	retlw	101	;'e'
   320  0850  343A               	retlw	58	;':'
   321  0851  3400               	retlw	0
   322  0852                     STR_3:	
   323  0852  3443               	retlw	67	;'C'
   324  0853  3475               	retlw	117	;'u'
   325  0854  3472               	retlw	114	;'r'
   326  0855  3472               	retlw	114	;'r'
   327  0856  3465               	retlw	101	;'e'
   328  0857  346E               	retlw	110	;'n'
   329  0858  3474               	retlw	116	;'t'
   330  0859  343A               	retlw	58	;':'
   331  085A  3400               	retlw	0
   332  085B                     STR_5:	
   333  085B  3443               	retlw	67	;'C'
   334  085C  3465               	retlw	101	;'e'
   335  085D  346C               	retlw	108	;'l'
   336  085E  346C               	retlw	108	;'l'
   337  085F  3420               	retlw	32	;' '
   338  0860  3431               	retlw	49	;'1'
   339  0861  343A               	retlw	58	;':'
   340  0862  3400               	retlw	0
   341  0863                     STR_7:	
   342  0863  3443               	retlw	67	;'C'
   343  0864  3465               	retlw	101	;'e'
   344  0865  346C               	retlw	108	;'l'
   345  0866  346C               	retlw	108	;'l'
   346  0867  3420               	retlw	32	;' '
   347  0868  3432               	retlw	50	;'2'
   348  0869  343A               	retlw	58	;':'
   349  086A  3400               	retlw	0
   350  086B                     STR_9:	
   351  086B  3443               	retlw	67	;'C'
   352  086C  3465               	retlw	101	;'e'
   353  086D  346C               	retlw	108	;'l'
   354  086E  346C               	retlw	108	;'l'
   355  086F  3420               	retlw	32	;' '
   356  0870  3433               	retlw	51	;'3'
   357  0871  343A               	retlw	58	;':'
   358  0872  3400               	retlw	0
   359  0873                     STR_11:	
   360  0873  3443               	retlw	67	;'C'
   361  0874  3465               	retlw	101	;'e'
   362  0875  346C               	retlw	108	;'l'
   363  0876  346C               	retlw	108	;'l'
   364  0877  3420               	retlw	32	;' '
   365  0878  3434               	retlw	52	;'4'
   366  0879  343A               	retlw	58	;':'
   367  087A  3400               	retlw	0
   368  087B                     STR_13:	
   369  087B  3443               	retlw	67	;'C'
   370  087C  3465               	retlw	101	;'e'
   371  087D  346C               	retlw	108	;'l'
   372  087E  346C               	retlw	108	;'l'
   373  087F  3420               	retlw	32	;' '
   374  0880  3435               	retlw	53	;'5'
   375  0881  343A               	retlw	58	;':'
   376  0882  3400               	retlw	0
   377  0883                     STR_15:	
   378  0883  3443               	retlw	67	;'C'
   379  0884  3465               	retlw	101	;'e'
   380  0885  346C               	retlw	108	;'l'
   381  0886  346C               	retlw	108	;'l'
   382  0887  3420               	retlw	32	;' '
   383  0888  3436               	retlw	54	;'6'
   384  0889  343A               	retlw	58	;':'
   385  088A  3400               	retlw	0
   386  0836                     
   387                           ; #config settings
   388  0000                     
   389                           	psect	cinit
   390  0015                     start_initialization:	
   391  0015                     __initialization:	
   392                           
   393                           ; Clear objects allocated to COMMON
   394  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   395  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   396                           
   397                           ; Clear objects allocated to BANK1
   398  0017  1383               	bcf	3,7	;select IRP bank0
   399  0018  30CD               	movlw	low __pbssBANK1
   400  0019  0084               	movwf	4
   401  001A  30EB               	movlw	low (__pbssBANK1+30)
   402  001B  160A  118A  2472  120A  118A  	fcall	clear_ram0
   403                           
   404                           ; Clear objects allocated to BANK3
   405  0020  1783               	bsf	3,7	;select IRP bank2
   406  0021  3090               	movlw	low __pbssBANK3
   407  0022  0084               	movwf	4
   408  0023  30C0               	movlw	low (__pbssBANK3+48)
   409  0024  160A  118A  2472  120A  118A  	fcall	clear_ram0
   410                           
   411                           ; Initialize objects allocated to BANK1
   412  0029  1683               	bsf	3,5	;RP0=1, select bank1
   413  002A  1303               	bcf	3,6	;RP1=0, select bank1
   414  002B  160A  118A  246B  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   415  0030  00EB               	movwf	__pdataBANK1& (0+127)
   416  0031  160A  118A  246C  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   417  0036  00EC               	movwf	(__pdataBANK1+1)& (0+127)
   418  0037  160A  118A  246D  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   419  003C  00ED               	movwf	(__pdataBANK1+2)& (0+127)
   420                           
   421                           ; Initialize objects allocated to COMMON
   422  003D  160A  118A  246E  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   423  0042  00F8               	movwf	__pdataCOMMON& (0+127)
   424  0043  160A  118A  246F  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   425  0048  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   426  0049  160A  118A  2470  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   427  004E  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
   428  004F  160A  118A  2471   	fcall	__pidataCOMMON+3	;fetch initializer
   429  0052  00FB               	movwf	(__pdataCOMMON+3)& (0+127)
   430  0053                     end_of_initialization:	
   431                           ;End of C runtime variable initialization code
   432                           
   433  0053                     __end_of__initialization:	
   434  0053  0183               	clrf	3
   435  0054  120A  118A  2FCD   	ljmp	_main	;jump to C main() function
   436                           
   437                           	psect	bssCOMMON
   438  007C                     __pbssCOMMON:	
   439  007C                     _refValue:	
   440  007C                     	ds	2
   441                           
   442                           	psect	dataCOMMON
   443  0078                     __pdataCOMMON:	
   444  0078                     _supVolt:	
   445  0078                     	ds	3
   446  007B                     _currentGain:	
   447  007B                     	ds	1
   448                           
   449                           	psect	bssBANK1
   450  00CD                     __pbssBANK1:	
   451  00CD                     _cellVolt:	
   452  00CD                     	ds	18
   453  00DF                     _time:	
   454  00DF                     	ds	4
   455  00E3                     stopWatch@startTime:	
   456  00E3                     	ds	4
   457  00E7                     _current:	
   458  00E7                     	ds	3
   459  00EA                     _LCDDisplayMode:	
   460  00EA                     	ds	1
   461                           
   462                           	psect	dataBANK1
   463  00EB                     __pdataBANK1:	
   464  00EB                     _shuntRes:	
   465  00EB                     	ds	3
   466                           
   467                           	psect	bssBANK3
   468  0190                     __pbssBANK3:	
   469  0190                     _btmStr:	
   470  0190                     	ds	16
   471  01A0                     _topStr:	
   472  01A0                     	ds	16
   473  01B0                     displayLCD@F2781:	
   474  01B0                     	ds	8
   475  01B8                     displayLCD@F2783:	
   476  01B8                     	ds	8
   477                           
   478                           	psect	clrtext
   479  1472                     clear_ram0:	
   480                           ;	Called with FSR containing the base address, and
   481                           ;	W with the last address+1
   482                           
   483  1472  0064               	clrwdt	;clear the watchdog before getting into this loop
   484  1473                     clrloop0:	
   485  1473  0180               	clrf	0	;clear RAM location pointed to by FSR
   486  1474  0A84               	incf	4,f	;increment pointer
   487  1475  0604               	xorwf	4,w	;XOR with final address
   488  1476  1903               	btfsc	3,2	;have we reached the end yet?
   489  1477  3400               	retlw	0	;all done for this memory range, return
   490  1478  0604               	xorwf	4,w	;XOR again to restore value
   491  1479  2C73               	goto	clrloop0	;do the next byte
   492                           
   493                           	psect	cstackBANK1
   494  00A0                     __pcstackBANK1:	
   495  00A0                     ??_floatToASCII:	
   496  00A0                     ??_stopWatch:	
   497                           ; 0 bytes @ 0x0
   498                           
   499                           
   500                           ; 0 bytes @ 0x0
   501  00A0                     	ds	5
   502  00A5                     floatToASCII@j_342:	
   503                           
   504                           ; 1 bytes @ 0x5
   505  00A5                     	ds	1
   506  00A6                     floatToASCII@leading:	
   507                           
   508                           ; 1 bytes @ 0x6
   509  00A6                     	ds	1
   510  00A7                     floatToASCII@decPoint:	
   511                           
   512                           ; 1 bytes @ 0x7
   513  00A7                     	ds	1
   514  00A8                     floatToASCII@j:	
   515                           
   516                           ; 2 bytes @ 0x8
   517  00A8                     	ds	2
   518  00AA                     floatToASCII@k:	
   519                           
   520                           ; 1 bytes @ 0xA
   521  00AA                     	ds	1
   522  00AB                     floatToASCII@prevSum:	
   523                           
   524                           ; 4 bytes @ 0xB
   525  00AB                     	ds	1
   526  00AC                     stopWatch@mode:	
   527                           
   528                           ; 1 bytes @ 0xC
   529  00AC                     	ds	1
   530  00AD                     stopWatch@temp:	
   531                           
   532                           ; 4 bytes @ 0xD
   533  00AD                     	ds	2
   534  00AF                     floatToASCII@scaler:	
   535                           
   536                           ; 4 bytes @ 0xF
   537  00AF                     	ds	2
   538  00B1                     ??_handlePB:	
   539                           
   540                           ; 0 bytes @ 0x11
   541  00B1                     	ds	2
   542  00B3                     floatToASCII@i:	
   543                           
   544                           ; 1 bytes @ 0x13
   545  00B3                     	ds	1
   546  00B4                     floatToASCII@returnVal:	
   547                           
   548                           ; 1 bytes @ 0x14
   549  00B4                     	ds	1
   550  00B5                     ?_displayLCD:	
   551  00B5                     displayLCD@disp:	
   552                           ; 0 bytes @ 0x15
   553                           
   554                           
   555                           ; 2 bytes @ 0x15
   556  00B5                     	ds	2
   557  00B7                     ??_displayLCD:	
   558                           
   559                           ; 0 bytes @ 0x17
   560  00B7                     	ds	4
   561  00BB                     displayLCD@temp1:	
   562                           
   563                           ; 8 bytes @ 0x1B
   564  00BB                     	ds	8
   565  00C3                     displayLCD@temp2:	
   566                           
   567                           ; 8 bytes @ 0x23
   568  00C3                     	ds	8
   569  00CB                     ??_main:	
   570                           
   571                           ; 0 bytes @ 0x2B
   572  00CB                     	ds	2
   573                           
   574                           	psect	cstackCOMMON
   575  0070                     __pcstackCOMMON:	
   576  0070                     ?_LCDSetBits:	
   577  0070                     ?_pulse:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0070                     ?_LCDcmd:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0070                     ?_currentGainInit:	
   584                           ; 0 bytes @ 0x0
   585                           
   586  0070                     ?_sampleReference:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0070                     ?_sampleCurrent:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_sampleBatteryCells:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0070                     ?_handlePB:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0070                     ?_initLCD:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0070                     ?_LCD4bitCmd:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0070                     ?_LCDWriteChar:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0070                     ?_LCDSetCursor:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_timeSetup:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0070                     ?_isrTimer0:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ??_isrTimer0:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0070                     ?_initADC:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_initController:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?_isr:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_main:	
   629                           ; 0 bytes @ 0x0
   630                           
   631                           
   632                           ; 0 bytes @ 0x0
   633  0070                     	ds	4
   634  0074                     ??_isr:	
   635                           
   636                           ; 0 bytes @ 0x4
   637  0074                     	ds	4
   638                           
   639                           	psect	cstackBANK0
   640  0020                     __pcstackBANK0:	
   641  0020                     ??_LCDSetBits:	
   642  0020                     ??_pulse:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0020                     ??_currentGainInit:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0020                     ??_timeSetup:	
   649                           ; 0 bytes @ 0x0
   650                           
   651  0020                     ??_initADC:	
   652                           ; 0 bytes @ 0x0
   653                           
   654  0020                     ?_analogRead:	
   655                           ; 0 bytes @ 0x0
   656                           
   657  0020                     ?___lwdiv:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0020                     ?___ftpack:	
   661                           ; 2 bytes @ 0x0
   662                           
   663  0020                     ?___lmul:	
   664                           ; 3 bytes @ 0x0
   665                           
   666  0020                     ?___lldiv:	
   667                           ; 4 bytes @ 0x0
   668                           
   669  0020                     LCDSetBits@a:	
   670                           ; 4 bytes @ 0x0
   671                           
   672  0020                     currentGainInit@gain:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0020                     ___lwdiv@divisor:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0020                     ___ftpack@arg:	
   679                           ; 2 bytes @ 0x0
   680                           
   681  0020                     ___lmul@multiplier:	
   682                           ; 3 bytes @ 0x0
   683                           
   684  0020                     ___lldiv@divisor:	
   685                           ; 4 bytes @ 0x0
   686                           
   687                           
   688                           ; 4 bytes @ 0x0
   689  0020                     	ds	2
   690  0022                     ??_LCDcmd:	
   691  0022                     ??_LCD4bitCmd:	
   692                           ; 0 bytes @ 0x2
   693                           
   694  0022                     ??_LCDWriteChar:	
   695                           ; 0 bytes @ 0x2
   696                           
   697  0022                     ??_analogRead:	
   698                           ; 0 bytes @ 0x2
   699                           
   700  0022                     LCD4bitCmd@a:	
   701                           ; 0 bytes @ 0x2
   702                           
   703  0022                     ___lwdiv@dividend:	
   704                           ; 1 bytes @ 0x2
   705                           
   706                           
   707                           ; 2 bytes @ 0x2
   708  0022                     	ds	1
   709  0023                     ??_LCDSetCursor:	
   710  0023                     ___ftpack@exp:	
   711                           ; 0 bytes @ 0x3
   712                           
   713                           
   714                           ; 1 bytes @ 0x3
   715  0023                     	ds	1
   716  0024                     ??___lwdiv:	
   717  0024                     LCDcmd@a:	
   718                           ; 0 bytes @ 0x4
   719                           
   720  0024                     LCDWriteChar@a:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  0024                     analogRead@chan:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0024                     ___ftpack@sign:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0024                     ___lmul@multiplicand:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0024                     ___lldiv@dividend:	
   733                           ; 4 bytes @ 0x4
   734                           
   735                           
   736                           ; 4 bytes @ 0x4
   737  0024                     	ds	1
   738  0025                     ??___ftpack:	
   739  0025                     ??_initLCD:	
   740                           ; 0 bytes @ 0x5
   741                           
   742  0025                     ?_LCDWriteString:	
   743                           ; 0 bytes @ 0x5
   744                           
   745  0025                     LCDSetCursor@a:	
   746                           ; 0 bytes @ 0x5
   747                           
   748  0025                     LCDWriteString@a:	
   749                           ; 1 bytes @ 0x5
   750                           
   751  0025                     analogRead@returnVal:	
   752                           ; 2 bytes @ 0x5
   753                           
   754  0025                     ___lwdiv@quotient:	
   755                           ; 2 bytes @ 0x5
   756                           
   757                           
   758                           ; 2 bytes @ 0x5
   759  0025                     	ds	2
   760  0027                     ??_LCDWriteString:	
   761  0027                     ___lwdiv@counter:	
   762                           ; 0 bytes @ 0x7
   763                           
   764                           
   765                           ; 1 bytes @ 0x7
   766  0027                     	ds	1
   767  0028                     ??_initController:	
   768  0028                     ??___lmul:	
   769                           ; 0 bytes @ 0x8
   770                           
   771  0028                     ??___lldiv:	
   772                           ; 0 bytes @ 0x8
   773                           
   774  0028                     ?___lbtoft:	
   775                           ; 0 bytes @ 0x8
   776                           
   777  0028                     ?___lltoft:	
   778                           ; 3 bytes @ 0x8
   779                           
   780  0028                     ?___lwtoft:	
   781                           ; 3 bytes @ 0x8
   782                           
   783  0028                     ___lwtoft@c:	
   784                           ; 3 bytes @ 0x8
   785                           
   786  0028                     ___lltoft@c:	
   787                           ; 2 bytes @ 0x8
   788                           
   789                           
   790                           ; 4 bytes @ 0x8
   791  0028                     	ds	1
   792  0029                     ___lmul@product:	
   793  0029                     ___lldiv@quotient:	
   794                           ; 4 bytes @ 0x9
   795                           
   796                           
   797                           ; 4 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     LCDWriteString@i:	
   800                           
   801                           ; 2 bytes @ 0xA
   802  002A                     	ds	1
   803  002B                     ??___lbtoft:	
   804  002B                     ??___lwtoft:	
   805                           ; 0 bytes @ 0xB
   806                           
   807                           
   808                           ; 0 bytes @ 0xB
   809  002B                     	ds	1
   810  002C                     ??___lltoft:	
   811                           
   812                           ; 0 bytes @ 0xC
   813  002C                     	ds	1
   814  002D                     ___lldiv@counter:	
   815  002D                     ___lltoft@exp:	
   816                           ; 1 bytes @ 0xD
   817                           
   818                           
   819                           ; 1 bytes @ 0xD
   820  002D                     	ds	1
   821  002E                     ?___ftneg:	
   822  002E                     ___ftneg@f1:	
   823                           ; 3 bytes @ 0xE
   824                           
   825                           
   826                           ; 3 bytes @ 0xE
   827  002E                     	ds	1
   828  002F                     ___lbtoft@c:	
   829                           
   830                           ; 1 bytes @ 0xF
   831  002F                     	ds	2
   832  0031                     ??___ftneg:	
   833  0031                     ?___ftadd:	
   834                           ; 0 bytes @ 0x11
   835                           
   836  0031                     ___ftadd@f1:	
   837                           ; 3 bytes @ 0x11
   838                           
   839                           
   840                           ; 3 bytes @ 0x11
   841  0031                     	ds	3
   842  0034                     ___ftadd@f2:	
   843                           
   844                           ; 3 bytes @ 0x14
   845  0034                     	ds	3
   846  0037                     ??___ftadd:	
   847                           
   848                           ; 0 bytes @ 0x17
   849  0037                     	ds	4
   850  003B                     ___ftadd@sign:	
   851                           
   852                           ; 1 bytes @ 0x1B
   853  003B                     	ds	1
   854  003C                     ___ftadd@exp2:	
   855                           
   856                           ; 1 bytes @ 0x1C
   857  003C                     	ds	1
   858  003D                     ___ftadd@exp1:	
   859                           
   860                           ; 1 bytes @ 0x1D
   861  003D                     	ds	1
   862  003E                     ?___ftmul:	
   863  003E                     ___ftmul@f1:	
   864                           ; 3 bytes @ 0x1E
   865                           
   866                           
   867                           ; 3 bytes @ 0x1E
   868  003E                     	ds	3
   869  0041                     ___ftmul@f2:	
   870                           
   871                           ; 3 bytes @ 0x21
   872  0041                     	ds	3
   873  0044                     ??___ftmul:	
   874                           
   875                           ; 0 bytes @ 0x24
   876  0044                     	ds	4
   877  0048                     ___ftmul@exp:	
   878                           
   879                           ; 1 bytes @ 0x28
   880  0048                     	ds	1
   881  0049                     ___ftmul@f3_as_product:	
   882                           
   883                           ; 3 bytes @ 0x29
   884  0049                     	ds	3
   885  004C                     ___ftmul@cntr:	
   886                           
   887                           ; 1 bytes @ 0x2C
   888  004C                     	ds	1
   889  004D                     ___ftmul@sign:	
   890                           
   891                           ; 1 bytes @ 0x2D
   892  004D                     	ds	1
   893  004E                     ?___ftdiv:	
   894  004E                     ___ftdiv@f2:	
   895                           ; 3 bytes @ 0x2E
   896                           
   897                           
   898                           ; 3 bytes @ 0x2E
   899  004E                     	ds	3
   900  0051                     ___ftdiv@f1:	
   901                           
   902                           ; 3 bytes @ 0x31
   903  0051                     	ds	3
   904  0054                     ??___ftdiv:	
   905                           
   906                           ; 0 bytes @ 0x34
   907  0054                     	ds	4
   908  0058                     ___ftdiv@cntr:	
   909                           
   910                           ; 1 bytes @ 0x38
   911  0058                     	ds	1
   912  0059                     ___ftdiv@f3:	
   913                           
   914                           ; 3 bytes @ 0x39
   915  0059                     	ds	3
   916  005C                     ___ftdiv@exp:	
   917                           
   918                           ; 1 bytes @ 0x3C
   919  005C                     	ds	1
   920  005D                     ___ftdiv@sign:	
   921                           
   922                           ; 1 bytes @ 0x3D
   923  005D                     	ds	1
   924  005E                     ??_sampleReference:	
   925  005E                     ??_sampleCurrent:	
   926                           ; 0 bytes @ 0x3E
   927                           
   928  005E                     ?_sampleVoltage:	
   929                           ; 0 bytes @ 0x3E
   930                           
   931  005E                     ?___fttol:	
   932                           ; 3 bytes @ 0x3E
   933                           
   934  005E                     ___fttol@f1:	
   935                           ; 4 bytes @ 0x3E
   936                           
   937                           
   938                           ; 3 bytes @ 0x3E
   939  005E                     	ds	2
   940  0060                     sampleReference@i:	
   941  0060                     _sampleCurrent$890:	
   942                           ; 2 bytes @ 0x40
   943                           
   944                           
   945                           ; 3 bytes @ 0x40
   946  0060                     	ds	1
   947  0061                     ??_sampleVoltage:	
   948                           
   949                           ; 0 bytes @ 0x41
   950  0061                     	ds	1
   951  0062                     ??___fttol:	
   952                           
   953                           ; 0 bytes @ 0x42
   954  0062                     	ds	1
   955  0063                     sampleVoltage@chan:	
   956  0063                     sampleCurrent@i:	
   957                           ; 1 bytes @ 0x43
   958                           
   959                           
   960                           ; 2 bytes @ 0x43
   961  0063                     	ds	1
   962  0064                     sampleVoltage@i:	
   963                           
   964                           ; 2 bytes @ 0x44
   965  0064                     	ds	1
   966  0065                     sampleCurrent@temp:	
   967                           
   968                           ; 2 bytes @ 0x45
   969  0065                     	ds	1
   970  0066                     ___fttol@sign1:	
   971  0066                     sampleVoltage@temp:	
   972                           ; 1 bytes @ 0x46
   973                           
   974                           
   975                           ; 2 bytes @ 0x46
   976  0066                     	ds	1
   977  0067                     ___fttol@lval:	
   978                           
   979                           ; 4 bytes @ 0x47
   980  0067                     	ds	1
   981  0068                     ??_sampleBatteryCells:	
   982                           
   983                           ; 0 bytes @ 0x48
   984  0068                     	ds	2
   985  006A                     _sampleBatteryCells$889:	
   986                           
   987                           ; 3 bytes @ 0x4A
   988  006A                     	ds	1
   989  006B                     ___fttol@exp1:	
   990                           
   991                           ; 1 bytes @ 0x4B
   992  006B                     	ds	1
   993  006C                     ?_floatToASCII:	
   994  006C                     ?_stopWatch:	
   995                           ; 0 bytes @ 0x4C
   996                           
   997  006C                     floatToASCII@num:	
   998                           ; 4 bytes @ 0x4C
   999                           
  1000                           
  1001                           ; 3 bytes @ 0x4C
  1002  006C                     	ds	3
  1003  006F                     floatToASCII@precision:	
  1004                           
  1005                           ; 1 bytes @ 0x4F
  1006  006F                     	ds	1
  1007                           
  1008                           	psect	maintext
  1009  07CD                     __pmaintext:	
  1010 ;;
  1011 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1012 ;;
  1013 ;; *************** function _main *****************
  1014 ;; Defined at:
  1015 ;;		line 64 in file "PIC16F917 Battery Management.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;		None               void
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : B00/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0
  1031 ;;      Temps:          0       0       2       0       0
  1032 ;;      Totals:         0       0       2       0       0
  1033 ;;Total ram usage:        2 bytes
  1034 ;; Hardware stack levels required when called:    6
  1035 ;; This function calls:
  1036 ;;		_currentGainInit
  1037 ;;		_displayLCD
  1038 ;;		_handlePB
  1039 ;;		_initController
  1040 ;;		_sampleBatteryCells
  1041 ;;		_sampleCurrent
  1042 ;;		_sampleReference
  1043 ;; This function is called by:
  1044 ;;		Startup code after reset
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           
  1049                           ;psect for function _main
  1050  07CD                     _main:	
  1051                           
  1052                           ;PIC16F917 Battery Management.c: 66: initController();
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1056  07CD  160A  118A  25DB  120A  118A  	fcall	_initController
  1057                           
  1058                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
  1059  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  1060  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  1061  07D4  1608               	bsf	8,4	;volatile
  1062                           
  1063                           ;PIC16F917 Battery Management.c: 72: currentGainInit(200);
  1064  07D5  30C8               	movlw	200
  1065  07D6  160A  118A  24F6  120A  118A  	fcall	_currentGainInit
  1066  07DB                     l2603:	
  1067                           ;PIC16F917 Battery Management.c: 84: while(1)
  1068                           
  1069                           
  1070                           ;PIC16F917 Battery Management.c: 85: {
  1071                           ;PIC16F917 Battery Management.c: 86: sampleReference();
  1072  07DB  120A  158A  22D9  120A  118A  	fcall	_sampleReference
  1073                           
  1074                           ;PIC16F917 Battery Management.c: 87: sampleCurrent();
  1075  07E0  120A  158A  2517  120A  118A  	fcall	_sampleCurrent
  1076                           
  1077                           ;PIC16F917 Battery Management.c: 88: sampleBatteryCells();
  1078  07E5  120A  118A  25C4  120A  118A  	fcall	_sampleBatteryCells
  1079                           
  1080                           ;PIC16F917 Battery Management.c: 90: handlePB();
  1081  07EA  160A  118A  2744  120A  118A  	fcall	_handlePB
  1082                           
  1083                           ;PIC16F917 Battery Management.c: 92: displayLCD(LCDDisplayMode);
  1084  07EF  1683               	bsf	3,5	;RP0=1, select bank1
  1085  07F0  1303               	bcf	3,6	;RP1=0, select bank1
  1086  07F1  086A               	movf	_LCDDisplayMode^(0+128),w
  1087  07F2  00CB               	movwf	??_main^(0+128)
  1088  07F3  01CC               	clrf	(??_main^(0+128)+1)
  1089  07F4  084B               	movf	??_main^(0+128),w
  1090  07F5  00B5               	movwf	displayLCD@disp^(0+128)
  1091  07F6  084C               	movf	(??_main+1)^(0+128),w
  1092  07F7  00B6               	movwf	(displayLCD@disp+1)^(0+128)
  1093  07F8  120A  118A  2363  120A  118A  	fcall	_displayLCD
  1094  07FD  2FDB               	goto	l2603
  1095  07FE                     __end_of_main:	
  1096                           
  1097                           	psect	text1
  1098  0AD9                     __ptext1:	
  1099 ;; *************** function _sampleReference *****************
  1100 ;; Defined at:
  1101 ;;		line 128 in file "PIC16F917 Battery Management.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  i               2   64[BANK0 ] int 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;		None               void
  1108 ;; Registers used:
  1109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         0       0       0       0       0
  1116 ;;      Locals:         0       2       0       0       0
  1117 ;;      Temps:          0       2       0       0       0
  1118 ;;      Totals:         0       4       0       0       0
  1119 ;;Total ram usage:        4 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    4
  1122 ;; This function calls:
  1123 ;;		___ftdiv
  1124 ;;		___ftmul
  1125 ;;		___lwdiv
  1126 ;;		___lwtoft
  1127 ;;		_analogRead
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;;		_checkCurrent
  1131 ;;		_systemCheck
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           
  1136                           ;psect for function _sampleReference
  1137  0AD9                     _sampleReference:	
  1138                           
  1139                           ;PIC16F917 Battery Management.c: 131: RD1 = 1;
  1140                           
  1141                           ;incstack = 0
  1142                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1143  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0ADB  1488               	bsf	8,1	;volatile
  1146                           
  1147                           ;PIC16F917 Battery Management.c: 133: RC2 = 1;
  1148  0ADC  1507               	bsf	7,2	;volatile
  1149                           
  1150                           ;PIC16F917 Battery Management.c: 135: _delay((unsigned long)((2)*(8000000/4000.0)));
  1151  0ADD  3006               	movlw	6
  1152  0ADE  00DF               	movwf	??_sampleReference+1
  1153  0ADF  3030               	movlw	48
  1154  0AE0  00DE               	movwf	??_sampleReference
  1155  0AE1                     u2947:	
  1156  0AE1  0BDE               	decfsz	??_sampleReference,f
  1157  0AE2  2AE1               	goto	u2947
  1158  0AE3  0BDF               	decfsz	??_sampleReference+1,f
  1159  0AE4  2AE1               	goto	u2947
  1160  0AE5  0000               	nop
  1161                           
  1162                           ;PIC16F917 Battery Management.c: 137: analogRead(REFV);
  1163  0AE6  3002               	movlw	2
  1164  0AE7  160A  118A  264B  120A  158A  	fcall	_analogRead
  1165                           
  1166                           ;PIC16F917 Battery Management.c: 139: refValue = 0;
  1167  0AEC  01FC               	clrf	_refValue
  1168  0AED  01FD               	clrf	_refValue+1
  1169                           
  1170                           ;PIC16F917 Battery Management.c: 141: for ( int i = 0; i <= sampleNum; i++)
  1171  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  1172  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  1173  0AF0  01E0               	clrf	sampleReference@i
  1174  0AF1  01E1               	clrf	sampleReference@i+1
  1175  0AF2  301C               	movlw	low (_sampleNum-__stringbase)
  1176  0AF3  0084               	movwf	4
  1177  0AF4  120A  158A  200A  120A  158A  	fcall	stringdir
  1178  0AF9  00DE               	movwf	??_sampleReference
  1179  0AFA  0861               	movf	sampleReference@i+1,w
  1180  0AFB  3A80               	xorlw	128
  1181  0AFC  3C80               	sublw	128
  1182  0AFD  1D03               	skipz
  1183  0AFE  2B01               	goto	u2705
  1184  0AFF  0860               	movf	sampleReference@i,w
  1185  0B00  025E               	subwf	??_sampleReference,w
  1186  0B01                     u2705:	
  1187  0B01  1C03               	btfss	3,0
  1188  0B02  2B28               	goto	l2397
  1189  0B03                     l2391:	
  1190                           
  1191                           ;PIC16F917 Battery Management.c: 142: {
  1192                           ;PIC16F917 Battery Management.c: 143: refValue += analogRead(REFV);
  1193  0B03  3002               	movlw	2
  1194  0B04  160A  118A  264B  120A  158A  	fcall	_analogRead
  1195  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0B0B  0820               	movf	?_analogRead,w
  1198  0B0C  07FC               	addwf	_refValue,f
  1199  0B0D  1803               	skipnc
  1200  0B0E  0AFD               	incf	_refValue+1,f
  1201  0B0F  0821               	movf	?_analogRead+1,w
  1202  0B10  07FD               	addwf	_refValue+1,f
  1203  0B11  3001               	movlw	1
  1204  0B12  07E0               	addwf	sampleReference@i,f
  1205  0B13  1803               	skipnc
  1206  0B14  0AE1               	incf	sampleReference@i+1,f
  1207  0B15  3000               	movlw	0
  1208  0B16  07E1               	addwf	sampleReference@i+1,f
  1209  0B17  301C               	movlw	low (_sampleNum-__stringbase)
  1210  0B18  0084               	movwf	4
  1211  0B19  120A  158A  200A  120A  158A  	fcall	stringdir
  1212  0B1E  00DE               	movwf	??_sampleReference
  1213  0B1F  0861               	movf	sampleReference@i+1,w
  1214  0B20  3A80               	xorlw	128
  1215  0B21  3C80               	sublw	128
  1216  0B22  1D03               	skipz
  1217  0B23  2B26               	goto	u2715
  1218  0B24  0860               	movf	sampleReference@i,w
  1219  0B25  025E               	subwf	??_sampleReference,w
  1220  0B26                     u2715:	
  1221  0B26  1803               	skipnc
  1222  0B27  2B03               	goto	l2391
  1223  0B28                     l2397:	
  1224                           
  1225                           ;PIC16F917 Battery Management.c: 144: }
  1226                           ;PIC16F917 Battery Management.c: 146: refValue = refValue / sampleNum;
  1227  0B28  301C               	movlw	low (_sampleNum-__stringbase)
  1228  0B29  0084               	movwf	4
  1229  0B2A  120A  158A  200A  120A  158A  	fcall	stringdir
  1230  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0B31  00DE               	movwf	??_sampleReference
  1233  0B32  01DF               	clrf	??_sampleReference+1
  1234  0B33  085E               	movf	??_sampleReference,w
  1235  0B34  00A0               	movwf	___lwdiv@divisor
  1236  0B35  085F               	movf	??_sampleReference+1,w
  1237  0B36  00A1               	movwf	___lwdiv@divisor+1
  1238  0B37  087D               	movf	_refValue+1,w
  1239  0B38  00A3               	movwf	___lwdiv@dividend+1
  1240  0B39  087C               	movf	_refValue,w
  1241  0B3A  00A2               	movwf	___lwdiv@dividend
  1242  0B3B  160A  118A  2684  120A  158A  	fcall	___lwdiv
  1243  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  1244  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  1245  0B42  0821               	movf	?___lwdiv+1,w
  1246  0B43  00FD               	movwf	_refValue+1
  1247  0B44  0820               	movf	?___lwdiv,w
  1248  0B45  00FC               	movwf	_refValue
  1249                           
  1250                           ;PIC16F917 Battery Management.c: 149: RD1 = 0;
  1251  0B46  1088               	bcf	8,1	;volatile
  1252                           
  1253                           ;PIC16F917 Battery Management.c: 151: RC2 = 0;
  1254  0B47  1107               	bcf	7,2	;volatile
  1255                           
  1256                           ;PIC16F917 Battery Management.c: 153: supVolt = (refVolt * 1023)/refValue;
  1257  0B48  087D               	movf	_refValue+1,w
  1258  0B49  00A9               	movwf	___lwtoft@c+1
  1259  0B4A  087C               	movf	_refValue,w
  1260  0B4B  00A8               	movwf	___lwtoft@c
  1261  0B4C  160A  118A  24DE  120A  158A  	fcall	___lwtoft
  1262  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0B53  0828               	movf	?___lwtoft,w
  1265  0B54  00CE               	movwf	___ftdiv@f2
  1266  0B55  0829               	movf	?___lwtoft+1,w
  1267  0B56  00CF               	movwf	___ftdiv@f2+1
  1268  0B57  082A               	movf	?___lwtoft+2,w
  1269  0B58  00D0               	movwf	___ftdiv@f2+2
  1270  0B59  30C0               	movlw	192
  1271  0B5A  00BE               	movwf	___ftmul@f1
  1272  0B5B  307F               	movlw	127
  1273  0B5C  00BF               	movwf	___ftmul@f1+1
  1274  0B5D  3044               	movlw	68
  1275  0B5E  00C0               	movwf	___ftmul@f1+2
  1276  0B5F  3019               	movlw	low (_refVolt-__stringbase)
  1277  0B60  0084               	movwf	4
  1278  0B61  120A  158A  200A  120A  158A  	fcall	stringdir
  1279  0B66  00C1               	movwf	___ftmul@f2
  1280  0B67  120A  158A  200A  120A  158A  	fcall	stringdir
  1281  0B6C  00C2               	movwf	___ftmul@f2+1
  1282  0B6D  120A  158A  200A  120A  158A  	fcall	stringdir
  1283  0B72  00C3               	movwf	___ftmul@f2+2
  1284  0B73  120A  158A  2444  120A  158A  	fcall	___ftmul
  1285  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0B7A  083E               	movf	?___ftmul,w
  1288  0B7B  00D1               	movwf	___ftdiv@f1
  1289  0B7C  083F               	movf	?___ftmul+1,w
  1290  0B7D  00D2               	movwf	___ftdiv@f1+1
  1291  0B7E  0840               	movf	?___ftmul+2,w
  1292  0B7F  00D3               	movwf	___ftdiv@f1+2
  1293  0B80  120A  158A  238C   	fcall	___ftdiv
  1294  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0B85  084E               	movf	?___ftdiv,w
  1297  0B86  00F8               	movwf	_supVolt
  1298  0B87  084F               	movf	?___ftdiv+1,w
  1299  0B88  00F9               	movwf	_supVolt+1
  1300  0B89  0850               	movf	?___ftdiv+2,w
  1301  0B8A  00FA               	movwf	_supVolt+2
  1302  0B8B  0008               	return
  1303  0B8C                     __end_of_sampleReference:	
  1304                           
  1305                           	psect	text2
  1306  0D17                     __ptext2:	
  1307 ;; *************** function _sampleCurrent *****************
  1308 ;; Defined at:
  1309 ;;		line 173 in file "PIC16F917 Battery Management.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;		None
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  i               2   67[BANK0 ] int 
  1314 ;;  temp            2   69[BANK0 ] unsigned int 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;		None               void
  1317 ;; Registers used:
  1318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1324 ;;      Params:         0       0       0       0       0
  1325 ;;      Locals:         0       7       0       0       0
  1326 ;;      Temps:          0       2       0       0       0
  1327 ;;      Totals:         0       9       0       0       0
  1328 ;;Total ram usage:        9 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    4
  1331 ;; This function calls:
  1332 ;;		___ftdiv
  1333 ;;		___ftmul
  1334 ;;		___lbtoft
  1335 ;;		___lwdiv
  1336 ;;		___lwtoft
  1337 ;;		_analogRead
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;;		_checkCurrent
  1341 ;;		_systemCheck
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           
  1346                           ;psect for function _sampleCurrent
  1347  0D17                     _sampleCurrent:	
  1348                           
  1349                           ;PIC16F917 Battery Management.c: 175: uint16_t temp = 0;
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in _sampleCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1353  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0D19  01E5               	clrf	sampleCurrent@temp
  1356  0D1A  01E6               	clrf	sampleCurrent@temp+1
  1357                           
  1358                           ;PIC16F917 Battery Management.c: 177: for ( int i = 0; i <= sampleNum; i++)
  1359  0D1B  01E3               	clrf	sampleCurrent@i
  1360  0D1C  01E4               	clrf	sampleCurrent@i+1
  1361  0D1D  301C               	movlw	low (_sampleNum-__stringbase)
  1362  0D1E  0084               	movwf	4
  1363  0D1F  120A  158A  200A  120A  158A  	fcall	stringdir
  1364  0D24  00DE               	movwf	??_sampleCurrent
  1365  0D25  0864               	movf	sampleCurrent@i+1,w
  1366  0D26  3A80               	xorlw	128
  1367  0D27  3C80               	sublw	128
  1368  0D28  1D03               	skipz
  1369  0D29  2D2C               	goto	u2725
  1370  0D2A  0863               	movf	sampleCurrent@i,w
  1371  0D2B  025E               	subwf	??_sampleCurrent,w
  1372  0D2C                     u2725:	
  1373  0D2C  1C03               	btfss	3,0
  1374  0D2D  2D53               	goto	l2415
  1375  0D2E                     l2409:	
  1376                           
  1377                           ;PIC16F917 Battery Management.c: 178: {
  1378                           ;PIC16F917 Battery Management.c: 179: temp += analogRead(CURRENT);
  1379  0D2E  3007               	movlw	7
  1380  0D2F  160A  118A  264B  120A  158A  	fcall	_analogRead
  1381  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0D36  0820               	movf	?_analogRead,w
  1384  0D37  07E5               	addwf	sampleCurrent@temp,f
  1385  0D38  1803               	skipnc
  1386  0D39  0AE6               	incf	sampleCurrent@temp+1,f
  1387  0D3A  0821               	movf	?_analogRead+1,w
  1388  0D3B  07E6               	addwf	sampleCurrent@temp+1,f
  1389  0D3C  3001               	movlw	1
  1390  0D3D  07E3               	addwf	sampleCurrent@i,f
  1391  0D3E  1803               	skipnc
  1392  0D3F  0AE4               	incf	sampleCurrent@i+1,f
  1393  0D40  3000               	movlw	0
  1394  0D41  07E4               	addwf	sampleCurrent@i+1,f
  1395  0D42  301C               	movlw	low (_sampleNum-__stringbase)
  1396  0D43  0084               	movwf	4
  1397  0D44  120A  158A  200A  120A  158A  	fcall	stringdir
  1398  0D49  00DE               	movwf	??_sampleCurrent
  1399  0D4A  0864               	movf	sampleCurrent@i+1,w
  1400  0D4B  3A80               	xorlw	128
  1401  0D4C  3C80               	sublw	128
  1402  0D4D  1D03               	skipz
  1403  0D4E  2D51               	goto	u2735
  1404  0D4F  0863               	movf	sampleCurrent@i,w
  1405  0D50  025E               	subwf	??_sampleCurrent,w
  1406  0D51                     u2735:	
  1407  0D51  1803               	skipnc
  1408  0D52  2D2E               	goto	l2409
  1409  0D53                     l2415:	
  1410                           
  1411                           ;PIC16F917 Battery Management.c: 180: }
  1412                           ;PIC16F917 Battery Management.c: 182: temp = temp / sampleNum;
  1413  0D53  301C               	movlw	low (_sampleNum-__stringbase)
  1414  0D54  0084               	movwf	4
  1415  0D55  120A  158A  200A  120A  158A  	fcall	stringdir
  1416  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0D5C  00DE               	movwf	??_sampleCurrent
  1419  0D5D  01DF               	clrf	??_sampleCurrent+1
  1420  0D5E  085E               	movf	??_sampleCurrent,w
  1421  0D5F  00A0               	movwf	___lwdiv@divisor
  1422  0D60  085F               	movf	??_sampleCurrent+1,w
  1423  0D61  00A1               	movwf	___lwdiv@divisor+1
  1424  0D62  0866               	movf	sampleCurrent@temp+1,w
  1425  0D63  00A3               	movwf	___lwdiv@dividend+1
  1426  0D64  0865               	movf	sampleCurrent@temp,w
  1427  0D65  00A2               	movwf	___lwdiv@dividend
  1428  0D66  160A  118A  2684  120A  158A  	fcall	___lwdiv
  1429  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  1430  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  1431  0D6D  0821               	movf	?___lwdiv+1,w
  1432  0D6E  00E6               	movwf	sampleCurrent@temp+1
  1433  0D6F  0820               	movf	?___lwdiv,w
  1434  0D70  00E5               	movwf	sampleCurrent@temp
  1435                           
  1436                           ;PIC16F917 Battery Management.c: 187: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1437  0D71  30C0               	movlw	192
  1438  0D72  00CE               	movwf	___ftdiv@f2
  1439  0D73  307F               	movlw	127
  1440  0D74  00CF               	movwf	___ftdiv@f2+1
  1441  0D75  3044               	movlw	68
  1442  0D76  00D0               	movwf	___ftdiv@f2+2
  1443  0D77  0878               	movf	_supVolt,w
  1444  0D78  00BE               	movwf	___ftmul@f1
  1445  0D79  0879               	movf	_supVolt+1,w
  1446  0D7A  00BF               	movwf	___ftmul@f1+1
  1447  0D7B  087A               	movf	_supVolt+2,w
  1448  0D7C  00C0               	movwf	___ftmul@f1+2
  1449  0D7D  0866               	movf	sampleCurrent@temp+1,w
  1450  0D7E  00A9               	movwf	___lwtoft@c+1
  1451  0D7F  0865               	movf	sampleCurrent@temp,w
  1452  0D80  00A8               	movwf	___lwtoft@c
  1453  0D81  160A  118A  24DE  120A  158A  	fcall	___lwtoft
  1454  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0D88  0828               	movf	?___lwtoft,w
  1457  0D89  00C1               	movwf	___ftmul@f2
  1458  0D8A  0829               	movf	?___lwtoft+1,w
  1459  0D8B  00C2               	movwf	___ftmul@f2+1
  1460  0D8C  082A               	movf	?___lwtoft+2,w
  1461  0D8D  00C3               	movwf	___ftmul@f2+2
  1462  0D8E  120A  158A  2444  120A  158A  	fcall	___ftmul
  1463  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0D95  083E               	movf	?___ftmul,w
  1466  0D96  00D1               	movwf	___ftdiv@f1
  1467  0D97  083F               	movf	?___ftmul+1,w
  1468  0D98  00D2               	movwf	___ftdiv@f1+1
  1469  0D99  0840               	movf	?___ftmul+2,w
  1470  0D9A  00D3               	movwf	___ftdiv@f1+2
  1471  0D9B  120A  158A  238C  120A  158A  	fcall	___ftdiv
  1472  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  1473  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0DA2  084E               	movf	?___ftdiv,w
  1475  0DA3  00E0               	movwf	_sampleCurrent$890
  1476  0DA4  084F               	movf	?___ftdiv+1,w
  1477  0DA5  00E1               	movwf	_sampleCurrent$890+1
  1478  0DA6  0850               	movf	?___ftdiv+2,w
  1479  0DA7  00E2               	movwf	_sampleCurrent$890+2
  1480                           
  1481                           ;PIC16F917 Battery Management.c: 187: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1482  0DA8  1683               	bsf	3,5	;RP0=1, select bank1
  1483  0DA9  1303               	bcf	3,6	;RP1=0, select bank1
  1484  0DAA  086B               	movf	_shuntRes^(0+128),w
  1485  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0DAD  00BE               	movwf	___ftmul@f1
  1488  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  1489  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  1490  0DB0  086C               	movf	(_shuntRes+1)^(0+128),w
  1491  0DB1  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0DB2  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0DB3  00BF               	movwf	___ftmul@f1+1
  1494  0DB4  1683               	bsf	3,5	;RP0=1, select bank1
  1495  0DB5  1303               	bcf	3,6	;RP1=0, select bank1
  1496  0DB6  086D               	movf	(_shuntRes+2)^(0+128),w
  1497  0DB7  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0DB8  1303               	bcf	3,6	;RP1=0, select bank0
  1499  0DB9  00C0               	movwf	___ftmul@f1+2
  1500  0DBA  087B               	movf	_currentGain,w
  1501  0DBB  160A  118A  250F  120A  158A  	fcall	___lbtoft
  1502  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0DC1  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0DC2  0828               	movf	?___lbtoft,w
  1505  0DC3  00C1               	movwf	___ftmul@f2
  1506  0DC4  0829               	movf	?___lbtoft+1,w
  1507  0DC5  00C2               	movwf	___ftmul@f2+1
  1508  0DC6  082A               	movf	?___lbtoft+2,w
  1509  0DC7  00C3               	movwf	___ftmul@f2+2
  1510  0DC8  120A  158A  2444  120A  158A  	fcall	___ftmul
  1511  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0DCF  083E               	movf	?___ftmul,w
  1514  0DD0  00CE               	movwf	___ftdiv@f2
  1515  0DD1  083F               	movf	?___ftmul+1,w
  1516  0DD2  00CF               	movwf	___ftdiv@f2+1
  1517  0DD3  0840               	movf	?___ftmul+2,w
  1518  0DD4  00D0               	movwf	___ftdiv@f2+2
  1519  0DD5  0860               	movf	_sampleCurrent$890,w
  1520  0DD6  00D1               	movwf	___ftdiv@f1
  1521  0DD7  0861               	movf	_sampleCurrent$890+1,w
  1522  0DD8  00D2               	movwf	___ftdiv@f1+1
  1523  0DD9  0862               	movf	_sampleCurrent$890+2,w
  1524  0DDA  00D3               	movwf	___ftdiv@f1+2
  1525  0DDB  120A  158A  238C   	fcall	___ftdiv
  1526  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0DE0  084E               	movf	?___ftdiv,w
  1529  0DE1  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0DE2  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0DE3  00E7               	movwf	_current^(0+128)
  1532  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0DE6  084F               	movf	?___ftdiv+1,w
  1535  0DE7  1683               	bsf	3,5	;RP0=1, select bank1
  1536  0DE8  1303               	bcf	3,6	;RP1=0, select bank1
  1537  0DE9  00E8               	movwf	(_current+1)^(0+128)
  1538  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0DEC  0850               	movf	?___ftdiv+2,w
  1541  0DED  1683               	bsf	3,5	;RP0=1, select bank1
  1542  0DEE  1303               	bcf	3,6	;RP1=0, select bank1
  1543  0DEF  00E9               	movwf	(_current+2)^(0+128)
  1544  0DF0  0008               	return
  1545  0DF1                     __end_of_sampleCurrent:	
  1546                           
  1547                           	psect	text3
  1548  150F                     __ptext3:	
  1549 ;; *************** function ___lbtoft *****************
  1550 ;; Defined at:
  1551 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  c               1    wreg     unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  c               1   15[BANK0 ] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  3    8[BANK0 ] float 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0, pclath, cstack
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1565 ;;      Params:         0       3       0       0       0
  1566 ;;      Locals:         0       1       0       0       0
  1567 ;;      Temps:          0       4       0       0       0
  1568 ;;      Totals:         0       8       0       0       0
  1569 ;;Total ram usage:        8 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    3
  1572 ;; This function calls:
  1573 ;;		___ftpack
  1574 ;; This function is called by:
  1575 ;;		_sampleCurrent
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function ___lbtoft
  1581  150F                     ___lbtoft:	
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1585                           ;___lbtoft@c stored from wreg
  1586  150F  1283               	bcf	3,5	;RP0=0, select bank0
  1587  1510  1303               	bcf	3,6	;RP1=0, select bank0
  1588  1511  00AF               	movwf	___lbtoft@c
  1589  1512  082F               	movf	___lbtoft@c,w
  1590  1513  00AB               	movwf	??___lbtoft
  1591  1514  01AC               	clrf	??___lbtoft+1
  1592  1515  01AD               	clrf	??___lbtoft+2
  1593  1516  082B               	movf	??___lbtoft,w
  1594  1517  00A0               	movwf	___ftpack@arg
  1595  1518  082C               	movf	??___lbtoft+1,w
  1596  1519  00A1               	movwf	___ftpack@arg+1
  1597  151A  082D               	movf	??___lbtoft+2,w
  1598  151B  00A2               	movwf	___ftpack@arg+2
  1599  151C  308E               	movlw	142
  1600  151D  00AE               	movwf	??___lbtoft+3
  1601  151E  082E               	movf	??___lbtoft+3,w
  1602  151F  00A3               	movwf	___ftpack@exp
  1603  1520  01A4               	clrf	___ftpack@sign
  1604  1521  120A  158A  2099   	fcall	___ftpack
  1605  1524  1283               	bcf	3,5	;RP0=0, select bank0
  1606  1525  1303               	bcf	3,6	;RP1=0, select bank0
  1607  1526  0820               	movf	?___ftpack,w
  1608  1527  00A8               	movwf	?___lbtoft
  1609  1528  0821               	movf	?___ftpack+1,w
  1610  1529  00A9               	movwf	?___lbtoft+1
  1611  152A  0822               	movf	?___ftpack+2,w
  1612  152B  00AA               	movwf	?___lbtoft+2
  1613  152C  0008               	return
  1614  152D                     __end_of___lbtoft:	
  1615                           
  1616                           	psect	text4
  1617  05C4                     __ptext4:	
  1618 ;; *************** function _sampleBatteryCells *****************
  1619 ;; Defined at:
  1620 ;;		line 98 in file "PIC16F917 Battery Management.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;		None               void
  1627 ;; Registers used:
  1628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         0       3       0       0       0
  1636 ;;      Temps:          0       2       0       0       0
  1637 ;;      Totals:         0       5       0       0       0
  1638 ;;Total ram usage:        5 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    5
  1641 ;; This function calls:
  1642 ;;		___ftadd
  1643 ;;		___ftmul
  1644 ;;		_sampleVoltage
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;;		_systemCheck
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _sampleBatteryCells
  1653  05C4                     _sampleBatteryCells:	
  1654                           
  1655                           ;PIC16F917 Battery Management.c: 101: RC2 = 1;
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1659  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1660  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1661  05C6  1507               	bsf	7,2	;volatile
  1662                           
  1663                           ;PIC16F917 Battery Management.c: 104: RD0 = 1;
  1664  05C7  1408               	bsf	8,0	;volatile
  1665                           
  1666                           ;PIC16F917 Battery Management.c: 106: _delay((unsigned long)((5)*(8000000/4000.0)));
  1667  05C8  300D               	movlw	13
  1668  05C9  00E9               	movwf	??_sampleBatteryCells+1
  1669  05CA  30FB               	movlw	251
  1670  05CB  00E8               	movwf	??_sampleBatteryCells
  1671  05CC                     u2957:	
  1672  05CC  0BE8               	decfsz	??_sampleBatteryCells,f
  1673  05CD  2DCC               	goto	u2957
  1674  05CE  0BE9               	decfsz	??_sampleBatteryCells+1,f
  1675  05CF  2DCC               	goto	u2957
  1676  05D0  2DD1               	nop2
  1677                           
  1678                           ;PIC16F917 Battery Management.c: 109: cellVolt[0] = ( cell1RR + 1 ) * sampleVoltage(CELL
      +                          1);
  1679  05D1  3000               	movlw	0
  1680  05D2  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  1681  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1682  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1683  05D9  085E               	movf	?_sampleVoltage,w
  1684  05DA  00EA               	movwf	_sampleBatteryCells$889
  1685  05DB  085F               	movf	?_sampleVoltage+1,w
  1686  05DC  00EB               	movwf	_sampleBatteryCells$889+1
  1687  05DD  0860               	movf	?_sampleVoltage+2,w
  1688  05DE  00EC               	movwf	_sampleBatteryCells$889+2
  1689                           
  1690                           ;PIC16F917 Battery Management.c: 109: cellVolt[0] = ( cell1RR + 1 ) * sampleVoltage(CELL
      +                          1);
  1691  05DF  086A               	movf	_sampleBatteryCells$889,w
  1692  05E0  00BE               	movwf	___ftmul@f1
  1693  05E1  086B               	movf	_sampleBatteryCells$889+1,w
  1694  05E2  00BF               	movwf	___ftmul@f1+1
  1695  05E3  086C               	movf	_sampleBatteryCells$889+2,w
  1696  05E4  00C0               	movwf	___ftmul@f1+2
  1697  05E5  3000               	movlw	0
  1698  05E6  00B1               	movwf	___ftadd@f1
  1699  05E7  3080               	movlw	128
  1700  05E8  00B2               	movwf	___ftadd@f1+1
  1701  05E9  303F               	movlw	63
  1702  05EA  00B3               	movwf	___ftadd@f1+2
  1703  05EB  3001               	movlw	low (_cell1RR-__stringbase)
  1704  05EC  0084               	movwf	4
  1705  05ED  120A  158A  200A  120A  118A  	fcall	stringdir
  1706  05F2  00B4               	movwf	___ftadd@f2
  1707  05F3  120A  158A  200A  120A  118A  	fcall	stringdir
  1708  05F8  00B5               	movwf	___ftadd@f2+1
  1709  05F9  120A  158A  200A  120A  118A  	fcall	stringdir
  1710  05FE  00B6               	movwf	___ftadd@f2+2
  1711  05FF  120A  158A  26F7  120A  118A  	fcall	___ftadd
  1712  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0606  0831               	movf	?___ftadd,w
  1715  0607  00C1               	movwf	___ftmul@f2
  1716  0608  0832               	movf	?___ftadd+1,w
  1717  0609  00C2               	movwf	___ftmul@f2+1
  1718  060A  0833               	movf	?___ftadd+2,w
  1719  060B  00C3               	movwf	___ftmul@f2+2
  1720  060C  120A  158A  2444  120A  118A  	fcall	___ftmul
  1721  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0613  083E               	movf	?___ftmul,w
  1724  0614  1683               	bsf	3,5	;RP0=1, select bank1
  1725  0615  1303               	bcf	3,6	;RP1=0, select bank1
  1726  0616  00CD               	movwf	_cellVolt^(0+128)
  1727  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0619  083F               	movf	?___ftmul+1,w
  1730  061A  1683               	bsf	3,5	;RP0=1, select bank1
  1731  061B  1303               	bcf	3,6	;RP1=0, select bank1
  1732  061C  00CE               	movwf	(_cellVolt+1)^(0+128)
  1733  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1734  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1735  061F  0840               	movf	?___ftmul+2,w
  1736  0620  1683               	bsf	3,5	;RP0=1, select bank1
  1737  0621  1303               	bcf	3,6	;RP1=0, select bank1
  1738  0622  00CF               	movwf	(_cellVolt+2)^(0+128)
  1739                           
  1740                           ;PIC16F917 Battery Management.c: 110: cellVolt[1] = ( cell2RR + 1 ) * sampleVoltage(CELL
      +                          2);
  1741  0623  3001               	movlw	1
  1742  0624  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  1743  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1744  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1745  062B  085E               	movf	?_sampleVoltage,w
  1746  062C  00EA               	movwf	_sampleBatteryCells$889
  1747  062D  085F               	movf	?_sampleVoltage+1,w
  1748  062E  00EB               	movwf	_sampleBatteryCells$889+1
  1749  062F  0860               	movf	?_sampleVoltage+2,w
  1750  0630  00EC               	movwf	_sampleBatteryCells$889+2
  1751                           
  1752                           ;PIC16F917 Battery Management.c: 110: cellVolt[1] = ( cell2RR + 1 ) * sampleVoltage(CELL
      +                          2);
  1753  0631  086A               	movf	_sampleBatteryCells$889,w
  1754  0632  00BE               	movwf	___ftmul@f1
  1755  0633  086B               	movf	_sampleBatteryCells$889+1,w
  1756  0634  00BF               	movwf	___ftmul@f1+1
  1757  0635  086C               	movf	_sampleBatteryCells$889+2,w
  1758  0636  00C0               	movwf	___ftmul@f1+2
  1759  0637  3000               	movlw	0
  1760  0638  00B1               	movwf	___ftadd@f1
  1761  0639  3080               	movlw	128
  1762  063A  00B2               	movwf	___ftadd@f1+1
  1763  063B  303F               	movlw	63
  1764  063C  00B3               	movwf	___ftadd@f1+2
  1765  063D  3004               	movlw	low (_cell2RR-__stringbase)
  1766  063E  0084               	movwf	4
  1767  063F  120A  158A  200A  120A  118A  	fcall	stringdir
  1768  0644  00B4               	movwf	___ftadd@f2
  1769  0645  120A  158A  200A  120A  118A  	fcall	stringdir
  1770  064A  00B5               	movwf	___ftadd@f2+1
  1771  064B  120A  158A  200A  120A  118A  	fcall	stringdir
  1772  0650  00B6               	movwf	___ftadd@f2+2
  1773  0651  120A  158A  26F7  120A  118A  	fcall	___ftadd
  1774  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0658  0831               	movf	?___ftadd,w
  1777  0659  00C1               	movwf	___ftmul@f2
  1778  065A  0832               	movf	?___ftadd+1,w
  1779  065B  00C2               	movwf	___ftmul@f2+1
  1780  065C  0833               	movf	?___ftadd+2,w
  1781  065D  00C3               	movwf	___ftmul@f2+2
  1782  065E  120A  158A  2444  120A  118A  	fcall	___ftmul
  1783  0663  1283               	bcf	3,5	;RP0=0, select bank0
  1784  0664  1303               	bcf	3,6	;RP1=0, select bank0
  1785  0665  083E               	movf	?___ftmul,w
  1786  0666  1683               	bsf	3,5	;RP0=1, select bank1
  1787  0667  1303               	bcf	3,6	;RP1=0, select bank1
  1788  0668  00D0               	movwf	(_cellVolt^(0+128)+3)
  1789  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1790  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1791  066B  083F               	movf	?___ftmul+1,w
  1792  066C  1683               	bsf	3,5	;RP0=1, select bank1
  1793  066D  1303               	bcf	3,6	;RP1=0, select bank1
  1794  066E  00D1               	movwf	((_cellVolt+1)^(0+128)+3)
  1795  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1796  0670  1303               	bcf	3,6	;RP1=0, select bank0
  1797  0671  0840               	movf	?___ftmul+2,w
  1798  0672  1683               	bsf	3,5	;RP0=1, select bank1
  1799  0673  1303               	bcf	3,6	;RP1=0, select bank1
  1800  0674  00D2               	movwf	((_cellVolt+2)^(0+128)+3)
  1801                           
  1802                           ;PIC16F917 Battery Management.c: 111: cellVolt[2] = ( cell3RR + 1 ) * sampleVoltage(CELL
      +                          3);
  1803  0675  3005               	movlw	5
  1804  0676  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  1805  067B  1283               	bcf	3,5	;RP0=0, select bank0
  1806  067C  1303               	bcf	3,6	;RP1=0, select bank0
  1807  067D  085E               	movf	?_sampleVoltage,w
  1808  067E  00EA               	movwf	_sampleBatteryCells$889
  1809  067F  085F               	movf	?_sampleVoltage+1,w
  1810  0680  00EB               	movwf	_sampleBatteryCells$889+1
  1811  0681  0860               	movf	?_sampleVoltage+2,w
  1812  0682  00EC               	movwf	_sampleBatteryCells$889+2
  1813                           
  1814                           ;PIC16F917 Battery Management.c: 111: cellVolt[2] = ( cell3RR + 1 ) * sampleVoltage(CELL
      +                          3);
  1815  0683  086A               	movf	_sampleBatteryCells$889,w
  1816  0684  00BE               	movwf	___ftmul@f1
  1817  0685  086B               	movf	_sampleBatteryCells$889+1,w
  1818  0686  00BF               	movwf	___ftmul@f1+1
  1819  0687  086C               	movf	_sampleBatteryCells$889+2,w
  1820  0688  00C0               	movwf	___ftmul@f1+2
  1821  0689  3000               	movlw	0
  1822  068A  00B1               	movwf	___ftadd@f1
  1823  068B  3080               	movlw	128
  1824  068C  00B2               	movwf	___ftadd@f1+1
  1825  068D  303F               	movlw	63
  1826  068E  00B3               	movwf	___ftadd@f1+2
  1827  068F  3007               	movlw	low (_cell3RR-__stringbase)
  1828  0690  0084               	movwf	4
  1829  0691  120A  158A  200A  120A  118A  	fcall	stringdir
  1830  0696  00B4               	movwf	___ftadd@f2
  1831  0697  120A  158A  200A  120A  118A  	fcall	stringdir
  1832  069C  00B5               	movwf	___ftadd@f2+1
  1833  069D  120A  158A  200A  120A  118A  	fcall	stringdir
  1834  06A2  00B6               	movwf	___ftadd@f2+2
  1835  06A3  120A  158A  26F7  120A  118A  	fcall	___ftadd
  1836  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1837  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  1838  06AA  0831               	movf	?___ftadd,w
  1839  06AB  00C1               	movwf	___ftmul@f2
  1840  06AC  0832               	movf	?___ftadd+1,w
  1841  06AD  00C2               	movwf	___ftmul@f2+1
  1842  06AE  0833               	movf	?___ftadd+2,w
  1843  06AF  00C3               	movwf	___ftmul@f2+2
  1844  06B0  120A  158A  2444  120A  118A  	fcall	___ftmul
  1845  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  1846  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  1847  06B7  083E               	movf	?___ftmul,w
  1848  06B8  1683               	bsf	3,5	;RP0=1, select bank1
  1849  06B9  1303               	bcf	3,6	;RP1=0, select bank1
  1850  06BA  00D3               	movwf	(_cellVolt^(0+128)+6)
  1851  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  1852  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  1853  06BD  083F               	movf	?___ftmul+1,w
  1854  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  1855  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  1856  06C0  00D4               	movwf	((_cellVolt+1)^(0+128)+6)
  1857  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1858  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1859  06C3  0840               	movf	?___ftmul+2,w
  1860  06C4  1683               	bsf	3,5	;RP0=1, select bank1
  1861  06C5  1303               	bcf	3,6	;RP1=0, select bank1
  1862  06C6  00D5               	movwf	((_cellVolt+2)^(0+128)+6)
  1863                           
  1864                           ;PIC16F917 Battery Management.c: 113: RD0 = 0;
  1865  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  1866  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  1867  06C9  1008               	bcf	8,0	;volatile
  1868                           
  1869                           ;PIC16F917 Battery Management.c: 114: RC3 = 1;
  1870  06CA  1587               	bsf	7,3	;volatile
  1871                           
  1872                           ;PIC16F917 Battery Management.c: 116: _delay((unsigned long)((5)*(8000000/4000.0)));
  1873  06CB  300D               	movlw	13
  1874  06CC  00E9               	movwf	??_sampleBatteryCells+1
  1875  06CD  30FB               	movlw	251
  1876  06CE  00E8               	movwf	??_sampleBatteryCells
  1877  06CF                     u2967:	
  1878  06CF  0BE8               	decfsz	??_sampleBatteryCells,f
  1879  06D0  2ECF               	goto	u2967
  1880  06D1  0BE9               	decfsz	??_sampleBatteryCells+1,f
  1881  06D2  2ECF               	goto	u2967
  1882  06D3  2ED4               	nop2
  1883                           
  1884                           ;PIC16F917 Battery Management.c: 118: cellVolt[3] = ( cell4RR + 1 ) * sampleVoltage(CELL
      +                          4);
  1885  06D4  3006               	movlw	6
  1886  06D5  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  1887  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  1888  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  1889  06DC  085E               	movf	?_sampleVoltage,w
  1890  06DD  00EA               	movwf	_sampleBatteryCells$889
  1891  06DE  085F               	movf	?_sampleVoltage+1,w
  1892  06DF  00EB               	movwf	_sampleBatteryCells$889+1
  1893  06E0  0860               	movf	?_sampleVoltage+2,w
  1894  06E1  00EC               	movwf	_sampleBatteryCells$889+2
  1895                           
  1896                           ;PIC16F917 Battery Management.c: 118: cellVolt[3] = ( cell4RR + 1 ) * sampleVoltage(CELL
      +                          4);
  1897  06E2  086A               	movf	_sampleBatteryCells$889,w
  1898  06E3  00BE               	movwf	___ftmul@f1
  1899  06E4  086B               	movf	_sampleBatteryCells$889+1,w
  1900  06E5  00BF               	movwf	___ftmul@f1+1
  1901  06E6  086C               	movf	_sampleBatteryCells$889+2,w
  1902  06E7  00C0               	movwf	___ftmul@f1+2
  1903  06E8  3000               	movlw	0
  1904  06E9  00B1               	movwf	___ftadd@f1
  1905  06EA  3080               	movlw	128
  1906  06EB  00B2               	movwf	___ftadd@f1+1
  1907  06EC  303F               	movlw	63
  1908  06ED  00B3               	movwf	___ftadd@f1+2
  1909  06EE  300A               	movlw	low (_cell4RR-__stringbase)
  1910  06EF  0084               	movwf	4
  1911  06F0  120A  158A  200A  120A  118A  	fcall	stringdir
  1912  06F5  00B4               	movwf	___ftadd@f2
  1913  06F6  120A  158A  200A  120A  118A  	fcall	stringdir
  1914  06FB  00B5               	movwf	___ftadd@f2+1
  1915  06FC  120A  158A  200A  120A  118A  	fcall	stringdir
  1916  0701  00B6               	movwf	___ftadd@f2+2
  1917  0702  120A  158A  26F7  120A  118A  	fcall	___ftadd
  1918  0707  1283               	bcf	3,5	;RP0=0, select bank0
  1919  0708  1303               	bcf	3,6	;RP1=0, select bank0
  1920  0709  0831               	movf	?___ftadd,w
  1921  070A  00C1               	movwf	___ftmul@f2
  1922  070B  0832               	movf	?___ftadd+1,w
  1923  070C  00C2               	movwf	___ftmul@f2+1
  1924  070D  0833               	movf	?___ftadd+2,w
  1925  070E  00C3               	movwf	___ftmul@f2+2
  1926  070F  120A  158A  2444  120A  118A  	fcall	___ftmul
  1927  0714  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0715  1303               	bcf	3,6	;RP1=0, select bank0
  1929  0716  083E               	movf	?___ftmul,w
  1930  0717  1683               	bsf	3,5	;RP0=1, select bank1
  1931  0718  1303               	bcf	3,6	;RP1=0, select bank1
  1932  0719  00D6               	movwf	(_cellVolt^(0+128)+9)
  1933  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1934  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1935  071C  083F               	movf	?___ftmul+1,w
  1936  071D  1683               	bsf	3,5	;RP0=1, select bank1
  1937  071E  1303               	bcf	3,6	;RP1=0, select bank1
  1938  071F  00D7               	movwf	((_cellVolt+1)^(0+128)+9)
  1939  0720  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0721  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0722  0840               	movf	?___ftmul+2,w
  1942  0723  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0724  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0725  00D8               	movwf	((_cellVolt+2)^(0+128)+9)
  1945                           
  1946                           ;PIC16F917 Battery Management.c: 119: cellVolt[4] = ( cell5RR + 1 ) * sampleVoltage(CELL
      +                          5);
  1947  0726  3003               	movlw	3
  1948  0727  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  1949  072C  1283               	bcf	3,5	;RP0=0, select bank0
  1950  072D  1303               	bcf	3,6	;RP1=0, select bank0
  1951  072E  085E               	movf	?_sampleVoltage,w
  1952  072F  00EA               	movwf	_sampleBatteryCells$889
  1953  0730  085F               	movf	?_sampleVoltage+1,w
  1954  0731  00EB               	movwf	_sampleBatteryCells$889+1
  1955  0732  0860               	movf	?_sampleVoltage+2,w
  1956  0733  00EC               	movwf	_sampleBatteryCells$889+2
  1957                           
  1958                           ;PIC16F917 Battery Management.c: 119: cellVolt[4] = ( cell5RR + 1 ) * sampleVoltage(CELL
      +                          5);
  1959  0734  086A               	movf	_sampleBatteryCells$889,w
  1960  0735  00BE               	movwf	___ftmul@f1
  1961  0736  086B               	movf	_sampleBatteryCells$889+1,w
  1962  0737  00BF               	movwf	___ftmul@f1+1
  1963  0738  086C               	movf	_sampleBatteryCells$889+2,w
  1964  0739  00C0               	movwf	___ftmul@f1+2
  1965  073A  3000               	movlw	0
  1966  073B  00B1               	movwf	___ftadd@f1
  1967  073C  3080               	movlw	128
  1968  073D  00B2               	movwf	___ftadd@f1+1
  1969  073E  303F               	movlw	63
  1970  073F  00B3               	movwf	___ftadd@f1+2
  1971  0740  300D               	movlw	low (_cell5RR-__stringbase)
  1972  0741  0084               	movwf	4
  1973  0742  120A  158A  200A  120A  118A  	fcall	stringdir
  1974  0747  00B4               	movwf	___ftadd@f2
  1975  0748  120A  158A  200A  120A  118A  	fcall	stringdir
  1976  074D  00B5               	movwf	___ftadd@f2+1
  1977  074E  120A  158A  200A  120A  118A  	fcall	stringdir
  1978  0753  00B6               	movwf	___ftadd@f2+2
  1979  0754  120A  158A  26F7  120A  118A  	fcall	___ftadd
  1980  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1981  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1982  075B  0831               	movf	?___ftadd,w
  1983  075C  00C1               	movwf	___ftmul@f2
  1984  075D  0832               	movf	?___ftadd+1,w
  1985  075E  00C2               	movwf	___ftmul@f2+1
  1986  075F  0833               	movf	?___ftadd+2,w
  1987  0760  00C3               	movwf	___ftmul@f2+2
  1988  0761  120A  158A  2444  120A  118A  	fcall	___ftmul
  1989  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1990  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1991  0768  083E               	movf	?___ftmul,w
  1992  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1993  076A  1303               	bcf	3,6	;RP1=0, select bank1
  1994  076B  00D9               	movwf	(_cellVolt^(0+128)+12)
  1995  076C  1283               	bcf	3,5	;RP0=0, select bank0
  1996  076D  1303               	bcf	3,6	;RP1=0, select bank0
  1997  076E  083F               	movf	?___ftmul+1,w
  1998  076F  1683               	bsf	3,5	;RP0=1, select bank1
  1999  0770  1303               	bcf	3,6	;RP1=0, select bank1
  2000  0771  00DA               	movwf	((_cellVolt+1)^(0+128)+12)
  2001  0772  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0773  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0774  0840               	movf	?___ftmul+2,w
  2004  0775  1683               	bsf	3,5	;RP0=1, select bank1
  2005  0776  1303               	bcf	3,6	;RP1=0, select bank1
  2006  0777  00DB               	movwf	((_cellVolt+2)^(0+128)+12)
  2007                           
  2008                           ;PIC16F917 Battery Management.c: 120: cellVolt[5] = ( cell6RR + 1 ) * sampleVoltage(CELL
      +                          6);
  2009  0778  3004               	movlw	4
  2010  0779  120A  158A  2195  120A  118A  	fcall	_sampleVoltage
  2011  077E  1283               	bcf	3,5	;RP0=0, select bank0
  2012  077F  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0780  085E               	movf	?_sampleVoltage,w
  2014  0781  00EA               	movwf	_sampleBatteryCells$889
  2015  0782  085F               	movf	?_sampleVoltage+1,w
  2016  0783  00EB               	movwf	_sampleBatteryCells$889+1
  2017  0784  0860               	movf	?_sampleVoltage+2,w
  2018  0785  00EC               	movwf	_sampleBatteryCells$889+2
  2019                           
  2020                           ;PIC16F917 Battery Management.c: 120: cellVolt[5] = ( cell6RR + 1 ) * sampleVoltage(CELL
      +                          6);
  2021  0786  086A               	movf	_sampleBatteryCells$889,w
  2022  0787  00BE               	movwf	___ftmul@f1
  2023  0788  086B               	movf	_sampleBatteryCells$889+1,w
  2024  0789  00BF               	movwf	___ftmul@f1+1
  2025  078A  086C               	movf	_sampleBatteryCells$889+2,w
  2026  078B  00C0               	movwf	___ftmul@f1+2
  2027  078C  3000               	movlw	0
  2028  078D  00B1               	movwf	___ftadd@f1
  2029  078E  3080               	movlw	128
  2030  078F  00B2               	movwf	___ftadd@f1+1
  2031  0790  303F               	movlw	63
  2032  0791  00B3               	movwf	___ftadd@f1+2
  2033  0792  3010               	movlw	low (_cell6RR-__stringbase)
  2034  0793  0084               	movwf	4
  2035  0794  120A  158A  200A  120A  118A  	fcall	stringdir
  2036  0799  00B4               	movwf	___ftadd@f2
  2037  079A  120A  158A  200A  120A  118A  	fcall	stringdir
  2038  079F  00B5               	movwf	___ftadd@f2+1
  2039  07A0  120A  158A  200A  120A  118A  	fcall	stringdir
  2040  07A5  00B6               	movwf	___ftadd@f2+2
  2041  07A6  120A  158A  26F7  120A  118A  	fcall	___ftadd
  2042  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  2043  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  2044  07AD  0831               	movf	?___ftadd,w
  2045  07AE  00C1               	movwf	___ftmul@f2
  2046  07AF  0832               	movf	?___ftadd+1,w
  2047  07B0  00C2               	movwf	___ftmul@f2+1
  2048  07B1  0833               	movf	?___ftadd+2,w
  2049  07B2  00C3               	movwf	___ftmul@f2+2
  2050  07B3  120A  158A  2444   	fcall	___ftmul
  2051  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  2052  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  2053  07B8  083E               	movf	?___ftmul,w
  2054  07B9  1683               	bsf	3,5	;RP0=1, select bank1
  2055  07BA  1303               	bcf	3,6	;RP1=0, select bank1
  2056  07BB  00DC               	movwf	(_cellVolt^(0+128)+15)
  2057  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  2058  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  2059  07BE  083F               	movf	?___ftmul+1,w
  2060  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  2061  07C0  1303               	bcf	3,6	;RP1=0, select bank1
  2062  07C1  00DD               	movwf	((_cellVolt+1)^(0+128)+15)
  2063  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  2064  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  2065  07C4  0840               	movf	?___ftmul+2,w
  2066  07C5  1683               	bsf	3,5	;RP0=1, select bank1
  2067  07C6  1303               	bcf	3,6	;RP1=0, select bank1
  2068  07C7  00DE               	movwf	((_cellVolt+2)^(0+128)+15)
  2069                           
  2070                           ;PIC16F917 Battery Management.c: 122: RC3 = 0;
  2071  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  2072  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  2073  07CA  1187               	bcf	7,3	;volatile
  2074                           
  2075                           ;PIC16F917 Battery Management.c: 124: RC2 = 0;
  2076  07CB  1107               	bcf	7,2	;volatile
  2077  07CC  0008               	return
  2078  07CD                     __end_of_sampleBatteryCells:	
  2079                           
  2080                           	psect	text5
  2081  0995                     __ptext5:	
  2082 ;; *************** function _sampleVoltage *****************
  2083 ;; Defined at:
  2084 ;;		line 156 in file "PIC16F917 Battery Management.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  chan            1    wreg     enum E2721
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  chan            1   67[BANK0 ] enum E2721
  2089 ;;  i               2   68[BANK0 ] int 
  2090 ;;  temp            2   70[BANK0 ] unsigned int 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  3   62[BANK0 ] float 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2100 ;;      Params:         0       3       0       0       0
  2101 ;;      Locals:         0       5       0       0       0
  2102 ;;      Temps:          0       2       0       0       0
  2103 ;;      Totals:         0      10       0       0       0
  2104 ;;Total ram usage:       10 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    4
  2107 ;; This function calls:
  2108 ;;		___ftdiv
  2109 ;;		___ftmul
  2110 ;;		___lwdiv
  2111 ;;		___lwtoft
  2112 ;;		_analogRead
  2113 ;; This function is called by:
  2114 ;;		_sampleBatteryCells
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           
  2119                           ;psect for function _sampleVoltage
  2120  0995                     _sampleVoltage:	
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _sampleVoltage: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2124                           ;sampleVoltage@chan stored from wreg
  2125  0995  1283               	bcf	3,5	;RP0=0, select bank0
  2126  0996  1303               	bcf	3,6	;RP1=0, select bank0
  2127  0997  00E3               	movwf	sampleVoltage@chan
  2128                           
  2129                           ;PIC16F917 Battery Management.c: 158: uint16_t temp = 0;
  2130  0998  01E6               	clrf	sampleVoltage@temp
  2131  0999  01E7               	clrf	sampleVoltage@temp+1
  2132                           
  2133                           ;PIC16F917 Battery Management.c: 160: analogRead(chan);
  2134  099A  0863               	movf	sampleVoltage@chan,w
  2135  099B  160A  118A  264B  120A  158A  	fcall	_analogRead
  2136                           
  2137                           ;PIC16F917 Battery Management.c: 162: for ( int i = 0; i <= sampleNum; i++)
  2138  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  2139  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  2140  09A2  01E4               	clrf	sampleVoltage@i
  2141  09A3  01E5               	clrf	sampleVoltage@i+1
  2142  09A4  301C               	movlw	low (_sampleNum-__stringbase)
  2143  09A5  0084               	movwf	4
  2144  09A6  120A  158A  200A  120A  158A  	fcall	stringdir
  2145  09AB  00E1               	movwf	??_sampleVoltage
  2146  09AC  0865               	movf	sampleVoltage@i+1,w
  2147  09AD  3A80               	xorlw	128
  2148  09AE  3C80               	sublw	128
  2149  09AF  1D03               	skipz
  2150  09B0  29B3               	goto	u2625
  2151  09B1  0864               	movf	sampleVoltage@i,w
  2152  09B2  0261               	subwf	??_sampleVoltage,w
  2153  09B3                     u2625:	
  2154  09B3  1C03               	btfss	3,0
  2155  09B4  29DC               	goto	l2301
  2156  09B5                     l2295:	
  2157                           
  2158                           ;PIC16F917 Battery Management.c: 163: {
  2159                           ;PIC16F917 Battery Management.c: 164: temp += analogRead(chan);
  2160  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  2161  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  2162  09B7  0863               	movf	sampleVoltage@chan,w
  2163  09B8  160A  118A  264B  120A  158A  	fcall	_analogRead
  2164  09BD  1283               	bcf	3,5	;RP0=0, select bank0
  2165  09BE  1303               	bcf	3,6	;RP1=0, select bank0
  2166  09BF  0820               	movf	?_analogRead,w
  2167  09C0  07E6               	addwf	sampleVoltage@temp,f
  2168  09C1  1803               	skipnc
  2169  09C2  0AE7               	incf	sampleVoltage@temp+1,f
  2170  09C3  0821               	movf	?_analogRead+1,w
  2171  09C4  07E7               	addwf	sampleVoltage@temp+1,f
  2172  09C5  3001               	movlw	1
  2173  09C6  07E4               	addwf	sampleVoltage@i,f
  2174  09C7  1803               	skipnc
  2175  09C8  0AE5               	incf	sampleVoltage@i+1,f
  2176  09C9  3000               	movlw	0
  2177  09CA  07E5               	addwf	sampleVoltage@i+1,f
  2178  09CB  301C               	movlw	low (_sampleNum-__stringbase)
  2179  09CC  0084               	movwf	4
  2180  09CD  120A  158A  200A  120A  158A  	fcall	stringdir
  2181  09D2  00E1               	movwf	??_sampleVoltage
  2182  09D3  0865               	movf	sampleVoltage@i+1,w
  2183  09D4  3A80               	xorlw	128
  2184  09D5  3C80               	sublw	128
  2185  09D6  1D03               	skipz
  2186  09D7  29DA               	goto	u2635
  2187  09D8  0864               	movf	sampleVoltage@i,w
  2188  09D9  0261               	subwf	??_sampleVoltage,w
  2189  09DA                     u2635:	
  2190  09DA  1803               	skipnc
  2191  09DB  29B5               	goto	l2295
  2192  09DC                     l2301:	
  2193                           
  2194                           ;PIC16F917 Battery Management.c: 165: }
  2195                           ;PIC16F917 Battery Management.c: 167: temp = temp / sampleNum;
  2196  09DC  301C               	movlw	low (_sampleNum-__stringbase)
  2197  09DD  0084               	movwf	4
  2198  09DE  120A  158A  200A  120A  158A  	fcall	stringdir
  2199  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  2200  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  2201  09E5  00E1               	movwf	??_sampleVoltage
  2202  09E6  01E2               	clrf	??_sampleVoltage+1
  2203  09E7  0861               	movf	??_sampleVoltage,w
  2204  09E8  00A0               	movwf	___lwdiv@divisor
  2205  09E9  0862               	movf	??_sampleVoltage+1,w
  2206  09EA  00A1               	movwf	___lwdiv@divisor+1
  2207  09EB  0867               	movf	sampleVoltage@temp+1,w
  2208  09EC  00A3               	movwf	___lwdiv@dividend+1
  2209  09ED  0866               	movf	sampleVoltage@temp,w
  2210  09EE  00A2               	movwf	___lwdiv@dividend
  2211  09EF  160A  118A  2684  120A  158A  	fcall	___lwdiv
  2212  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  2213  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  2214  09F6  0821               	movf	?___lwdiv+1,w
  2215  09F7  00E7               	movwf	sampleVoltage@temp+1
  2216  09F8  0820               	movf	?___lwdiv,w
  2217  09F9  00E6               	movwf	sampleVoltage@temp
  2218                           
  2219                           ;PIC16F917 Battery Management.c: 170: return (temp * supVolt)/1023;
  2220  09FA  30C0               	movlw	192
  2221  09FB  00CE               	movwf	___ftdiv@f2
  2222  09FC  307F               	movlw	127
  2223  09FD  00CF               	movwf	___ftdiv@f2+1
  2224  09FE  3044               	movlw	68
  2225  09FF  00D0               	movwf	___ftdiv@f2+2
  2226  0A00  0878               	movf	_supVolt,w
  2227  0A01  00BE               	movwf	___ftmul@f1
  2228  0A02  0879               	movf	_supVolt+1,w
  2229  0A03  00BF               	movwf	___ftmul@f1+1
  2230  0A04  087A               	movf	_supVolt+2,w
  2231  0A05  00C0               	movwf	___ftmul@f1+2
  2232  0A06  0867               	movf	sampleVoltage@temp+1,w
  2233  0A07  00A9               	movwf	___lwtoft@c+1
  2234  0A08  0866               	movf	sampleVoltage@temp,w
  2235  0A09  00A8               	movwf	___lwtoft@c
  2236  0A0A  160A  118A  24DE  120A  158A  	fcall	___lwtoft
  2237  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0A11  0828               	movf	?___lwtoft,w
  2240  0A12  00C1               	movwf	___ftmul@f2
  2241  0A13  0829               	movf	?___lwtoft+1,w
  2242  0A14  00C2               	movwf	___ftmul@f2+1
  2243  0A15  082A               	movf	?___lwtoft+2,w
  2244  0A16  00C3               	movwf	___ftmul@f2+2
  2245  0A17  120A  158A  2444  120A  158A  	fcall	___ftmul
  2246  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  2248  0A1E  083E               	movf	?___ftmul,w
  2249  0A1F  00D1               	movwf	___ftdiv@f1
  2250  0A20  083F               	movf	?___ftmul+1,w
  2251  0A21  00D2               	movwf	___ftdiv@f1+1
  2252  0A22  0840               	movf	?___ftmul+2,w
  2253  0A23  00D3               	movwf	___ftdiv@f1+2
  2254  0A24  120A  158A  238C   	fcall	___ftdiv
  2255  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0A28  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0A29  084E               	movf	?___ftdiv,w
  2258  0A2A  00DE               	movwf	?_sampleVoltage
  2259  0A2B  084F               	movf	?___ftdiv+1,w
  2260  0A2C  00DF               	movwf	?_sampleVoltage+1
  2261  0A2D  0850               	movf	?___ftdiv+2,w
  2262  0A2E  00E0               	movwf	?_sampleVoltage+2
  2263  0A2F  0008               	return
  2264  0A30                     __end_of_sampleVoltage:	
  2265                           
  2266                           	psect	text6
  2267  164B                     __ptext6:	
  2268 ;; *************** function _analogRead *****************
  2269 ;; Defined at:
  2270 ;;		line 73 in file "adc.h"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  chan            1    wreg     unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  chan            1    4[BANK0 ] unsigned char 
  2275 ;;  returnVal       2    5[BANK0 ] unsigned int 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2    0[BANK0 ] unsigned int 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       2       0       0       0
  2286 ;;      Locals:         0       3       0       0       0
  2287 ;;      Temps:          0       2       0       0       0
  2288 ;;      Totals:         0       7       0       0       0
  2289 ;;Total ram usage:        7 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_sampleReference
  2296 ;;		_sampleVoltage
  2297 ;;		_sampleCurrent
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _analogRead
  2303  164B                     _analogRead:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2307                           ;analogRead@chan stored from wreg
  2308  164B  1283               	bcf	3,5	;RP0=0, select bank0
  2309  164C  1303               	bcf	3,6	;RP1=0, select bank0
  2310  164D  00A4               	movwf	analogRead@chan
  2311                           
  2312                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2313  164E  0824               	movf	analogRead@chan,w
  2314  164F  00A2               	movwf	??_analogRead
  2315  1650  0DA2               	rlf	??_analogRead,f
  2316  1651  0DA2               	rlf	??_analogRead,f
  2317  1652  081F               	movf	31,w	;volatile
  2318  1653  0622               	xorwf	??_analogRead,w
  2319  1654  39E3               	andlw	-29
  2320  1655  0622               	xorwf	??_analogRead,w
  2321  1656  009F               	movwf	31	;volatile
  2322                           
  2323                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2324  1657  141F               	bsf	31,0	;volatile
  2325                           
  2326                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2327  1658  3006               	movlw	6
  2328  1659  00A2               	movwf	??_analogRead
  2329  165A                     u2977:	
  2330  165A  0BA2               	decfsz	??_analogRead,f
  2331  165B  2E5A               	goto	u2977
  2332  165C  0000               	nop
  2333                           
  2334                           ;adc.h: 81: ADCON0bits.GO = 1;
  2335  165D  1283               	bcf	3,5	;RP0=0, select bank0
  2336  165E  1303               	bcf	3,6	;RP1=0, select bank0
  2337  165F  149F               	bsf	31,1	;volatile
  2338                           
  2339                           ;adc.h: 83: unsigned int returnVal = 0;
  2340  1660  01A5               	clrf	analogRead@returnVal
  2341  1661  01A6               	clrf	analogRead@returnVal+1
  2342  1662                     l223:	
  2343                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2344                           
  2345  1662  189F               	btfsc	31,1	;volatile
  2346  1663  2E62               	goto	l223
  2347                           
  2348                           ;adc.h: 89: returnVal = ADRESH;
  2349  1664  081E               	movf	30,w	;volatile
  2350  1665  00A2               	movwf	??_analogRead
  2351  1666  01A3               	clrf	??_analogRead+1
  2352  1667  0822               	movf	??_analogRead,w
  2353  1668  00A5               	movwf	analogRead@returnVal
  2354  1669  0823               	movf	??_analogRead+1,w
  2355  166A  00A6               	movwf	analogRead@returnVal+1
  2356                           
  2357                           ;adc.h: 90: returnVal = returnVal << 8;
  2358  166B  0825               	movf	analogRead@returnVal,w
  2359  166C  00A3               	movwf	??_analogRead+1
  2360  166D  01A2               	clrf	??_analogRead
  2361  166E  0822               	movf	??_analogRead,w
  2362  166F  00A5               	movwf	analogRead@returnVal
  2363  1670  0823               	movf	??_analogRead+1,w
  2364  1671  00A6               	movwf	analogRead@returnVal+1
  2365                           
  2366                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2367  1672  0825               	movf	analogRead@returnVal,w
  2368  1673  1683               	bsf	3,5	;RP0=1, select bank1
  2369  1674  1303               	bcf	3,6	;RP1=0, select bank1
  2370  1675  041E               	iorwf	30,w	;volatile
  2371  1676  1283               	bcf	3,5	;RP0=0, select bank0
  2372  1677  1303               	bcf	3,6	;RP1=0, select bank0
  2373  1678  00A2               	movwf	??_analogRead
  2374  1679  0826               	movf	analogRead@returnVal+1,w
  2375  167A  00A3               	movwf	??_analogRead+1
  2376  167B  0822               	movf	??_analogRead,w
  2377  167C  00A5               	movwf	analogRead@returnVal
  2378  167D  0823               	movf	??_analogRead+1,w
  2379  167E  00A6               	movwf	analogRead@returnVal+1
  2380                           
  2381                           ;adc.h: 93: return returnVal;
  2382  167F  0826               	movf	analogRead@returnVal+1,w
  2383  1680  00A1               	movwf	?_analogRead+1
  2384  1681  0825               	movf	analogRead@returnVal,w
  2385  1682  00A0               	movwf	?_analogRead
  2386  1683  0008               	return
  2387  1684                     __end_of_analogRead:	
  2388                           
  2389                           	psect	text7
  2390  14DE                     __ptext7:	
  2391 ;; *************** function ___lwtoft *****************
  2392 ;; Defined at:
  2393 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  c               2    8[BANK0 ] unsigned int 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;		None
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  3    8[BANK0 ] float 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0, pclath, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2407 ;;      Params:         0       3       0       0       0
  2408 ;;      Locals:         0       0       0       0       0
  2409 ;;      Temps:          0       1       0       0       0
  2410 ;;      Totals:         0       4       0       0       0
  2411 ;;Total ram usage:        4 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    3
  2414 ;; This function calls:
  2415 ;;		___ftpack
  2416 ;; This function is called by:
  2417 ;;		_sampleReference
  2418 ;;		_sampleVoltage
  2419 ;;		_sampleCurrent
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           
  2424                           ;psect for function ___lwtoft
  2425  14DE                     ___lwtoft:	
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2429  14DE  1283               	bcf	3,5	;RP0=0, select bank0
  2430  14DF  1303               	bcf	3,6	;RP1=0, select bank0
  2431  14E0  0828               	movf	___lwtoft@c,w
  2432  14E1  00A0               	movwf	___ftpack@arg
  2433  14E2  0829               	movf	___lwtoft@c+1,w
  2434  14E3  00A1               	movwf	___ftpack@arg+1
  2435  14E4  01A2               	clrf	___ftpack@arg+2
  2436  14E5  308E               	movlw	142
  2437  14E6  00AB               	movwf	??___lwtoft
  2438  14E7  082B               	movf	??___lwtoft,w
  2439  14E8  00A3               	movwf	___ftpack@exp
  2440  14E9  01A4               	clrf	___ftpack@sign
  2441  14EA  120A  158A  2099   	fcall	___ftpack
  2442  14ED  1283               	bcf	3,5	;RP0=0, select bank0
  2443  14EE  1303               	bcf	3,6	;RP1=0, select bank0
  2444  14EF  0820               	movf	?___ftpack,w
  2445  14F0  00A8               	movwf	?___lwtoft
  2446  14F1  0821               	movf	?___ftpack+1,w
  2447  14F2  00A9               	movwf	?___lwtoft+1
  2448  14F3  0822               	movf	?___ftpack+2,w
  2449  14F4  00AA               	movwf	?___lwtoft+2
  2450  14F5  0008               	return
  2451  14F6                     __end_of___lwtoft:	
  2452                           
  2453                           	psect	text8
  2454  1684                     __ptext8:	
  2455 ;; *************** function ___lwdiv *****************
  2456 ;; Defined at:
  2457 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  divisor         2    0[BANK0 ] unsigned int 
  2460 ;;  dividend        2    2[BANK0 ] unsigned int 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;  quotient        2    5[BANK0 ] unsigned int 
  2463 ;;  counter         1    7[BANK0 ] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  2    0[BANK0 ] unsigned int 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2473 ;;      Params:         0       4       0       0       0
  2474 ;;      Locals:         0       3       0       0       0
  2475 ;;      Temps:          0       1       0       0       0
  2476 ;;      Totals:         0       8       0       0       0
  2477 ;;Total ram usage:        8 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    2
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_sampleReference
  2484 ;;		_sampleVoltage
  2485 ;;		_sampleCurrent
  2486 ;;		_uint16ToASCII
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function ___lwdiv
  2492  1684                     ___lwdiv:	
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2496  1684  1283               	bcf	3,5	;RP0=0, select bank0
  2497  1685  1303               	bcf	3,6	;RP1=0, select bank0
  2498  1686  01A5               	clrf	___lwdiv@quotient
  2499  1687  01A6               	clrf	___lwdiv@quotient+1
  2500  1688  0820               	movf	___lwdiv@divisor,w
  2501  1689  0421               	iorwf	___lwdiv@divisor+1,w
  2502  168A  1903               	btfsc	3,2
  2503  168B  2EBD               	goto	l2115
  2504  168C  01A7               	clrf	___lwdiv@counter
  2505  168D  0AA7               	incf	___lwdiv@counter,f
  2506  168E                     l2103:	
  2507  168E  1BA1               	btfsc	___lwdiv@divisor+1,7
  2508  168F  2E9C               	goto	l2105
  2509  1690  3001               	movlw	1
  2510  1691                     u2395:	
  2511  1691  1003               	clrc
  2512  1692  0DA0               	rlf	___lwdiv@divisor,f
  2513  1693  0DA1               	rlf	___lwdiv@divisor+1,f
  2514  1694  3EFF               	addlw	-1
  2515  1695  1D03               	skipz
  2516  1696  2E91               	goto	u2395
  2517  1697  3001               	movlw	1
  2518  1698  00A4               	movwf	??___lwdiv
  2519  1699  0824               	movf	??___lwdiv,w
  2520  169A  07A7               	addwf	___lwdiv@counter,f
  2521  169B  2E8E               	goto	l2103
  2522  169C                     l2105:	
  2523  169C  3001               	movlw	1
  2524  169D                     u2415:	
  2525  169D  1003               	clrc
  2526  169E  0DA5               	rlf	___lwdiv@quotient,f
  2527  169F  0DA6               	rlf	___lwdiv@quotient+1,f
  2528  16A0  3EFF               	addlw	-1
  2529  16A1  1D03               	skipz
  2530  16A2  2E9D               	goto	u2415
  2531  16A3  0821               	movf	___lwdiv@divisor+1,w
  2532  16A4  0223               	subwf	___lwdiv@dividend+1,w
  2533  16A5  1D03               	skipz
  2534  16A6  2EA9               	goto	u2425
  2535  16A7  0820               	movf	___lwdiv@divisor,w
  2536  16A8  0222               	subwf	___lwdiv@dividend,w
  2537  16A9                     u2425:	
  2538  16A9  1C03               	skipc
  2539  16AA  2EB2               	goto	l2111
  2540  16AB  0820               	movf	___lwdiv@divisor,w
  2541  16AC  02A2               	subwf	___lwdiv@dividend,f
  2542  16AD  0821               	movf	___lwdiv@divisor+1,w
  2543  16AE  1C03               	skipc
  2544  16AF  03A3               	decf	___lwdiv@dividend+1,f
  2545  16B0  02A3               	subwf	___lwdiv@dividend+1,f
  2546  16B1  1425               	bsf	___lwdiv@quotient,0
  2547  16B2                     l2111:	
  2548  16B2  3001               	movlw	1
  2549  16B3                     u2435:	
  2550  16B3  1003               	clrc
  2551  16B4  0CA1               	rrf	___lwdiv@divisor+1,f
  2552  16B5  0CA0               	rrf	___lwdiv@divisor,f
  2553  16B6  3EFF               	addlw	-1
  2554  16B7  1D03               	skipz
  2555  16B8  2EB3               	goto	u2435
  2556  16B9  3001               	movlw	1
  2557  16BA  02A7               	subwf	___lwdiv@counter,f
  2558  16BB  1D03               	btfss	3,2
  2559  16BC  2E9C               	goto	l2105
  2560  16BD                     l2115:	
  2561  16BD  0826               	movf	___lwdiv@quotient+1,w
  2562  16BE  00A1               	movwf	?___lwdiv+1
  2563  16BF  0825               	movf	___lwdiv@quotient,w
  2564  16C0  00A0               	movwf	?___lwdiv
  2565  16C1  0008               	return
  2566  16C2                     __end_of___lwdiv:	
  2567                           
  2568                           	psect	text9
  2569  15DB                     __ptext9:	
  2570 ;; *************** function _initController *****************
  2571 ;; Defined at:
  2572 ;;		line 214 in file "setup.h"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2586 ;;      Params:         0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    5
  2593 ;; This function calls:
  2594 ;;		_initADC
  2595 ;;		_initLCD
  2596 ;;		_timeSetup
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _initController
  2604  15DB                     _initController:	
  2605                           
  2606                           ;setup.h: 217: OSCCONbits.IRCF = 0b111;
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  2610  15DB  3070               	movlw	112
  2611  15DC  1683               	bsf	3,5	;RP0=1, select bank1
  2612  15DD  1303               	bcf	3,6	;RP1=0, select bank1
  2613  15DE  048F               	iorwf	15,f	;volatile
  2614                           
  2615                           ;setup.h: 218: OSCCONbits.SCS = 0;
  2616  15DF  100F               	bcf	15,0	;volatile
  2617                           
  2618                           ;setup.h: 221: TRISA = 0b00111111;
  2619  15E0  303F               	movlw	63
  2620  15E1  0085               	movwf	5	;volatile
  2621                           
  2622                           ;setup.h: 222: TRISB = 0b00000000;
  2623  15E2  0186               	clrf	6	;volatile
  2624                           
  2625                           ;setup.h: 223: TRISC = 0b00000000;
  2626  15E3  0187               	clrf	7	;volatile
  2627                           
  2628                           ;setup.h: 224: TRISD = 0b01100000;
  2629  15E4  3060               	movlw	96
  2630  15E5  0088               	movwf	8	;volatile
  2631                           
  2632                           ;setup.h: 225: TRISE = 0b00000111;
  2633  15E6  3007               	movlw	7
  2634  15E7  0089               	movwf	9	;volatile
  2635                           
  2636                           ;setup.h: 227: ANSEL = 0xFF;
  2637  15E8  30FF               	movlw	255
  2638  15E9  0091               	movwf	17	;volatile
  2639                           
  2640                           ;setup.h: 229: PORTA = 0;
  2641  15EA  1283               	bcf	3,5	;RP0=0, select bank0
  2642  15EB  1303               	bcf	3,6	;RP1=0, select bank0
  2643  15EC  0185               	clrf	5	;volatile
  2644                           
  2645                           ;setup.h: 230: PORTB = 0;
  2646  15ED  0186               	clrf	6	;volatile
  2647                           
  2648                           ;setup.h: 231: PORTC = 0;
  2649  15EE  0187               	clrf	7	;volatile
  2650                           
  2651                           ;setup.h: 232: PORTD = 0;
  2652  15EF  0188               	clrf	8	;volatile
  2653                           
  2654                           ;setup.h: 233: PORTE = 0;
  2655  15F0  0189               	clrf	9	;volatile
  2656                           
  2657                           ;setup.h: 235: CMCON0bits.CM = 0b111;
  2658  15F1  3007               	movlw	7
  2659  15F2  1683               	bsf	3,5	;RP0=1, select bank1
  2660  15F3  1303               	bcf	3,6	;RP1=0, select bank1
  2661  15F4  049C               	iorwf	28,f	;volatile
  2662                           
  2663                           ;setup.h: 236: LCDCON = 0;
  2664  15F5  1283               	bcf	3,5	;RP0=0, select bank2
  2665  15F6  1703               	bsf	3,6	;RP1=1, select bank2
  2666  15F7  0187               	clrf	7	;volatile
  2667                           
  2668                           ;setup.h: 237: LVDCONbits.LVDEN = 0;
  2669  15F8  1209               	bcf	9,4	;volatile
  2670                           
  2671                           ;setup.h: 238: CCP1CON = 0;
  2672  15F9  1283               	bcf	3,5	;RP0=0, select bank0
  2673  15FA  1303               	bcf	3,6	;RP1=0, select bank0
  2674  15FB  0197               	clrf	23	;volatile
  2675                           
  2676                           ;setup.h: 239: CCP2CON = 0;
  2677  15FC  019D               	clrf	29	;volatile
  2678                           
  2679                           ;setup.h: 240: OPTION_REGbits.nRBPU = 1;
  2680  15FD  1683               	bsf	3,5	;RP0=1, select bank1
  2681  15FE  1303               	bcf	3,6	;RP1=0, select bank1
  2682  15FF  1781               	bsf	1,7	;volatile
  2683                           
  2684                           ;setup.h: 242: RD2 = 0;
  2685  1600  1283               	bcf	3,5	;RP0=0, select bank0
  2686  1601  1303               	bcf	3,6	;RP1=0, select bank0
  2687  1602  1108               	bcf	8,2	;volatile
  2688                           
  2689                           ;setup.h: 245: RC0 = 1;
  2690  1603  1407               	bsf	7,0	;volatile
  2691                           
  2692                           ;setup.h: 248: initADC();
  2693  1604  160A  118A  2484  160A  118A  	fcall	_initADC
  2694                           
  2695                           ;setup.h: 250: timeSetup();
  2696  1609  120A  158A  208D  160A  118A  	fcall	_timeSetup
  2697                           
  2698                           ;setup.h: 252: initLCD();
  2699  160E  120A  158A  2230   	fcall	_initLCD
  2700  1611  0008               	return
  2701  1612                     __end_of_initController:	
  2702                           
  2703                           	psect	text10
  2704  088D                     __ptext10:	
  2705 ;; *************** function _timeSetup *****************
  2706 ;; Defined at:
  2707 ;;		line 49 in file "timer0.h"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;		None               void
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2721 ;;      Params:         0       0       0       0       0
  2722 ;;      Locals:         0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0
  2724 ;;      Totals:         0       0       0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    2
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_initController
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _timeSetup
  2737  088D                     _timeSetup:	
  2738                           
  2739                           ;timer0.h: 51: OPTION_REGbits.T0CS = 0;
  2740                           
  2741                           ;incstack = 0
  2742                           ; Regs used in _timeSetup: [wreg+status,2+status,0]
  2743  088D  1683               	bsf	3,5	;RP0=1, select bank1
  2744  088E  1303               	bcf	3,6	;RP1=0, select bank1
  2745  088F  1281               	bcf	1,5	;volatile
  2746                           
  2747                           ;timer0.h: 52: OPTION_REGbits.T0SE = 1;
  2748  0890  1601               	bsf	1,4	;volatile
  2749                           
  2750                           ;timer0.h: 53: OPTION_REGbits.PSA = 0 ;
  2751  0891  1181               	bcf	1,3	;volatile
  2752                           
  2753                           ;timer0.h: 54: OPTION_REGbits.PS = 0b111;
  2754  0892  3007               	movlw	7
  2755  0893  0481               	iorwf	1,f	;volatile
  2756                           
  2757                           ;timer0.h: 57: INTCONbits.T0IE = 1;
  2758  0894  168B               	bsf	11,5	;volatile
  2759                           
  2760                           ;timer0.h: 58: INTCONbits.T0IF = 0;
  2761  0895  110B               	bcf	11,2	;volatile
  2762                           
  2763                           ;timer0.h: 59: INTCONbits.PEIE = 1;
  2764  0896  170B               	bsf	11,6	;volatile
  2765                           
  2766                           ;timer0.h: 60: INTCONbits.GIE = 1;
  2767  0897  178B               	bsf	11,7	;volatile
  2768  0898  0008               	return
  2769  0899                     __end_of_timeSetup:	
  2770                           
  2771                           	psect	text11
  2772  1484                     __ptext11:	
  2773 ;; *************** function _initADC *****************
  2774 ;; Defined at:
  2775 ;;		line 56 in file "adc.h"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;		None               void
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2789 ;;      Params:         0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    2
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_initController
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _initADC
  2805  1484                     _initADC:	
  2806                           
  2807                           ;adc.h: 58: ADCON0 = 0b10000001;
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in _initADC: [wreg+status,2]
  2811  1484  3081               	movlw	129
  2812  1485  1283               	bcf	3,5	;RP0=0, select bank0
  2813  1486  1303               	bcf	3,6	;RP1=0, select bank0
  2814  1487  009F               	movwf	31	;volatile
  2815                           
  2816                           ;adc.h: 65: ADCON1 = 0b01110000;
  2817  1488  3070               	movlw	112
  2818  1489  1683               	bsf	3,5	;RP0=1, select bank1
  2819  148A  1303               	bcf	3,6	;RP1=0, select bank1
  2820  148B  009F               	movwf	31	;volatile
  2821                           
  2822                           ;adc.h: 68: ADRESH = 0x00;
  2823  148C  1283               	bcf	3,5	;RP0=0, select bank0
  2824  148D  1303               	bcf	3,6	;RP1=0, select bank0
  2825  148E  019E               	clrf	30	;volatile
  2826                           
  2827                           ;adc.h: 69: ADRESL = 0x00;
  2828  148F  1683               	bsf	3,5	;RP0=1, select bank1
  2829  1490  1303               	bcf	3,6	;RP1=0, select bank1
  2830  1491  019E               	clrf	30	;volatile
  2831  1492  0008               	return
  2832  1493                     __end_of_initADC:	
  2833                           
  2834                           	psect	text12
  2835  1744                     __ptext12:	
  2836 ;; *************** function _handlePB *****************
  2837 ;; Defined at:
  2838 ;;		line 320 in file "PIC16F917 Battery Management.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;		None               void
  2845 ;; Registers used:
  2846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2852 ;;      Params:         0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0
  2854 ;;      Temps:          0       0       3       0       0
  2855 ;;      Totals:         0       0       3       0       0
  2856 ;;Total ram usage:        3 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    5
  2859 ;; This function calls:
  2860 ;;		_initLCD
  2861 ;;		_stopWatch
  2862 ;; This function is called by:
  2863 ;;		_main
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           
  2868                           ;psect for function _handlePB
  2869  1744                     _handlePB:	
  2870                           
  2871                           ;PIC16F917 Battery Management.c: 322: if( RD5 == 1 )
  2872                           
  2873                           ;incstack = 0
  2874                           ; Regs used in _handlePB: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2875  1744  1283               	bcf	3,5	;RP0=0, select bank0
  2876  1745  1303               	bcf	3,6	;RP1=0, select bank0
  2877  1746  1A88               	btfsc	8,5	;volatile
  2878  1747  0008               	return
  2879                           
  2880                           ;PIC16F917 Battery Management.c: 325: _delay((unsigned long)((50)*(8000000/4000.0)));
  2881                           
  2882                           ;PIC16F917 Battery Management.c: 323: return;
  2883  1748  3082               	movlw	130
  2884  1749  1683               	bsf	3,5	;RP0=1, select bank1
  2885  174A  1303               	bcf	3,6	;RP1=0, select bank1
  2886  174B  00B2               	movwf	(??_handlePB^(0+128)+1)
  2887  174C  30DD               	movlw	221
  2888  174D  00B1               	movwf	??_handlePB^(0+128)
  2889  174E                     u2987:	
  2890  174E  0BB1               	decfsz	??_handlePB^(0+128),f
  2891  174F  2F4E               	goto	u2987
  2892  1750  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  2893  1751  2F4E               	goto	u2987
  2894  1752  2F53               	nop2
  2895                           
  2896                           ;PIC16F917 Battery Management.c: 327: if( RD5 == 1 )
  2897  1753  1283               	bcf	3,5	;RP0=0, select bank0
  2898  1754  1303               	bcf	3,6	;RP1=0, select bank0
  2899  1755  1A88               	btfsc	8,5	;volatile
  2900  1756  0008               	return
  2901                           
  2902                           ;PIC16F917 Battery Management.c: 330: stopWatch(0);
  2903                           
  2904                           ;PIC16F917 Battery Management.c: 328: return;
  2905  1757  3000               	movlw	0
  2906  1758  120A  158A  25F1  160A  118A  	fcall	_stopWatch
  2907  175D                     l316:	
  2908                           ;PIC16F917 Battery Management.c: 331: while( RD5 == 0 )
  2909                           
  2910  175D  1283               	bcf	3,5	;RP0=0, select bank0
  2911  175E  1303               	bcf	3,6	;RP1=0, select bank0
  2912  175F  1A88               	btfsc	8,5	;volatile
  2913  1760  2F94               	goto	l2481
  2914                           
  2915                           ;PIC16F917 Battery Management.c: 332: {
  2916                           ;PIC16F917 Battery Management.c: 333: if(stopWatch(1) >= 1000)
  2917  1761  3001               	movlw	1
  2918  1762  120A  158A  25F1  160A  118A  	fcall	_stopWatch
  2919  1767  1283               	bcf	3,5	;RP0=0, select bank0
  2920  1768  1303               	bcf	3,6	;RP1=0, select bank0
  2921  1769  086F               	movf	?_stopWatch+3,w
  2922  176A  1D03               	btfss	3,2
  2923  176B  2F79               	goto	l2471
  2924  176C  086E               	movf	?_stopWatch+2,w
  2925  176D  1D03               	btfss	3,2
  2926  176E  2F79               	goto	l2471
  2927  176F  3003               	movlw	3
  2928  1770  026D               	subwf	?_stopWatch+1,w
  2929  1771  1D03               	skipz
  2930  1772  2F77               	goto	u2763
  2931  1773  30E8               	movlw	232
  2932  1774  026C               	subwf	?_stopWatch,w
  2933  1775  1D03               	skipz
  2934  1776  2F77               	goto	u2763
  2935  1777                     u2763:	
  2936  1777  1C03               	btfss	3,0
  2937  1778  2F5D               	goto	l316
  2938  1779                     l2471:	
  2939                           
  2940                           ;PIC16F917 Battery Management.c: 334: {
  2941                           ;PIC16F917 Battery Management.c: 335: initLCD();
  2942  1779  120A  158A  2230  160A  118A  	fcall	_initLCD
  2943                           
  2944                           ;PIC16F917 Battery Management.c: 337: RC1 = 1;
  2945  177E  1283               	bcf	3,5	;RP0=0, select bank0
  2946  177F  1303               	bcf	3,6	;RP1=0, select bank0
  2947  1780  1487               	bsf	7,1	;volatile
  2948                           
  2949                           ;PIC16F917 Battery Management.c: 338: _delay((unsigned long)((100)*(8000000/4000.0)));
  2950  1781  3002               	movlw	2
  2951  1782  1683               	bsf	3,5	;RP0=1, select bank1
  2952  1783  1303               	bcf	3,6	;RP1=0, select bank1
  2953  1784  00B3               	movwf	(??_handlePB^(0+128)+2)
  2954  1785  3004               	movlw	4
  2955  1786  00B2               	movwf	(??_handlePB^(0+128)+1)
  2956  1787  30BA               	movlw	186
  2957  1788  00B1               	movwf	??_handlePB^(0+128)
  2958  1789                     u2997:	
  2959  1789  0BB1               	decfsz	??_handlePB^(0+128),f
  2960  178A  2F89               	goto	u2997
  2961  178B  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  2962  178C  2F89               	goto	u2997
  2963  178D  0BB3               	decfsz	(??_handlePB^(0+128)+2),f
  2964  178E  2F89               	goto	u2997
  2965  178F  0000               	nop
  2966                           
  2967                           ;PIC16F917 Battery Management.c: 339: RC1 = 0;
  2968  1790  1283               	bcf	3,5	;RP0=0, select bank0
  2969  1791  1303               	bcf	3,6	;RP1=0, select bank0
  2970  1792  1087               	bcf	7,1	;volatile
  2971                           
  2972                           ;PIC16F917 Battery Management.c: 340: return;
  2973  1793  0008               	return
  2974  1794                     l2481:	
  2975                           
  2976                           ;PIC16F917 Battery Management.c: 341: }
  2977                           ;PIC16F917 Battery Management.c: 342: }
  2978                           ;PIC16F917 Battery Management.c: 344: LCDDisplayMode++;
  2979  1794  3001               	movlw	1
  2980  1795  1683               	bsf	3,5	;RP0=1, select bank1
  2981  1796  1303               	bcf	3,6	;RP1=0, select bank1
  2982  1797  00B1               	movwf	??_handlePB^(0+128)
  2983  1798  0831               	movf	??_handlePB^(0+128),w
  2984  1799  07EA               	addwf	_LCDDisplayMode^(0+128),f
  2985                           
  2986                           ;PIC16F917 Battery Management.c: 346: if (LCDDisplayMode > 3)
  2987  179A  3004               	movlw	4
  2988  179B  026A               	subwf	_LCDDisplayMode^(0+128),w
  2989  179C  1C03               	skipc
  2990  179D  0008               	return
  2991                           
  2992                           ;PIC16F917 Battery Management.c: 347: LCDDisplayMode = 0;
  2993  179E  01EA               	clrf	_LCDDisplayMode^(0+128)
  2994  179F  0008               	return
  2995  17A0                     __end_of_handlePB:	
  2996                           
  2997                           	psect	text13
  2998  0DF1                     __ptext13:	
  2999 ;; *************** function _stopWatch *****************
  3000 ;; Defined at:
  3001 ;;		line 81 in file "timer0.h"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  mode            1    wreg     unsigned char 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  mode            1   12[BANK1 ] unsigned char 
  3006 ;;  temp            4   13[BANK1 ] unsigned long 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  4   76[BANK0 ] unsigned long 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3016 ;;      Params:         0       4       0       0       0
  3017 ;;      Locals:         0       0       5       0       0
  3018 ;;      Temps:          0       0      12       0       0
  3019 ;;      Totals:         0       4      17       0       0
  3020 ;;Total ram usage:       21 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    4
  3023 ;; This function calls:
  3024 ;;		___ftmul
  3025 ;;		___fttol
  3026 ;;		___lltoft
  3027 ;; This function is called by:
  3028 ;;		_handlePB
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _stopWatch
  3034  0DF1                     _stopWatch:	
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in _stopWatch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3038                           ;stopWatch@mode stored from wreg
  3039  0DF1  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0DF2  1303               	bcf	3,6	;RP1=0, select bank1
  3041  0DF3  00AC               	movwf	stopWatch@mode^(0+128)
  3042                           
  3043                           ;timer0.h: 83: static unsigned long startTime = 0;
  3044                           ;timer0.h: 85: unsigned long temp = 0;
  3045  0DF4  3000               	movlw	0
  3046  0DF5  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3047  0DF6  3000               	movlw	0
  3048  0DF7  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3049  0DF8  3000               	movlw	0
  3050  0DF9  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3051  0DFA  3000               	movlw	0
  3052  0DFB  00AD               	movwf	stopWatch@temp^(0+128)
  3053                           
  3054                           ;timer0.h: 87: switch (mode)
  3055  0DFC  2EE3               	goto	l2273
  3056  0DFD                     l2259:	
  3057                           ;timer0.h: 88: {
  3058                           ;timer0.h: 89: case(0):
  3059                           
  3060                           
  3061                           ;timer0.h: 90: {
  3062                           ;timer0.h: 91: startTime = time + TMR0;
  3063  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0DFF  0801               	movf	1,w	;volatile
  3066  0E00  1683               	bsf	3,5	;RP0=1, select bank1
  3067  0E01  1303               	bcf	3,6	;RP1=0, select bank1
  3068  0E02  075F               	addwf	_time^(0+128),w
  3069  0E03  00E3               	movwf	stopWatch@startTime^(0+128)
  3070  0E04  0860               	movf	(_time+1)^(0+128),w
  3071  0E05  1803               	skipnc
  3072  0E06  0F60               	incfsz	(_time+1)^(0+128),w
  3073  0E07  1003               	clrc
  3074  0E08  00E4               	movwf	(stopWatch@startTime^(0+128)+1)
  3075  0E09  0861               	movf	(_time+2)^(0+128),w
  3076  0E0A  1803               	skipnc
  3077  0E0B  0F61               	incfsz	(_time+2)^(0+128),w
  3078  0E0C  1003               	clrc
  3079  0E0D  00E5               	movwf	(stopWatch@startTime^(0+128)+2)
  3080  0E0E  0862               	movf	(_time+3)^(0+128),w
  3081  0E0F  1803               	skipnc
  3082  0E10  0A62               	incf	(_time+3)^(0+128),w
  3083  0E11  00E6               	movwf	(stopWatch@startTime^(0+128)+3)
  3084                           
  3085                           ;timer0.h: 93: return 1;
  3086  0E12  3000               	movlw	0
  3087  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0E15  00EF               	movwf	?_stopWatch+3
  3090  0E16  3000               	movlw	0
  3091  0E17  00EE               	movwf	?_stopWatch+2
  3092  0E18  3000               	movlw	0
  3093  0E19  00ED               	movwf	?_stopWatch+1
  3094  0E1A  3001               	movlw	1
  3095  0E1B  00EC               	movwf	?_stopWatch
  3096  0E1C  0008               	return
  3097  0E1D                     l2263:	
  3098                           ;timer0.h: 94: }
  3099                           ;timer0.h: 96: case (1):
  3100                           
  3101                           
  3102                           ;timer0.h: 97: {
  3103                           ;timer0.h: 98: temp = time + TMR0 - startTime;
  3104  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  3105  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  3106  0E1F  085F               	movf	_time^(0+128),w
  3107  0E20  00A0               	movwf	??_stopWatch^(0+128)
  3108  0E21  0860               	movf	(_time+1)^(0+128),w
  3109  0E22  00A1               	movwf	(??_stopWatch^(0+128)+1)
  3110  0E23  0861               	movf	(_time+2)^(0+128),w
  3111  0E24  00A2               	movwf	(??_stopWatch^(0+128)+2)
  3112  0E25  0862               	movf	(_time+3)^(0+128),w
  3113  0E26  00A3               	movwf	(??_stopWatch^(0+128)+3)
  3114  0E27  0963               	comf	stopWatch@startTime^(0+128),w
  3115  0E28  00A4               	movwf	(??_stopWatch+4)^(0+128)
  3116  0E29  0964               	comf	(stopWatch@startTime+1)^(0+128),w
  3117  0E2A  00A5               	movwf	((??_stopWatch+4)^(0+128)+1)
  3118  0E2B  0965               	comf	(stopWatch@startTime+2)^(0+128),w
  3119  0E2C  00A6               	movwf	((??_stopWatch+4)^(0+128)+2)
  3120  0E2D  0966               	comf	(stopWatch@startTime+3)^(0+128),w
  3121  0E2E  00A7               	movwf	((??_stopWatch+4)^(0+128)+3)
  3122  0E2F  0AA4               	incf	(??_stopWatch+4)^(0+128),f
  3123  0E30  1903               	skipnz
  3124  0E31  0AA5               	incf	((??_stopWatch+4)^(0+128)+1),f
  3125  0E32  1903               	skipnz
  3126  0E33  0AA6               	incf	((??_stopWatch+4)^(0+128)+2),f
  3127  0E34  1903               	skipnz
  3128  0E35  0AA7               	incf	((??_stopWatch+4)^(0+128)+3),f
  3129  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  3130  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  3131  0E38  0801               	movf	1,w	;volatile
  3132  0E39  1683               	bsf	3,5	;RP0=1, select bank1
  3133  0E3A  1303               	bcf	3,6	;RP1=0, select bank1
  3134  0E3B  00A8               	movwf	(??_stopWatch+8)^(0+128)
  3135  0E3C  01A9               	clrf	((??_stopWatch+8)^(0+128)+1)
  3136  0E3D  01AA               	clrf	((??_stopWatch+8)^(0+128)+2)
  3137  0E3E  01AB               	clrf	((??_stopWatch+8)^(0+128)+3)
  3138  0E3F  0828               	movf	(??_stopWatch+8)^(0+128),w
  3139  0E40  07A4               	addwf	(??_stopWatch+4)^(0+128),f
  3140  0E41  0829               	movf	(??_stopWatch+9)^(0+128),w
  3141  0E42  1803               	skipnc
  3142  0E43  0F29               	incfsz	(??_stopWatch+9)^(0+128),w
  3143  0E44  2E46               	goto	u2600
  3144  0E45  2E47               	goto	u2601
  3145  0E46                     u2600:	
  3146  0E46  07A5               	addwf	((??_stopWatch+4)^(0+128)+1),f
  3147  0E47                     u2601:	
  3148  0E47  082A               	movf	(??_stopWatch+10)^(0+128),w
  3149  0E48  1803               	skipnc
  3150  0E49  0F2A               	incfsz	(??_stopWatch+10)^(0+128),w
  3151  0E4A  2E4C               	goto	u2602
  3152  0E4B  2E4D               	goto	u2603
  3153  0E4C                     u2602:	
  3154  0E4C  07A6               	addwf	((??_stopWatch+4)^(0+128)+2),f
  3155  0E4D                     u2603:	
  3156  0E4D  082B               	movf	(??_stopWatch+11)^(0+128),w
  3157  0E4E  1803               	skipnc
  3158  0E4F  0A2B               	incf	(??_stopWatch+11)^(0+128),w
  3159  0E50  07A7               	addwf	((??_stopWatch+4)^(0+128)+3),f
  3160  0E51  0824               	movf	(??_stopWatch+4)^(0+128),w
  3161  0E52  07A0               	addwf	??_stopWatch^(0+128),f
  3162  0E53  0825               	movf	(??_stopWatch+5)^(0+128),w
  3163  0E54  1803               	skipnc
  3164  0E55  0F25               	incfsz	(??_stopWatch+5)^(0+128),w
  3165  0E56  2E58               	goto	u2610
  3166  0E57  2E59               	goto	u2611
  3167  0E58                     u2610:	
  3168  0E58  07A1               	addwf	(??_stopWatch^(0+128)+1),f
  3169  0E59                     u2611:	
  3170  0E59  0826               	movf	(??_stopWatch+6)^(0+128),w
  3171  0E5A  1803               	skipnc
  3172  0E5B  0F26               	incfsz	(??_stopWatch+6)^(0+128),w
  3173  0E5C  2E5E               	goto	u2612
  3174  0E5D  2E5F               	goto	u2613
  3175  0E5E                     u2612:	
  3176  0E5E  07A2               	addwf	(??_stopWatch^(0+128)+2),f
  3177  0E5F                     u2613:	
  3178  0E5F  0827               	movf	(??_stopWatch+7)^(0+128),w
  3179  0E60  1803               	skipnc
  3180  0E61  0A27               	incf	(??_stopWatch+7)^(0+128),w
  3181  0E62  07A3               	addwf	(??_stopWatch^(0+128)+3),f
  3182  0E63  0823               	movf	(??_stopWatch+3)^(0+128),w
  3183  0E64  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3184  0E65  0822               	movf	(??_stopWatch+2)^(0+128),w
  3185  0E66  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3186  0E67  0821               	movf	(??_stopWatch+1)^(0+128),w
  3187  0E68  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3188  0E69  0820               	movf	??_stopWatch^(0+128),w
  3189  0E6A  00AD               	movwf	stopWatch@temp^(0+128)
  3190                           
  3191                           ;timer0.h: 100: temp = convConst * temp;
  3192  0E6B  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3193  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3194  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3195  0E6E  00AB               	movwf	___lltoft@c+3
  3196  0E6F  1683               	bsf	3,5	;RP0=1, select bank1
  3197  0E70  1303               	bcf	3,6	;RP1=0, select bank1
  3198  0E71  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3199  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0E74  00AA               	movwf	___lltoft@c+2
  3202  0E75  1683               	bsf	3,5	;RP0=1, select bank1
  3203  0E76  1303               	bcf	3,6	;RP1=0, select bank1
  3204  0E77  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3205  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  3206  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  3207  0E7A  00A9               	movwf	___lltoft@c+1
  3208  0E7B  1683               	bsf	3,5	;RP0=1, select bank1
  3209  0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  3210  0E7D  082D               	movf	stopWatch@temp^(0+128),w
  3211  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  3213  0E80  00A8               	movwf	___lltoft@c
  3214  0E81  160A  118A  25AC  120A  158A  	fcall	___lltoft
  3215  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0E88  0828               	movf	?___lltoft,w
  3218  0E89  00C1               	movwf	___ftmul@f2
  3219  0E8A  0829               	movf	?___lltoft+1,w
  3220  0E8B  00C2               	movwf	___ftmul@f2+1
  3221  0E8C  082A               	movf	?___lltoft+2,w
  3222  0E8D  00C3               	movwf	___ftmul@f2+2
  3223  0E8E  3016               	movlw	low (_convConst-__stringbase)
  3224  0E8F  0084               	movwf	4
  3225  0E90  120A  158A  200A  120A  158A  	fcall	stringdir
  3226  0E95  00BE               	movwf	___ftmul@f1
  3227  0E96  120A  158A  200A  120A  158A  	fcall	stringdir
  3228  0E9B  00BF               	movwf	___ftmul@f1+1
  3229  0E9C  120A  158A  200A  120A  158A  	fcall	stringdir
  3230  0EA1  00C0               	movwf	___ftmul@f1+2
  3231  0EA2  120A  158A  2444  120A  158A  	fcall	___ftmul
  3232  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0EA9  083E               	movf	?___ftmul,w
  3235  0EAA  00DE               	movwf	___fttol@f1
  3236  0EAB  083F               	movf	?___ftmul+1,w
  3237  0EAC  00DF               	movwf	___fttol@f1+1
  3238  0EAD  0840               	movf	?___ftmul+2,w
  3239  0EAE  00E0               	movwf	___fttol@f1+2
  3240  0EAF  120A  158A  2107  120A  158A  	fcall	___fttol
  3241  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  3243  0EB6  0861               	movf	?___fttol+3,w
  3244  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  3245  0EB8  1303               	bcf	3,6	;RP1=0, select bank1
  3246  0EB9  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3247  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  3249  0EBC  0860               	movf	?___fttol+2,w
  3250  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  3251  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  3252  0EBF  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3253  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0EC2  085F               	movf	?___fttol+1,w
  3256  0EC3  1683               	bsf	3,5	;RP0=1, select bank1
  3257  0EC4  1303               	bcf	3,6	;RP1=0, select bank1
  3258  0EC5  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3259  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0EC8  085E               	movf	?___fttol,w
  3262  0EC9  1683               	bsf	3,5	;RP0=1, select bank1
  3263  0ECA  1303               	bcf	3,6	;RP1=0, select bank1
  3264  0ECB  00AD               	movwf	stopWatch@temp^(0+128)
  3265                           
  3266                           ;timer0.h: 102: return temp;
  3267  0ECC  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3268  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  3270  0ECF  00EF               	movwf	?_stopWatch+3
  3271  0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  3272  0ED1  1303               	bcf	3,6	;RP1=0, select bank1
  3273  0ED2  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3274  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0ED5  00EE               	movwf	?_stopWatch+2
  3277  0ED6  1683               	bsf	3,5	;RP0=1, select bank1
  3278  0ED7  1303               	bcf	3,6	;RP1=0, select bank1
  3279  0ED8  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3280  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0EDB  00ED               	movwf	?_stopWatch+1
  3283  0EDC  1683               	bsf	3,5	;RP0=1, select bank1
  3284  0EDD  1303               	bcf	3,6	;RP1=0, select bank1
  3285  0EDE  082D               	movf	stopWatch@temp^(0+128),w
  3286  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0EE1  00EC               	movwf	?_stopWatch
  3289  0EE2  0008               	return
  3290  0EE3                     l2273:	
  3291                           ;timer0.h: 103: }
  3292                           ;timer0.h: 104: }
  3293                           
  3294  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  3295  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  3296  0EE5  082C               	movf	stopWatch@mode^(0+128),w
  3297                           
  3298                           ; Switch size 1, requested type "space"
  3299                           ; Number of cases is 2, Range of values is 0 to 1
  3300                           ; switch strategies available:
  3301                           ; Name         Instructions Cycles
  3302                           ; simple_byte            7     4 (average)
  3303                           ; direct_byte           14     8 (fixed)
  3304                           ; jumptable            260     6 (fixed)
  3305                           ;	Chosen strategy is simple_byte
  3306  0EE6  3A00               	xorlw	0	; case 0
  3307  0EE7  1903               	skipnz
  3308  0EE8  2DFD               	goto	l2259
  3309  0EE9  3A01               	xorlw	1	; case 1
  3310  0EEA  1903               	skipnz
  3311  0EEB  2E1D               	goto	l2263
  3312  0EEC  2EED               	goto	l2275
  3313  0EED                     l2275:	
  3314                           
  3315                           ;timer0.h: 106: return 0;
  3316  0EED  3000               	movlw	0
  3317  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3318  0EEF  00EF               	movwf	?_stopWatch+3
  3319  0EF0  3000               	movlw	0
  3320  0EF1  00EE               	movwf	?_stopWatch+2
  3321  0EF2  3000               	movlw	0
  3322  0EF3  00ED               	movwf	?_stopWatch+1
  3323  0EF4  3000               	movlw	0
  3324  0EF5  00EC               	movwf	?_stopWatch
  3325  0EF6  0008               	return
  3326  0EF7                     __end_of_stopWatch:	
  3327                           
  3328                           	psect	text14
  3329  0A30                     __ptext14:	
  3330 ;; *************** function _initLCD *****************
  3331 ;; Defined at:
  3332 ;;		line 52 in file "lcd.h"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;		None               void
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, pclath, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3346 ;;      Params:         0       0       0       0       0
  3347 ;;      Locals:         0       0       0       0       0
  3348 ;;      Temps:          0       3       0       0       0
  3349 ;;      Totals:         0       3       0       0       0
  3350 ;;Total ram usage:        3 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    4
  3353 ;; This function calls:
  3354 ;;		_LCDSetBits
  3355 ;;		_LCDcmd
  3356 ;;		_pulse
  3357 ;; This function is called by:
  3358 ;;		_initController
  3359 ;;		_handlePB
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           
  3364                           ;psect for function _initLCD
  3365  0A30                     _initLCD:	
  3366                           
  3367                           ;lcd.h: 54: RB0 = 0;
  3368                           
  3369                           ;incstack = 0
  3370                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3371  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0A32  1006               	bcf	6,0	;volatile
  3374                           
  3375                           ;lcd.h: 55: RD7 = 0;
  3376  0A33  1388               	bcf	8,7	;volatile
  3377                           
  3378                           ;lcd.h: 56: LCDSetBits(0x00);
  3379  0A34  3000               	movlw	0
  3380  0A35  160A  118A  24C6  120A  158A  	fcall	_LCDSetBits
  3381                           
  3382                           ;lcd.h: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  3383  0A3A  3002               	movlw	2
  3384  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  3385  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  3386  0A3D  00A7               	movwf	??_initLCD+2
  3387  0A3E  3004               	movlw	4
  3388  0A3F  00A6               	movwf	??_initLCD+1
  3389  0A40  30BA               	movlw	186
  3390  0A41  00A5               	movwf	??_initLCD
  3391  0A42                     u3007:	
  3392  0A42  0BA5               	decfsz	??_initLCD,f
  3393  0A43  2A42               	goto	u3007
  3394  0A44  0BA6               	decfsz	??_initLCD+1,f
  3395  0A45  2A42               	goto	u3007
  3396  0A46  0BA7               	decfsz	??_initLCD+2,f
  3397  0A47  2A42               	goto	u3007
  3398  0A48  0000               	nop
  3399                           
  3400                           ;lcd.h: 58: LCDSetBits(0x30);
  3401  0A49  3030               	movlw	48
  3402  0A4A  160A  118A  24C6  120A  158A  	fcall	_LCDSetBits
  3403                           
  3404                           ;lcd.h: 59: _delay((unsigned long)((30)*(8000000/4000.0)));
  3405  0A4F  304E               	movlw	78
  3406  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0A52  00A6               	movwf	??_initLCD+1
  3409  0A53  30EB               	movlw	235
  3410  0A54  00A5               	movwf	??_initLCD
  3411  0A55                     u3017:	
  3412  0A55  0BA5               	decfsz	??_initLCD,f
  3413  0A56  2A55               	goto	u3017
  3414  0A57  0BA6               	decfsz	??_initLCD+1,f
  3415  0A58  2A55               	goto	u3017
  3416                           
  3417                           ;lcd.h: 60: pulse();
  3418  0A59  160A  118A  2493  120A  158A  	fcall	_pulse
  3419                           
  3420                           ;lcd.h: 61: _delay((unsigned long)((10)*(8000000/4000.0)));
  3421  0A5E  301A               	movlw	26
  3422  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  3424  0A61  00A6               	movwf	??_initLCD+1
  3425  0A62  30F8               	movlw	248
  3426  0A63  00A5               	movwf	??_initLCD
  3427  0A64                     u3027:	
  3428  0A64  0BA5               	decfsz	??_initLCD,f
  3429  0A65  2A64               	goto	u3027
  3430  0A66  0BA6               	decfsz	??_initLCD+1,f
  3431  0A67  2A64               	goto	u3027
  3432  0A68  0000               	nop
  3433                           
  3434                           ;lcd.h: 62: pulse();
  3435  0A69  160A  118A  2493  120A  158A  	fcall	_pulse
  3436                           
  3437                           ;lcd.h: 63: _delay((unsigned long)((10)*(8000000/4000.0)));
  3438  0A6E  301A               	movlw	26
  3439  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  3440  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  3441  0A71  00A6               	movwf	??_initLCD+1
  3442  0A72  30F8               	movlw	248
  3443  0A73  00A5               	movwf	??_initLCD
  3444  0A74                     u3037:	
  3445  0A74  0BA5               	decfsz	??_initLCD,f
  3446  0A75  2A74               	goto	u3037
  3447  0A76  0BA6               	decfsz	??_initLCD+1,f
  3448  0A77  2A74               	goto	u3037
  3449  0A78  0000               	nop
  3450                           
  3451                           ;lcd.h: 64: pulse();
  3452  0A79  160A  118A  2493  120A  158A  	fcall	_pulse
  3453                           
  3454                           ;lcd.h: 65: _delay((unsigned long)((10)*(8000000/4000.0)));
  3455  0A7E  301A               	movlw	26
  3456  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  3457  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  3458  0A81  00A6               	movwf	??_initLCD+1
  3459  0A82  30F8               	movlw	248
  3460  0A83  00A5               	movwf	??_initLCD
  3461  0A84                     u3047:	
  3462  0A84  0BA5               	decfsz	??_initLCD,f
  3463  0A85  2A84               	goto	u3047
  3464  0A86  0BA6               	decfsz	??_initLCD+1,f
  3465  0A87  2A84               	goto	u3047
  3466  0A88  0000               	nop
  3467                           
  3468                           ;lcd.h: 66: LCDSetBits(0x20);
  3469  0A89  3020               	movlw	32
  3470  0A8A  160A  118A  24C6  120A  158A  	fcall	_LCDSetBits
  3471                           
  3472                           ;lcd.h: 67: pulse();
  3473  0A8F  160A  118A  2493  120A  158A  	fcall	_pulse
  3474                           
  3475                           ;lcd.h: 69: LCDcmd(0x28);
  3476  0A94  3028               	movlw	40
  3477  0A95  160A  118A  2581  120A  158A  	fcall	_LCDcmd
  3478                           
  3479                           ;lcd.h: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  3480  0A9A  301A               	movlw	26
  3481  0A9B  1283               	bcf	3,5	;RP0=0, select bank0
  3482  0A9C  1303               	bcf	3,6	;RP1=0, select bank0
  3483  0A9D  00A6               	movwf	??_initLCD+1
  3484  0A9E  30F8               	movlw	248
  3485  0A9F  00A5               	movwf	??_initLCD
  3486  0AA0                     u3057:	
  3487  0AA0  0BA5               	decfsz	??_initLCD,f
  3488  0AA1  2AA0               	goto	u3057
  3489  0AA2  0BA6               	decfsz	??_initLCD+1,f
  3490  0AA3  2AA0               	goto	u3057
  3491  0AA4  0000               	nop
  3492                           
  3493                           ;lcd.h: 71: LCDcmd(0x10);
  3494  0AA5  3010               	movlw	16
  3495  0AA6  160A  118A  2581  120A  158A  	fcall	_LCDcmd
  3496                           
  3497                           ;lcd.h: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  3498  0AAB  301A               	movlw	26
  3499  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  3500  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  3501  0AAE  00A6               	movwf	??_initLCD+1
  3502  0AAF  30F8               	movlw	248
  3503  0AB0  00A5               	movwf	??_initLCD
  3504  0AB1                     u3067:	
  3505  0AB1  0BA5               	decfsz	??_initLCD,f
  3506  0AB2  2AB1               	goto	u3067
  3507  0AB3  0BA6               	decfsz	??_initLCD+1,f
  3508  0AB4  2AB1               	goto	u3067
  3509  0AB5  0000               	nop
  3510                           
  3511                           ;lcd.h: 73: LCDcmd(0x0F);
  3512  0AB6  300F               	movlw	15
  3513  0AB7  160A  118A  2581  120A  158A  	fcall	_LCDcmd
  3514                           
  3515                           ;lcd.h: 74: _delay((unsigned long)((10)*(8000000/4000.0)));
  3516  0ABC  301A               	movlw	26
  3517  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  3518  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  3519  0ABF  00A6               	movwf	??_initLCD+1
  3520  0AC0  30F8               	movlw	248
  3521  0AC1  00A5               	movwf	??_initLCD
  3522  0AC2                     u3077:	
  3523  0AC2  0BA5               	decfsz	??_initLCD,f
  3524  0AC3  2AC2               	goto	u3077
  3525  0AC4  0BA6               	decfsz	??_initLCD+1,f
  3526  0AC5  2AC2               	goto	u3077
  3527  0AC6  0000               	nop
  3528                           
  3529                           ;lcd.h: 75: LCDcmd(0x06);
  3530  0AC7  3006               	movlw	6
  3531  0AC8  160A  118A  2581  120A  158A  	fcall	_LCDcmd
  3532                           
  3533                           ;lcd.h: 76: _delay((unsigned long)((10)*(8000000/4000.0)));
  3534  0ACD  301A               	movlw	26
  3535  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0AD0  00A6               	movwf	??_initLCD+1
  3538  0AD1  30F8               	movlw	248
  3539  0AD2  00A5               	movwf	??_initLCD
  3540  0AD3                     u3087:	
  3541  0AD3  0BA5               	decfsz	??_initLCD,f
  3542  0AD4  2AD3               	goto	u3087
  3543  0AD5  0BA6               	decfsz	??_initLCD+1,f
  3544  0AD6  2AD3               	goto	u3087
  3545  0AD7  0000               	nop
  3546  0AD8  0008               	return
  3547  0AD9                     __end_of_initLCD:	
  3548                           
  3549                           	psect	text15
  3550  1581                     __ptext15:	
  3551 ;; *************** function _LCDcmd *****************
  3552 ;; Defined at:
  3553 ;;		line 111 in file "lcd.h"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  a               1    wreg     unsigned char 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  a               1    4[BANK0 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;		None               void
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3567 ;;      Params:         0       0       0       0       0
  3568 ;;      Locals:         0       1       0       0       0
  3569 ;;      Temps:          0       2       0       0       0
  3570 ;;      Totals:         0       3       0       0       0
  3571 ;;Total ram usage:        3 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    3
  3574 ;; This function calls:
  3575 ;;		_LCDSetBits
  3576 ;;		_pulse
  3577 ;; This function is called by:
  3578 ;;		_initLCD
  3579 ;;		_clearLCD
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function _LCDcmd
  3585  1581                     _LCDcmd:	
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  3589                           ;LCDcmd@a stored from wreg
  3590  1581  1283               	bcf	3,5	;RP0=0, select bank0
  3591  1582  1303               	bcf	3,6	;RP1=0, select bank0
  3592  1583  00A4               	movwf	LCDcmd@a
  3593                           
  3594                           ;lcd.h: 113: LCDSetBits(a);
  3595  1584  0824               	movf	LCDcmd@a,w
  3596  1585  160A  118A  24C6  160A  118A  	fcall	_LCDSetBits
  3597                           
  3598                           ;lcd.h: 114: RB0 = 0;
  3599  158A  1283               	bcf	3,5	;RP0=0, select bank0
  3600  158B  1303               	bcf	3,6	;RP1=0, select bank0
  3601  158C  1006               	bcf	6,0	;volatile
  3602                           
  3603                           ;lcd.h: 115: RD7 = 0;
  3604  158D  1388               	bcf	8,7	;volatile
  3605                           
  3606                           ;lcd.h: 116: pulse();
  3607  158E  160A  118A  2493  160A  118A  	fcall	_pulse
  3608                           
  3609                           ;lcd.h: 117: a = a<<4;
  3610  1593  1283               	bcf	3,5	;RP0=0, select bank0
  3611  1594  1303               	bcf	3,6	;RP1=0, select bank0
  3612  1595  0824               	movf	LCDcmd@a,w
  3613  1596  00A2               	movwf	??_LCDcmd
  3614  1597  3003               	movlw	3
  3615  1598                     u1645:	
  3616  1598  1003               	clrc
  3617  1599  0DA2               	rlf	??_LCDcmd,f
  3618  159A  3EFF               	addlw	-1
  3619  159B  1D03               	skipz
  3620  159C  2D98               	goto	u1645
  3621  159D  1003               	clrc
  3622  159E  0D22               	rlf	??_LCDcmd,w
  3623  159F  00A3               	movwf	??_LCDcmd+1
  3624  15A0  0823               	movf	??_LCDcmd+1,w
  3625  15A1  00A4               	movwf	LCDcmd@a
  3626                           
  3627                           ;lcd.h: 118: LCDSetBits(a);
  3628  15A2  0824               	movf	LCDcmd@a,w
  3629  15A3  160A  118A  24C6  160A  118A  	fcall	_LCDSetBits
  3630                           
  3631                           ;lcd.h: 119: pulse();
  3632  15A8  160A  118A  2493   	fcall	_pulse
  3633  15AB  0008               	return
  3634  15AC                     __end_of_LCDcmd:	
  3635                           
  3636                           	psect	text16
  3637  0363                     __ptext16:	
  3638 ;; *************** function _displayLCD *****************
  3639 ;; Defined at:
  3640 ;;		line 192 in file "PIC16F917 Battery Management.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  disp            2   21[BANK1 ] int 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  temp2           8   35[BANK1 ] unsigned char [8]
  3645 ;;  temp1           8   27[BANK1 ] unsigned char [8]
  3646 ;; Return value:  Size  Location     Type
  3647 ;;		None               void
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3655 ;;      Params:         0       0       2       0       0
  3656 ;;      Locals:         0       0      16       0       0
  3657 ;;      Temps:          0       0       4       0       0
  3658 ;;      Totals:         0       0      22       0       0
  3659 ;;Total ram usage:       22 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    5
  3662 ;; This function calls:
  3663 ;;		_LCDSetCursor
  3664 ;;		_LCDWriteString
  3665 ;;		_floatToASCII
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _displayLCD
  3673  0363                     _displayLCD:	
  3674                           
  3675                           ;PIC16F917 Battery Management.c: 194: char temp1[8] = {0,0,0,0,0,0,0,0};
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3679  0363  30BB               	movlw	displayLCD@temp1& (0+255)
  3680  0364  0084               	movwf	4
  3681  0365  30B0               	movlw	low displayLCD@F2781
  3682  0366  1683               	bsf	3,5	;RP0=1, select bank1
  3683  0367  1303               	bcf	3,6	;RP1=0, select bank1
  3684  0368  00B7               	movwf	??_displayLCD^(0+128)
  3685  0369  0804               	movf	4,w
  3686  036A  00B8               	movwf	(??_displayLCD^(0+128)+1)
  3687  036B  3008               	movlw	8
  3688  036C  00B9               	movwf	(??_displayLCD^(0+128)+2)
  3689  036D                     u2790:	
  3690  036D  0837               	movf	??_displayLCD^(0+128),w
  3691  036E  0084               	movwf	4
  3692  036F  1783               	bsf	3,7	;select IRP bank3
  3693  0370  0800               	movf	0,w
  3694  0371  00BA               	movwf	(??_displayLCD^(0+128)+3)
  3695  0372  0AB7               	incf	??_displayLCD^(0+128),f
  3696  0373  0838               	movf	(??_displayLCD^(0+128)+1),w
  3697  0374  0084               	movwf	4
  3698  0375  1383               	bcf	3,7	;select IRP bank1
  3699  0376  083A               	movf	(??_displayLCD^(0+128)+3),w
  3700  0377  0080               	movwf	0
  3701  0378  0AB8               	incf	(??_displayLCD^(0+128)+1),f
  3702  0379  0BB9               	decfsz	(??_displayLCD^(0+128)+2),f
  3703  037A  2B6D               	goto	u2790
  3704                           
  3705                           ;PIC16F917 Battery Management.c: 195: char temp2[8] = {0,0,0,0,0,0,0,0};
  3706  037B  30C3               	movlw	displayLCD@temp2& (0+255)
  3707  037C  0084               	movwf	4
  3708  037D  30B8               	movlw	low displayLCD@F2783
  3709  037E  00B7               	movwf	??_displayLCD^(0+128)
  3710  037F  0804               	movf	4,w
  3711  0380  00B8               	movwf	(??_displayLCD^(0+128)+1)
  3712  0381  3008               	movlw	8
  3713  0382  00B9               	movwf	(??_displayLCD^(0+128)+2)
  3714  0383                     u2800:	
  3715  0383  0837               	movf	??_displayLCD^(0+128),w
  3716  0384  0084               	movwf	4
  3717  0385  1783               	bsf	3,7	;select IRP bank3
  3718  0386  0800               	movf	0,w
  3719  0387  00BA               	movwf	(??_displayLCD^(0+128)+3)
  3720  0388  0AB7               	incf	??_displayLCD^(0+128),f
  3721  0389  0838               	movf	(??_displayLCD^(0+128)+1),w
  3722  038A  0084               	movwf	4
  3723  038B  1383               	bcf	3,7	;select IRP bank1
  3724  038C  083A               	movf	(??_displayLCD^(0+128)+3),w
  3725  038D  0080               	movwf	0
  3726  038E  0AB8               	incf	(??_displayLCD^(0+128)+1),f
  3727  038F  0BB9               	decfsz	(??_displayLCD^(0+128)+2),f
  3728  0390  2B83               	goto	u2800
  3729                           
  3730                           ;PIC16F917 Battery Management.c: 197: switch( disp )
  3731  0391  2DAE               	goto	l2547
  3732  0392                     l2489:	
  3733                           ;PIC16F917 Battery Management.c: 198: {
  3734                           ;PIC16F917 Battery Management.c: 201: case 0:
  3735                           
  3736                           
  3737                           ;PIC16F917 Battery Management.c: 202: {
  3738                           ;PIC16F917 Battery Management.c: 203: floatToASCII( temp1, cellVolt[5], 2);
  3739  0392  300F               	movlw	15
  3740  0393  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  3741  0394  0084               	movwf	4
  3742  0395  1383               	bcf	3,7	;select IRP bank1
  3743  0396  0800               	movf	0,w
  3744  0397  1283               	bcf	3,5	;RP0=0, select bank0
  3745  0398  1303               	bcf	3,6	;RP1=0, select bank0
  3746  0399  00EC               	movwf	floatToASCII@num
  3747  039A  0A84               	incf	4,f
  3748  039B  0800               	movf	0,w
  3749  039C  00ED               	movwf	floatToASCII@num+1
  3750  039D  0A84               	incf	4,f
  3751  039E  0800               	movf	0,w
  3752  039F  00EE               	movwf	floatToASCII@num+2
  3753  03A0  3002               	movlw	2
  3754  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  3755  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  3756  03A3  00B7               	movwf	??_displayLCD^(0+128)
  3757  03A4  0837               	movf	??_displayLCD^(0+128),w
  3758  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3759  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3760  03A7  00EF               	movwf	floatToASCII@precision
  3761  03A8  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3762  03A9  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  3763                           
  3764                           ;PIC16F917 Battery Management.c: 204: LCDSetCursor(0x00);
  3765  03AE  3000               	movlw	0
  3766  03AF  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  3767                           
  3768                           ;PIC16F917 Battery Management.c: 205: LCDWriteString("Voltage:");
  3769  03B4  303A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3770  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  3771  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  3772  03B7  00A5               	movwf	LCDWriteString@a
  3773  03B8  3080               	movlw	128
  3774  03B9  00A6               	movwf	LCDWriteString@a+1
  3775  03BA  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3776                           
  3777                           ;PIC16F917 Battery Management.c: 206: LCDWriteString(temp1);
  3778  03BF  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3779  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3780  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3781  03C2  00A5               	movwf	LCDWriteString@a
  3782  03C3  3000               	movlw	0
  3783  03C4  00A6               	movwf	LCDWriteString@a+1
  3784  03C5  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3785                           
  3786                           ;PIC16F917 Battery Management.c: 207: LCDWriteString(" V      ");
  3787  03CA  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3788  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  3789  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  3790  03CD  00A5               	movwf	LCDWriteString@a
  3791  03CE  3080               	movlw	128
  3792  03CF  00A6               	movwf	LCDWriteString@a+1
  3793  03D0  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3794                           
  3795                           ;PIC16F917 Battery Management.c: 209: floatToASCII( temp2, current, 2);
  3796  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  3797  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  3798  03D7  0867               	movf	_current^(0+128),w
  3799  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  3800  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  3801  03DA  00EC               	movwf	floatToASCII@num
  3802  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  3803  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  3804  03DD  0868               	movf	(_current+1)^(0+128),w
  3805  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  3806  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  3807  03E0  00ED               	movwf	floatToASCII@num+1
  3808  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  3809  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  3810  03E3  0869               	movf	(_current+2)^(0+128),w
  3811  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  3812  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  3813  03E6  00EE               	movwf	floatToASCII@num+2
  3814  03E7  3002               	movlw	2
  3815  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  3816  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  3817  03EA  00B7               	movwf	??_displayLCD^(0+128)
  3818  03EB  0837               	movf	??_displayLCD^(0+128),w
  3819  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3820  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3821  03EE  00EF               	movwf	floatToASCII@precision
  3822  03EF  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3823  03F0  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  3824                           
  3825                           ;PIC16F917 Battery Management.c: 210: LCDSetCursor(0x10);
  3826  03F5  3010               	movlw	16
  3827  03F6  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  3828                           
  3829                           ;PIC16F917 Battery Management.c: 211: LCDWriteString("Current:");
  3830  03FB  3043               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3831  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  3832  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  3833  03FE  00A5               	movwf	LCDWriteString@a
  3834  03FF  3080               	movlw	128
  3835  0400  00A6               	movwf	LCDWriteString@a+1
  3836  0401  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3837                           
  3838                           ;PIC16F917 Battery Management.c: 212: LCDWriteString(temp2);
  3839  0406  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3840  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3841  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3842  0409  00A5               	movwf	LCDWriteString@a
  3843  040A  3000               	movlw	0
  3844  040B  00A6               	movwf	LCDWriteString@a+1
  3845  040C  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3846                           
  3847                           ;PIC16F917 Battery Management.c: 213: LCDWriteString(" A       ");
  3848  0411  301D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3849  0412  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0413  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0414  00A5               	movwf	LCDWriteString@a
  3852  0415  3080               	movlw	128
  3853  0416  00A6               	movwf	LCDWriteString@a+1
  3854  0417  160A  118A  26C2   	fcall	_LCDWriteString
  3855                           
  3856                           ;PIC16F917 Battery Management.c: 215: break;
  3857  041A  0008               	return
  3858  041B                     l2503:	
  3859                           ;PIC16F917 Battery Management.c: 216: }
  3860                           ;PIC16F917 Battery Management.c: 219: case 1:
  3861                           
  3862                           
  3863                           ;PIC16F917 Battery Management.c: 220: {
  3864                           ;PIC16F917 Battery Management.c: 222: floatToASCII( temp1, cellVolt[0], 2);
  3865  041B  1683               	bsf	3,5	;RP0=1, select bank1
  3866  041C  1303               	bcf	3,6	;RP1=0, select bank1
  3867  041D  084D               	movf	_cellVolt^(0+128),w
  3868  041E  1283               	bcf	3,5	;RP0=0, select bank0
  3869  041F  1303               	bcf	3,6	;RP1=0, select bank0
  3870  0420  00EC               	movwf	floatToASCII@num
  3871  0421  1683               	bsf	3,5	;RP0=1, select bank1
  3872  0422  1303               	bcf	3,6	;RP1=0, select bank1
  3873  0423  084E               	movf	(_cellVolt+1)^(0+128),w
  3874  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3875  0425  1303               	bcf	3,6	;RP1=0, select bank0
  3876  0426  00ED               	movwf	floatToASCII@num+1
  3877  0427  1683               	bsf	3,5	;RP0=1, select bank1
  3878  0428  1303               	bcf	3,6	;RP1=0, select bank1
  3879  0429  084F               	movf	(_cellVolt+2)^(0+128),w
  3880  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3881  042B  1303               	bcf	3,6	;RP1=0, select bank0
  3882  042C  00EE               	movwf	floatToASCII@num+2
  3883  042D  3002               	movlw	2
  3884  042E  1683               	bsf	3,5	;RP0=1, select bank1
  3885  042F  1303               	bcf	3,6	;RP1=0, select bank1
  3886  0430  00B7               	movwf	??_displayLCD^(0+128)
  3887  0431  0837               	movf	??_displayLCD^(0+128),w
  3888  0432  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0433  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0434  00EF               	movwf	floatToASCII@precision
  3891  0435  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3892  0436  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  3893                           
  3894                           ;PIC16F917 Battery Management.c: 223: LCDSetCursor(0x00);
  3895  043B  3000               	movlw	0
  3896  043C  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  3897                           
  3898                           ;PIC16F917 Battery Management.c: 224: LCDWriteString("Cell 1:");
  3899  0441  304C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3900  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0443  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0444  00A5               	movwf	LCDWriteString@a
  3903  0445  3080               	movlw	128
  3904  0446  00A6               	movwf	LCDWriteString@a+1
  3905  0447  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3906                           
  3907                           ;PIC16F917 Battery Management.c: 225: LCDWriteString(temp1);
  3908  044C  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  3909  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3910  044E  1303               	bcf	3,6	;RP1=0, select bank0
  3911  044F  00A5               	movwf	LCDWriteString@a
  3912  0450  3000               	movlw	0
  3913  0451  00A6               	movwf	LCDWriteString@a+1
  3914  0452  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3915                           
  3916                           ;PIC16F917 Battery Management.c: 226: LCDWriteString(" V      ");
  3917  0457  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3918  0458  1283               	bcf	3,5	;RP0=0, select bank0
  3919  0459  1303               	bcf	3,6	;RP1=0, select bank0
  3920  045A  00A5               	movwf	LCDWriteString@a
  3921  045B  3080               	movlw	128
  3922  045C  00A6               	movwf	LCDWriteString@a+1
  3923  045D  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3924                           
  3925                           ;PIC16F917 Battery Management.c: 229: floatToASCII( temp2, cellVolt[1], 2);
  3926  0462  3003               	movlw	3
  3927  0463  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  3928  0464  0084               	movwf	4
  3929  0465  1383               	bcf	3,7	;select IRP bank1
  3930  0466  0800               	movf	0,w
  3931  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0469  00EC               	movwf	floatToASCII@num
  3934  046A  0A84               	incf	4,f
  3935  046B  0800               	movf	0,w
  3936  046C  00ED               	movwf	floatToASCII@num+1
  3937  046D  0A84               	incf	4,f
  3938  046E  0800               	movf	0,w
  3939  046F  00EE               	movwf	floatToASCII@num+2
  3940  0470  3002               	movlw	2
  3941  0471  1683               	bsf	3,5	;RP0=1, select bank1
  3942  0472  1303               	bcf	3,6	;RP1=0, select bank1
  3943  0473  00B7               	movwf	??_displayLCD^(0+128)
  3944  0474  0837               	movf	??_displayLCD^(0+128),w
  3945  0475  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0476  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0477  00EF               	movwf	floatToASCII@precision
  3948  0478  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3949  0479  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  3950                           
  3951                           ;PIC16F917 Battery Management.c: 230: LCDSetCursor(0x10);
  3952  047E  3010               	movlw	16
  3953  047F  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  3954                           
  3955                           ;PIC16F917 Battery Management.c: 231: LCDWriteString("Cell 2:");
  3956  0484  3054               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3957  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3958  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3959  0487  00A5               	movwf	LCDWriteString@a
  3960  0488  3080               	movlw	128
  3961  0489  00A6               	movwf	LCDWriteString@a+1
  3962  048A  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3963                           
  3964                           ;PIC16F917 Battery Management.c: 232: LCDWriteString(temp2);
  3965  048F  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  3966  0490  1283               	bcf	3,5	;RP0=0, select bank0
  3967  0491  1303               	bcf	3,6	;RP1=0, select bank0
  3968  0492  00A5               	movwf	LCDWriteString@a
  3969  0493  3000               	movlw	0
  3970  0494  00A6               	movwf	LCDWriteString@a+1
  3971  0495  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  3972                           
  3973                           ;PIC16F917 Battery Management.c: 233: LCDWriteString(" V       ");
  3974  049A  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3975  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3976  049C  1303               	bcf	3,6	;RP1=0, select bank0
  3977  049D  00A5               	movwf	LCDWriteString@a
  3978  049E  3080               	movlw	128
  3979  049F  00A6               	movwf	LCDWriteString@a+1
  3980  04A0  160A  118A  26C2   	fcall	_LCDWriteString
  3981                           
  3982                           ;PIC16F917 Battery Management.c: 235: break;
  3983  04A3  0008               	return
  3984  04A4                     l2517:	
  3985                           ;PIC16F917 Battery Management.c: 236: }
  3986                           ;PIC16F917 Battery Management.c: 239: case 2:
  3987                           
  3988                           
  3989                           ;PIC16F917 Battery Management.c: 240: {
  3990                           ;PIC16F917 Battery Management.c: 242: floatToASCII( temp1, cellVolt[2], 2);
  3991  04A4  3006               	movlw	6
  3992  04A5  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  3993  04A6  0084               	movwf	4
  3994  04A7  1383               	bcf	3,7	;select IRP bank1
  3995  04A8  0800               	movf	0,w
  3996  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3997  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3998  04AB  00EC               	movwf	floatToASCII@num
  3999  04AC  0A84               	incf	4,f
  4000  04AD  0800               	movf	0,w
  4001  04AE  00ED               	movwf	floatToASCII@num+1
  4002  04AF  0A84               	incf	4,f
  4003  04B0  0800               	movf	0,w
  4004  04B1  00EE               	movwf	floatToASCII@num+2
  4005  04B2  3002               	movlw	2
  4006  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  4007  04B4  1303               	bcf	3,6	;RP1=0, select bank1
  4008  04B5  00B7               	movwf	??_displayLCD^(0+128)
  4009  04B6  0837               	movf	??_displayLCD^(0+128),w
  4010  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  4011  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  4012  04B9  00EF               	movwf	floatToASCII@precision
  4013  04BA  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4014  04BB  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  4015                           
  4016                           ;PIC16F917 Battery Management.c: 243: LCDSetCursor(0x00);
  4017  04C0  3000               	movlw	0
  4018  04C1  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  4019                           
  4020                           ;PIC16F917 Battery Management.c: 244: LCDWriteString("Cell 3:");
  4021  04C6  305C               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  4022  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  4023  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  4024  04C9  00A5               	movwf	LCDWriteString@a
  4025  04CA  3080               	movlw	128
  4026  04CB  00A6               	movwf	LCDWriteString@a+1
  4027  04CC  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4028                           
  4029                           ;PIC16F917 Battery Management.c: 245: LCDWriteString(temp1);
  4030  04D1  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4031  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4032  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4033  04D4  00A5               	movwf	LCDWriteString@a
  4034  04D5  3000               	movlw	0
  4035  04D6  00A6               	movwf	LCDWriteString@a+1
  4036  04D7  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4037                           
  4038                           ;PIC16F917 Battery Management.c: 246: LCDWriteString(" V      ");
  4039  04DC  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4040  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  4041  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  4042  04DF  00A5               	movwf	LCDWriteString@a
  4043  04E0  3080               	movlw	128
  4044  04E1  00A6               	movwf	LCDWriteString@a+1
  4045  04E2  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4046                           
  4047                           ;PIC16F917 Battery Management.c: 249: floatToASCII( temp2, cellVolt[3], 2);
  4048  04E7  3009               	movlw	9
  4049  04E8  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4050  04E9  0084               	movwf	4
  4051  04EA  1383               	bcf	3,7	;select IRP bank1
  4052  04EB  0800               	movf	0,w
  4053  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  4054  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  4055  04EE  00EC               	movwf	floatToASCII@num
  4056  04EF  0A84               	incf	4,f
  4057  04F0  0800               	movf	0,w
  4058  04F1  00ED               	movwf	floatToASCII@num+1
  4059  04F2  0A84               	incf	4,f
  4060  04F3  0800               	movf	0,w
  4061  04F4  00EE               	movwf	floatToASCII@num+2
  4062  04F5  3002               	movlw	2
  4063  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  4064  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  4065  04F8  00B7               	movwf	??_displayLCD^(0+128)
  4066  04F9  0837               	movf	??_displayLCD^(0+128),w
  4067  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  4068  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  4069  04FC  00EF               	movwf	floatToASCII@precision
  4070  04FD  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4071  04FE  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  4072                           
  4073                           ;PIC16F917 Battery Management.c: 250: LCDSetCursor(0x10);
  4074  0503  3010               	movlw	16
  4075  0504  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  4076                           
  4077                           ;PIC16F917 Battery Management.c: 251: LCDWriteString("Cell 4:");
  4078  0509  3064               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4079  050A  1283               	bcf	3,5	;RP0=0, select bank0
  4080  050B  1303               	bcf	3,6	;RP1=0, select bank0
  4081  050C  00A5               	movwf	LCDWriteString@a
  4082  050D  3080               	movlw	128
  4083  050E  00A6               	movwf	LCDWriteString@a+1
  4084  050F  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4085                           
  4086                           ;PIC16F917 Battery Management.c: 252: LCDWriteString(temp2);
  4087  0514  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4088  0515  1283               	bcf	3,5	;RP0=0, select bank0
  4089  0516  1303               	bcf	3,6	;RP1=0, select bank0
  4090  0517  00A5               	movwf	LCDWriteString@a
  4091  0518  3000               	movlw	0
  4092  0519  00A6               	movwf	LCDWriteString@a+1
  4093  051A  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4094                           
  4095                           ;PIC16F917 Battery Management.c: 253: LCDWriteString(" V       ");
  4096  051F  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4097  0520  1283               	bcf	3,5	;RP0=0, select bank0
  4098  0521  1303               	bcf	3,6	;RP1=0, select bank0
  4099  0522  00A5               	movwf	LCDWriteString@a
  4100  0523  3080               	movlw	128
  4101  0524  00A6               	movwf	LCDWriteString@a+1
  4102  0525  160A  118A  26C2   	fcall	_LCDWriteString
  4103                           
  4104                           ;PIC16F917 Battery Management.c: 255: break;
  4105  0528  0008               	return
  4106  0529                     l2531:	
  4107                           ;PIC16F917 Battery Management.c: 256: }
  4108                           ;PIC16F917 Battery Management.c: 259: case 3:
  4109                           
  4110                           
  4111                           ;PIC16F917 Battery Management.c: 260: {
  4112                           ;PIC16F917 Battery Management.c: 262: floatToASCII( temp1, cellVolt[4], 2);
  4113  0529  300C               	movlw	12
  4114  052A  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4115  052B  0084               	movwf	4
  4116  052C  1383               	bcf	3,7	;select IRP bank1
  4117  052D  0800               	movf	0,w
  4118  052E  1283               	bcf	3,5	;RP0=0, select bank0
  4119  052F  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0530  00EC               	movwf	floatToASCII@num
  4121  0531  0A84               	incf	4,f
  4122  0532  0800               	movf	0,w
  4123  0533  00ED               	movwf	floatToASCII@num+1
  4124  0534  0A84               	incf	4,f
  4125  0535  0800               	movf	0,w
  4126  0536  00EE               	movwf	floatToASCII@num+2
  4127  0537  3002               	movlw	2
  4128  0538  1683               	bsf	3,5	;RP0=1, select bank1
  4129  0539  1303               	bcf	3,6	;RP1=0, select bank1
  4130  053A  00B7               	movwf	??_displayLCD^(0+128)
  4131  053B  0837               	movf	??_displayLCD^(0+128),w
  4132  053C  1283               	bcf	3,5	;RP0=0, select bank0
  4133  053D  1303               	bcf	3,6	;RP1=0, select bank0
  4134  053E  00EF               	movwf	floatToASCII@precision
  4135  053F  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4136  0540  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  4137                           
  4138                           ;PIC16F917 Battery Management.c: 263: LCDSetCursor(0x00);
  4139  0545  3000               	movlw	0
  4140  0546  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  4141                           
  4142                           ;PIC16F917 Battery Management.c: 264: LCDWriteString("Cell 5:");
  4143  054B  306C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  4144  054C  1283               	bcf	3,5	;RP0=0, select bank0
  4145  054D  1303               	bcf	3,6	;RP1=0, select bank0
  4146  054E  00A5               	movwf	LCDWriteString@a
  4147  054F  3080               	movlw	128
  4148  0550  00A6               	movwf	LCDWriteString@a+1
  4149  0551  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4150                           
  4151                           ;PIC16F917 Battery Management.c: 265: LCDWriteString(temp1);
  4152  0556  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4153  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4154  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4155  0559  00A5               	movwf	LCDWriteString@a
  4156  055A  3000               	movlw	0
  4157  055B  00A6               	movwf	LCDWriteString@a+1
  4158  055C  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4159                           
  4160                           ;PIC16F917 Battery Management.c: 266: LCDWriteString(" V      ");
  4161  0561  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4162  0562  1283               	bcf	3,5	;RP0=0, select bank0
  4163  0563  1303               	bcf	3,6	;RP1=0, select bank0
  4164  0564  00A5               	movwf	LCDWriteString@a
  4165  0565  3080               	movlw	128
  4166  0566  00A6               	movwf	LCDWriteString@a+1
  4167  0567  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4168                           
  4169                           ;PIC16F917 Battery Management.c: 269: floatToASCII( temp2, cellVolt[5], 2);
  4170  056C  300F               	movlw	15
  4171  056D  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4172  056E  0084               	movwf	4
  4173  056F  1383               	bcf	3,7	;select IRP bank1
  4174  0570  0800               	movf	0,w
  4175  0571  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0572  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0573  00EC               	movwf	floatToASCII@num
  4178  0574  0A84               	incf	4,f
  4179  0575  0800               	movf	0,w
  4180  0576  00ED               	movwf	floatToASCII@num+1
  4181  0577  0A84               	incf	4,f
  4182  0578  0800               	movf	0,w
  4183  0579  00EE               	movwf	floatToASCII@num+2
  4184  057A  3002               	movlw	2
  4185  057B  1683               	bsf	3,5	;RP0=1, select bank1
  4186  057C  1303               	bcf	3,6	;RP1=0, select bank1
  4187  057D  00B7               	movwf	??_displayLCD^(0+128)
  4188  057E  0837               	movf	??_displayLCD^(0+128),w
  4189  057F  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0580  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0581  00EF               	movwf	floatToASCII@precision
  4192  0582  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4193  0583  120A  118A  2057  120A  118A  	fcall	_floatToASCII
  4194                           
  4195                           ;PIC16F917 Battery Management.c: 270: LCDSetCursor(0x10);
  4196  0588  3010               	movlw	16
  4197  0589  160A  118A  2612  120A  118A  	fcall	_LCDSetCursor
  4198                           
  4199                           ;PIC16F917 Battery Management.c: 271: LCDWriteString("Cell 6:");
  4200  058E  3074               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4201  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4202  0590  1303               	bcf	3,6	;RP1=0, select bank0
  4203  0591  00A5               	movwf	LCDWriteString@a
  4204  0592  3080               	movlw	128
  4205  0593  00A6               	movwf	LCDWriteString@a+1
  4206  0594  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4207                           
  4208                           ;PIC16F917 Battery Management.c: 272: LCDWriteString(temp2);
  4209  0599  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4210  059A  1283               	bcf	3,5	;RP0=0, select bank0
  4211  059B  1303               	bcf	3,6	;RP1=0, select bank0
  4212  059C  00A5               	movwf	LCDWriteString@a
  4213  059D  3000               	movlw	0
  4214  059E  00A6               	movwf	LCDWriteString@a+1
  4215  059F  160A  118A  26C2  120A  118A  	fcall	_LCDWriteString
  4216                           
  4217                           ;PIC16F917 Battery Management.c: 273: LCDWriteString(" V       ");
  4218  05A4  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4219  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4220  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4221  05A7  00A5               	movwf	LCDWriteString@a
  4222  05A8  3080               	movlw	128
  4223  05A9  00A6               	movwf	LCDWriteString@a+1
  4224  05AA  160A  118A  26C2   	fcall	_LCDWriteString
  4225                           
  4226                           ;PIC16F917 Battery Management.c: 276: }
  4227                           ;PIC16F917 Battery Management.c: 277: }
  4228                           
  4229                           ;PIC16F917 Battery Management.c: 275: break;
  4230  05AD  0008               	return
  4231  05AE                     l2547:	
  4232                           
  4233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4234                           ; Switch size 1, requested type "space"
  4235                           ; Number of cases is 1, Range of values is 0 to 0
  4236                           ; switch strategies available:
  4237                           ; Name         Instructions Cycles
  4238                           ; simple_byte            4     3 (average)
  4239                           ; direct_byte           11     8 (fixed)
  4240                           ; jumptable            260     6 (fixed)
  4241                           ;	Chosen strategy is simple_byte
  4242  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  4243  05AF  1303               	bcf	3,6	;RP1=0, select bank1
  4244  05B0  0836               	movf	(displayLCD@disp+1)^(0+128),w
  4245  05B1  3A00               	xorlw	0	; case 0
  4246  05B2  1903               	skipnz
  4247  05B3  2DB5               	goto	l2671
  4248  05B4  2DC3               	goto	l301
  4249  05B5                     l2671:	
  4250                           
  4251                           ; Switch size 1, requested type "space"
  4252                           ; Number of cases is 4, Range of values is 0 to 3
  4253                           ; switch strategies available:
  4254                           ; Name         Instructions Cycles
  4255                           ; simple_byte           13     7 (average)
  4256                           ; direct_byte           20     8 (fixed)
  4257                           ; jumptable            260     6 (fixed)
  4258                           ;	Chosen strategy is simple_byte
  4259  05B5  0835               	movf	displayLCD@disp^(0+128),w
  4260  05B6  3A00               	xorlw	0	; case 0
  4261  05B7  1903               	skipnz
  4262  05B8  2B92               	goto	l2489
  4263  05B9  3A01               	xorlw	1	; case 1
  4264  05BA  1903               	skipnz
  4265  05BB  2C1B               	goto	l2503
  4266  05BC  3A03               	xorlw	3	; case 2
  4267  05BD  1903               	skipnz
  4268  05BE  2CA4               	goto	l2517
  4269  05BF  3A01               	xorlw	1	; case 3
  4270  05C0  1903               	skipnz
  4271  05C1  2D29               	goto	l2531
  4272  05C2  2DC3               	goto	l301
  4273  05C3                     l301:	
  4274  05C3  0008               	return
  4275  05C4                     __end_of_displayLCD:	
  4276                           
  4277                           	psect	text17
  4278  0057                     __ptext17:	
  4279 ;; *************** function _floatToASCII *****************
  4280 ;; Defined at:
  4281 ;;		line 274 in file "lcd.h"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  returnVal       1    wreg     PTR unsigned char 
  4284 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  4285 ;;  num             3   76[BANK0 ] float 
  4286 ;;  precision       1   79[BANK0 ] unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  returnVal       1   20[BANK1 ] PTR unsigned char 
  4289 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  4290 ;;  k               1   10[BANK1 ] unsigned char 
  4291 ;;  j               1    5[BANK1 ] unsigned char 
  4292 ;;  j               2    8[BANK1 ] int 
  4293 ;;  scaler          4   15[BANK1 ] unsigned long 
  4294 ;;  prevSum         4   11[BANK1 ] unsigned long 
  4295 ;;  i               1   19[BANK1 ] unsigned char 
  4296 ;;  decPoint        1    7[BANK1 ] unsigned char 
  4297 ;;  leading         1    6[BANK1 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;		None               void
  4300 ;; Registers used:
  4301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4307 ;;      Params:         0       4       0       0       0
  4308 ;;      Locals:         0       0      16       0       0
  4309 ;;      Temps:          0       0       5       0       0
  4310 ;;      Totals:         0       4      21       0       0
  4311 ;;Total ram usage:       25 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		___ftadd
  4316 ;;		___ftdiv
  4317 ;;		___ftmul
  4318 ;;		___ftneg
  4319 ;;		___fttol
  4320 ;;		___lldiv
  4321 ;;		___lltoft
  4322 ;;		___lmul
  4323 ;; This function is called by:
  4324 ;;		_displayLCD
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _floatToASCII
  4330  0057                     _floatToASCII:	
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _floatToASCII: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4334                           ;floatToASCII@returnVal stored from wreg
  4335  0057  1683               	bsf	3,5	;RP0=1, select bank1
  4336  0058  1303               	bcf	3,6	;RP1=0, select bank1
  4337  0059  00B4               	movwf	floatToASCII@returnVal^(0+128)
  4338                           
  4339                           ;lcd.h: 276: uint32_t scaler = 100;
  4340  005A  3000               	movlw	0
  4341  005B  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  4342  005C  3000               	movlw	0
  4343  005D  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  4344  005E  3000               	movlw	0
  4345  005F  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  4346  0060  3064               	movlw	100
  4347  0061  00AF               	movwf	floatToASCII@scaler^(0+128)
  4348                           
  4349                           ;lcd.h: 277: uint32_t prevSum = 0;
  4350  0062  3000               	movlw	0
  4351  0063  00AE               	movwf	(floatToASCII@prevSum+3)^(0+128)
  4352  0064  3000               	movlw	0
  4353  0065  00AD               	movwf	(floatToASCII@prevSum+2)^(0+128)
  4354  0066  3000               	movlw	0
  4355  0067  00AC               	movwf	(floatToASCII@prevSum+1)^(0+128)
  4356  0068  3000               	movlw	0
  4357  0069  00AB               	movwf	floatToASCII@prevSum^(0+128)
  4358                           
  4359                           ;lcd.h: 278: bool leading = 1;
  4360  006A  01A6               	clrf	floatToASCII@leading^(0+128)
  4361  006B  0AA6               	incf	floatToASCII@leading^(0+128),f
  4362                           
  4363                           ;lcd.h: 279: uint8_t i = 0;
  4364  006C  01B3               	clrf	floatToASCII@i^(0+128)
  4365                           
  4366                           ;lcd.h: 280: uint8_t decPoint = 0;
  4367  006D  01A7               	clrf	floatToASCII@decPoint^(0+128)
  4368                           
  4369                           ;lcd.h: 283: for (int j = 0; j <= 6; j++)
  4370  006E  01A8               	clrf	floatToASCII@j^(0+128)
  4371  006F  01A9               	clrf	(floatToASCII@j+1)^(0+128)
  4372  0070  0829               	movf	(floatToASCII@j+1)^(0+128),w
  4373  0071  3A80               	xorlw	128
  4374  0072  00FF               	movwf	127
  4375  0073  3080               	movlw	128
  4376  0074  027F               	subwf	127,w
  4377  0075  1D03               	skipz
  4378  0076  2879               	goto	u2515
  4379  0077  3007               	movlw	7
  4380  0078  0228               	subwf	floatToASCII@j^(0+128),w
  4381  0079                     u2515:	
  4382  0079  1803               	btfsc	3,0
  4383  007A  2895               	goto	l2197
  4384  007B                     l2191:	
  4385                           
  4386                           ;lcd.h: 284: {
  4387                           ;lcd.h: 285: returnVal[j] = 0x00;
  4388  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4389  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4390  007D  0828               	movf	floatToASCII@j^(0+128),w
  4391  007E  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4392  007F  00A0               	movwf	??_floatToASCII^(0+128)
  4393  0080  0820               	movf	??_floatToASCII^(0+128),w
  4394  0081  0084               	movwf	4
  4395  0082  1383               	bcf	3,7	;select IRP bank0
  4396  0083  0180               	clrf	0
  4397  0084  3001               	movlw	1
  4398  0085  07A8               	addwf	floatToASCII@j^(0+128),f
  4399  0086  1803               	skipnc
  4400  0087  0AA9               	incf	(floatToASCII@j+1)^(0+128),f
  4401  0088  3000               	movlw	0
  4402  0089  07A9               	addwf	(floatToASCII@j+1)^(0+128),f
  4403  008A  0829               	movf	(floatToASCII@j+1)^(0+128),w
  4404  008B  3A80               	xorlw	128
  4405  008C  00FF               	movwf	127
  4406  008D  3080               	movlw	128
  4407  008E  027F               	subwf	127,w
  4408  008F  1D03               	skipz
  4409  0090  2893               	goto	u2525
  4410  0091  3007               	movlw	7
  4411  0092  0228               	subwf	floatToASCII@j^(0+128),w
  4412  0093                     u2525:	
  4413  0093  1C03               	skipc
  4414  0094  287B               	goto	l2191
  4415  0095                     l2197:	
  4416                           ;lcd.h: 286: }
  4417                           ;lcd.h: 289: do
  4418                           
  4419                           
  4420                           ;lcd.h: 290: {
  4421                           ;lcd.h: 295: returnVal[i] = ( num - prevSum ) / scaler;
  4422  0095  1683               	bsf	3,5	;RP0=1, select bank1
  4423  0096  1303               	bcf	3,6	;RP1=0, select bank1
  4424  0097  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4425  0098  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0099  1303               	bcf	3,6	;RP1=0, select bank0
  4427  009A  00AB               	movwf	___lltoft@c+3
  4428  009B  1683               	bsf	3,5	;RP0=1, select bank1
  4429  009C  1303               	bcf	3,6	;RP1=0, select bank1
  4430  009D  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4431  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4432  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4433  00A0  00AA               	movwf	___lltoft@c+2
  4434  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  4435  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  4436  00A3  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4437  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  4438  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  4439  00A6  00A9               	movwf	___lltoft@c+1
  4440  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  4441  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  4442  00A9  082B               	movf	floatToASCII@prevSum^(0+128),w
  4443  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  4444  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  4445  00AC  00A8               	movwf	___lltoft@c
  4446  00AD  160A  118A  25AC  120A  118A  	fcall	___lltoft
  4447  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  4448  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  4449  00B4  0828               	movf	?___lltoft,w
  4450  00B5  00AE               	movwf	___ftneg@f1
  4451  00B6  0829               	movf	?___lltoft+1,w
  4452  00B7  00AF               	movwf	___ftneg@f1+1
  4453  00B8  082A               	movf	?___lltoft+2,w
  4454  00B9  00B0               	movwf	___ftneg@f1+2
  4455  00BA  160A  118A  247A  120A  118A  	fcall	___ftneg
  4456  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  4457  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  4458  00C1  082E               	movf	?___ftneg,w
  4459  00C2  00B4               	movwf	___ftadd@f2
  4460  00C3  082F               	movf	?___ftneg+1,w
  4461  00C4  00B5               	movwf	___ftadd@f2+1
  4462  00C5  0830               	movf	?___ftneg+2,w
  4463  00C6  00B6               	movwf	___ftadd@f2+2
  4464  00C7  086C               	movf	floatToASCII@num,w
  4465  00C8  00B1               	movwf	___ftadd@f1
  4466  00C9  086D               	movf	floatToASCII@num+1,w
  4467  00CA  00B2               	movwf	___ftadd@f1+1
  4468  00CB  086E               	movf	floatToASCII@num+2,w
  4469  00CC  00B3               	movwf	___ftadd@f1+2
  4470  00CD  120A  158A  26F7  120A  118A  	fcall	___ftadd
  4471  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  4472  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  4473  00D4  0831               	movf	?___ftadd,w
  4474  00D5  00D1               	movwf	___ftdiv@f1
  4475  00D6  0832               	movf	?___ftadd+1,w
  4476  00D7  00D2               	movwf	___ftdiv@f1+1
  4477  00D8  0833               	movf	?___ftadd+2,w
  4478  00D9  00D3               	movwf	___ftdiv@f1+2
  4479  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  4480  00DB  1303               	bcf	3,6	;RP1=0, select bank1
  4481  00DC  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4482  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  4483  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  4484  00DF  00AB               	movwf	___lltoft@c+3
  4485  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  4486  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  4487  00E2  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4488  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4489  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4490  00E5  00AA               	movwf	___lltoft@c+2
  4491  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  4492  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  4493  00E8  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4494  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  4495  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  4496  00EB  00A9               	movwf	___lltoft@c+1
  4497  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  4498  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  4499  00EE  082F               	movf	floatToASCII@scaler^(0+128),w
  4500  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  4501  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  4502  00F1  00A8               	movwf	___lltoft@c
  4503  00F2  160A  118A  25AC  120A  118A  	fcall	___lltoft
  4504  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  4505  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  4506  00F9  0828               	movf	?___lltoft,w
  4507  00FA  00CE               	movwf	___ftdiv@f2
  4508  00FB  0829               	movf	?___lltoft+1,w
  4509  00FC  00CF               	movwf	___ftdiv@f2+1
  4510  00FD  082A               	movf	?___lltoft+2,w
  4511  00FE  00D0               	movwf	___ftdiv@f2+2
  4512  00FF  120A  158A  238C  120A  118A  	fcall	___ftdiv
  4513  0104  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0105  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0106  084E               	movf	?___ftdiv,w
  4516  0107  00DE               	movwf	___fttol@f1
  4517  0108  084F               	movf	?___ftdiv+1,w
  4518  0109  00DF               	movwf	___fttol@f1+1
  4519  010A  0850               	movf	?___ftdiv+2,w
  4520  010B  00E0               	movwf	___fttol@f1+2
  4521  010C  120A  158A  2107  120A  118A  	fcall	___fttol
  4522  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4523  0112  1303               	bcf	3,6	;RP1=0, select bank0
  4524  0113  085E               	movf	?___fttol,w
  4525  0114  1683               	bsf	3,5	;RP0=1, select bank1
  4526  0115  1303               	bcf	3,6	;RP1=0, select bank1
  4527  0116  00A0               	movwf	??_floatToASCII^(0+128)
  4528  0117  0833               	movf	floatToASCII@i^(0+128),w
  4529  0118  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4530  0119  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4531  011A  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4532  011B  0084               	movwf	4
  4533  011C  0820               	movf	??_floatToASCII^(0+128),w
  4534  011D  1383               	bcf	3,7	;select IRP bank0
  4535  011E  0080               	movwf	0
  4536                           
  4537                           ;lcd.h: 297: prevSum += returnVal[i]*scaler;
  4538  011F  0833               	movf	floatToASCII@i^(0+128),w
  4539  0120  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4540  0121  00A0               	movwf	??_floatToASCII^(0+128)
  4541  0122  0820               	movf	??_floatToASCII^(0+128),w
  4542  0123  0084               	movwf	4
  4543  0124  0800               	movf	0,w
  4544  0125  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4545  0126  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  4546  0127  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  4547  0128  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  4548  0129  0824               	movf	(??_floatToASCII+4)^(0+128),w
  4549  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4550  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4551  012C  00A3               	movwf	___lmul@multiplier+3
  4552  012D  1683               	bsf	3,5	;RP0=1, select bank1
  4553  012E  1303               	bcf	3,6	;RP1=0, select bank1
  4554  012F  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4555  0130  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0131  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0132  00A2               	movwf	___lmul@multiplier+2
  4558  0133  1683               	bsf	3,5	;RP0=1, select bank1
  4559  0134  1303               	bcf	3,6	;RP1=0, select bank1
  4560  0135  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4561  0136  1283               	bcf	3,5	;RP0=0, select bank0
  4562  0137  1303               	bcf	3,6	;RP1=0, select bank0
  4563  0138  00A1               	movwf	___lmul@multiplier+1
  4564  0139  1683               	bsf	3,5	;RP0=1, select bank1
  4565  013A  1303               	bcf	3,6	;RP1=0, select bank1
  4566  013B  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4567  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4568  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4569  013E  00A0               	movwf	___lmul@multiplier
  4570  013F  1683               	bsf	3,5	;RP0=1, select bank1
  4571  0140  1303               	bcf	3,6	;RP1=0, select bank1
  4572  0141  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4573  0142  1283               	bcf	3,5	;RP0=0, select bank0
  4574  0143  1303               	bcf	3,6	;RP1=0, select bank0
  4575  0144  00A7               	movwf	___lmul@multiplicand+3
  4576  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4577  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4578  0147  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4579  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4580  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4581  014A  00A6               	movwf	___lmul@multiplicand+2
  4582  014B  1683               	bsf	3,5	;RP0=1, select bank1
  4583  014C  1303               	bcf	3,6	;RP1=0, select bank1
  4584  014D  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4585  014E  1283               	bcf	3,5	;RP0=0, select bank0
  4586  014F  1303               	bcf	3,6	;RP1=0, select bank0
  4587  0150  00A5               	movwf	___lmul@multiplicand+1
  4588  0151  1683               	bsf	3,5	;RP0=1, select bank1
  4589  0152  1303               	bcf	3,6	;RP1=0, select bank1
  4590  0153  082F               	movf	floatToASCII@scaler^(0+128),w
  4591  0154  1283               	bcf	3,5	;RP0=0, select bank0
  4592  0155  1303               	bcf	3,6	;RP1=0, select bank0
  4593  0156  00A4               	movwf	___lmul@multiplicand
  4594  0157  160A  118A  2703  120A  118A  	fcall	___lmul
  4595  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4596  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4597  015E  0820               	movf	?___lmul,w
  4598  015F  1683               	bsf	3,5	;RP0=1, select bank1
  4599  0160  1303               	bcf	3,6	;RP1=0, select bank1
  4600  0161  07AB               	addwf	floatToASCII@prevSum^(0+128),f
  4601  0162  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0163  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0164  0821               	movf	?___lmul+1,w
  4604  0165  1103               	clrz
  4605  0166  1803               	skipnc
  4606  0167  3E01               	addlw	1
  4607  0168  1903               	skipnz
  4608  0169  296D               	goto	u2531
  4609  016A  1683               	bsf	3,5	;RP0=1, select bank1
  4610  016B  1303               	bcf	3,6	;RP1=0, select bank1
  4611  016C  07AC               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  4612  016D                     u2531:	
  4613  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4614  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4615  016F  0822               	movf	?___lmul+2,w
  4616  0170  1103               	clrz
  4617  0171  1803               	skipnc
  4618  0172  3E01               	addlw	1
  4619  0173  1903               	skipnz
  4620  0174  2978               	goto	u2532
  4621  0175  1683               	bsf	3,5	;RP0=1, select bank1
  4622  0176  1303               	bcf	3,6	;RP1=0, select bank1
  4623  0177  07AD               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  4624  0178                     u2532:	
  4625  0178  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0179  1303               	bcf	3,6	;RP1=0, select bank0
  4627  017A  0823               	movf	?___lmul+3,w
  4628  017B  1103               	clrz
  4629  017C  1803               	skipnc
  4630  017D  3E01               	addlw	1
  4631  017E  1903               	skipnz
  4632  017F  2983               	goto	u2533
  4633  0180  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0181  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0182  07AE               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  4636  0183                     u2533:	
  4637  0183  1283               	bcf	3,5	;RP0=0, select bank0
  4638  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4639  0185  1683               	bsf	3,5	;RP0=1, select bank1
  4640  0186  1303               	bcf	3,6	;RP1=0, select bank1
  4641                           
  4642                           ;lcd.h: 299: scaler = scaler/10;
  4643  0187  3000               	movlw	0
  4644  0188  1283               	bcf	3,5	;RP0=0, select bank0
  4645  0189  1303               	bcf	3,6	;RP1=0, select bank0
  4646  018A  00A3               	movwf	___lldiv@divisor+3
  4647  018B  3000               	movlw	0
  4648  018C  00A2               	movwf	___lldiv@divisor+2
  4649  018D  3000               	movlw	0
  4650  018E  00A1               	movwf	___lldiv@divisor+1
  4651  018F  300A               	movlw	10
  4652  0190  00A0               	movwf	___lldiv@divisor
  4653  0191  1683               	bsf	3,5	;RP0=1, select bank1
  4654  0192  1303               	bcf	3,6	;RP1=0, select bank1
  4655  0193  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4656  0194  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0195  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0196  00A7               	movwf	___lldiv@dividend+3
  4659  0197  1683               	bsf	3,5	;RP0=1, select bank1
  4660  0198  1303               	bcf	3,6	;RP1=0, select bank1
  4661  0199  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4662  019A  1283               	bcf	3,5	;RP0=0, select bank0
  4663  019B  1303               	bcf	3,6	;RP1=0, select bank0
  4664  019C  00A6               	movwf	___lldiv@dividend+2
  4665  019D  1683               	bsf	3,5	;RP0=1, select bank1
  4666  019E  1303               	bcf	3,6	;RP1=0, select bank1
  4667  019F  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4668  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  4669  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  4670  01A2  00A5               	movwf	___lldiv@dividend+1
  4671  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  4672  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  4673  01A5  082F               	movf	floatToASCII@scaler^(0+128),w
  4674  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4675  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  4676  01A8  00A4               	movwf	___lldiv@dividend
  4677  01A9  160A  118A  27A0  120A  118A  	fcall	___lldiv
  4678  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  4679  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  4680  01B0  0823               	movf	?___lldiv+3,w
  4681  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4682  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4683  01B3  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  4684  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4685  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4686  01B6  0822               	movf	?___lldiv+2,w
  4687  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  4688  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  4689  01B9  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  4690  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4691  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4692  01BC  0821               	movf	?___lldiv+1,w
  4693  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  4694  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  4695  01BF  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  4696  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  4697  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  4698  01C2  0820               	movf	?___lldiv,w
  4699  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  4700  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  4701  01C5  00AF               	movwf	floatToASCII@scaler^(0+128)
  4702                           
  4703                           ;lcd.h: 301: if (leading == 1)
  4704  01C6  0326               	decf	floatToASCII@leading^(0+128),w
  4705  01C7  1D03               	btfss	3,2
  4706  01C8  29D8               	goto	l2209
  4707                           
  4708                           ;lcd.h: 302: {
  4709                           ;lcd.h: 303: if ( returnVal[i] != 0 )
  4710  01C9  0833               	movf	floatToASCII@i^(0+128),w
  4711  01CA  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4712  01CB  00A0               	movwf	??_floatToASCII^(0+128)
  4713  01CC  0820               	movf	??_floatToASCII^(0+128),w
  4714  01CD  0084               	movwf	4
  4715  01CE  1383               	bcf	3,7	;select IRP bank0
  4716  01CF  0800               	movf	0,w
  4717  01D0  1903               	btfsc	3,2
  4718  01D1  29DC               	goto	l2211
  4719                           
  4720                           ;lcd.h: 304: {
  4721                           ;lcd.h: 306: i++;
  4722  01D2  3001               	movlw	1
  4723  01D3  00A0               	movwf	??_floatToASCII^(0+128)
  4724  01D4  0820               	movf	??_floatToASCII^(0+128),w
  4725  01D5  07B3               	addwf	floatToASCII@i^(0+128),f
  4726                           
  4727                           ;lcd.h: 307: leading = 0;
  4728  01D6  01A6               	clrf	floatToASCII@leading^(0+128)
  4729                           
  4730                           ;lcd.h: 308: }
  4731                           ;lcd.h: 309: }
  4732  01D7  29DC               	goto	l2211
  4733  01D8                     l2209:	
  4734                           
  4735                           ;lcd.h: 310: else
  4736                           ;lcd.h: 311: i++;
  4737  01D8  3001               	movlw	1
  4738  01D9  00A0               	movwf	??_floatToASCII^(0+128)
  4739  01DA  0820               	movf	??_floatToASCII^(0+128),w
  4740  01DB  07B3               	addwf	floatToASCII@i^(0+128),f
  4741  01DC                     l2211:	
  4742                           
  4743                           ;lcd.h: 313: } while ( scaler > 0 );
  4744  01DC  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4745  01DD  0431               	iorwf	(floatToASCII@scaler+2)^(0+128),w
  4746  01DE  0430               	iorwf	(floatToASCII@scaler+1)^(0+128),w
  4747  01DF  042F               	iorwf	floatToASCII@scaler^(0+128),w
  4748  01E0  1D03               	skipz
  4749  01E1  2895               	goto	l2197
  4750                           
  4751                           ;lcd.h: 316: decPoint = i;
  4752  01E2  0833               	movf	floatToASCII@i^(0+128),w
  4753  01E3  00A0               	movwf	??_floatToASCII^(0+128)
  4754  01E4  0820               	movf	??_floatToASCII^(0+128),w
  4755  01E5  00A7               	movwf	floatToASCII@decPoint^(0+128)
  4756                           
  4757                           ;lcd.h: 317: i++;
  4758  01E6  3001               	movlw	1
  4759  01E7  00A0               	movwf	??_floatToASCII^(0+128)
  4760  01E8  0820               	movf	??_floatToASCII^(0+128),w
  4761  01E9  07B3               	addwf	floatToASCII@i^(0+128),f
  4762                           
  4763                           ;lcd.h: 321: scaler = 10;
  4764  01EA  3000               	movlw	0
  4765  01EB  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  4766  01EC  3000               	movlw	0
  4767  01ED  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  4768  01EE  3000               	movlw	0
  4769  01EF  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  4770  01F0  300A               	movlw	10
  4771  01F1  00AF               	movwf	floatToASCII@scaler^(0+128)
  4772                           
  4773                           ;lcd.h: 323: for (uint8_t j = i; i - j <= precision ; i++)
  4774  01F2  0833               	movf	floatToASCII@i^(0+128),w
  4775  01F3  00A0               	movwf	??_floatToASCII^(0+128)
  4776  01F4  0820               	movf	??_floatToASCII^(0+128),w
  4777  01F5  00A5               	movwf	floatToASCII@j_342^(0+128)
  4778  01F6                     l2231:	
  4779  01F6  0825               	movf	floatToASCII@j_342^(0+128),w
  4780  01F7  00A0               	movwf	??_floatToASCII^(0+128)
  4781  01F8  01A1               	clrf	(??_floatToASCII^(0+128)+1)
  4782  01F9  09A0               	comf	??_floatToASCII^(0+128),f
  4783  01FA  09A1               	comf	(??_floatToASCII^(0+128)+1),f
  4784  01FB  0AA0               	incf	??_floatToASCII^(0+128),f
  4785  01FC  1903               	skipnz
  4786  01FD  0AA1               	incf	(??_floatToASCII^(0+128)+1),f
  4787  01FE  0833               	movf	floatToASCII@i^(0+128),w
  4788  01FF  0720               	addwf	??_floatToASCII^(0+128),w
  4789  0200  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  4790  0201  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4791  0202  1803               	skipnc
  4792  0203  0A21               	incf	(??_floatToASCII+1)^(0+128),w
  4793  0204  00A3               	movwf	((??_floatToASCII+2)^(0+128)+1)
  4794  0205  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4795  0206  3A80               	xorlw	128
  4796  0207  3C80               	sublw	128
  4797  0208  1D03               	skipz
  4798  0209  2A0E               	goto	u2585
  4799  020A  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4800  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4801  020C  1303               	bcf	3,6	;RP1=0, select bank0
  4802  020D  026F               	subwf	floatToASCII@precision,w
  4803  020E                     u2585:	
  4804  020E  1C03               	btfss	3,0
  4805  020F  2B34               	goto	l2233
  4806                           
  4807                           ;lcd.h: 324: {
  4808                           ;lcd.h: 325: prevSum = prevSum * 10;
  4809  0210  1683               	bsf	3,5	;RP0=1, select bank1
  4810  0211  1303               	bcf	3,6	;RP1=0, select bank1
  4811  0212  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4812  0213  1283               	bcf	3,5	;RP0=0, select bank0
  4813  0214  1303               	bcf	3,6	;RP1=0, select bank0
  4814  0215  00A3               	movwf	___lmul@multiplier+3
  4815  0216  1683               	bsf	3,5	;RP0=1, select bank1
  4816  0217  1303               	bcf	3,6	;RP1=0, select bank1
  4817  0218  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4818  0219  1283               	bcf	3,5	;RP0=0, select bank0
  4819  021A  1303               	bcf	3,6	;RP1=0, select bank0
  4820  021B  00A2               	movwf	___lmul@multiplier+2
  4821  021C  1683               	bsf	3,5	;RP0=1, select bank1
  4822  021D  1303               	bcf	3,6	;RP1=0, select bank1
  4823  021E  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4824  021F  1283               	bcf	3,5	;RP0=0, select bank0
  4825  0220  1303               	bcf	3,6	;RP1=0, select bank0
  4826  0221  00A1               	movwf	___lmul@multiplier+1
  4827  0222  1683               	bsf	3,5	;RP0=1, select bank1
  4828  0223  1303               	bcf	3,6	;RP1=0, select bank1
  4829  0224  082B               	movf	floatToASCII@prevSum^(0+128),w
  4830  0225  1283               	bcf	3,5	;RP0=0, select bank0
  4831  0226  1303               	bcf	3,6	;RP1=0, select bank0
  4832  0227  00A0               	movwf	___lmul@multiplier
  4833  0228  3000               	movlw	0
  4834  0229  00A7               	movwf	___lmul@multiplicand+3
  4835  022A  3000               	movlw	0
  4836  022B  00A6               	movwf	___lmul@multiplicand+2
  4837  022C  3000               	movlw	0
  4838  022D  00A5               	movwf	___lmul@multiplicand+1
  4839  022E  300A               	movlw	10
  4840  022F  00A4               	movwf	___lmul@multiplicand
  4841  0230  160A  118A  2703  120A  118A  	fcall	___lmul
  4842  0235  1283               	bcf	3,5	;RP0=0, select bank0
  4843  0236  1303               	bcf	3,6	;RP1=0, select bank0
  4844  0237  0823               	movf	?___lmul+3,w
  4845  0238  1683               	bsf	3,5	;RP0=1, select bank1
  4846  0239  1303               	bcf	3,6	;RP1=0, select bank1
  4847  023A  00AE               	movwf	(floatToASCII@prevSum+3)^(0+128)
  4848  023B  1283               	bcf	3,5	;RP0=0, select bank0
  4849  023C  1303               	bcf	3,6	;RP1=0, select bank0
  4850  023D  0822               	movf	?___lmul+2,w
  4851  023E  1683               	bsf	3,5	;RP0=1, select bank1
  4852  023F  1303               	bcf	3,6	;RP1=0, select bank1
  4853  0240  00AD               	movwf	(floatToASCII@prevSum+2)^(0+128)
  4854  0241  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0242  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0243  0821               	movf	?___lmul+1,w
  4857  0244  1683               	bsf	3,5	;RP0=1, select bank1
  4858  0245  1303               	bcf	3,6	;RP1=0, select bank1
  4859  0246  00AC               	movwf	(floatToASCII@prevSum+1)^(0+128)
  4860  0247  1283               	bcf	3,5	;RP0=0, select bank0
  4861  0248  1303               	bcf	3,6	;RP1=0, select bank0
  4862  0249  0820               	movf	?___lmul,w
  4863  024A  1683               	bsf	3,5	;RP0=1, select bank1
  4864  024B  1303               	bcf	3,6	;RP1=0, select bank1
  4865  024C  00AB               	movwf	floatToASCII@prevSum^(0+128)
  4866                           
  4867                           ;lcd.h: 326: returnVal[i] = (char)( num * scaler - prevSum );
  4868  024D  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4869  024E  1283               	bcf	3,5	;RP0=0, select bank0
  4870  024F  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0250  00AB               	movwf	___lltoft@c+3
  4872  0251  1683               	bsf	3,5	;RP0=1, select bank1
  4873  0252  1303               	bcf	3,6	;RP1=0, select bank1
  4874  0253  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4875  0254  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0255  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0256  00AA               	movwf	___lltoft@c+2
  4878  0257  1683               	bsf	3,5	;RP0=1, select bank1
  4879  0258  1303               	bcf	3,6	;RP1=0, select bank1
  4880  0259  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4881  025A  1283               	bcf	3,5	;RP0=0, select bank0
  4882  025B  1303               	bcf	3,6	;RP1=0, select bank0
  4883  025C  00A9               	movwf	___lltoft@c+1
  4884  025D  1683               	bsf	3,5	;RP0=1, select bank1
  4885  025E  1303               	bcf	3,6	;RP1=0, select bank1
  4886  025F  082F               	movf	floatToASCII@scaler^(0+128),w
  4887  0260  1283               	bcf	3,5	;RP0=0, select bank0
  4888  0261  1303               	bcf	3,6	;RP1=0, select bank0
  4889  0262  00A8               	movwf	___lltoft@c
  4890  0263  160A  118A  25AC  120A  118A  	fcall	___lltoft
  4891  0268  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0269  1303               	bcf	3,6	;RP1=0, select bank0
  4893  026A  0828               	movf	?___lltoft,w
  4894  026B  00C1               	movwf	___ftmul@f2
  4895  026C  0829               	movf	?___lltoft+1,w
  4896  026D  00C2               	movwf	___ftmul@f2+1
  4897  026E  082A               	movf	?___lltoft+2,w
  4898  026F  00C3               	movwf	___ftmul@f2+2
  4899  0270  086C               	movf	floatToASCII@num,w
  4900  0271  00BE               	movwf	___ftmul@f1
  4901  0272  086D               	movf	floatToASCII@num+1,w
  4902  0273  00BF               	movwf	___ftmul@f1+1
  4903  0274  086E               	movf	floatToASCII@num+2,w
  4904  0275  00C0               	movwf	___ftmul@f1+2
  4905  0276  120A  158A  2444  120A  118A  	fcall	___ftmul
  4906  027B  1283               	bcf	3,5	;RP0=0, select bank0
  4907  027C  1303               	bcf	3,6	;RP1=0, select bank0
  4908  027D  083E               	movf	?___ftmul,w
  4909  027E  00B4               	movwf	___ftadd@f2
  4910  027F  083F               	movf	?___ftmul+1,w
  4911  0280  00B5               	movwf	___ftadd@f2+1
  4912  0281  0840               	movf	?___ftmul+2,w
  4913  0282  00B6               	movwf	___ftadd@f2+2
  4914  0283  1683               	bsf	3,5	;RP0=1, select bank1
  4915  0284  1303               	bcf	3,6	;RP1=0, select bank1
  4916  0285  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4917  0286  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0287  1303               	bcf	3,6	;RP1=0, select bank0
  4919  0288  00AB               	movwf	___lltoft@c+3
  4920  0289  1683               	bsf	3,5	;RP0=1, select bank1
  4921  028A  1303               	bcf	3,6	;RP1=0, select bank1
  4922  028B  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4923  028C  1283               	bcf	3,5	;RP0=0, select bank0
  4924  028D  1303               	bcf	3,6	;RP1=0, select bank0
  4925  028E  00AA               	movwf	___lltoft@c+2
  4926  028F  1683               	bsf	3,5	;RP0=1, select bank1
  4927  0290  1303               	bcf	3,6	;RP1=0, select bank1
  4928  0291  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4929  0292  1283               	bcf	3,5	;RP0=0, select bank0
  4930  0293  1303               	bcf	3,6	;RP1=0, select bank0
  4931  0294  00A9               	movwf	___lltoft@c+1
  4932  0295  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0296  1303               	bcf	3,6	;RP1=0, select bank1
  4934  0297  082B               	movf	floatToASCII@prevSum^(0+128),w
  4935  0298  1283               	bcf	3,5	;RP0=0, select bank0
  4936  0299  1303               	bcf	3,6	;RP1=0, select bank0
  4937  029A  00A8               	movwf	___lltoft@c
  4938  029B  160A  118A  25AC  120A  118A  	fcall	___lltoft
  4939  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  4940  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  4941  02A2  0828               	movf	?___lltoft,w
  4942  02A3  00AE               	movwf	___ftneg@f1
  4943  02A4  0829               	movf	?___lltoft+1,w
  4944  02A5  00AF               	movwf	___ftneg@f1+1
  4945  02A6  082A               	movf	?___lltoft+2,w
  4946  02A7  00B0               	movwf	___ftneg@f1+2
  4947  02A8  160A  118A  247A  120A  118A  	fcall	___ftneg
  4948  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  4949  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  4950  02AF  082E               	movf	?___ftneg,w
  4951  02B0  00B1               	movwf	___ftadd@f1
  4952  02B1  082F               	movf	?___ftneg+1,w
  4953  02B2  00B2               	movwf	___ftadd@f1+1
  4954  02B3  0830               	movf	?___ftneg+2,w
  4955  02B4  00B3               	movwf	___ftadd@f1+2
  4956  02B5  120A  158A  26F7  120A  118A  	fcall	___ftadd
  4957  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  4958  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  4959  02BC  0831               	movf	?___ftadd,w
  4960  02BD  00DE               	movwf	___fttol@f1
  4961  02BE  0832               	movf	?___ftadd+1,w
  4962  02BF  00DF               	movwf	___fttol@f1+1
  4963  02C0  0833               	movf	?___ftadd+2,w
  4964  02C1  00E0               	movwf	___fttol@f1+2
  4965  02C2  120A  158A  2107  120A  118A  	fcall	___fttol
  4966  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  4967  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  4968  02C9  085E               	movf	?___fttol,w
  4969  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  4970  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  4971  02CC  00A0               	movwf	??_floatToASCII^(0+128)
  4972  02CD  0833               	movf	floatToASCII@i^(0+128),w
  4973  02CE  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4974  02CF  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4975  02D0  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4976  02D1  0084               	movwf	4
  4977  02D2  0820               	movf	??_floatToASCII^(0+128),w
  4978  02D3  1383               	bcf	3,7	;select IRP bank0
  4979  02D4  0080               	movwf	0
  4980                           
  4981                           ;lcd.h: 328: scaler = scaler * 10;
  4982  02D5  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4983  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4984  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  4985  02D8  00A3               	movwf	___lmul@multiplier+3
  4986  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  4987  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  4988  02DB  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4989  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  4990  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  4991  02DE  00A2               	movwf	___lmul@multiplier+2
  4992  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  4993  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  4994  02E1  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4995  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  4996  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  4997  02E4  00A1               	movwf	___lmul@multiplier+1
  4998  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  4999  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  5000  02E7  082F               	movf	floatToASCII@scaler^(0+128),w
  5001  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  5002  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  5003  02EA  00A0               	movwf	___lmul@multiplier
  5004  02EB  3000               	movlw	0
  5005  02EC  00A7               	movwf	___lmul@multiplicand+3
  5006  02ED  3000               	movlw	0
  5007  02EE  00A6               	movwf	___lmul@multiplicand+2
  5008  02EF  3000               	movlw	0
  5009  02F0  00A5               	movwf	___lmul@multiplicand+1
  5010  02F1  300A               	movlw	10
  5011  02F2  00A4               	movwf	___lmul@multiplicand
  5012  02F3  160A  118A  2703  120A  118A  	fcall	___lmul
  5013  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  5014  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  5015  02FA  0823               	movf	?___lmul+3,w
  5016  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  5017  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  5018  02FD  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  5019  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5020  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5021  0300  0822               	movf	?___lmul+2,w
  5022  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5024  0303  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  5025  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5026  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5027  0306  0821               	movf	?___lmul+1,w
  5028  0307  1683               	bsf	3,5	;RP0=1, select bank1
  5029  0308  1303               	bcf	3,6	;RP1=0, select bank1
  5030  0309  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  5031  030A  1283               	bcf	3,5	;RP0=0, select bank0
  5032  030B  1303               	bcf	3,6	;RP1=0, select bank0
  5033  030C  0820               	movf	?___lmul,w
  5034  030D  1683               	bsf	3,5	;RP0=1, select bank1
  5035  030E  1303               	bcf	3,6	;RP1=0, select bank1
  5036  030F  00AF               	movwf	floatToASCII@scaler^(0+128)
  5037                           
  5038                           ;lcd.h: 330: prevSum += returnVal[i];
  5039  0310  0833               	movf	floatToASCII@i^(0+128),w
  5040  0311  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5041  0312  00A0               	movwf	??_floatToASCII^(0+128)
  5042  0313  0820               	movf	??_floatToASCII^(0+128),w
  5043  0314  0084               	movwf	4
  5044  0315  1383               	bcf	3,7	;select IRP bank0
  5045  0316  0800               	movf	0,w
  5046  0317  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5047  0318  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  5048  0319  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  5049  031A  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  5050  031B  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5051  031C  07AB               	addwf	floatToASCII@prevSum^(0+128),f
  5052  031D  0822               	movf	(??_floatToASCII+2)^(0+128),w
  5053  031E  1103               	clrz
  5054  031F  1803               	skipnc
  5055  0320  3E01               	addlw	1
  5056  0321  1D03               	btfss	3,2
  5057  0322  07AC               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  5058  0323  0823               	movf	(??_floatToASCII+3)^(0+128),w
  5059  0324  1103               	clrz
  5060  0325  1803               	skipnc
  5061  0326  3E01               	addlw	1
  5062  0327  1D03               	btfss	3,2
  5063  0328  07AD               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  5064  0329  0824               	movf	(??_floatToASCII+4)^(0+128),w
  5065  032A  1103               	clrz
  5066  032B  1803               	skipnc
  5067  032C  3E01               	addlw	1
  5068  032D  1D03               	btfss	3,2
  5069  032E  07AE               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  5070  032F  3001               	movlw	1
  5071  0330  00A0               	movwf	??_floatToASCII^(0+128)
  5072  0331  0820               	movf	??_floatToASCII^(0+128),w
  5073  0332  07B3               	addwf	floatToASCII@i^(0+128),f
  5074  0333  29F6               	goto	l2231
  5075  0334                     l2233:	
  5076                           
  5077                           ;lcd.h: 331: }
  5078                           ;lcd.h: 333: i--;
  5079  0334  3001               	movlw	1
  5080  0335  1683               	bsf	3,5	;RP0=1, select bank1
  5081  0336  1303               	bcf	3,6	;RP1=0, select bank1
  5082  0337  02B3               	subwf	floatToASCII@i^(0+128),f
  5083                           
  5084                           ;lcd.h: 335: for ( uint8_t k = 0; k <= i ; k++ )
  5085  0338  01AA               	clrf	floatToASCII@k^(0+128)
  5086  0339                     l2241:	
  5087  0339  082A               	movf	floatToASCII@k^(0+128),w
  5088  033A  0233               	subwf	floatToASCII@i^(0+128),w
  5089  033B  1C03               	btfss	3,0
  5090  033C  2B52               	goto	l2243
  5091                           
  5092                           ;lcd.h: 336: {
  5093                           ;lcd.h: 339: returnVal[k] = returnVal[k] | 0x30;
  5094  033D  082A               	movf	floatToASCII@k^(0+128),w
  5095  033E  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5096  033F  00A0               	movwf	??_floatToASCII^(0+128)
  5097  0340  0820               	movf	??_floatToASCII^(0+128),w
  5098  0341  0084               	movwf	4
  5099  0342  1383               	bcf	3,7	;select IRP bank0
  5100  0343  0800               	movf	0,w
  5101  0344  3830               	iorlw	48
  5102  0345  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5103  0346  082A               	movf	floatToASCII@k^(0+128),w
  5104  0347  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5105  0348  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  5106  0349  0822               	movf	(??_floatToASCII+2)^(0+128),w
  5107  034A  0084               	movwf	4
  5108  034B  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5109  034C  0080               	movwf	0
  5110  034D  3001               	movlw	1
  5111  034E  00A0               	movwf	??_floatToASCII^(0+128)
  5112  034F  0820               	movf	??_floatToASCII^(0+128),w
  5113  0350  07AA               	addwf	floatToASCII@k^(0+128),f
  5114  0351  2B39               	goto	l2241
  5115  0352                     l2243:	
  5116                           
  5117                           ;lcd.h: 340: }
  5118                           ;lcd.h: 342: returnVal[decPoint] = 0x2E;
  5119  0352  302E               	movlw	46
  5120  0353  00A0               	movwf	??_floatToASCII^(0+128)
  5121  0354  0827               	movf	floatToASCII@decPoint^(0+128),w
  5122  0355  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5123  0356  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5124  0357  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5125  0358  0084               	movwf	4
  5126  0359  0820               	movf	??_floatToASCII^(0+128),w
  5127  035A  1383               	bcf	3,7	;select IRP bank0
  5128  035B  0080               	movwf	0
  5129                           
  5130                           ;lcd.h: 345: returnVal[i] = '\0';
  5131  035C  0833               	movf	floatToASCII@i^(0+128),w
  5132  035D  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5133  035E  00A0               	movwf	??_floatToASCII^(0+128)
  5134  035F  0820               	movf	??_floatToASCII^(0+128),w
  5135  0360  0084               	movwf	4
  5136  0361  0180               	clrf	0
  5137  0362  0008               	return
  5138  0363                     __end_of_floatToASCII:	
  5139                           
  5140                           	psect	text18
  5141  1703                     __ptext18:	
  5142 ;; *************** function ___lmul *****************
  5143 ;; Defined at:
  5144 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5147 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  product         4    9[BANK0 ] unsigned long 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  4    0[BANK0 ] unsigned long 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       8       0       0       0
  5160 ;;      Locals:         0       4       0       0       0
  5161 ;;      Temps:          0       1       0       0       0
  5162 ;;      Totals:         0      13       0       0       0
  5163 ;;Total ram usage:       13 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    2
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_floatToASCII
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           
  5174                           ;psect for function ___lmul
  5175  1703                     ___lmul:	
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5179  1703  3000               	movlw	0
  5180  1704  1283               	bcf	3,5	;RP0=0, select bank0
  5181  1705  1303               	bcf	3,6	;RP1=0, select bank0
  5182  1706  00AC               	movwf	___lmul@product+3
  5183  1707  3000               	movlw	0
  5184  1708  00AB               	movwf	___lmul@product+2
  5185  1709  3000               	movlw	0
  5186  170A  00AA               	movwf	___lmul@product+1
  5187  170B  3000               	movlw	0
  5188  170C  00A9               	movwf	___lmul@product
  5189  170D                     l1835:	
  5190  170D  1C20               	btfss	___lmul@multiplier,0
  5191  170E  2F23               	goto	l1839
  5192  170F  0824               	movf	___lmul@multiplicand,w
  5193  1710  07A9               	addwf	___lmul@product,f
  5194  1711  0825               	movf	___lmul@multiplicand+1,w
  5195  1712  1103               	clrz
  5196  1713  1803               	skipnc
  5197  1714  3E01               	addlw	1
  5198  1715  1D03               	btfss	3,2
  5199  1716  07AA               	addwf	___lmul@product+1,f
  5200  1717  0826               	movf	___lmul@multiplicand+2,w
  5201  1718  1103               	clrz
  5202  1719  1803               	skipnc
  5203  171A  3E01               	addlw	1
  5204  171B  1D03               	btfss	3,2
  5205  171C  07AB               	addwf	___lmul@product+2,f
  5206  171D  0827               	movf	___lmul@multiplicand+3,w
  5207  171E  1103               	clrz
  5208  171F  1803               	skipnc
  5209  1720  3E01               	addlw	1
  5210  1721  1D03               	btfss	3,2
  5211  1722  07AC               	addwf	___lmul@product+3,f
  5212  1723                     l1839:	
  5213  1723  3001               	movlw	1
  5214  1724  00A8               	movwf	??___lmul
  5215  1725                     u1695:	
  5216  1725  1003               	clrc
  5217  1726  0DA4               	rlf	___lmul@multiplicand,f
  5218  1727  0DA5               	rlf	___lmul@multiplicand+1,f
  5219  1728  0DA6               	rlf	___lmul@multiplicand+2,f
  5220  1729  0DA7               	rlf	___lmul@multiplicand+3,f
  5221  172A  0BA8               	decfsz	??___lmul,f
  5222  172B  2F25               	goto	u1695
  5223  172C  3001               	movlw	1
  5224  172D                     u1705:	
  5225  172D  1003               	clrc
  5226  172E  0CA3               	rrf	___lmul@multiplier+3,f
  5227  172F  0CA2               	rrf	___lmul@multiplier+2,f
  5228  1730  0CA1               	rrf	___lmul@multiplier+1,f
  5229  1731  0CA0               	rrf	___lmul@multiplier,f
  5230  1732  3EFF               	addlw	-1
  5231  1733  1D03               	skipz
  5232  1734  2F2D               	goto	u1705
  5233  1735  0823               	movf	___lmul@multiplier+3,w
  5234  1736  0422               	iorwf	___lmul@multiplier+2,w
  5235  1737  0421               	iorwf	___lmul@multiplier+1,w
  5236  1738  0420               	iorwf	___lmul@multiplier,w
  5237  1739  1D03               	skipz
  5238  173A  2F0D               	goto	l1835
  5239  173B  082C               	movf	___lmul@product+3,w
  5240  173C  00A3               	movwf	?___lmul+3
  5241  173D  082B               	movf	___lmul@product+2,w
  5242  173E  00A2               	movwf	?___lmul+2
  5243  173F  082A               	movf	___lmul@product+1,w
  5244  1740  00A1               	movwf	?___lmul+1
  5245  1741  0829               	movf	___lmul@product,w
  5246  1742  00A0               	movwf	?___lmul
  5247  1743  0008               	return
  5248  1744                     __end_of___lmul:	
  5249                           
  5250                           	psect	text19
  5251  15AC                     __ptext19:	
  5252 ;; *************** function ___lltoft *****************
  5253 ;; Defined at:
  5254 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  c               4    8[BANK0 ] unsigned long 
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  exp             1   13[BANK0 ] unsigned char 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  3    8[BANK0 ] float 
  5261 ;; Registers used:
  5262 ;;		wreg, status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5268 ;;      Params:         0       4       0       0       0
  5269 ;;      Locals:         0       1       0       0       0
  5270 ;;      Temps:          0       1       0       0       0
  5271 ;;      Totals:         0       6       0       0       0
  5272 ;;Total ram usage:        6 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    3
  5275 ;; This function calls:
  5276 ;;		___ftpack
  5277 ;; This function is called by:
  5278 ;;		_floatToASCII
  5279 ;;		_stopWatch
  5280 ;;		_currentTime
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function ___lltoft
  5286  15AC                     ___lltoft:	
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5290  15AC  308E               	movlw	142
  5291  15AD  1283               	bcf	3,5	;RP0=0, select bank0
  5292  15AE  1303               	bcf	3,6	;RP1=0, select bank0
  5293  15AF  00AC               	movwf	??___lltoft
  5294  15B0  082C               	movf	??___lltoft,w
  5295  15B1  00AD               	movwf	___lltoft@exp
  5296  15B2                     l2087:	
  5297  15B2  30FF               	movlw	255
  5298  15B3  052B               	andwf	___lltoft@c+3,w
  5299  15B4  1903               	btfsc	3,2
  5300  15B5  2DC4               	goto	l2089
  5301  15B6  3001               	movlw	1
  5302  15B7                     u2365:	
  5303  15B7  1003               	clrc
  5304  15B8  0CAB               	rrf	___lltoft@c+3,f
  5305  15B9  0CAA               	rrf	___lltoft@c+2,f
  5306  15BA  0CA9               	rrf	___lltoft@c+1,f
  5307  15BB  0CA8               	rrf	___lltoft@c,f
  5308  15BC  3EFF               	addlw	-1
  5309  15BD  1D03               	skipz
  5310  15BE  2DB7               	goto	u2365
  5311  15BF  3001               	movlw	1
  5312  15C0  00AC               	movwf	??___lltoft
  5313  15C1  082C               	movf	??___lltoft,w
  5314  15C2  07AD               	addwf	___lltoft@exp,f
  5315  15C3  2DB2               	goto	l2087
  5316  15C4                     l2089:	
  5317  15C4  0828               	movf	___lltoft@c,w
  5318  15C5  00A0               	movwf	___ftpack@arg
  5319  15C6  0829               	movf	___lltoft@c+1,w
  5320  15C7  00A1               	movwf	___ftpack@arg+1
  5321  15C8  082A               	movf	___lltoft@c+2,w
  5322  15C9  00A2               	movwf	___ftpack@arg+2
  5323  15CA  082D               	movf	___lltoft@exp,w
  5324  15CB  00AC               	movwf	??___lltoft
  5325  15CC  082C               	movf	??___lltoft,w
  5326  15CD  00A3               	movwf	___ftpack@exp
  5327  15CE  01A4               	clrf	___ftpack@sign
  5328  15CF  120A  158A  2099   	fcall	___ftpack
  5329  15D2  1283               	bcf	3,5	;RP0=0, select bank0
  5330  15D3  1303               	bcf	3,6	;RP1=0, select bank0
  5331  15D4  0820               	movf	?___ftpack,w
  5332  15D5  00A8               	movwf	?___lltoft
  5333  15D6  0821               	movf	?___ftpack+1,w
  5334  15D7  00A9               	movwf	?___lltoft+1
  5335  15D8  0822               	movf	?___ftpack+2,w
  5336  15D9  00AA               	movwf	?___lltoft+2
  5337  15DA  0008               	return
  5338  15DB                     __end_of___lltoft:	
  5339                           
  5340                           	psect	text20
  5341  17A0                     __ptext20:	
  5342 ;; *************** function ___lldiv *****************
  5343 ;; Defined at:
  5344 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  divisor         4    0[BANK0 ] unsigned long 
  5347 ;;  dividend        4    4[BANK0 ] unsigned long 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  quotient        4    9[BANK0 ] unsigned long 
  5350 ;;  counter         1   13[BANK0 ] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  4    0[BANK0 ] unsigned long 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5360 ;;      Params:         0       8       0       0       0
  5361 ;;      Locals:         0       5       0       0       0
  5362 ;;      Temps:          0       1       0       0       0
  5363 ;;      Totals:         0      14       0       0       0
  5364 ;;Total ram usage:       14 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    2
  5367 ;; This function calls:
  5368 ;;		Nothing
  5369 ;; This function is called by:
  5370 ;;		_floatToASCII
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function ___lldiv
  5376  17A0                     ___lldiv:	
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5380  17A0  3000               	movlw	0
  5381  17A1  1283               	bcf	3,5	;RP0=0, select bank0
  5382  17A2  1303               	bcf	3,6	;RP1=0, select bank0
  5383  17A3  00AC               	movwf	___lldiv@quotient+3
  5384  17A4  3000               	movlw	0
  5385  17A5  00AB               	movwf	___lldiv@quotient+2
  5386  17A6  3000               	movlw	0
  5387  17A7  00AA               	movwf	___lldiv@quotient+1
  5388  17A8  3000               	movlw	0
  5389  17A9  00A9               	movwf	___lldiv@quotient
  5390  17AA  0823               	movf	___lldiv@divisor+3,w
  5391  17AB  0422               	iorwf	___lldiv@divisor+2,w
  5392  17AC  0421               	iorwf	___lldiv@divisor+1,w
  5393  17AD  0420               	iorwf	___lldiv@divisor,w
  5394  17AE  1903               	skipnz
  5395  17AF  2FF7               	goto	l2079
  5396  17B0  01AD               	clrf	___lldiv@counter
  5397  17B1  0AAD               	incf	___lldiv@counter,f
  5398  17B2                     l2065:	
  5399  17B2  1BA3               	btfsc	___lldiv@divisor+3,7
  5400  17B3  2FC2               	goto	l2067
  5401  17B4  3001               	movlw	1
  5402  17B5  00A8               	movwf	??___lldiv
  5403  17B6                     u2305:	
  5404  17B6  1003               	clrc
  5405  17B7  0DA0               	rlf	___lldiv@divisor,f
  5406  17B8  0DA1               	rlf	___lldiv@divisor+1,f
  5407  17B9  0DA2               	rlf	___lldiv@divisor+2,f
  5408  17BA  0DA3               	rlf	___lldiv@divisor+3,f
  5409  17BB  0BA8               	decfsz	??___lldiv,f
  5410  17BC  2FB6               	goto	u2305
  5411  17BD  3001               	movlw	1
  5412  17BE  00A8               	movwf	??___lldiv
  5413  17BF  0828               	movf	??___lldiv,w
  5414  17C0  07AD               	addwf	___lldiv@counter,f
  5415  17C1  2FB2               	goto	l2065
  5416  17C2                     l2067:	
  5417  17C2  3001               	movlw	1
  5418  17C3  00A8               	movwf	??___lldiv
  5419  17C4                     u2325:	
  5420  17C4  1003               	clrc
  5421  17C5  0DA9               	rlf	___lldiv@quotient,f
  5422  17C6  0DAA               	rlf	___lldiv@quotient+1,f
  5423  17C7  0DAB               	rlf	___lldiv@quotient+2,f
  5424  17C8  0DAC               	rlf	___lldiv@quotient+3,f
  5425  17C9  0BA8               	decfsz	??___lldiv,f
  5426  17CA  2FC4               	goto	u2325
  5427  17CB  0823               	movf	___lldiv@divisor+3,w
  5428  17CC  0227               	subwf	___lldiv@dividend+3,w
  5429  17CD  1D03               	skipz
  5430  17CE  2FD9               	goto	u2335
  5431  17CF  0822               	movf	___lldiv@divisor+2,w
  5432  17D0  0226               	subwf	___lldiv@dividend+2,w
  5433  17D1  1D03               	skipz
  5434  17D2  2FD9               	goto	u2335
  5435  17D3  0821               	movf	___lldiv@divisor+1,w
  5436  17D4  0225               	subwf	___lldiv@dividend+1,w
  5437  17D5  1D03               	skipz
  5438  17D6  2FD9               	goto	u2335
  5439  17D7  0820               	movf	___lldiv@divisor,w
  5440  17D8  0224               	subwf	___lldiv@dividend,w
  5441  17D9                     u2335:	
  5442  17D9  1C03               	skipc
  5443  17DA  2FEA               	goto	l2075
  5444  17DB  0820               	movf	___lldiv@divisor,w
  5445  17DC  02A4               	subwf	___lldiv@dividend,f
  5446  17DD  0821               	movf	___lldiv@divisor+1,w
  5447  17DE  1C03               	skipc
  5448  17DF  0F21               	incfsz	___lldiv@divisor+1,w
  5449  17E0  02A5               	subwf	___lldiv@dividend+1,f
  5450  17E1  0822               	movf	___lldiv@divisor+2,w
  5451  17E2  1C03               	skipc
  5452  17E3  0F22               	incfsz	___lldiv@divisor+2,w
  5453  17E4  02A6               	subwf	___lldiv@dividend+2,f
  5454  17E5  0823               	movf	___lldiv@divisor+3,w
  5455  17E6  1C03               	skipc
  5456  17E7  0F23               	incfsz	___lldiv@divisor+3,w
  5457  17E8  02A7               	subwf	___lldiv@dividend+3,f
  5458  17E9  1429               	bsf	___lldiv@quotient,0
  5459  17EA                     l2075:	
  5460  17EA  3001               	movlw	1
  5461  17EB                     u2345:	
  5462  17EB  1003               	clrc
  5463  17EC  0CA3               	rrf	___lldiv@divisor+3,f
  5464  17ED  0CA2               	rrf	___lldiv@divisor+2,f
  5465  17EE  0CA1               	rrf	___lldiv@divisor+1,f
  5466  17EF  0CA0               	rrf	___lldiv@divisor,f
  5467  17F0  3EFF               	addlw	-1
  5468  17F1  1D03               	skipz
  5469  17F2  2FEB               	goto	u2345
  5470  17F3  3001               	movlw	1
  5471  17F4  02AD               	subwf	___lldiv@counter,f
  5472  17F5  1D03               	btfss	3,2
  5473  17F6  2FC2               	goto	l2067
  5474  17F7                     l2079:	
  5475  17F7  082C               	movf	___lldiv@quotient+3,w
  5476  17F8  00A3               	movwf	?___lldiv+3
  5477  17F9  082B               	movf	___lldiv@quotient+2,w
  5478  17FA  00A2               	movwf	?___lldiv+2
  5479  17FB  082A               	movf	___lldiv@quotient+1,w
  5480  17FC  00A1               	movwf	?___lldiv+1
  5481  17FD  0829               	movf	___lldiv@quotient,w
  5482  17FE  00A0               	movwf	?___lldiv
  5483  17FF  0008               	return
  5484  1800                     __end_of___lldiv:	
  5485                           
  5486                           	psect	text21
  5487  0907                     __ptext21:	
  5488 ;; *************** function ___fttol *****************
  5489 ;; Defined at:
  5490 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  f1              3   62[BANK0 ] float 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  lval            4   71[BANK0 ] unsigned long 
  5495 ;;  exp1            1   75[BANK0 ] unsigned char 
  5496 ;;  sign1           1   70[BANK0 ] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  4   62[BANK0 ] long 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5506 ;;      Params:         0       4       0       0       0
  5507 ;;      Locals:         0       6       0       0       0
  5508 ;;      Temps:          0       4       0       0       0
  5509 ;;      Totals:         0      14       0       0       0
  5510 ;;Total ram usage:       14 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    2
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		_floatToASCII
  5517 ;;		_stopWatch
  5518 ;;		_currentTime
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function ___fttol
  5524  0907                     ___fttol:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5528  0907  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0908  1303               	bcf	3,6	;RP1=0, select bank0
  5530  0909  085E               	movf	___fttol@f1,w
  5531  090A  00E2               	movwf	??___fttol
  5532  090B  085F               	movf	___fttol@f1+1,w
  5533  090C  00E3               	movwf	??___fttol+1
  5534  090D  0860               	movf	___fttol@f1+2,w
  5535  090E  00E4               	movwf	??___fttol+2
  5536  090F  1003               	clrc
  5537  0910  0D63               	rlf	??___fttol+1,w
  5538  0911  0D64               	rlf	??___fttol+2,w
  5539  0912  00E5               	movwf	??___fttol+3
  5540  0913  0865               	movf	??___fttol+3,w
  5541  0914  00EB               	movwf	___fttol@exp1
  5542  0915  086B               	movf	___fttol@exp1,w
  5543  0916  1D03               	btfss	3,2
  5544  0917  2921               	goto	l2023
  5545  0918  3000               	movlw	0
  5546  0919  00E1               	movwf	?___fttol+3
  5547  091A  3000               	movlw	0
  5548  091B  00E0               	movwf	?___fttol+2
  5549  091C  3000               	movlw	0
  5550  091D  00DF               	movwf	?___fttol+1
  5551  091E  3000               	movlw	0
  5552  091F  00DE               	movwf	?___fttol
  5553  0920  0008               	return
  5554  0921                     l2023:	
  5555  0921  085E               	movf	___fttol@f1,w
  5556  0922  00E2               	movwf	??___fttol
  5557  0923  085F               	movf	___fttol@f1+1,w
  5558  0924  00E3               	movwf	??___fttol+1
  5559  0925  0860               	movf	___fttol@f1+2,w
  5560  0926  00E4               	movwf	??___fttol+2
  5561  0927  3017               	movlw	23
  5562  0928                     u2205:	
  5563  0928  1003               	clrc
  5564  0929  0CE4               	rrf	??___fttol+2,f
  5565  092A  0CE3               	rrf	??___fttol+1,f
  5566  092B  0CE2               	rrf	??___fttol,f
  5567  092C  3EFF               	addlw	-1
  5568  092D  1D03               	skipz
  5569  092E  2928               	goto	u2205
  5570  092F  0862               	movf	??___fttol,w
  5571  0930  00E5               	movwf	??___fttol+3
  5572  0931  0865               	movf	??___fttol+3,w
  5573  0932  00E6               	movwf	___fttol@sign1
  5574  0933  17DF               	bsf	___fttol@f1+1,7
  5575  0934  30FF               	movlw	255
  5576  0935  05DE               	andwf	___fttol@f1,f
  5577  0936  30FF               	movlw	255
  5578  0937  05DF               	andwf	___fttol@f1+1,f
  5579  0938  3000               	movlw	0
  5580  0939  05E0               	andwf	___fttol@f1+2,f
  5581  093A  085E               	movf	___fttol@f1,w
  5582  093B  00E7               	movwf	___fttol@lval
  5583  093C  085F               	movf	___fttol@f1+1,w
  5584  093D  00E8               	movwf	___fttol@lval+1
  5585  093E  0860               	movf	___fttol@f1+2,w
  5586  093F  00E9               	movwf	___fttol@lval+2
  5587  0940  01EA               	clrf	___fttol@lval+3
  5588  0941  308E               	movlw	142
  5589  0942  02EB               	subwf	___fttol@exp1,f
  5590  0943  1FEB               	btfss	___fttol@exp1,7
  5591  0944  2963               	goto	l2043
  5592  0945  086B               	movf	___fttol@exp1,w
  5593  0946  3A80               	xorlw	128
  5594  0947  3E8F               	addlw	143
  5595  0948  1803               	skipnc
  5596  0949  2953               	goto	l2041
  5597  094A  3000               	movlw	0
  5598  094B  00E1               	movwf	?___fttol+3
  5599  094C  3000               	movlw	0
  5600  094D  00E0               	movwf	?___fttol+2
  5601  094E  3000               	movlw	0
  5602  094F  00DF               	movwf	?___fttol+1
  5603  0950  3000               	movlw	0
  5604  0951  00DE               	movwf	?___fttol
  5605  0952  0008               	return
  5606  0953                     l2041:	
  5607  0953  3001               	movlw	1
  5608  0954                     u2235:	
  5609  0954  1003               	clrc
  5610  0955  0CEA               	rrf	___fttol@lval+3,f
  5611  0956  0CE9               	rrf	___fttol@lval+2,f
  5612  0957  0CE8               	rrf	___fttol@lval+1,f
  5613  0958  0CE7               	rrf	___fttol@lval,f
  5614  0959  3EFF               	addlw	-1
  5615  095A  1D03               	skipz
  5616  095B  2954               	goto	u2235
  5617  095C  3001               	movlw	1
  5618  095D  00E2               	movwf	??___fttol
  5619  095E  0862               	movf	??___fttol,w
  5620  095F  07EB               	addwf	___fttol@exp1,f
  5621  0960  1903               	btfsc	3,2
  5622  0961  297E               	goto	l2051
  5623  0962  2953               	goto	l2041
  5624  0963                     l2043:	
  5625  0963  3018               	movlw	24
  5626  0964  026B               	subwf	___fttol@exp1,w
  5627  0965  1C03               	skipc
  5628  0966  297B               	goto	l665
  5629  0967  3000               	movlw	0
  5630  0968  00E1               	movwf	?___fttol+3
  5631  0969  3000               	movlw	0
  5632  096A  00E0               	movwf	?___fttol+2
  5633  096B  3000               	movlw	0
  5634  096C  00DF               	movwf	?___fttol+1
  5635  096D  3000               	movlw	0
  5636  096E  00DE               	movwf	?___fttol
  5637  096F  0008               	return
  5638  0970                     l2049:	
  5639  0970  3001               	movlw	1
  5640  0971  00E2               	movwf	??___fttol
  5641  0972                     u2265:	
  5642  0972  1003               	clrc
  5643  0973  0DE7               	rlf	___fttol@lval,f
  5644  0974  0DE8               	rlf	___fttol@lval+1,f
  5645  0975  0DE9               	rlf	___fttol@lval+2,f
  5646  0976  0DEA               	rlf	___fttol@lval+3,f
  5647  0977  0BE2               	decfsz	??___fttol,f
  5648  0978  2972               	goto	u2265
  5649  0979  3001               	movlw	1
  5650  097A  02EB               	subwf	___fttol@exp1,f
  5651  097B                     l665:	
  5652  097B  086B               	movf	___fttol@exp1,w
  5653  097C  1D03               	btfss	3,2
  5654  097D  2970               	goto	l2049
  5655  097E                     l2051:	
  5656  097E  0866               	movf	___fttol@sign1,w
  5657  097F  1903               	btfsc	3,2
  5658  0980  298C               	goto	l2055
  5659  0981  09E7               	comf	___fttol@lval,f
  5660  0982  09E8               	comf	___fttol@lval+1,f
  5661  0983  09E9               	comf	___fttol@lval+2,f
  5662  0984  09EA               	comf	___fttol@lval+3,f
  5663  0985  0AE7               	incf	___fttol@lval,f
  5664  0986  1903               	skipnz
  5665  0987  0AE8               	incf	___fttol@lval+1,f
  5666  0988  1903               	skipnz
  5667  0989  0AE9               	incf	___fttol@lval+2,f
  5668  098A  1903               	skipnz
  5669  098B  0AEA               	incf	___fttol@lval+3,f
  5670  098C                     l2055:	
  5671  098C  086A               	movf	___fttol@lval+3,w
  5672  098D  00E1               	movwf	?___fttol+3
  5673  098E  0869               	movf	___fttol@lval+2,w
  5674  098F  00E0               	movwf	?___fttol+2
  5675  0990  0868               	movf	___fttol@lval+1,w
  5676  0991  00DF               	movwf	?___fttol+1
  5677  0992  0867               	movf	___fttol@lval,w
  5678  0993  00DE               	movwf	?___fttol
  5679  0994  0008               	return
  5680  0995                     __end_of___fttol:	
  5681                           
  5682                           	psect	text22
  5683  147A                     __ptext22:	
  5684 ;; *************** function ___ftneg *****************
  5685 ;; Defined at:
  5686 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  f1              3   14[BANK0 ] float 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  3   14[BANK0 ] float 
  5693 ;; Registers used:
  5694 ;;		wreg
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5700 ;;      Params:         0       3       0       0       0
  5701 ;;      Locals:         0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0
  5703 ;;      Totals:         0       3       0       0       0
  5704 ;;Total ram usage:        3 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    2
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_floatToASCII
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           
  5715                           ;psect for function ___ftneg
  5716  147A                     ___ftneg:	
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in ___ftneg: [wreg]
  5720  147A  1283               	bcf	3,5	;RP0=0, select bank0
  5721  147B  1303               	bcf	3,6	;RP1=0, select bank0
  5722  147C  0830               	movf	___ftneg@f1+2,w
  5723  147D  042F               	iorwf	___ftneg@f1+1,w
  5724  147E  042E               	iorwf	___ftneg@f1,w
  5725  147F  1903               	skipnz
  5726  1480  0008               	return
  5727  1481  3080               	movlw	128
  5728  1482  06B0               	xorwf	___ftneg@f1+2,f
  5729  1483  0008               	return
  5730  1484                     __end_of___ftneg:	
  5731                           
  5732                           	psect	text23
  5733  0C44                     __ptext23:	
  5734 ;; *************** function ___ftmul *****************
  5735 ;; Defined at:
  5736 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  f1              3   30[BANK0 ] float 
  5739 ;;  f2              3   33[BANK0 ] float 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  5742 ;;  sign            1   45[BANK0 ] unsigned char 
  5743 ;;  cntr            1   44[BANK0 ] unsigned char 
  5744 ;;  exp             1   40[BANK0 ] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  3   30[BANK0 ] float 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0, pclath, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5754 ;;      Params:         0       6       0       0       0
  5755 ;;      Locals:         0       6       0       0       0
  5756 ;;      Temps:          0       4       0       0       0
  5757 ;;      Totals:         0      16       0       0       0
  5758 ;;Total ram usage:       16 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    3
  5761 ;; This function calls:
  5762 ;;		___ftpack
  5763 ;; This function is called by:
  5764 ;;		_floatToASCII
  5765 ;;		_stopWatch
  5766 ;;		_sampleBatteryCells
  5767 ;;		_sampleReference
  5768 ;;		_sampleVoltage
  5769 ;;		_sampleCurrent
  5770 ;;		_currentTime
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function ___ftmul
  5776  0C44                     ___ftmul:	
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5780  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  5781  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  5782  0C46  083E               	movf	___ftmul@f1,w
  5783  0C47  00C4               	movwf	??___ftmul
  5784  0C48  083F               	movf	___ftmul@f1+1,w
  5785  0C49  00C5               	movwf	??___ftmul+1
  5786  0C4A  0840               	movf	___ftmul@f1+2,w
  5787  0C4B  00C6               	movwf	??___ftmul+2
  5788  0C4C  1003               	clrc
  5789  0C4D  0D45               	rlf	??___ftmul+1,w
  5790  0C4E  0D46               	rlf	??___ftmul+2,w
  5791  0C4F  00C7               	movwf	??___ftmul+3
  5792  0C50  0847               	movf	??___ftmul+3,w
  5793  0C51  00C8               	movwf	___ftmul@exp
  5794  0C52  0848               	movf	___ftmul@exp,w
  5795  0C53  1D03               	btfss	3,2
  5796  0C54  2C5C               	goto	l1965
  5797  0C55  3000               	movlw	0
  5798  0C56  00BE               	movwf	?___ftmul
  5799  0C57  3000               	movlw	0
  5800  0C58  00BF               	movwf	?___ftmul+1
  5801  0C59  3000               	movlw	0
  5802  0C5A  00C0               	movwf	?___ftmul+2
  5803  0C5B  0008               	return
  5804  0C5C                     l1965:	
  5805  0C5C  0841               	movf	___ftmul@f2,w
  5806  0C5D  00C4               	movwf	??___ftmul
  5807  0C5E  0842               	movf	___ftmul@f2+1,w
  5808  0C5F  00C5               	movwf	??___ftmul+1
  5809  0C60  0843               	movf	___ftmul@f2+2,w
  5810  0C61  00C6               	movwf	??___ftmul+2
  5811  0C62  1003               	clrc
  5812  0C63  0D45               	rlf	??___ftmul+1,w
  5813  0C64  0D46               	rlf	??___ftmul+2,w
  5814  0C65  00C7               	movwf	??___ftmul+3
  5815  0C66  0847               	movf	??___ftmul+3,w
  5816  0C67  00CD               	movwf	___ftmul@sign
  5817  0C68  084D               	movf	___ftmul@sign,w
  5818  0C69  1D03               	btfss	3,2
  5819  0C6A  2C72               	goto	l1971
  5820  0C6B  3000               	movlw	0
  5821  0C6C  00BE               	movwf	?___ftmul
  5822  0C6D  3000               	movlw	0
  5823  0C6E  00BF               	movwf	?___ftmul+1
  5824  0C6F  3000               	movlw	0
  5825  0C70  00C0               	movwf	?___ftmul+2
  5826  0C71  0008               	return
  5827  0C72                     l1971:	
  5828  0C72  084D               	movf	___ftmul@sign,w
  5829  0C73  3E7B               	addlw	123
  5830  0C74  00C4               	movwf	??___ftmul
  5831  0C75  0844               	movf	??___ftmul,w
  5832  0C76  07C8               	addwf	___ftmul@exp,f
  5833  0C77  083E               	movf	___ftmul@f1,w
  5834  0C78  00C4               	movwf	??___ftmul
  5835  0C79  083F               	movf	___ftmul@f1+1,w
  5836  0C7A  00C5               	movwf	??___ftmul+1
  5837  0C7B  0840               	movf	___ftmul@f1+2,w
  5838  0C7C  00C6               	movwf	??___ftmul+2
  5839  0C7D  3010               	movlw	16
  5840  0C7E                     u2065:	
  5841  0C7E  1003               	clrc
  5842  0C7F  0CC6               	rrf	??___ftmul+2,f
  5843  0C80  0CC5               	rrf	??___ftmul+1,f
  5844  0C81  0CC4               	rrf	??___ftmul,f
  5845  0C82  3EFF               	addlw	-1
  5846  0C83  1D03               	skipz
  5847  0C84  2C7E               	goto	u2065
  5848  0C85  0844               	movf	??___ftmul,w
  5849  0C86  00C7               	movwf	??___ftmul+3
  5850  0C87  0847               	movf	??___ftmul+3,w
  5851  0C88  00CD               	movwf	___ftmul@sign
  5852  0C89  0841               	movf	___ftmul@f2,w
  5853  0C8A  00C4               	movwf	??___ftmul
  5854  0C8B  0842               	movf	___ftmul@f2+1,w
  5855  0C8C  00C5               	movwf	??___ftmul+1
  5856  0C8D  0843               	movf	___ftmul@f2+2,w
  5857  0C8E  00C6               	movwf	??___ftmul+2
  5858  0C8F  3010               	movlw	16
  5859  0C90                     u2075:	
  5860  0C90  1003               	clrc
  5861  0C91  0CC6               	rrf	??___ftmul+2,f
  5862  0C92  0CC5               	rrf	??___ftmul+1,f
  5863  0C93  0CC4               	rrf	??___ftmul,f
  5864  0C94  3EFF               	addlw	-1
  5865  0C95  1D03               	skipz
  5866  0C96  2C90               	goto	u2075
  5867  0C97  0844               	movf	??___ftmul,w
  5868  0C98  00C7               	movwf	??___ftmul+3
  5869  0C99  0847               	movf	??___ftmul+3,w
  5870  0C9A  06CD               	xorwf	___ftmul@sign,f
  5871  0C9B  3080               	movlw	128
  5872  0C9C  00C4               	movwf	??___ftmul
  5873  0C9D  0844               	movf	??___ftmul,w
  5874  0C9E  05CD               	andwf	___ftmul@sign,f
  5875  0C9F  17BF               	bsf	___ftmul@f1+1,7
  5876  0CA0  17C2               	bsf	___ftmul@f2+1,7
  5877  0CA1  30FF               	movlw	255
  5878  0CA2  05C1               	andwf	___ftmul@f2,f
  5879  0CA3  30FF               	movlw	255
  5880  0CA4  05C2               	andwf	___ftmul@f2+1,f
  5881  0CA5  3000               	movlw	0
  5882  0CA6  05C3               	andwf	___ftmul@f2+2,f
  5883  0CA7  3000               	movlw	0
  5884  0CA8  00C9               	movwf	___ftmul@f3_as_product
  5885  0CA9  3000               	movlw	0
  5886  0CAA  00CA               	movwf	___ftmul@f3_as_product+1
  5887  0CAB  3000               	movlw	0
  5888  0CAC  00CB               	movwf	___ftmul@f3_as_product+2
  5889  0CAD  3007               	movlw	7
  5890  0CAE  00C4               	movwf	??___ftmul
  5891  0CAF  0844               	movf	??___ftmul,w
  5892  0CB0  00CC               	movwf	___ftmul@cntr
  5893  0CB1                     l1983:	
  5894  0CB1  1C3E               	btfss	___ftmul@f1,0
  5895  0CB2  2CC1               	goto	l1987
  5896  0CB3  0841               	movf	___ftmul@f2,w
  5897  0CB4  07C9               	addwf	___ftmul@f3_as_product,f
  5898  0CB5  0842               	movf	___ftmul@f2+1,w
  5899  0CB6  1103               	clrz
  5900  0CB7  1803               	skipnc
  5901  0CB8  0A42               	incf	___ftmul@f2+1,w
  5902  0CB9  1D03               	btfss	3,2
  5903  0CBA  07CA               	addwf	___ftmul@f3_as_product+1,f
  5904  0CBB  0843               	movf	___ftmul@f2+2,w
  5905  0CBC  1103               	clrz
  5906  0CBD  1803               	skipnc
  5907  0CBE  0A43               	incf	___ftmul@f2+2,w
  5908  0CBF  1D03               	btfss	3,2
  5909  0CC0  07CB               	addwf	___ftmul@f3_as_product+2,f
  5910  0CC1                     l1987:	
  5911  0CC1  3001               	movlw	1
  5912  0CC2                     u2105:	
  5913  0CC2  1003               	clrc
  5914  0CC3  0CC0               	rrf	___ftmul@f1+2,f
  5915  0CC4  0CBF               	rrf	___ftmul@f1+1,f
  5916  0CC5  0CBE               	rrf	___ftmul@f1,f
  5917  0CC6  3EFF               	addlw	-1
  5918  0CC7  1D03               	skipz
  5919  0CC8  2CC2               	goto	u2105
  5920  0CC9  3001               	movlw	1
  5921  0CCA                     u2115:	
  5922  0CCA  1003               	clrc
  5923  0CCB  0DC1               	rlf	___ftmul@f2,f
  5924  0CCC  0DC2               	rlf	___ftmul@f2+1,f
  5925  0CCD  0DC3               	rlf	___ftmul@f2+2,f
  5926  0CCE  3EFF               	addlw	-1
  5927  0CCF  1D03               	skipz
  5928  0CD0  2CCA               	goto	u2115
  5929  0CD1  3001               	movlw	1
  5930  0CD2  02CC               	subwf	___ftmul@cntr,f
  5931  0CD3  1D03               	btfss	3,2
  5932  0CD4  2CB1               	goto	l1983
  5933  0CD5  3009               	movlw	9
  5934  0CD6  00C4               	movwf	??___ftmul
  5935  0CD7  0844               	movf	??___ftmul,w
  5936  0CD8  00CC               	movwf	___ftmul@cntr
  5937  0CD9                     l1995:	
  5938  0CD9  1C3E               	btfss	___ftmul@f1,0
  5939  0CDA  2CE9               	goto	l1999
  5940  0CDB  0841               	movf	___ftmul@f2,w
  5941  0CDC  07C9               	addwf	___ftmul@f3_as_product,f
  5942  0CDD  0842               	movf	___ftmul@f2+1,w
  5943  0CDE  1103               	clrz
  5944  0CDF  1803               	skipnc
  5945  0CE0  0A42               	incf	___ftmul@f2+1,w
  5946  0CE1  1D03               	btfss	3,2
  5947  0CE2  07CA               	addwf	___ftmul@f3_as_product+1,f
  5948  0CE3  0843               	movf	___ftmul@f2+2,w
  5949  0CE4  1103               	clrz
  5950  0CE5  1803               	skipnc
  5951  0CE6  0A43               	incf	___ftmul@f2+2,w
  5952  0CE7  1D03               	btfss	3,2
  5953  0CE8  07CB               	addwf	___ftmul@f3_as_product+2,f
  5954  0CE9                     l1999:	
  5955  0CE9  3001               	movlw	1
  5956  0CEA                     u2155:	
  5957  0CEA  1003               	clrc
  5958  0CEB  0CC0               	rrf	___ftmul@f1+2,f
  5959  0CEC  0CBF               	rrf	___ftmul@f1+1,f
  5960  0CED  0CBE               	rrf	___ftmul@f1,f
  5961  0CEE  3EFF               	addlw	-1
  5962  0CEF  1D03               	skipz
  5963  0CF0  2CEA               	goto	u2155
  5964  0CF1  3001               	movlw	1
  5965  0CF2                     u2165:	
  5966  0CF2  1003               	clrc
  5967  0CF3  0CCB               	rrf	___ftmul@f3_as_product+2,f
  5968  0CF4  0CCA               	rrf	___ftmul@f3_as_product+1,f
  5969  0CF5  0CC9               	rrf	___ftmul@f3_as_product,f
  5970  0CF6  3EFF               	addlw	-1
  5971  0CF7  1D03               	skipz
  5972  0CF8  2CF2               	goto	u2165
  5973  0CF9  3001               	movlw	1
  5974  0CFA  02CC               	subwf	___ftmul@cntr,f
  5975  0CFB  1D03               	btfss	3,2
  5976  0CFC  2CD9               	goto	l1995
  5977  0CFD  0849               	movf	___ftmul@f3_as_product,w
  5978  0CFE  00A0               	movwf	___ftpack@arg
  5979  0CFF  084A               	movf	___ftmul@f3_as_product+1,w
  5980  0D00  00A1               	movwf	___ftpack@arg+1
  5981  0D01  084B               	movf	___ftmul@f3_as_product+2,w
  5982  0D02  00A2               	movwf	___ftpack@arg+2
  5983  0D03  0848               	movf	___ftmul@exp,w
  5984  0D04  00C4               	movwf	??___ftmul
  5985  0D05  0844               	movf	??___ftmul,w
  5986  0D06  00A3               	movwf	___ftpack@exp
  5987  0D07  084D               	movf	___ftmul@sign,w
  5988  0D08  00C5               	movwf	??___ftmul+1
  5989  0D09  0845               	movf	??___ftmul+1,w
  5990  0D0A  00A4               	movwf	___ftpack@sign
  5991  0D0B  120A  158A  2099   	fcall	___ftpack
  5992  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  5993  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  5994  0D10  0820               	movf	?___ftpack,w
  5995  0D11  00BE               	movwf	?___ftmul
  5996  0D12  0821               	movf	?___ftpack+1,w
  5997  0D13  00BF               	movwf	?___ftmul+1
  5998  0D14  0822               	movf	?___ftpack+2,w
  5999  0D15  00C0               	movwf	?___ftmul+2
  6000  0D16  0008               	return
  6001  0D17                     __end_of___ftmul:	
  6002                           
  6003                           	psect	text24
  6004  0B8C                     __ptext24:	
  6005 ;; *************** function ___ftdiv *****************
  6006 ;; Defined at:
  6007 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  f2              3   46[BANK0 ] float 
  6010 ;;  f1              3   49[BANK0 ] float 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  f3              3   57[BANK0 ] float 
  6013 ;;  sign            1   61[BANK0 ] unsigned char 
  6014 ;;  exp             1   60[BANK0 ] unsigned char 
  6015 ;;  cntr            1   56[BANK0 ] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  3   46[BANK0 ] float 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0, pclath, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6025 ;;      Params:         0       6       0       0       0
  6026 ;;      Locals:         0       6       0       0       0
  6027 ;;      Temps:          0       4       0       0       0
  6028 ;;      Totals:         0      16       0       0       0
  6029 ;;Total ram usage:       16 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    3
  6032 ;; This function calls:
  6033 ;;		___ftpack
  6034 ;; This function is called by:
  6035 ;;		_floatToASCII
  6036 ;;		_sampleReference
  6037 ;;		_sampleVoltage
  6038 ;;		_sampleCurrent
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           
  6043                           ;psect for function ___ftdiv
  6044  0B8C                     ___ftdiv:	
  6045                           
  6046                           ;incstack = 0
  6047                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6048  0B8C  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0B8D  1303               	bcf	3,6	;RP1=0, select bank0
  6050  0B8E  0851               	movf	___ftdiv@f1,w
  6051  0B8F  00D4               	movwf	??___ftdiv
  6052  0B90  0852               	movf	___ftdiv@f1+1,w
  6053  0B91  00D5               	movwf	??___ftdiv+1
  6054  0B92  0853               	movf	___ftdiv@f1+2,w
  6055  0B93  00D6               	movwf	??___ftdiv+2
  6056  0B94  1003               	clrc
  6057  0B95  0D55               	rlf	??___ftdiv+1,w
  6058  0B96  0D56               	rlf	??___ftdiv+2,w
  6059  0B97  00D7               	movwf	??___ftdiv+3
  6060  0B98  0857               	movf	??___ftdiv+3,w
  6061  0B99  00DC               	movwf	___ftdiv@exp
  6062  0B9A  085C               	movf	___ftdiv@exp,w
  6063  0B9B  1D03               	btfss	3,2
  6064  0B9C  2BA4               	goto	l1923
  6065  0B9D  3000               	movlw	0
  6066  0B9E  00CE               	movwf	?___ftdiv
  6067  0B9F  3000               	movlw	0
  6068  0BA0  00CF               	movwf	?___ftdiv+1
  6069  0BA1  3000               	movlw	0
  6070  0BA2  00D0               	movwf	?___ftdiv+2
  6071  0BA3  0008               	return
  6072  0BA4                     l1923:	
  6073  0BA4  084E               	movf	___ftdiv@f2,w
  6074  0BA5  00D4               	movwf	??___ftdiv
  6075  0BA6  084F               	movf	___ftdiv@f2+1,w
  6076  0BA7  00D5               	movwf	??___ftdiv+1
  6077  0BA8  0850               	movf	___ftdiv@f2+2,w
  6078  0BA9  00D6               	movwf	??___ftdiv+2
  6079  0BAA  1003               	clrc
  6080  0BAB  0D55               	rlf	??___ftdiv+1,w
  6081  0BAC  0D56               	rlf	??___ftdiv+2,w
  6082  0BAD  00D7               	movwf	??___ftdiv+3
  6083  0BAE  0857               	movf	??___ftdiv+3,w
  6084  0BAF  00DD               	movwf	___ftdiv@sign
  6085  0BB0  085D               	movf	___ftdiv@sign,w
  6086  0BB1  1D03               	btfss	3,2
  6087  0BB2  2BBA               	goto	l1929
  6088  0BB3  3000               	movlw	0
  6089  0BB4  00CE               	movwf	?___ftdiv
  6090  0BB5  3000               	movlw	0
  6091  0BB6  00CF               	movwf	?___ftdiv+1
  6092  0BB7  3000               	movlw	0
  6093  0BB8  00D0               	movwf	?___ftdiv+2
  6094  0BB9  0008               	return
  6095  0BBA                     l1929:	
  6096  0BBA  3000               	movlw	0
  6097  0BBB  00D9               	movwf	___ftdiv@f3
  6098  0BBC  3000               	movlw	0
  6099  0BBD  00DA               	movwf	___ftdiv@f3+1
  6100  0BBE  3000               	movlw	0
  6101  0BBF  00DB               	movwf	___ftdiv@f3+2
  6102  0BC0  3089               	movlw	137
  6103  0BC1  075D               	addwf	___ftdiv@sign,w
  6104  0BC2  00D4               	movwf	??___ftdiv
  6105  0BC3  0854               	movf	??___ftdiv,w
  6106  0BC4  02DC               	subwf	___ftdiv@exp,f
  6107  0BC5  0851               	movf	___ftdiv@f1,w
  6108  0BC6  00D4               	movwf	??___ftdiv
  6109  0BC7  0852               	movf	___ftdiv@f1+1,w
  6110  0BC8  00D5               	movwf	??___ftdiv+1
  6111  0BC9  0853               	movf	___ftdiv@f1+2,w
  6112  0BCA  00D6               	movwf	??___ftdiv+2
  6113  0BCB  3010               	movlw	16
  6114  0BCC                     u1985:	
  6115  0BCC  1003               	clrc
  6116  0BCD  0CD6               	rrf	??___ftdiv+2,f
  6117  0BCE  0CD5               	rrf	??___ftdiv+1,f
  6118  0BCF  0CD4               	rrf	??___ftdiv,f
  6119  0BD0  3EFF               	addlw	-1
  6120  0BD1  1D03               	skipz
  6121  0BD2  2BCC               	goto	u1985
  6122  0BD3  0854               	movf	??___ftdiv,w
  6123  0BD4  00D7               	movwf	??___ftdiv+3
  6124  0BD5  0857               	movf	??___ftdiv+3,w
  6125  0BD6  00DD               	movwf	___ftdiv@sign
  6126  0BD7  084E               	movf	___ftdiv@f2,w
  6127  0BD8  00D4               	movwf	??___ftdiv
  6128  0BD9  084F               	movf	___ftdiv@f2+1,w
  6129  0BDA  00D5               	movwf	??___ftdiv+1
  6130  0BDB  0850               	movf	___ftdiv@f2+2,w
  6131  0BDC  00D6               	movwf	??___ftdiv+2
  6132  0BDD  3010               	movlw	16
  6133  0BDE                     u1995:	
  6134  0BDE  1003               	clrc
  6135  0BDF  0CD6               	rrf	??___ftdiv+2,f
  6136  0BE0  0CD5               	rrf	??___ftdiv+1,f
  6137  0BE1  0CD4               	rrf	??___ftdiv,f
  6138  0BE2  3EFF               	addlw	-1
  6139  0BE3  1D03               	skipz
  6140  0BE4  2BDE               	goto	u1995
  6141  0BE5  0854               	movf	??___ftdiv,w
  6142  0BE6  00D7               	movwf	??___ftdiv+3
  6143  0BE7  0857               	movf	??___ftdiv+3,w
  6144  0BE8  06DD               	xorwf	___ftdiv@sign,f
  6145  0BE9  3080               	movlw	128
  6146  0BEA  00D4               	movwf	??___ftdiv
  6147  0BEB  0854               	movf	??___ftdiv,w
  6148  0BEC  05DD               	andwf	___ftdiv@sign,f
  6149  0BED  17D2               	bsf	___ftdiv@f1+1,7
  6150  0BEE  30FF               	movlw	255
  6151  0BEF  05D1               	andwf	___ftdiv@f1,f
  6152  0BF0  30FF               	movlw	255
  6153  0BF1  05D2               	andwf	___ftdiv@f1+1,f
  6154  0BF2  3000               	movlw	0
  6155  0BF3  05D3               	andwf	___ftdiv@f1+2,f
  6156  0BF4  17CF               	bsf	___ftdiv@f2+1,7
  6157  0BF5  30FF               	movlw	255
  6158  0BF6  05CE               	andwf	___ftdiv@f2,f
  6159  0BF7  30FF               	movlw	255
  6160  0BF8  05CF               	andwf	___ftdiv@f2+1,f
  6161  0BF9  3000               	movlw	0
  6162  0BFA  05D0               	andwf	___ftdiv@f2+2,f
  6163  0BFB  3018               	movlw	24
  6164  0BFC  00D4               	movwf	??___ftdiv
  6165  0BFD  0854               	movf	??___ftdiv,w
  6166  0BFE  00D8               	movwf	___ftdiv@cntr
  6167  0BFF                     l1943:	
  6168  0BFF  3001               	movlw	1
  6169  0C00                     u2005:	
  6170  0C00  1003               	clrc
  6171  0C01  0DD9               	rlf	___ftdiv@f3,f
  6172  0C02  0DDA               	rlf	___ftdiv@f3+1,f
  6173  0C03  0DDB               	rlf	___ftdiv@f3+2,f
  6174  0C04  3EFF               	addlw	-1
  6175  0C05  1D03               	skipz
  6176  0C06  2C00               	goto	u2005
  6177  0C07  0850               	movf	___ftdiv@f2+2,w
  6178  0C08  0253               	subwf	___ftdiv@f1+2,w
  6179  0C09  1D03               	skipz
  6180  0C0A  2C11               	goto	u2015
  6181  0C0B  084F               	movf	___ftdiv@f2+1,w
  6182  0C0C  0252               	subwf	___ftdiv@f1+1,w
  6183  0C0D  1D03               	skipz
  6184  0C0E  2C11               	goto	u2015
  6185  0C0F  084E               	movf	___ftdiv@f2,w
  6186  0C10  0251               	subwf	___ftdiv@f1,w
  6187  0C11                     u2015:	
  6188  0C11  1C03               	skipc
  6189  0C12  2C1E               	goto	l1951
  6190  0C13  084E               	movf	___ftdiv@f2,w
  6191  0C14  02D1               	subwf	___ftdiv@f1,f
  6192  0C15  084F               	movf	___ftdiv@f2+1,w
  6193  0C16  1C03               	skipc
  6194  0C17  0F4F               	incfsz	___ftdiv@f2+1,w
  6195  0C18  02D2               	subwf	___ftdiv@f1+1,f
  6196  0C19  0850               	movf	___ftdiv@f2+2,w
  6197  0C1A  1C03               	skipc
  6198  0C1B  0A50               	incf	___ftdiv@f2+2,w
  6199  0C1C  02D3               	subwf	___ftdiv@f1+2,f
  6200  0C1D  1459               	bsf	___ftdiv@f3,0
  6201  0C1E                     l1951:	
  6202  0C1E  3001               	movlw	1
  6203  0C1F                     u2025:	
  6204  0C1F  1003               	clrc
  6205  0C20  0DD1               	rlf	___ftdiv@f1,f
  6206  0C21  0DD2               	rlf	___ftdiv@f1+1,f
  6207  0C22  0DD3               	rlf	___ftdiv@f1+2,f
  6208  0C23  3EFF               	addlw	-1
  6209  0C24  1D03               	skipz
  6210  0C25  2C1F               	goto	u2025
  6211  0C26  3001               	movlw	1
  6212  0C27  02D8               	subwf	___ftdiv@cntr,f
  6213  0C28  1D03               	btfss	3,2
  6214  0C29  2BFF               	goto	l1943
  6215  0C2A  0859               	movf	___ftdiv@f3,w
  6216  0C2B  00A0               	movwf	___ftpack@arg
  6217  0C2C  085A               	movf	___ftdiv@f3+1,w
  6218  0C2D  00A1               	movwf	___ftpack@arg+1
  6219  0C2E  085B               	movf	___ftdiv@f3+2,w
  6220  0C2F  00A2               	movwf	___ftpack@arg+2
  6221  0C30  085C               	movf	___ftdiv@exp,w
  6222  0C31  00D4               	movwf	??___ftdiv
  6223  0C32  0854               	movf	??___ftdiv,w
  6224  0C33  00A3               	movwf	___ftpack@exp
  6225  0C34  085D               	movf	___ftdiv@sign,w
  6226  0C35  00D5               	movwf	??___ftdiv+1
  6227  0C36  0855               	movf	??___ftdiv+1,w
  6228  0C37  00A4               	movwf	___ftpack@sign
  6229  0C38  120A  158A  2099   	fcall	___ftpack
  6230  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  6231  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  6232  0C3D  0820               	movf	?___ftpack,w
  6233  0C3E  00CE               	movwf	?___ftdiv
  6234  0C3F  0821               	movf	?___ftpack+1,w
  6235  0C40  00CF               	movwf	?___ftdiv+1
  6236  0C41  0822               	movf	?___ftpack+2,w
  6237  0C42  00D0               	movwf	?___ftdiv+2
  6238  0C43  0008               	return
  6239  0C44                     __end_of___ftdiv:	
  6240                           
  6241                           	psect	text25
  6242  0EF7                     __ptext25:	
  6243 ;; *************** function ___ftadd *****************
  6244 ;; Defined at:
  6245 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;  f1              3   17[BANK0 ] float 
  6248 ;;  f2              3   20[BANK0 ] float 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  exp1            1   29[BANK0 ] unsigned char 
  6251 ;;  exp2            1   28[BANK0 ] unsigned char 
  6252 ;;  sign            1   27[BANK0 ] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  3   17[BANK0 ] float 
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6262 ;;      Params:         0       6       0       0       0
  6263 ;;      Locals:         0       3       0       0       0
  6264 ;;      Temps:          0       4       0       0       0
  6265 ;;      Totals:         0      13       0       0       0
  6266 ;;Total ram usage:       13 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    3
  6269 ;; This function calls:
  6270 ;;		___ftpack
  6271 ;; This function is called by:
  6272 ;;		_floatToASCII
  6273 ;;		_sampleBatteryCells
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           
  6278                           ;psect for function ___ftadd
  6279  0EF7                     ___ftadd:	
  6280                           
  6281                           ;incstack = 0
  6282                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6283  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  6284  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  6285  0EF9  0831               	movf	___ftadd@f1,w
  6286  0EFA  00B7               	movwf	??___ftadd
  6287  0EFB  0832               	movf	___ftadd@f1+1,w
  6288  0EFC  00B8               	movwf	??___ftadd+1
  6289  0EFD  0833               	movf	___ftadd@f1+2,w
  6290  0EFE  00B9               	movwf	??___ftadd+2
  6291  0EFF  1003               	clrc
  6292  0F00  0D38               	rlf	??___ftadd+1,w
  6293  0F01  0D39               	rlf	??___ftadd+2,w
  6294  0F02  00BA               	movwf	??___ftadd+3
  6295  0F03  083A               	movf	??___ftadd+3,w
  6296  0F04  00BD               	movwf	___ftadd@exp1
  6297  0F05  0834               	movf	___ftadd@f2,w
  6298  0F06  00B7               	movwf	??___ftadd
  6299  0F07  0835               	movf	___ftadd@f2+1,w
  6300  0F08  00B8               	movwf	??___ftadd+1
  6301  0F09  0836               	movf	___ftadd@f2+2,w
  6302  0F0A  00B9               	movwf	??___ftadd+2
  6303  0F0B  1003               	clrc
  6304  0F0C  0D38               	rlf	??___ftadd+1,w
  6305  0F0D  0D39               	rlf	??___ftadd+2,w
  6306  0F0E  00BA               	movwf	??___ftadd+3
  6307  0F0F  083A               	movf	??___ftadd+3,w
  6308  0F10  00BC               	movwf	___ftadd@exp2
  6309  0F11  083D               	movf	___ftadd@exp1,w
  6310  0F12  1903               	btfsc	3,2
  6311  0F13  2F20               	goto	l1853
  6312  0F14  083C               	movf	___ftadd@exp2,w
  6313  0F15  023D               	subwf	___ftadd@exp1,w
  6314  0F16  1803               	skipnc
  6315  0F17  2F27               	goto	l1857
  6316  0F18  033D               	decf	___ftadd@exp1,w
  6317  0F19  3AFF               	xorlw	255
  6318  0F1A  073C               	addwf	___ftadd@exp2,w
  6319  0F1B  00B7               	movwf	??___ftadd
  6320  0F1C  3019               	movlw	25
  6321  0F1D  0237               	subwf	??___ftadd,w
  6322  0F1E  1C03               	skipc
  6323  0F1F  2F27               	goto	l1857
  6324  0F20                     l1853:	
  6325  0F20  0834               	movf	___ftadd@f2,w
  6326  0F21  00B1               	movwf	?___ftadd
  6327  0F22  0835               	movf	___ftadd@f2+1,w
  6328  0F23  00B2               	movwf	?___ftadd+1
  6329  0F24  0836               	movf	___ftadd@f2+2,w
  6330  0F25  00B3               	movwf	?___ftadd+2
  6331  0F26  0008               	return
  6332  0F27                     l1857:	
  6333  0F27  083C               	movf	___ftadd@exp2,w
  6334  0F28  1903               	btfsc	3,2
  6335  0F29  0008               	return
  6336  0F2A  083D               	movf	___ftadd@exp1,w
  6337  0F2B  023C               	subwf	___ftadd@exp2,w
  6338  0F2C  1803               	skipnc
  6339  0F2D  2F36               	goto	l1863
  6340  0F2E  033C               	decf	___ftadd@exp2,w
  6341  0F2F  3AFF               	xorlw	255
  6342  0F30  073D               	addwf	___ftadd@exp1,w
  6343  0F31  00B7               	movwf	??___ftadd
  6344  0F32  3019               	movlw	25
  6345  0F33  0237               	subwf	??___ftadd,w
  6346  0F34  1803               	btfsc	3,0
  6347  0F35  0008               	return
  6348  0F36                     l1863:	
  6349  0F36  3006               	movlw	6
  6350  0F37  00B7               	movwf	??___ftadd
  6351  0F38  0837               	movf	??___ftadd,w
  6352  0F39  00BB               	movwf	___ftadd@sign
  6353  0F3A  1BB3               	btfsc	___ftadd@f1+2,7
  6354  0F3B  17BB               	bsf	___ftadd@sign,7
  6355  0F3C  1BB6               	btfsc	___ftadd@f2+2,7
  6356  0F3D  173B               	bsf	___ftadd@sign,6
  6357  0F3E  17B2               	bsf	___ftadd@f1+1,7
  6358  0F3F  30FF               	movlw	255
  6359  0F40  05B1               	andwf	___ftadd@f1,f
  6360  0F41  30FF               	movlw	255
  6361  0F42  05B2               	andwf	___ftadd@f1+1,f
  6362  0F43  3000               	movlw	0
  6363  0F44  05B3               	andwf	___ftadd@f1+2,f
  6364  0F45  17B5               	bsf	___ftadd@f2+1,7
  6365  0F46  30FF               	movlw	255
  6366  0F47  05B4               	andwf	___ftadd@f2,f
  6367  0F48  30FF               	movlw	255
  6368  0F49  05B5               	andwf	___ftadd@f2+1,f
  6369  0F4A  3000               	movlw	0
  6370  0F4B  05B6               	andwf	___ftadd@f2+2,f
  6371  0F4C  083C               	movf	___ftadd@exp2,w
  6372  0F4D  023D               	subwf	___ftadd@exp1,w
  6373  0F4E  1803               	skipnc
  6374  0F4F  2F76               	goto	l1885
  6375  0F50                     l1875:	
  6376  0F50  3001               	movlw	1
  6377  0F51                     u1815:	
  6378  0F51  1003               	clrc
  6379  0F52  0DB4               	rlf	___ftadd@f2,f
  6380  0F53  0DB5               	rlf	___ftadd@f2+1,f
  6381  0F54  0DB6               	rlf	___ftadd@f2+2,f
  6382  0F55  3EFF               	addlw	-1
  6383  0F56  1D03               	skipz
  6384  0F57  2F51               	goto	u1815
  6385  0F58  3001               	movlw	1
  6386  0F59  02BC               	subwf	___ftadd@exp2,f
  6387  0F5A  083C               	movf	___ftadd@exp2,w
  6388  0F5B  063D               	xorwf	___ftadd@exp1,w
  6389  0F5C  1903               	skipnz
  6390  0F5D  2F71               	goto	l1883
  6391  0F5E  3001               	movlw	1
  6392  0F5F  02BB               	subwf	___ftadd@sign,f
  6393  0F60  083B               	movf	___ftadd@sign,w
  6394  0F61  3907               	andlw	7
  6395  0F62  1903               	btfsc	3,2
  6396  0F63  2F71               	goto	l1883
  6397  0F64  2F50               	goto	l1875
  6398  0F65                     l1881:	
  6399  0F65  3001               	movlw	1
  6400  0F66                     u1845:	
  6401  0F66  1003               	clrc
  6402  0F67  0CB3               	rrf	___ftadd@f1+2,f
  6403  0F68  0CB2               	rrf	___ftadd@f1+1,f
  6404  0F69  0CB1               	rrf	___ftadd@f1,f
  6405  0F6A  3EFF               	addlw	-1
  6406  0F6B  1D03               	skipz
  6407  0F6C  2F66               	goto	u1845
  6408  0F6D  3001               	movlw	1
  6409  0F6E  00B7               	movwf	??___ftadd
  6410  0F6F  0837               	movf	??___ftadd,w
  6411  0F70  07BD               	addwf	___ftadd@exp1,f
  6412  0F71                     l1883:	
  6413  0F71  083D               	movf	___ftadd@exp1,w
  6414  0F72  063C               	xorwf	___ftadd@exp2,w
  6415  0F73  1903               	btfsc	3,2
  6416  0F74  2F9F               	goto	l605
  6417  0F75  2F65               	goto	l1881
  6418  0F76                     l1885:	
  6419  0F76  083D               	movf	___ftadd@exp1,w
  6420  0F77  023C               	subwf	___ftadd@exp2,w
  6421  0F78  1803               	skipnc
  6422  0F79  2F9F               	goto	l605
  6423  0F7A                     l1887:	
  6424  0F7A  3001               	movlw	1
  6425  0F7B                     u1875:	
  6426  0F7B  1003               	clrc
  6427  0F7C  0DB1               	rlf	___ftadd@f1,f
  6428  0F7D  0DB2               	rlf	___ftadd@f1+1,f
  6429  0F7E  0DB3               	rlf	___ftadd@f1+2,f
  6430  0F7F  3EFF               	addlw	-1
  6431  0F80  1D03               	skipz
  6432  0F81  2F7B               	goto	u1875
  6433  0F82  3001               	movlw	1
  6434  0F83  02BD               	subwf	___ftadd@exp1,f
  6435  0F84  083C               	movf	___ftadd@exp2,w
  6436  0F85  063D               	xorwf	___ftadd@exp1,w
  6437  0F86  1903               	skipnz
  6438  0F87  2F9B               	goto	l1895
  6439  0F88  3001               	movlw	1
  6440  0F89  02BB               	subwf	___ftadd@sign,f
  6441  0F8A  083B               	movf	___ftadd@sign,w
  6442  0F8B  3907               	andlw	7
  6443  0F8C  1903               	btfsc	3,2
  6444  0F8D  2F9B               	goto	l1895
  6445  0F8E  2F7A               	goto	l1887
  6446  0F8F                     l1893:	
  6447  0F8F  3001               	movlw	1
  6448  0F90                     u1905:	
  6449  0F90  1003               	clrc
  6450  0F91  0CB6               	rrf	___ftadd@f2+2,f
  6451  0F92  0CB5               	rrf	___ftadd@f2+1,f
  6452  0F93  0CB4               	rrf	___ftadd@f2,f
  6453  0F94  3EFF               	addlw	-1
  6454  0F95  1D03               	skipz
  6455  0F96  2F90               	goto	u1905
  6456  0F97  3001               	movlw	1
  6457  0F98  00B7               	movwf	??___ftadd
  6458  0F99  0837               	movf	??___ftadd,w
  6459  0F9A  07BC               	addwf	___ftadd@exp2,f
  6460  0F9B                     l1895:	
  6461  0F9B  083D               	movf	___ftadd@exp1,w
  6462  0F9C  063C               	xorwf	___ftadd@exp2,w
  6463  0F9D  1D03               	skipz
  6464  0F9E  2F8F               	goto	l1893
  6465  0F9F                     l605:	
  6466  0F9F  1FBB               	btfss	___ftadd@sign,7
  6467  0FA0  2FB1               	goto	l1899
  6468  0FA1  30FF               	movlw	255
  6469  0FA2  06B1               	xorwf	___ftadd@f1,f
  6470  0FA3  30FF               	movlw	255
  6471  0FA4  06B2               	xorwf	___ftadd@f1+1,f
  6472  0FA5  30FF               	movlw	255
  6473  0FA6  06B3               	xorwf	___ftadd@f1+2,f
  6474  0FA7  3001               	movlw	1
  6475  0FA8  07B1               	addwf	___ftadd@f1,f
  6476  0FA9  3000               	movlw	0
  6477  0FAA  1803               	skipnc
  6478  0FAB  3001               	movlw	1
  6479  0FAC  07B2               	addwf	___ftadd@f1+1,f
  6480  0FAD  3000               	movlw	0
  6481  0FAE  1803               	skipnc
  6482  0FAF  3001               	movlw	1
  6483  0FB0  07B3               	addwf	___ftadd@f1+2,f
  6484  0FB1                     l1899:	
  6485  0FB1  1F3B               	btfss	___ftadd@sign,6
  6486  0FB2  2FC3               	goto	l1903
  6487  0FB3  30FF               	movlw	255
  6488  0FB4  06B4               	xorwf	___ftadd@f2,f
  6489  0FB5  30FF               	movlw	255
  6490  0FB6  06B5               	xorwf	___ftadd@f2+1,f
  6491  0FB7  30FF               	movlw	255
  6492  0FB8  06B6               	xorwf	___ftadd@f2+2,f
  6493  0FB9  3001               	movlw	1
  6494  0FBA  07B4               	addwf	___ftadd@f2,f
  6495  0FBB  3000               	movlw	0
  6496  0FBC  1803               	skipnc
  6497  0FBD  3001               	movlw	1
  6498  0FBE  07B5               	addwf	___ftadd@f2+1,f
  6499  0FBF  3000               	movlw	0
  6500  0FC0  1803               	skipnc
  6501  0FC1  3001               	movlw	1
  6502  0FC2  07B6               	addwf	___ftadd@f2+2,f
  6503  0FC3                     l1903:	
  6504  0FC3  01BB               	clrf	___ftadd@sign
  6505  0FC4  0831               	movf	___ftadd@f1,w
  6506  0FC5  07B4               	addwf	___ftadd@f2,f
  6507  0FC6  0832               	movf	___ftadd@f1+1,w
  6508  0FC7  1103               	clrz
  6509  0FC8  1803               	skipnc
  6510  0FC9  0A32               	incf	___ftadd@f1+1,w
  6511  0FCA  1D03               	btfss	3,2
  6512  0FCB  07B5               	addwf	___ftadd@f2+1,f
  6513  0FCC  0833               	movf	___ftadd@f1+2,w
  6514  0FCD  1103               	clrz
  6515  0FCE  1803               	skipnc
  6516  0FCF  0A33               	incf	___ftadd@f1+2,w
  6517  0FD0  1D03               	btfss	3,2
  6518  0FD1  07B6               	addwf	___ftadd@f2+2,f
  6519  0FD2  1FB6               	btfss	___ftadd@f2+2,7
  6520  0FD3  2FE6               	goto	l1913
  6521  0FD4  30FF               	movlw	255
  6522  0FD5  06B4               	xorwf	___ftadd@f2,f
  6523  0FD6  30FF               	movlw	255
  6524  0FD7  06B5               	xorwf	___ftadd@f2+1,f
  6525  0FD8  30FF               	movlw	255
  6526  0FD9  06B6               	xorwf	___ftadd@f2+2,f
  6527  0FDA  3001               	movlw	1
  6528  0FDB  07B4               	addwf	___ftadd@f2,f
  6529  0FDC  3000               	movlw	0
  6530  0FDD  1803               	skipnc
  6531  0FDE  3001               	movlw	1
  6532  0FDF  07B5               	addwf	___ftadd@f2+1,f
  6533  0FE0  3000               	movlw	0
  6534  0FE1  1803               	skipnc
  6535  0FE2  3001               	movlw	1
  6536  0FE3  07B6               	addwf	___ftadd@f2+2,f
  6537  0FE4  01BB               	clrf	___ftadd@sign
  6538  0FE5  0ABB               	incf	___ftadd@sign,f
  6539  0FE6                     l1913:	
  6540  0FE6  0834               	movf	___ftadd@f2,w
  6541  0FE7  00A0               	movwf	___ftpack@arg
  6542  0FE8  0835               	movf	___ftadd@f2+1,w
  6543  0FE9  00A1               	movwf	___ftpack@arg+1
  6544  0FEA  0836               	movf	___ftadd@f2+2,w
  6545  0FEB  00A2               	movwf	___ftpack@arg+2
  6546  0FEC  083D               	movf	___ftadd@exp1,w
  6547  0FED  00B7               	movwf	??___ftadd
  6548  0FEE  0837               	movf	??___ftadd,w
  6549  0FEF  00A3               	movwf	___ftpack@exp
  6550  0FF0  083B               	movf	___ftadd@sign,w
  6551  0FF1  00B8               	movwf	??___ftadd+1
  6552  0FF2  0838               	movf	??___ftadd+1,w
  6553  0FF3  00A4               	movwf	___ftpack@sign
  6554  0FF4  120A  158A  2099   	fcall	___ftpack
  6555  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  6556  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  6557  0FF9  0820               	movf	?___ftpack,w
  6558  0FFA  00B1               	movwf	?___ftadd
  6559  0FFB  0821               	movf	?___ftpack+1,w
  6560  0FFC  00B2               	movwf	?___ftadd+1
  6561  0FFD  0822               	movf	?___ftpack+2,w
  6562  0FFE  00B3               	movwf	?___ftadd+2
  6563  0FFF  0008               	return
  6564  1000                     __end_of___ftadd:	
  6565                           
  6566                           	psect	text26
  6567  0899                     __ptext26:	
  6568 ;; *************** function ___ftpack *****************
  6569 ;; Defined at:
  6570 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  arg             3    0[BANK0 ] unsigned um
  6573 ;;  exp             1    3[BANK0 ] unsigned char 
  6574 ;;  sign            1    4[BANK0 ] unsigned char 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  3    0[BANK0 ] float 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6586 ;;      Params:         0       5       0       0       0
  6587 ;;      Locals:         0       0       0       0       0
  6588 ;;      Temps:          0       3       0       0       0
  6589 ;;      Totals:         0       8       0       0       0
  6590 ;;Total ram usage:        8 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    2
  6593 ;; This function calls:
  6594 ;;		Nothing
  6595 ;; This function is called by:
  6596 ;;		___ftadd
  6597 ;;		___ftdiv
  6598 ;;		___ftmul
  6599 ;;		___lbtoft
  6600 ;;		___lltoft
  6601 ;;		___lwtoft
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function ___ftpack
  6607  0899                     ___ftpack:	
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6611  0899  1283               	bcf	3,5	;RP0=0, select bank0
  6612  089A  1303               	bcf	3,6	;RP1=0, select bank0
  6613  089B  0823               	movf	___ftpack@exp,w
  6614  089C  1903               	btfsc	3,2
  6615  089D  28A3               	goto	l1763
  6616  089E  0822               	movf	___ftpack@arg+2,w
  6617  089F  0421               	iorwf	___ftpack@arg+1,w
  6618  08A0  0420               	iorwf	___ftpack@arg,w
  6619  08A1  1D03               	skipz
  6620  08A2  28B6               	goto	l1769
  6621  08A3                     l1763:	
  6622  08A3  3000               	movlw	0
  6623  08A4  00A0               	movwf	?___ftpack
  6624  08A5  3000               	movlw	0
  6625  08A6  00A1               	movwf	?___ftpack+1
  6626  08A7  3000               	movlw	0
  6627  08A8  00A2               	movwf	?___ftpack+2
  6628  08A9  0008               	return
  6629  08AA                     l1767:	
  6630  08AA  3001               	movlw	1
  6631  08AB  00A5               	movwf	??___ftpack
  6632  08AC  0825               	movf	??___ftpack,w
  6633  08AD  07A3               	addwf	___ftpack@exp,f
  6634  08AE  3001               	movlw	1
  6635  08AF                     u1545:	
  6636  08AF  1003               	clrc
  6637  08B0  0CA2               	rrf	___ftpack@arg+2,f
  6638  08B1  0CA1               	rrf	___ftpack@arg+1,f
  6639  08B2  0CA0               	rrf	___ftpack@arg,f
  6640  08B3  3EFF               	addlw	-1
  6641  08B4  1D03               	skipz
  6642  08B5  28AF               	goto	u1545
  6643  08B6                     l1769:	
  6644  08B6  30FE               	movlw	254
  6645  08B7  0522               	andwf	___ftpack@arg+2,w
  6646  08B8  1903               	btfsc	3,2
  6647  08B9  28D1               	goto	l574
  6648  08BA  28AA               	goto	l1767
  6649  08BB                     l1771:	
  6650  08BB  3001               	movlw	1
  6651  08BC  00A5               	movwf	??___ftpack
  6652  08BD  0825               	movf	??___ftpack,w
  6653  08BE  07A3               	addwf	___ftpack@exp,f
  6654  08BF  3001               	movlw	1
  6655  08C0  07A0               	addwf	___ftpack@arg,f
  6656  08C1  3000               	movlw	0
  6657  08C2  1803               	skipnc
  6658  08C3  3001               	movlw	1
  6659  08C4  07A1               	addwf	___ftpack@arg+1,f
  6660  08C5  3000               	movlw	0
  6661  08C6  1803               	skipnc
  6662  08C7  3001               	movlw	1
  6663  08C8  07A2               	addwf	___ftpack@arg+2,f
  6664  08C9  3001               	movlw	1
  6665  08CA                     u1565:	
  6666  08CA  1003               	clrc
  6667  08CB  0CA2               	rrf	___ftpack@arg+2,f
  6668  08CC  0CA1               	rrf	___ftpack@arg+1,f
  6669  08CD  0CA0               	rrf	___ftpack@arg,f
  6670  08CE  3EFF               	addlw	-1
  6671  08CF  1D03               	skipz
  6672  08D0  28CA               	goto	u1565
  6673  08D1                     l574:	
  6674  08D1  30FF               	movlw	255
  6675  08D2  0522               	andwf	___ftpack@arg+2,w
  6676  08D3  1903               	btfsc	3,2
  6677  08D4  28E4               	goto	l1779
  6678  08D5  28BB               	goto	l1771
  6679  08D6                     l1781:	
  6680  08D6  3002               	movlw	2
  6681  08D7  0223               	subwf	___ftpack@exp,w
  6682  08D8  1C03               	btfss	3,0
  6683  08D9  28E6               	goto	l581
  6684  08DA  3001               	movlw	1
  6685  08DB  02A3               	subwf	___ftpack@exp,f
  6686  08DC  3001               	movlw	1
  6687  08DD                     u1585:	
  6688  08DD  1003               	clrc
  6689  08DE  0DA0               	rlf	___ftpack@arg,f
  6690  08DF  0DA1               	rlf	___ftpack@arg+1,f
  6691  08E0  0DA2               	rlf	___ftpack@arg+2,f
  6692  08E1  3EFF               	addlw	-1
  6693  08E2  1D03               	skipz
  6694  08E3  28DD               	goto	u1585
  6695  08E4                     l1779:	
  6696  08E4  1FA1               	btfss	___ftpack@arg+1,7
  6697  08E5  28D6               	goto	l1781
  6698  08E6                     l581:	
  6699  08E6  1823               	btfsc	___ftpack@exp,0
  6700  08E7  28EE               	goto	l582
  6701  08E8  30FF               	movlw	255
  6702  08E9  05A0               	andwf	___ftpack@arg,f
  6703  08EA  307F               	movlw	127
  6704  08EB  05A1               	andwf	___ftpack@arg+1,f
  6705  08EC  30FF               	movlw	255
  6706  08ED  05A2               	andwf	___ftpack@arg+2,f
  6707  08EE                     l582:	
  6708  08EE  1003               	clrc
  6709  08EF  0CA3               	rrf	___ftpack@exp,f
  6710  08F0  0823               	movf	___ftpack@exp,w
  6711  08F1  00A5               	movwf	??___ftpack
  6712  08F2  01A6               	clrf	??___ftpack+1
  6713  08F3  01A7               	clrf	??___ftpack+2
  6714  08F4  3010               	movlw	16
  6715  08F5                     u1625:	
  6716  08F5  1003               	clrc
  6717  08F6  0DA5               	rlf	??___ftpack,f
  6718  08F7  0DA6               	rlf	??___ftpack+1,f
  6719  08F8  0DA7               	rlf	??___ftpack+2,f
  6720  08F9  3EFF               	addlw	-1
  6721  08FA  1D03               	skipz
  6722  08FB  28F5               	goto	u1625
  6723  08FC  0825               	movf	??___ftpack,w
  6724  08FD  04A0               	iorwf	___ftpack@arg,f
  6725  08FE  0826               	movf	??___ftpack+1,w
  6726  08FF  04A1               	iorwf	___ftpack@arg+1,f
  6727  0900  0827               	movf	??___ftpack+2,w
  6728  0901  04A2               	iorwf	___ftpack@arg+2,f
  6729  0902  0824               	movf	___ftpack@sign,w
  6730  0903  1903               	btfsc	3,2
  6731  0904  0008               	return
  6732  0905  17A2               	bsf	___ftpack@arg+2,7
  6733  0906  0008               	return
  6734  0907                     __end_of___ftpack:	
  6735                           
  6736                           	psect	text27
  6737  16C2                     __ptext27:	
  6738 ;; *************** function _LCDWriteString *****************
  6739 ;; Defined at:
  6740 ;;		line 163 in file "lcd.h"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  a               2    5[BANK0 ] PTR const unsigned char 
  6743 ;;		 -> STR_16(10), STR_15(8), STR_14(9), STR_13(8), 
  6744 ;;		 -> STR_12(10), STR_11(8), STR_10(9), STR_9(8), 
  6745 ;;		 -> STR_8(10), STR_7(8), STR_6(9), STR_5(8), 
  6746 ;;		 -> STR_4(10), STR_3(9), STR_2(9), STR_1(9), 
  6747 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  i               2   10[BANK0 ] int 
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6759 ;;      Params:         0       2       0       0       0
  6760 ;;      Locals:         0       2       0       0       0
  6761 ;;      Temps:          0       3       0       0       0
  6762 ;;      Totals:         0       7       0       0       0
  6763 ;;Total ram usage:        7 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    4
  6766 ;; This function calls:
  6767 ;;		_LCDWriteChar
  6768 ;; This function is called by:
  6769 ;;		_displayLCD
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           
  6774                           ;psect for function _LCDWriteString
  6775  16C2                     _LCDWriteString:	
  6776                           
  6777                           ;lcd.h: 165: for(int i=0;a[i]!='\0';i++)
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6781  16C2  1283               	bcf	3,5	;RP0=0, select bank0
  6782  16C3  1303               	bcf	3,6	;RP1=0, select bank0
  6783  16C4  01AA               	clrf	LCDWriteString@i
  6784  16C5  01AB               	clrf	LCDWriteString@i+1
  6785  16C6                     l2175:	
  6786  16C6  082A               	movf	LCDWriteString@i,w
  6787  16C7  0725               	addwf	LCDWriteString@a,w
  6788  16C8  00A8               	movwf	??_LCDWriteString+1
  6789  16C9  0826               	movf	LCDWriteString@a+1,w
  6790  16CA  00A7               	movwf	??_LCDWriteString
  6791  16CB  1803               	skipnc
  6792  16CC  0AA7               	incf	??_LCDWriteString,f
  6793  16CD  1BAA               	btfsc	LCDWriteString@i,7
  6794  16CE  03A7               	decf	??_LCDWriteString,f
  6795  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  6796  16D0  1303               	bcf	3,6	;RP1=0, select bank0
  6797  16D1  0827               	movf	??_LCDWriteString,w
  6798  16D2  00A9               	movwf	??_LCDWriteString+2
  6799  16D3  0829               	movf	??_LCDWriteString+2,w
  6800  16D4  00FF               	movwf	127
  6801  16D5  0828               	movf	??_LCDWriteString+1,w
  6802  16D6  0084               	movwf	4
  6803  16D7  120A  158A  2000  160A  118A  	fcall	stringtab
  6804  16DC  3A00               	xorlw	0
  6805  16DD  1903               	btfsc	3,2
  6806  16DE  0008               	return
  6807                           
  6808                           ;lcd.h: 166: {
  6809                           ;lcd.h: 167: LCDWriteChar(a[i]);
  6810  16DF  082A               	movf	LCDWriteString@i,w
  6811  16E0  0725               	addwf	LCDWriteString@a,w
  6812  16E1  00A8               	movwf	??_LCDWriteString+1
  6813  16E2  0826               	movf	LCDWriteString@a+1,w
  6814  16E3  00A7               	movwf	??_LCDWriteString
  6815  16E4  1803               	skipnc
  6816  16E5  0AA7               	incf	??_LCDWriteString,f
  6817  16E6  1BAA               	btfsc	LCDWriteString@i,7
  6818  16E7  03A7               	decf	??_LCDWriteString,f
  6819  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  6820  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  6821  16EA  0827               	movf	??_LCDWriteString,w
  6822  16EB  00A9               	movwf	??_LCDWriteString+2
  6823  16EC  0829               	movf	??_LCDWriteString+2,w
  6824  16ED  00FF               	movwf	127
  6825  16EE  0828               	movf	??_LCDWriteString+1,w
  6826  16EF  0084               	movwf	4
  6827  16F0  120A  158A  2000  160A  118A  	fcall	stringtab
  6828  16F5  160A  118A  2557  160A  118A  	fcall	_LCDWriteChar
  6829  16FA  3001               	movlw	1
  6830  16FB  1283               	bcf	3,5	;RP0=0, select bank0
  6831  16FC  1303               	bcf	3,6	;RP1=0, select bank0
  6832  16FD  07AA               	addwf	LCDWriteString@i,f
  6833  16FE  1803               	skipnc
  6834  16FF  0AAB               	incf	LCDWriteString@i+1,f
  6835  1700  3000               	movlw	0
  6836  1701  07AB               	addwf	LCDWriteString@i+1,f
  6837  1702  2EC6               	goto	l2175
  6838  1703                     __end_of_LCDWriteString:	
  6839                           
  6840                           	psect	text28
  6841  1557                     __ptext28:	
  6842 ;; *************** function _LCDWriteChar *****************
  6843 ;; Defined at:
  6844 ;;		line 131 in file "lcd.h"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  a               1    wreg     unsigned char 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  a               1    4[BANK0 ] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;		None               void
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0, pclath, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6858 ;;      Params:         0       0       0       0       0
  6859 ;;      Locals:         0       1       0       0       0
  6860 ;;      Temps:          0       2       0       0       0
  6861 ;;      Totals:         0       3       0       0       0
  6862 ;;Total ram usage:        3 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    3
  6865 ;; This function calls:
  6866 ;;		_LCDSetBits
  6867 ;;		_pulse
  6868 ;; This function is called by:
  6869 ;;		_LCDWriteString
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           
  6874                           ;psect for function _LCDWriteChar
  6875  1557                     _LCDWriteChar:	
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
  6879                           ;LCDWriteChar@a stored from wreg
  6880  1557  1283               	bcf	3,5	;RP0=0, select bank0
  6881  1558  1303               	bcf	3,6	;RP1=0, select bank0
  6882  1559  00A4               	movwf	LCDWriteChar@a
  6883                           
  6884                           ;lcd.h: 133: LCDSetBits(a);
  6885  155A  0824               	movf	LCDWriteChar@a,w
  6886  155B  160A  118A  24C6  160A  118A  	fcall	_LCDSetBits
  6887                           
  6888                           ;lcd.h: 134: RB0 = 1;
  6889  1560  1283               	bcf	3,5	;RP0=0, select bank0
  6890  1561  1303               	bcf	3,6	;RP1=0, select bank0
  6891  1562  1406               	bsf	6,0	;volatile
  6892                           
  6893                           ;lcd.h: 136: pulse();
  6894  1563  160A  118A  2493  160A  118A  	fcall	_pulse
  6895                           
  6896                           ;lcd.h: 137: a = a<<4;
  6897  1568  1283               	bcf	3,5	;RP0=0, select bank0
  6898  1569  1303               	bcf	3,6	;RP1=0, select bank0
  6899  156A  0824               	movf	LCDWriteChar@a,w
  6900  156B  00A2               	movwf	??_LCDWriteChar
  6901  156C  3003               	movlw	3
  6902  156D                     u1655:	
  6903  156D  1003               	clrc
  6904  156E  0DA2               	rlf	??_LCDWriteChar,f
  6905  156F  3EFF               	addlw	-1
  6906  1570  1D03               	skipz
  6907  1571  2D6D               	goto	u1655
  6908  1572  1003               	clrc
  6909  1573  0D22               	rlf	??_LCDWriteChar,w
  6910  1574  00A3               	movwf	??_LCDWriteChar+1
  6911  1575  0823               	movf	??_LCDWriteChar+1,w
  6912  1576  00A4               	movwf	LCDWriteChar@a
  6913                           
  6914                           ;lcd.h: 138: LCDSetBits(a);
  6915  1577  0824               	movf	LCDWriteChar@a,w
  6916  1578  160A  118A  24C6  160A  118A  	fcall	_LCDSetBits
  6917                           
  6918                           ;lcd.h: 139: pulse();
  6919  157D  160A  118A  2493   	fcall	_pulse
  6920  1580  0008               	return
  6921  1581                     __end_of_LCDWriteChar:	
  6922                           
  6923                           	psect	text29
  6924  1612                     __ptext29:	
  6925 ;; *************** function _LCDSetCursor *****************
  6926 ;; Defined at:
  6927 ;;		line 146 in file "lcd.h"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  a               1    wreg     unsigned char 
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  a               1    5[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;		None               void
  6934 ;; Registers used:
  6935 ;;		wreg, status,2, status,0, pclath, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6941 ;;      Params:         0       0       0       0       0
  6942 ;;      Locals:         0       1       0       0       0
  6943 ;;      Temps:          0       2       0       0       0
  6944 ;;      Totals:         0       3       0       0       0
  6945 ;;Total ram usage:        3 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    4
  6948 ;; This function calls:
  6949 ;;		_LCD4bitCmd
  6950 ;; This function is called by:
  6951 ;;		_displayLCD
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _LCDSetCursor
  6957  1612                     _LCDSetCursor:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
  6961                           ;LCDSetCursor@a stored from wreg
  6962  1612  1283               	bcf	3,5	;RP0=0, select bank0
  6963  1613  1303               	bcf	3,6	;RP1=0, select bank0
  6964  1614  00A5               	movwf	LCDSetCursor@a
  6965                           
  6966                           ;lcd.h: 148: if (a & 16)
  6967  1615  1E25               	btfss	LCDSetCursor@a,4
  6968  1616  2E31               	goto	l2163
  6969                           
  6970                           ;lcd.h: 149: {
  6971                           ;lcd.h: 150: LCD4bitCmd(0xC0);
  6972  1617  30C0               	movlw	192
  6973  1618  160A  118A  24A3  160A  118A  	fcall	_LCD4bitCmd
  6974                           
  6975                           ;lcd.h: 151: a = a << 4;
  6976  161D  1283               	bcf	3,5	;RP0=0, select bank0
  6977  161E  1303               	bcf	3,6	;RP1=0, select bank0
  6978  161F  0825               	movf	LCDSetCursor@a,w
  6979  1620  00A3               	movwf	??_LCDSetCursor
  6980  1621  3003               	movlw	3
  6981  1622                     u2465:	
  6982  1622  1003               	clrc
  6983  1623  0DA3               	rlf	??_LCDSetCursor,f
  6984  1624  3EFF               	addlw	-1
  6985  1625  1D03               	skipz
  6986  1626  2E22               	goto	u2465
  6987  1627  1003               	clrc
  6988  1628  0D23               	rlf	??_LCDSetCursor,w
  6989  1629  00A4               	movwf	??_LCDSetCursor+1
  6990  162A  0824               	movf	??_LCDSetCursor+1,w
  6991  162B  00A5               	movwf	LCDSetCursor@a
  6992                           
  6993                           ;lcd.h: 152: LCD4bitCmd(a);
  6994  162C  0825               	movf	LCDSetCursor@a,w
  6995  162D  160A  118A  24A3   	fcall	_LCD4bitCmd
  6996                           
  6997                           ;lcd.h: 153: }
  6998  1630  0008               	return
  6999  1631                     l2163:	
  7000                           
  7001                           ;lcd.h: 155: else
  7002                           ;lcd.h: 156: {
  7003                           ;lcd.h: 157: LCD4bitCmd(0x80);
  7004  1631  3080               	movlw	128
  7005  1632  160A  118A  24A3  160A  118A  	fcall	_LCD4bitCmd
  7006                           
  7007                           ;lcd.h: 158: a = a << 4;
  7008  1637  1283               	bcf	3,5	;RP0=0, select bank0
  7009  1638  1303               	bcf	3,6	;RP1=0, select bank0
  7010  1639  0825               	movf	LCDSetCursor@a,w
  7011  163A  00A3               	movwf	??_LCDSetCursor
  7012  163B  3003               	movlw	3
  7013  163C                     u2475:	
  7014  163C  1003               	clrc
  7015  163D  0DA3               	rlf	??_LCDSetCursor,f
  7016  163E  3EFF               	addlw	-1
  7017  163F  1D03               	skipz
  7018  1640  2E3C               	goto	u2475
  7019  1641  1003               	clrc
  7020  1642  0D23               	rlf	??_LCDSetCursor,w
  7021  1643  00A4               	movwf	??_LCDSetCursor+1
  7022  1644  0824               	movf	??_LCDSetCursor+1,w
  7023  1645  00A5               	movwf	LCDSetCursor@a
  7024                           
  7025                           ;lcd.h: 159: LCD4bitCmd(a);
  7026  1646  0825               	movf	LCDSetCursor@a,w
  7027  1647  160A  118A  24A3   	fcall	_LCD4bitCmd
  7028  164A  0008               	return
  7029  164B                     __end_of_LCDSetCursor:	
  7030                           
  7031                           	psect	text30
  7032  14A3                     __ptext30:	
  7033 ;; *************** function _LCD4bitCmd *****************
  7034 ;; Defined at:
  7035 ;;		line 123 in file "lcd.h"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  a               1    wreg     unsigned char 
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  a               1    2[BANK0 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;		None               void
  7042 ;; Registers used:
  7043 ;;		wreg, status,2, status,0, pclath, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7049 ;;      Params:         0       0       0       0       0
  7050 ;;      Locals:         0       1       0       0       0
  7051 ;;      Temps:          0       0       0       0       0
  7052 ;;      Totals:         0       1       0       0       0
  7053 ;;Total ram usage:        1 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    3
  7056 ;; This function calls:
  7057 ;;		_LCDSetBits
  7058 ;;		_pulse
  7059 ;; This function is called by:
  7060 ;;		_LCDSetCursor
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _LCD4bitCmd
  7066  14A3                     _LCD4bitCmd:	
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
  7070                           ;LCD4bitCmd@a stored from wreg
  7071  14A3  1283               	bcf	3,5	;RP0=0, select bank0
  7072  14A4  1303               	bcf	3,6	;RP1=0, select bank0
  7073  14A5  00A2               	movwf	LCD4bitCmd@a
  7074                           
  7075                           ;lcd.h: 125: LCDSetBits(a);
  7076  14A6  0822               	movf	LCD4bitCmd@a,w
  7077  14A7  160A  118A  24C6  160A  118A  	fcall	_LCDSetBits
  7078                           
  7079                           ;lcd.h: 126: RB0 = 0;
  7080  14AC  1283               	bcf	3,5	;RP0=0, select bank0
  7081  14AD  1303               	bcf	3,6	;RP1=0, select bank0
  7082  14AE  1006               	bcf	6,0	;volatile
  7083                           
  7084                           ;lcd.h: 127: RD7 = 0;
  7085  14AF  1388               	bcf	8,7	;volatile
  7086                           
  7087                           ;lcd.h: 128: pulse();
  7088  14B0  160A  118A  2493   	fcall	_pulse
  7089  14B3  0008               	return
  7090  14B4                     __end_of_LCD4bitCmd:	
  7091                           
  7092                           	psect	text31
  7093  1493                     __ptext31:	
  7094 ;; *************** function _pulse *****************
  7095 ;; Defined at:
  7096 ;;		line 102 in file "lcd.h"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7110 ;;      Params:         0       0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0
  7112 ;;      Temps:          0       2       0       0       0
  7113 ;;      Totals:         0       2       0       0       0
  7114 ;;Total ram usage:        2 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    2
  7117 ;; This function calls:
  7118 ;;		Nothing
  7119 ;; This function is called by:
  7120 ;;		_initLCD
  7121 ;;		_LCDcmd
  7122 ;;		_LCD4bitCmd
  7123 ;;		_LCDWriteChar
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function _pulse
  7129  1493                     _pulse:	
  7130                           
  7131                           ;lcd.h: 104: RB1 = 1;
  7132                           
  7133                           ;incstack = 0
  7134                           ; Regs used in _pulse: [wreg]
  7135  1493  1283               	bcf	3,5	;RP0=0, select bank0
  7136  1494  1303               	bcf	3,6	;RP1=0, select bank0
  7137  1495  1486               	bsf	6,1	;volatile
  7138                           
  7139                           ;lcd.h: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  7140  1496  3003               	movlw	3
  7141  1497  00A1               	movwf	??_pulse+1
  7142  1498  3097               	movlw	151
  7143  1499  00A0               	movwf	??_pulse
  7144  149A                     u3097:	
  7145  149A  0BA0               	decfsz	??_pulse,f
  7146  149B  2C9A               	goto	u3097
  7147  149C  0BA1               	decfsz	??_pulse+1,f
  7148  149D  2C9A               	goto	u3097
  7149  149E  2C9F               	nop2
  7150                           
  7151                           ;lcd.h: 106: RB1 = 0;
  7152  149F  1283               	bcf	3,5	;RP0=0, select bank0
  7153  14A0  1303               	bcf	3,6	;RP1=0, select bank0
  7154  14A1  1086               	bcf	6,1	;volatile
  7155  14A2  0008               	return
  7156  14A3                     __end_of_pulse:	
  7157                           
  7158                           	psect	text32
  7159  14C6                     __ptext32:	
  7160 ;; *************** function _LCDSetBits *****************
  7161 ;; Defined at:
  7162 ;;		line 79 in file "lcd.h"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  a               1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  a               1    0[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;		None               void
  7169 ;; Registers used:
  7170 ;;		wreg
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7176 ;;      Params:         0       0       0       0       0
  7177 ;;      Locals:         0       1       0       0       0
  7178 ;;      Temps:          0       0       0       0       0
  7179 ;;      Totals:         0       1       0       0       0
  7180 ;;Total ram usage:        1 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    2
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_initLCD
  7187 ;;		_LCDcmd
  7188 ;;		_LCD4bitCmd
  7189 ;;		_LCDWriteChar
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           
  7194                           ;psect for function _LCDSetBits
  7195  14C6                     _LCDSetBits:	
  7196                           
  7197                           ;incstack = 0
  7198                           ; Regs used in _LCDSetBits: [wreg]
  7199                           ;LCDSetBits@a stored from wreg
  7200  14C6  1283               	bcf	3,5	;RP0=0, select bank0
  7201  14C7  1303               	bcf	3,6	;RP1=0, select bank0
  7202  14C8  00A0               	movwf	LCDSetBits@a
  7203                           
  7204                           ;lcd.h: 81: if(a & 16)
  7205  14C9  1E20               	btfss	LCDSetBits@a,4
  7206  14CA  2CCD               	goto	l118
  7207                           
  7208                           ;lcd.h: 82: RB2 = 1;
  7209  14CB  1506               	bsf	6,2	;volatile
  7210  14CC  2CCE               	goto	l119
  7211  14CD                     l118:	
  7212                           
  7213                           ;lcd.h: 83: else
  7214                           ;lcd.h: 84: RB2 = 0;
  7215  14CD  1106               	bcf	6,2	;volatile
  7216  14CE                     l119:	
  7217                           
  7218                           ;lcd.h: 86: if(a & 32)
  7219  14CE  1EA0               	btfss	LCDSetBits@a,5
  7220  14CF  2CD2               	goto	l120
  7221                           
  7222                           ;lcd.h: 87: RB3 = 1;
  7223  14D0  1586               	bsf	6,3	;volatile
  7224  14D1  2CD3               	goto	l121
  7225  14D2                     l120:	
  7226                           
  7227                           ;lcd.h: 88: else
  7228                           ;lcd.h: 89: RB3 = 0;
  7229  14D2  1186               	bcf	6,3	;volatile
  7230  14D3                     l121:	
  7231                           
  7232                           ;lcd.h: 91: if(a & 64)
  7233  14D3  1F20               	btfss	LCDSetBits@a,6
  7234  14D4  2CD7               	goto	l122
  7235                           
  7236                           ;lcd.h: 92: RB4 = 1;
  7237  14D5  1606               	bsf	6,4	;volatile
  7238  14D6  2CD8               	goto	l123
  7239  14D7                     l122:	
  7240                           
  7241                           ;lcd.h: 93: else
  7242                           ;lcd.h: 94: RB4 = 0;
  7243  14D7  1206               	bcf	6,4	;volatile
  7244  14D8                     l123:	
  7245                           
  7246                           ;lcd.h: 96: if(a & 128)
  7247  14D8  1FA0               	btfss	LCDSetBits@a,7
  7248  14D9  2CDC               	goto	l124
  7249                           
  7250                           ;lcd.h: 97: RB5 = 1;
  7251  14DA  1686               	bsf	6,5	;volatile
  7252  14DB  0008               	return
  7253  14DC                     l124:	
  7254                           
  7255                           ;lcd.h: 98: else
  7256                           ;lcd.h: 99: RB5 = 0;
  7257  14DC  1286               	bcf	6,5	;volatile
  7258  14DD  0008               	return
  7259  14DE                     __end_of_LCDSetBits:	
  7260                           
  7261                           	psect	text33
  7262  14F6                     __ptext33:	
  7263 ;; *************** function _currentGainInit *****************
  7264 ;; Defined at:
  7265 ;;		line 282 in file "PIC16F917 Battery Management.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  gain            1    wreg     unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  gain            1    0[BANK0 ] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;		None               void
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7279 ;;      Params:         0       0       0       0       0
  7280 ;;      Locals:         0       1       0       0       0
  7281 ;;      Temps:          0       0       0       0       0
  7282 ;;      Totals:         0       1       0       0       0
  7283 ;;Total ram usage:        1 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    2
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_main
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function _currentGainInit
  7295  14F6                     _currentGainInit:	
  7296                           
  7297                           ;incstack = 0
  7298                           ; Regs used in _currentGainInit: [wreg+status,2+status,0]
  7299                           ;currentGainInit@gain stored from wreg
  7300  14F6  1283               	bcf	3,5	;RP0=0, select bank0
  7301  14F7  1303               	bcf	3,6	;RP1=0, select bank0
  7302  14F8  00A0               	movwf	currentGainInit@gain
  7303                           
  7304                           ;PIC16F917 Battery Management.c: 284: if ( gain >= 100 )
  7305  14F9  3064               	movlw	100
  7306  14FA  0220               	subwf	currentGainInit@gain,w
  7307  14FB  1C03               	skipc
  7308  14FC  2D06               	goto	l304
  7309                           
  7310                           ;PIC16F917 Battery Management.c: 285: {
  7311                           ;PIC16F917 Battery Management.c: 286: RA6 = 1;
  7312  14FD  1705               	bsf	5,6	;volatile
  7313                           
  7314                           ;PIC16F917 Battery Management.c: 288: if ( gain == 100 )
  7315  14FE  3064               	movlw	100
  7316  14FF  0620               	xorwf	currentGainInit@gain,w
  7317  1500  1D03               	btfss	3,2
  7318  1501  2D04               	goto	l305
  7319                           
  7320                           ;PIC16F917 Battery Management.c: 289: {
  7321                           ;PIC16F917 Battery Management.c: 290: RA7 = 0;
  7322  1502  1385               	bcf	5,7	;volatile
  7323                           
  7324                           ;PIC16F917 Battery Management.c: 292: }
  7325                           
  7326                           ;PIC16F917 Battery Management.c: 291: return;
  7327  1503  0008               	return
  7328  1504                     l305:	
  7329                           
  7330                           ;PIC16F917 Battery Management.c: 293: else
  7331                           ;PIC16F917 Battery Management.c: 294: {
  7332                           ;PIC16F917 Battery Management.c: 295: RA7 = 1;
  7333  1504  1785               	bsf	5,7	;volatile
  7334                           
  7335                           ;PIC16F917 Battery Management.c: 297: }
  7336                           ;PIC16F917 Battery Management.c: 299: }
  7337                           
  7338                           ;PIC16F917 Battery Management.c: 296: return;
  7339  1505  0008               	return
  7340  1506                     l304:	
  7341                           
  7342                           ;PIC16F917 Battery Management.c: 301: else
  7343                           ;PIC16F917 Battery Management.c: 302: {
  7344                           ;PIC16F917 Battery Management.c: 303: RA6 = 0;
  7345  1506  1305               	bcf	5,6	;volatile
  7346                           
  7347                           ;PIC16F917 Battery Management.c: 305: if ( gain == 25 )
  7348  1507  3019               	movlw	25
  7349  1508  0620               	xorwf	currentGainInit@gain,w
  7350  1509  1D03               	btfss	3,2
  7351  150A  2D0D               	goto	l309
  7352                           
  7353                           ;PIC16F917 Battery Management.c: 306: {
  7354                           ;PIC16F917 Battery Management.c: 307: RA7 = 0;
  7355  150B  1385               	bcf	5,7	;volatile
  7356                           
  7357                           ;PIC16F917 Battery Management.c: 309: }
  7358                           
  7359                           ;PIC16F917 Battery Management.c: 308: return;
  7360  150C  0008               	return
  7361  150D                     l309:	
  7362                           
  7363                           ;PIC16F917 Battery Management.c: 310: else
  7364                           ;PIC16F917 Battery Management.c: 311: {
  7365                           ;PIC16F917 Battery Management.c: 312: RA7 = 1;
  7366  150D  1785               	bsf	5,7	;volatile
  7367                           
  7368                           ;PIC16F917 Battery Management.c: 313: return;
  7369  150E  0008               	return
  7370  150F                     __end_of_currentGainInit:	
  7371                           
  7372                           	psect	text34
  7373  14B4                     __ptext34:	
  7374 ;; *************** function _isr *****************
  7375 ;; Defined at:
  7376 ;;		line 256 in file "setup.h"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;		None               void
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7390 ;;      Params:         0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0
  7392 ;;      Temps:          4       0       0       0       0
  7393 ;;      Totals:         4       0       0       0       0
  7394 ;;Total ram usage:        4 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    1
  7397 ;; This function calls:
  7398 ;;		_isrTimer0
  7399 ;; This function is called by:
  7400 ;;		Interrupt level 1
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _isr
  7406  14B4                     _isr:	
  7407                           
  7408                           ;setup.h: 258: isrTimer0();
  7409  14B4  160A  118A  252D  160A  118A  	fcall	_isrTimer0
  7410  14B9  0877               	movf	??_isr+3,w
  7411  14BA  1283               	bcf	3,5	;RP0=0, select bank0
  7412  14BB  1303               	bcf	3,6	;RP1=0, select bank0
  7413  14BC  00FF               	movwf	127
  7414  14BD  0876               	movf	??_isr+2,w
  7415  14BE  008A               	movwf	10
  7416  14BF  0875               	movf	??_isr+1,w
  7417  14C0  0084               	movwf	4
  7418  14C1  0E74               	swapf	??_isr^(0+-128),w
  7419  14C2  0083               	movwf	3
  7420  14C3  0EFE               	swapf	126,f
  7421  14C4  0E7E               	swapf	126,w
  7422  14C5  0009               	retfie
  7423  14C6                     __end_of_isr:	
  7424                           
  7425                           	psect	intentry
  7426  0004                     __pintentry:	
  7427                           ;incstack = 0
  7428                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  7429                           
  7430  0004                     interrupt_function:	
  7431  007E                     saved_w	set	btemp
  7432  0004  00FE               	movwf	btemp
  7433  0005  0E03               	swapf	3,w
  7434  0006  00F4               	movwf	??_isr
  7435  0007  0804               	movf	4,w
  7436  0008  00F5               	movwf	??_isr+1
  7437  0009  080A               	movf	10,w
  7438  000A  00F6               	movwf	??_isr+2
  7439  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7440  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7441  000D  087F               	movf	btemp+1,w
  7442  000E  00F7               	movwf	??_isr+3
  7443  000F  160A  118A  2CB4   	ljmp	_isr
  7444                           
  7445                           	psect	text35
  7446  152D                     __ptext35:	
  7447 ;; *************** function _isrTimer0 *****************
  7448 ;; Defined at:
  7449 ;;		line 64 in file "timer0.h"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;		None               void
  7456 ;; Registers used:
  7457 ;;		wreg
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7463 ;;      Params:         0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0
  7465 ;;      Temps:          4       0       0       0       0
  7466 ;;      Totals:         4       0       0       0       0
  7467 ;;Total ram usage:        4 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		_isr
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function _isrTimer0
  7478  152D                     _isrTimer0:	
  7479                           
  7480                           ;timer0.h: 66: if (INTCONbits.T0IF == 1 && INTCONbits.T0IE == 1)
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _isrTimer0: [wreg]
  7484  152D  1D0B               	btfss	11,2	;volatile
  7485  152E  0008               	return
  7486  152F  1E8B               	btfss	11,5	;volatile
  7487  1530  0008               	return
  7488                           
  7489                           ;timer0.h: 67: {
  7490                           ;timer0.h: 70: time = time + 255;
  7491  1531  30FF               	movlw	255
  7492  1532  00F0               	movwf	??_isrTimer0
  7493  1533  3000               	movlw	0
  7494  1534  00F1               	movwf	??_isrTimer0+1
  7495  1535  3000               	movlw	0
  7496  1536  00F2               	movwf	??_isrTimer0+2
  7497  1537  3000               	movlw	0
  7498  1538  00F3               	movwf	??_isrTimer0+3
  7499  1539  1683               	bsf	3,5	;RP0=1, select bank1
  7500  153A  1303               	bcf	3,6	;RP1=0, select bank1
  7501  153B  085F               	movf	_time^(0+128),w
  7502  153C  07F0               	addwf	??_isrTimer0,f
  7503  153D  0860               	movf	(_time+1)^(0+128),w
  7504  153E  1803               	skipnc
  7505  153F  0F60               	incfsz	(_time+1)^(0+128),w
  7506  1540  2D42               	goto	u266_20
  7507  1541  2D43               	goto	u266_21
  7508  1542                     u266_20:	
  7509  1542  07F1               	addwf	??_isrTimer0+1,f
  7510  1543                     u266_21:	
  7511  1543  0861               	movf	(_time+2)^(0+128),w
  7512  1544  1803               	skipnc
  7513  1545  0F61               	incfsz	(_time+2)^(0+128),w
  7514  1546  2D48               	goto	u266_22
  7515  1547  2D49               	goto	u266_23
  7516  1548                     u266_22:	
  7517  1548  07F2               	addwf	??_isrTimer0+2,f
  7518  1549                     u266_23:	
  7519  1549  0862               	movf	(_time+3)^(0+128),w
  7520  154A  1803               	skipnc
  7521  154B  0A62               	incf	(_time+3)^(0+128),w
  7522  154C  07F3               	addwf	??_isrTimer0+3,f
  7523  154D  0873               	movf	??_isrTimer0+3,w
  7524  154E  00E2               	movwf	(_time+3)^(0+128)
  7525  154F  0872               	movf	??_isrTimer0+2,w
  7526  1550  00E1               	movwf	(_time+2)^(0+128)
  7527  1551  0871               	movf	??_isrTimer0+1,w
  7528  1552  00E0               	movwf	(_time+1)^(0+128)
  7529  1553  0870               	movf	??_isrTimer0,w
  7530  1554  00DF               	movwf	_time^(0+128)
  7531                           
  7532                           ;timer0.h: 72: INTCONbits.T0IF = 0;
  7533  1555  110B               	bcf	11,2	;volatile
  7534  1556  0008               	return
  7535  1557                     __end_of_isrTimer0:	
  7536  007E                     btemp	set	126	;btemp
  7537  007E                     wtemp	set	126
  7538  007E                     wtemp0	set	126
  7539  0080                     wtemp1	set	128
  7540  0082                     wtemp2	set	130
  7541  0084                     wtemp3	set	132
  7542  0086                     wtemp4	set	134
  7543  0088                     wtemp5	set	136
  7544  007F                     wtemp6	set	127
  7545  007E                     ttemp	set	126
  7546  007E                     ttemp0	set	126
  7547  0081                     ttemp1	set	129
  7548  0084                     ttemp2	set	132
  7549  0087                     ttemp3	set	135
  7550  007F                     ttemp4	set	127
  7551  007E                     ltemp	set	126
  7552  007E                     ltemp0	set	126
  7553  0082                     ltemp1	set	130
  7554  0086                     ltemp2	set	134
  7555  0080                     ltemp3	set	128


Data Sizes:
    Strings     95
    Constant    28
    Data        7
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80     45      78
    BANK3            96      0      48
    BANK2            80      0       0

Pointer List with Targets:

    floatToASCII@returnVal	PTR unsigned char  size(1) Largest target is 8
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 

    LCDWriteString@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_16(CODE[10]), STR_15(CODE[8]), STR_14(CODE[9]), STR_13(CODE[8]), 
		 -> STR_12(CODE[10]), STR_11(CODE[8]), STR_10(CODE[9]), STR_9(CODE[8]), 
		 -> STR_8(CODE[10]), STR_7(CODE[8]), STR_6(CODE[9]), STR_5(CODE[8]), 
		 -> STR_4(CODE[10]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrTimer0

Critical Paths under _main in BANK0

    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    _initController->_initLCD
    _handlePB->_stopWatch
    _stopWatch->___fttol
    _initLCD->_LCDcmd
    _LCDcmd->_pulse
    _displayLCD->_floatToASCII
    _floatToASCII->___fttol
    ___lltoft->___ftpack
    ___fttol->___ftdiv
    ___ftneg->___lltoft
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    _LCDWriteString->_LCDWriteChar
    _LCDWriteChar->_pulse
    _LCDSetCursor->_LCD4bitCmd
    _LCD4bitCmd->_pulse

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_displayLCD
    _handlePB->_stopWatch
    _displayLCD->_floatToASCII

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   70903
                                             43 BANK1      2     2      0
                    _currentGainInit
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      4     4      0   10508
                                             62 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        9     9      0   12748
                                             62 BANK0      9     9      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2170
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  20    20      0   19679
                                             72 BANK0      5     5      0
                            ___ftadd
                            ___ftmul
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                       10     7      3   10599
                                             62 BANK0     10     7      3
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2      92
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2362
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     802
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     243
                            _initADC
                            _initLCD
                          _timeSetup
 ---------------------------------------------------------------------------------
 (2) _timeSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             3     3      0    7559
                                             17 BANK1      3     3      0
                            _initLCD
                          _stopWatch
 ---------------------------------------------------------------------------------
 (2) _stopWatch                                           21    17      4    7316
                                             76 BANK0      4     0      4
                                              0 BANK1     17    17      0
                            ___ftmul
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     243
                                              5 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                          22    20      2   20100
                                             21 BANK1     22    20      2
                       _LCDSetCursor
                     _LCDWriteString
                       _floatToASCII
 ---------------------------------------------------------------------------------
 (2) _floatToASCII                                        25    21      4   17621
                                             76 BANK0      4     0      4
                                              0 BANK1     21    21      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                           ___lltoft
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     476
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2601
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     508
                                             62 BANK0     14    10      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     173
                                             14 BANK0      3     0      3
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4138
                                             30 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3068
                                             46 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4114
                                             17 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       7     5      2    1781
                                              5 BANK0      7     5      2
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     222
                                              3 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     110
                                              2 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _currentGainInit                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0       0
                                              4 COMMON     4     4      0
                          _isrTimer0
 ---------------------------------------------------------------------------------
 (6) _isrTimer0                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _currentGainInit
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     _floatToASCII
       ___ftadd
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
   _handlePB
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _stopWatch
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _timeSetup
   _sampleBatteryCells
     ___ftadd
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _sampleVoltage
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwdiv
       ___lwtoft
         ___ftpack
       _analogRead
   _sampleCurrent
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
     _analogRead

 _isr (ROOT)
   _isrTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      30       8       50.0%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2D      4E       6       97.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DC      12        0.0%
ABS                  0      0      DC      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jul 12 15:09:13 2015

                ?_LCDSetBits 0070                            pc 0002                  __CFG_CP$OFF 0000  
                         fsr 0004                 ___ftadd@exp1 003D                 ___ftadd@exp2 003C  
               ___ftadd@sign 003B                          l120 14D2                          l121 14D3  
                        l122 14D7                          l123 14D8                          l124 14DC  
                        l301 05C3                          l118 14CD                          l119 14CE  
                        l223 1662                          l304 1506                          l305 1504  
                        l316 175D                          l309 150D                          l605 0F9F  
                        l581 08E6                          l582 08EE                          l574 08D1  
                        l665 097B                          _RB0 0030                          _RB1 0031  
                        _RC0 0038                          _RB2 0032                          _RC1 0039  
                        _RB3 0033                          _RD0 0040                          _RC2 003A  
                        _RB4 0034                          _RA6 002E                          _RD1 0041  
                        _RC3 003B                          _RB5 0035                          _RA7 002F  
                        _RD2 0042                          _RD4 0044                          _RD5 0045  
                        _RD7 0047                 __CFG_CPD$OFF 0000                ?_floatToASCII 006C  
                        _isr 14B4                          fsr0 0004                          indf 0000  
              ?_LCDSetCursor 0070                 __CFG_IESO$ON 0000                 ___ftdiv@cntr 0058  
               ___ftdiv@sign 005D                         l2023 0921                         l2111 16B2  
                       l2103 168E                         l2041 0953                         l2105 169C  
                       l2051 097E                         l2043 0963                         l2211 01DC  
                       l2115 16BD                         l2301 09DC                         l2055 098C  
                       l2231 01F6                         l2049 0970                         l2065 17B2  
                       l2241 0339                         l2233 0334                         l2209 01D8  
                       l2163 1631                         l2075 17EA                         l2067 17C2  
                       l2243 0352                         l2175 16C6                         l2079 17F7  
                       l2087 15B2                         l2191 007B                         l2503 041B  
                       l2263 0E1D                         l2415 0D53                         l2089 15C4  
                       l2273 0EE3                         l2409 0D2E                         l2531 0529  
                       l2275 0EED                         l2259 0DFD                         l2603 07DB  
                       l2197 0095                         l2517 04A4                         l1903 0FC3  
                       l2471 1779                         l2295 09B5                         l2391 0B03  
                       l1913 0FE6                         l2481 1794                         l1771 08BB  
                       l1763 08A3                         l1923 0BA4                         l1835 170D  
                       l2547 05AE                         l1781 08D6                         l1853 0F20  
                       l2397 0B28                         l1767 08AA                         l1863 0F36  
                       l1951 0C1E                         l1943 0BFF                         l1839 1723  
                       l2671 05B5                         l1769 08B6                         l1881 0F65  
                       l1857 0F27                         l1929 0BBA                         l2489 0392  
                       l1779 08E4                         l1883 0F71                         l1875 0F50  
                       l1971 0C72                         l1893 0F8F                         l1885 0F76  
                       l1965 0C5C                         l1895 0F9B                         l1887 0F7A  
                       l1983 0CB1                         l1899 0FB1                         l1995 0CD9  
                       l1987 0CC1                         l1999 0CE9                         ?_isr 0070  
                       STR_1 0849                         STR_2 0840                         STR_3 0852  
                       STR_4 082C                         STR_5 085B                         STR_6 0840  
                       STR_7 0863                         STR_8 0836                         STR_9 086B  
                       u2005 0C00                         u2015 0C11                         u2025 0C1F  
                       u2105 0CC2                         u2115 0CCA                         u2205 0928  
                       u3007 0A42                         u2065 0C7E                         u2305 17B6  
                       u3017 0A55                         u2155 0CEA                         u2075 0C90  
                       u2235 0954                         u3027 0A64                         u2165 0CF2  
                       u2325 17C4                         u3037 0A74                         u2335 17D9  
                       u3047 0A84                         u2415 169D                         u2600 0E46  
                       u1625 08F5                         u1545 08AF                         u2265 0972  
                       u2345 17EB                         u1705 172D                         u3057 0AA0  
                       u2601 0E47                         u2425 16A9                         u2610 0E58  
                       u2602 0E4C                         u2531 016D                         u2515 0079  
                       u3067 0AB1                         u2611 0E59                         u2603 0E4D  
                       u2435 16B3                         u2532 0178                         u2612 0E5E  
              __CFG_DEBUG$ON 0000                         u1565 08CA                         u2365 15B7  
                       u2533 0183                         u2525 0093                         u1645 1598  
                       u3077 0AC2                         u2613 0E5F                         u1655 156D  
                       u1815 0F51                         u3087 0AD3                         u2800 0383  
                       u3097 149A                         u2465 1622                         u1585 08DD  
                       u1905 0F90                         u2625 09B3                         u2705 0B01  
                       u2475 163C                         u2395 1691                         u2635 09DA  
                       u2715 0B26                         u1845 0F66                         u2725 0D2C  
                       u1695 1725                         u2735 0D51                         u2585 020E  
                       u1875 0F7B                         u2763 1777                         u2790 036D  
                       u1985 0BCC                         u1995 0BDE                         u2947 0AE1  
                       u2957 05CC                         u2967 06CF                         u2977 165A  
                       u2987 174E                         u2997 1789                         _TMR0 0001  
                       _main 07CD                 ___ftpack@arg 0020                 ___ftpack@exp 0023  
                       _time 00DF                         btemp 007E                         ltemp 007E  
                       start 0012                         ttemp 007E                         wtemp 007E  
                LCDSetBits@a 0020                __CFG_MCLRE$ON 0000                 ___ftmul@cntr 004C  
               ___ftmul@sign 004D                 ___fttol@exp1 006B                 ___fttol@lval 0067  
                      ??_isr 0074                ?_LCDWriteChar 0070          __size_of_LCD4bitCmd 0011  
                      ?_main 0070              __end_of___ftadd 1000                        STR_10 0840  
                      STR_11 0873                        STR_12 0836                        STR_13 087B  
                      STR_14 0840                        STR_15 0883                        STR_16 0836  
              __CFG_WDTE$OFF 0000              __end_of___ftdiv 0C44              __end_of___ftneg 1484  
                      _ANSEL 0091              __end_of___lldiv 1800              __end_of___ftmul 0D17  
            __end_of___fttol 0995               ??_floatToASCII 00A0              __end_of___lwdiv 16C2  
            __end_of_cell1RR 0813              __end_of_cell2RR 0816              __end_of_cell3RR 0819  
            __end_of_cell4RR 081C              __end_of_cell5RR 081F              __end_of_cell6RR 0822  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _PORTE 0009               ??_LCDSetCursor 0023  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088                        _TRISE 0089          ___lmul@multiplicand 0024  
               ___lltoft@exp 002D               __CFG_FCMEN$OFF 0000              __end_of_initADC 1493  
            __end_of_initLCD 0AD9              __end_of_refVolt 082B                ___ftpack@sign 0024  
                      _pulse 1493          __size_of_LCDSetBits 0018               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
      __end_of_sampleCurrent 0DF1            ??_sampleReference 005E              __initialization 0015  
      __end_of_sampleVoltage 0A30                 __end_of_main 07FE               ??_LCDWriteChar 0022  
                     ??_main 00CB                ___fttol@sign1 0066       _sampleBatteryCells$889 006A  
                     _ADCON0 001F                       _ADCON1 009F                       _ADRESH 001E  
                     _ADRESL 009E                       ?_pulse 0070             __end_of___ftpack 0907  
           __end_of___lbtoft 152D                       _LCDCON 0107             __end_of___lltoft 15DB  
                     _LCDcmd 1581                       u266_20 1542                       u266_21 1543  
                     u266_22 1548             __end_of___lwtoft 14F6                       u266_23 1549  
            _currentGainInit 14F6               __CFG_PWRTE$OFF 0000             __end_of_handlePB 17A0  
             _LCDWriteString 16C2                       ___lmul 1703                    ??___ftadd 0037  
                  ??___ftdiv 0054                    ??___ftneg 0031                    ??___lldiv 0028  
                  ??___ftmul 0044                    ??___fttol 0062                    ??___lwdiv 0024  
                     _btmStr 0190                       _topStr 01A0                    ??_initADC 0020  
      ___ftmul@f3_as_product 0049                    ??_initLCD 0025                 __pdataCOMMON 0078  
    __size_of_initController 0037                       saved_w 007E            sampleCurrent@temp 0065  
               ??_LCD4bitCmd 0022                floatToASCII@i 00B3                floatToASCII@j 00A8  
              floatToASCII@k 00AA      __end_of__initialization 0053                   ___ftadd@f1 0031  
                 ___ftadd@f2 0034       __end_of_LCDWriteString 1703                   ___ftdiv@f1 0051  
                 ___ftdiv@f2 004E                   ___ftdiv@f3 0059         __end_of_floatToASCII 0363  
                 ___ftneg@f1 002E                   ___lbtoft@c 002F         __end_of_LCDSetCursor 164B  
              LCDSetCursor@a 0025                   ___ftmul@f1 003E                   ___ftmul@f2 0041  
                 ___fttol@f1 005E               __pcstackCOMMON 0070                 __pidataBANK1 146B  
               ??_LCDSetBits 0020                   ___lltoft@c 0028                __end_of_pulse 14A3  
 __end_of_sampleBatteryCells 07CD           __end_of_LCD4bitCmd 14B4                   ___lwtoft@c 0028  
             _OPTION_REGbits 0081      __end_of_currentGainInit 150F                      ??_pulse 0020  
       __end_of_LCDWriteChar 1581                   __pbssBANK1 00CD                   __pbssBANK3 0190  
                    ?_LCDcmd 0070           __end_of_LCDSetBits 14DE          currentGainInit@gain 0020  
                    LCDcmd@a 0024                   _analogRead 164B              ?_LCDWriteString 0025  
         __size_of_isrTimer0 002A                   __pmaintext 07CD                      ?___lmul 0020  
                 __pintentry 0004                      _CCP1CON 0017                      _CCP2CON 001D  
             ___lmul@product 0029                    ?___ftpack 0020                    ?___lbtoft 0028  
                  ?___lltoft 0028                    ?___lwtoft 0028               displayLCD@disp 00B5  
         __size_of_timeSetup 000C                    ?_handlePB 0070                   _displayLCD 0363  
            _sampleReference 0AD9                   __stringtab 0800            __end_of_cellVoltL 0825  
         __size_of_stopWatch 0106              __size_of_LCDcmd 002B            __end_of_convConst 0828  
            __size_of___lmul 0041                      ___ftadd 0EF7                      ___ftdiv 0B8C  
                    ___ftneg 147A                      ___lldiv 17A0                      ___ftmul 0C44  
                    ___fttol 0907                      ___lwdiv 1684                      _cell1RR 0810  
                    _cell2RR 0813                      _cell3RR 0816                      _cell4RR 0819  
                    _cell5RR 081C                      _cell6RR 081F                   ??___ftpack 0025  
                 ??___lbtoft 002B                   ??___lltoft 002C                      __ptext1 0AD9  
                    __ptext2 0D17                      __ptext3 150F                      __ptext4 05C4  
                    __ptext5 0995                      __ptext6 164B                      __ptext7 14DE  
                    __ptext8 1684                      __ptext9 15DB                   ??___lwtoft 002B  
                    _initADC 1484                      _initLCD 0A30               _initController 15DB  
                    _current 00E7                 __size_of_isr 0012                      _refVolt 0828  
          __end_of_isrTimer0 1557                   ??_handlePB 00B1                      _supVolt 0078  
                    clrloop0 1473             ?_currentGainInit 0070         end_of_initialization 0053  
      __size_of_floatToASCII 030C            __end_of_sampleNum 082C            _sampleCurrent$890 0060  
      __size_of_LCDSetCursor 0039                LCDWriteChar@a 0024            __end_of_timeSetup 0899  
                ?_analogRead 0020              ___lldiv@divisor 0020              ___lldiv@counter 002D  
          __end_of_stopWatch 0EF7       __end_of_initController 1612       __size_of_sampleCurrent 00DA  
    __end_of_sampleReference 0B8C                 _floatToASCII 0057        __size_of_LCDWriteChar 002A  
               _LCDSetCursor 1612                  ?_displayLCD 00B5       __size_of_sampleVoltage 009B  
                ___ftdiv@exp 005C               __end_of_LCDcmd 15AC                  ___ftmul@exp 0048  
             __end_of___lmul 1744                 _LCDWriteChar 1557                __pidataCOMMON 146E  
            ?_initController 0070          __size_of_analogRead 0039          start_initialization 0015  
      floatToASCII@precision 006F                  __end_of_isr 14C6        floatToASCII@returnVal 00B4  
         _sampleBatteryCells 05C4             ??_LCDWriteString 0027                     ??_LCDcmd 0022  
        ?_sampleBatteryCells 0070                _sampleCurrent 0D17                     ??___lmul 0028  
              _sampleVoltage 0995          __size_of_displayLCD 0261                  __pdataBANK1 00EB  
       ??_sampleBatteryCells 0068            __size_of___ftpack 006E            __size_of___lbtoft 001E  
          __size_of___lltoft 002F             ?_sampleReference 0070                  __pbssCOMMON 007C  
                  ___latbits 0002            __size_of___lwtoft 0018                __pcstackBANK0 0020  
              __pcstackBANK1 00A0            __size_of_handlePB 005C               ?_sampleCurrent 0070  
                  _cellVoltL 0822             ___lwdiv@dividend 0022             sampleReference@i 0060  
             ?_sampleVoltage 005E                     ?___ftadd 0031                     ?___ftdiv 004E  
                   ?___ftneg 002E                     ?___lldiv 0020                     ?___ftmul 003E  
                   ?___fttol 005E                     ?___lwdiv 0020                stopWatch@mode 00AC  
              stopWatch@temp 00AD                    _convConst 0825                    __pstrings 0800  
            displayLCD@F2781 01B0              displayLCD@F2783 01B8                     ?_initADC 0070  
                   ?_initLCD 0070             ___lwdiv@quotient 0025            sampleVoltage@chan 0063  
             __size_of_pulse 0010            sampleVoltage@temp 0066                    _isrTimer0 152D  
            displayLCD@temp1 00BB              displayLCD@temp2 00C3            interrupt_function 0004  
               ??_analogRead 0022                    clear_ram0 1472                    _sampleNum 082B  
                  _timeSetup 088D         floatToASCII@decPoint 00A7                   _ADCON0bits 001F  
                __stringbase 080F                    _stopWatch 0DF1           __end_of_analogRead 1684  
               ??_displayLCD 00B7           stopWatch@startTime 00E3            ___lmul@multiplier 0020  
                 ?_isrTimer0 0070              ??_sampleCurrent 005E     __size_of_currentGainInit 0019  
            ??_sampleVoltage 0061                   ?_timeSetup 0070             ??_initController 0028  
                 _CMCON0bits 009C           __end_of_displayLCD 05C4             __size_of___ftadd 0109  
           __size_of___ftdiv 00B8             __size_of___ftneg 000A             __size_of___lldiv 0060  
           __size_of___ftmul 00D3             __size_of___fttol 008E             __size_of___lwdiv 003E  
                   ___ftpack 0899                     ___lbtoft 150F           __end_of__stringtab 0810  
                   ___lltoft 15AC                     ___lwtoft 14DE                  _currentGain 007B  
           __size_of_initADC 000F             __size_of_initLCD 00A9                   ?_stopWatch 006C  
                   _cellVolt 00CD              ___lwdiv@divisor 0020                     _handlePB 1744  
            ___lwdiv@counter 0027                     __ptext10 088D                     __ptext11 1484  
                   __ptext20 17A0                     __ptext12 1744                     __ptext21 0907  
                   __ptext13 0DF1                     __ptext30 14A3                     __ptext22 147A  
                   __ptext14 0A30                     __ptext31 1493                     __ptext23 0C44  
                   __ptext15 1581                     __ptext32 14C6                     __ptext24 0B8C  
                   __ptext16 0363                     __ptext33 14F6                     __ptext25 0EF7  
                   __ptext17 0057                     __ptext34 14B4                     __ptext26 0899  
                   __ptext18 1703                     __ptext35 152D                     __ptext27 16C2  
                   __ptext19 15AC                     __ptext28 1557                     __ptext29 1612  
                 _LCD4bitCmd 14A3               _LCDDisplayMode 00EA                __size_of_main 0031  
                   _refValue 007C              LCDWriteString@a 0025              LCDWriteString@i 002A  
                 _LCDSetBits 14C6                     _shuntRes 00EB          floatToASCII@leading 00A6  
        floatToASCII@prevSum 00AB                   _INTCONbits 000B               analogRead@chan 0024  
             sampleCurrent@i 0063                  ??_isrTimer0 0070                     intlevel1 0000  
           ___lldiv@dividend 0024                   _LVDCONbits 0109                  LCD4bitCmd@a 0022  
                  stringcode 080A                   _OSCCONbits 008F                  ??_timeSetup 0020  
         floatToASCII@scaler 00AF            ??_currentGainInit 0020  __size_of_sampleBatteryCells 0209  
           ___lldiv@quotient 0029                  ??_stopWatch 00A0            floatToASCII@j_342 00A5  
             sampleVoltage@i 0064                     stringdir 080A                     stringtab 0800  
        analogRead@returnVal 0025                  ?_LCD4bitCmd 0070           __CFG_FOSC$INTOSCIO 0000  
   __size_of_sampleReference 00B3              floatToASCII@num 006C      __size_of_LCDWriteString 0041  
