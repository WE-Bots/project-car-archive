

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jul 05 21:54:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  0105                     	;# 
   128  0107                     	;# 
   129  0108                     	;# 
   130  0109                     	;# 
   131  010C                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0110                     	;# 
   138  0111                     	;# 
   139  0112                     	;# 
   140  0113                     	;# 
   141  0114                     	;# 
   142  0115                     	;# 
   143  0116                     	;# 
   144  0117                     	;# 
   145  0118                     	;# 
   146  0119                     	;# 
   147  011A                     	;# 
   148  011B                     	;# 
   149  011C                     	;# 
   150  011D                     	;# 
   151  011E                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154                           
   155                           	psect	idataCOMMON
   156  0003                     __pidataCOMMON:	
   157                           
   158                           ;initializer for _currentGain
   159  0003  34C8               	retlw	200
   160                           
   161                           	psect	idataBANK1
   162  18AB                     __pidataBANK1:	
   163                           
   164                           ;initializer for _shuntRes
   165  18AB  34D7               	retlw	215
   166  18AC  3423               	retlw	35
   167  18AD  343C               	retlw	60
   168                           
   169                           ;initializer for _supVolt
   170  18AE  3466               	retlw	102
   171  18AF  3486               	retlw	134
   172  18B0  3440               	retlw	64
   173                           
   174                           	psect	strings
   175  1800                     __pstrings:	
   176  1800                     stringtab:	
   177  1800                     __stringtab:	
   178  1800                     stringcode:	
   179                           ;	String table - string pointers are 1 byte each
   180                           
   181  1800                     stringdir:	
   182  1800  3018               	movlw	high stringdir
   183  1801  008A               	movwf	10
   184  1802  0804               	movf	4,w
   185  1803  0A84               	incf	4,f
   186  1804  0782               	addwf	2,f
   187  1805                     __stringbase:	
   188  1805  3400               	retlw	0
   189  1806                     __end_of__stringtab:	
   190  1806                     _dpowers:	
   191  1806  3401               	retlw	1
   192  1807  3400               	retlw	0
   193  1808  3400               	retlw	0
   194  1809  3400               	retlw	0
   195  180A  340A               	retlw	10
   196  180B  3400               	retlw	0
   197  180C  3400               	retlw	0
   198  180D  3400               	retlw	0
   199  180E  3464               	retlw	100
   200  180F  3400               	retlw	0
   201  1810  3400               	retlw	0
   202  1811  3400               	retlw	0
   203  1812  34E8               	retlw	232
   204  1813  3403               	retlw	3
   205  1814  3400               	retlw	0
   206  1815  3400               	retlw	0
   207  1816  3410               	retlw	16
   208  1817  3427               	retlw	39
   209  1818  3400               	retlw	0
   210  1819  3400               	retlw	0
   211  181A  34A0               	retlw	160
   212  181B  3486               	retlw	134
   213  181C  3401               	retlw	1
   214  181D  3400               	retlw	0
   215  181E  3440               	retlw	64
   216  181F  3442               	retlw	66
   217  1820  340F               	retlw	15
   218  1821  3400               	retlw	0
   219  1822  3480               	retlw	128
   220  1823  3496               	retlw	150
   221  1824  3498               	retlw	152
   222  1825  3400               	retlw	0
   223  1826  3400               	retlw	0
   224  1827  34E1               	retlw	225
   225  1828  34F5               	retlw	245
   226  1829  3405               	retlw	5
   227  182A  3400               	retlw	0
   228  182B  34CA               	retlw	202
   229  182C  349A               	retlw	154
   230  182D  343B               	retlw	59
   231  182E                     __end_of_dpowers:	
   232  182E                     __npowers_:	
   233  182E  3400               	retlw	0
   234  182F  3480               	retlw	128
   235  1830  343F               	retlw	63
   236  1831  34CD               	retlw	205
   237  1832  34CC               	retlw	204
   238  1833  343D               	retlw	61
   239  1834  34D7               	retlw	215
   240  1835  3423               	retlw	35
   241  1836  343C               	retlw	60
   242  1837  3412               	retlw	18
   243  1838  3483               	retlw	131
   244  1839  343A               	retlw	58
   245  183A  34B7               	retlw	183
   246  183B  34D1               	retlw	209
   247  183C  3438               	retlw	56
   248  183D  34C6               	retlw	198
   249  183E  3427               	retlw	39
   250  183F  3437               	retlw	55
   251  1840  3438               	retlw	56
   252  1841  3486               	retlw	134
   253  1842  3435               	retlw	53
   254  1843  34C0               	retlw	192
   255  1844  34D6               	retlw	214
   256  1845  3433               	retlw	51
   257  1846  34CC               	retlw	204
   258  1847  342B               	retlw	43
   259  1848  3432               	retlw	50
   260  1849  3470               	retlw	112
   261  184A  3489               	retlw	137
   262  184B  3430               	retlw	48
   263  184C  34E7               	retlw	231
   264  184D  34DB               	retlw	219
   265  184E  342E               	retlw	46
   266  184F  34E5               	retlw	229
   267  1850  343C               	retlw	60
   268  1851  341E               	retlw	30
   269  1852  3442               	retlw	66
   270  1853  34A2               	retlw	162
   271  1854  340D               	retlw	13
   272  1855                     __end_of__npowers_:	
   273  1855                     __powers_:	
   274  1855  3400               	retlw	0
   275  1856  3480               	retlw	128
   276  1857  343F               	retlw	63
   277  1858  3400               	retlw	0
   278  1859  3420               	retlw	32
   279  185A  3441               	retlw	65
   280  185B  3400               	retlw	0
   281  185C  34C8               	retlw	200
   282  185D  3442               	retlw	66
   283  185E  3400               	retlw	0
   284  185F  347A               	retlw	122
   285  1860  3444               	retlw	68
   286  1861  3440               	retlw	64
   287  1862  341C               	retlw	28
   288  1863  3446               	retlw	70
   289  1864  3450               	retlw	80
   290  1865  34C3               	retlw	195
   291  1866  3447               	retlw	71
   292  1867  3424               	retlw	36
   293  1868  3474               	retlw	116
   294  1869  3449               	retlw	73
   295  186A  3497               	retlw	151
   296  186B  3418               	retlw	24
   297  186C  344B               	retlw	75
   298  186D  34BC               	retlw	188
   299  186E  34BE               	retlw	190
   300  186F  344C               	retlw	76
   301  1870  346B               	retlw	107
   302  1871  346E               	retlw	110
   303  1872  344E               	retlw	78
   304  1873  3403               	retlw	3
   305  1874  3415               	retlw	21
   306  1875  3450               	retlw	80
   307  1876  3479               	retlw	121
   308  1877  34AD               	retlw	173
   309  1878  3460               	retlw	96
   310  1879  34F3               	retlw	243
   311  187A  3449               	retlw	73
   312  187B  3471               	retlw	113
   313  187C                     __end_of__powers_:	
   314  187C                     _convConst:	
   315  187C  3412               	retlw	18
   316  187D  3403               	retlw	3
   317  187E  343E               	retlw	62
   318  187F                     __end_of_convConst:	
   319  187F                     _refVolt:	
   320  187F  349E               	retlw	158
   321  1880  348F               	retlw	143
   322  1881  343F               	retlw	63
   323  1882                     __end_of_refVolt:	
   324  1882                     _cell1RDT:	
   325  1882  3498               	retlw	152
   326  1883  3408               	retlw	8
   327  1884                     __end_of_cell1RDT:	
   328  1884                     _cell2RDT:	
   329  1884  345C               	retlw	92
   330  1885  3412               	retlw	18
   331  1886                     __end_of_cell2RDT:	
   332  1886                     _cell3RDT:	
   333  1886  3410               	retlw	16
   334  1887  3427               	retlw	39
   335  1888                     __end_of_cell3RDT:	
   336  1888                     _cell4RDT:	
   337  1888  346C               	retlw	108
   338  1889  3439               	retlw	57
   339  188A                     __end_of_cell4RDT:	
   340  188A                     _cell5RDT:	
   341  188A  3420               	retlw	32
   342  188B  344E               	retlw	78
   343  188C                     __end_of_cell5RDT:	
   344  188C                     _cell6RDT:	
   345  188C  347C               	retlw	124
   346  188D  3460               	retlw	96
   347  188E                     __end_of_cell6RDT:	
   348  188E                     _cellRDB:	
   349  188E  3498               	retlw	152
   350  188F  3408               	retlw	8
   351  1890                     __end_of_cellRDB:	
   352  001F                     _ADCON0	set	31
   353  001F                     _ADCON0bits	set	31
   354  001E                     _ADRESH	set	30
   355  0017                     _CCP1CON	set	23
   356  001D                     _CCP2CON	set	29
   357  000B                     _INTCONbits	set	11
   358  0005                     _PORTA	set	5
   359  0006                     _PORTB	set	6
   360  0007                     _PORTC	set	7
   361  0008                     _PORTD	set	8
   362  0009                     _PORTE	set	9
   363  0001                     _TMR0	set	1
   364  002E                     _RA6	set	46
   365  002F                     _RA7	set	47
   366  0030                     _RB0	set	48
   367  0031                     _RB1	set	49
   368  0032                     _RB2	set	50
   369  0033                     _RB3	set	51
   370  0034                     _RB4	set	52
   371  0035                     _RB5	set	53
   372  0038                     _RC0	set	56
   373  0039                     _RC1	set	57
   374  003A                     _RC2	set	58
   375  003B                     _RC3	set	59
   376  0040                     _RD0	set	64
   377  0041                     _RD1	set	65
   378  0042                     _RD2	set	66
   379  0044                     _RD4	set	68
   380  0045                     _RD5	set	69
   381  0046                     _RD6	set	70
   382  0047                     _RD7	set	71
   383  009F                     _ADCON1	set	159
   384  009E                     _ADRESL	set	158
   385  0091                     _ANSEL	set	145
   386  009C                     _CMCON0bits	set	156
   387  0081                     _OPTION_REGbits	set	129
   388  008F                     _OSCCONbits	set	143
   389  0085                     _TRISA	set	133
   390  0086                     _TRISB	set	134
   391  0087                     _TRISC	set	135
   392  0088                     _TRISD	set	136
   393  0089                     _TRISE	set	137
   394  0107                     _LCDCON	set	263
   395  0109                     _LVDCONbits	set	265
   396  1890                     STR_1:	
   397  1890  3425               	retlw	37	;'%'
   398  1891  3475               	retlw	117	;'u'
   399  1892  343A               	retlw	58	;':'
   400  1893  3420               	retlw	32	;' '
   401  1894  3425               	retlw	37	;'%'
   402  1895  342E               	retlw	46	;'.'
   403  1896  3432               	retlw	50	;'2'
   404  1897  3466               	retlw	102	;'f'
   405  1898  3420               	retlw	32	;' '
   406  1899  3420               	retlw	32	;' '
   407  189A  3420               	retlw	32	;' '
   408  189B  3420               	retlw	32	;' '
   409  189C  3420               	retlw	32	;' '
   410  189D  3420               	retlw	32	;' '
   411  189E  3420               	retlw	32	;' '
   412  189F  3420               	retlw	32	;' '
   413  18A0  3420               	retlw	32	;' '
   414  18A1  3400               	retlw	0
   415  1890                     
   416                           ; #config settings
   417  0000                     
   418                           	psect	cinit
   419  0015                     start_initialization:	
   420  0015                     __initialization:	
   421                           
   422                           ; Clear objects allocated to COMMON
   423  0015  01F8               	clrf	__pbssCOMMON& (0+127)
   424  0016  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   425  0017  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   426  0018  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   427                           
   428                           ; Clear objects allocated to BANK1
   429  0019  1383               	bcf	3,7	;select IRP bank0
   430  001A  30CA               	movlw	low __pbssBANK1
   431  001B  0084               	movwf	4
   432  001C  30E6               	movlw	low (__pbssBANK1+28)
   433  001D  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   434                           
   435                           ; Clear objects allocated to BANK3
   436  0022  1783               	bsf	3,7	;select IRP bank2
   437  0023  3090               	movlw	low __pbssBANK3
   438  0024  0084               	movwf	4
   439  0025  30B0               	movlw	low (__pbssBANK3+32)
   440  0026  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   441                           
   442                           ; Initialize objects allocated to BANK1
   443  002B  1683               	bsf	3,5	;RP0=1, select bank1
   444  002C  1303               	bcf	3,6	;RP1=0, select bank1
   445  002D  160A  158A  20AB  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   446  0032  00E6               	movwf	__pdataBANK1& (0+127)
   447  0033  160A  158A  20AC  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   448  0038  00E7               	movwf	(__pdataBANK1+1)& (0+127)
   449  0039  160A  158A  20AD  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   450  003E  00E8               	movwf	(__pdataBANK1+2)& (0+127)
   451  003F  160A  158A  20AE  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   452  0044  00E9               	movwf	(__pdataBANK1+3)& (0+127)
   453  0045  160A  158A  20AF  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   454  004A  00EA               	movwf	(__pdataBANK1+4)& (0+127)
   455  004B  160A  158A  20B0  120A  118A  	fcall	__pidataBANK1+5	;fetch initializer
   456  0050  00EB               	movwf	(__pdataBANK1+5)& (0+127)
   457                           
   458                           ; Initialize objects allocated to COMMON
   459  0051  120A  118A  2003   	fcall	__pidataCOMMON	;fetch initializer
   460  0054  00FC               	movwf	__pdataCOMMON& (0+127)
   461  0055                     end_of_initialization:	
   462                           ;End of C runtime variable initialization code
   463                           
   464  0055                     __end_of__initialization:	
   465  0055  0183               	clrf	3
   466  0056  160A  158A  2A87   	ljmp	_main	;jump to C main() function
   467                           
   468                           	psect	bssCOMMON
   469  0078                     __pbssCOMMON:	
   470  0078                     _time:	
   471  0078                     	ds	4
   472                           
   473                           	psect	dataCOMMON
   474  007C                     __pdataCOMMON:	
   475  007C                     _currentGain:	
   476  007C                     	ds	1
   477                           
   478                           	psect	bssBANK1
   479  00CA                     __pbssBANK1:	
   480  00CA                     _cellVolt:	
   481  00CA                     	ds	18
   482  00DC                     stopWatch@startTime:	
   483  00DC                     	ds	4
   484  00E0                     _current:	
   485  00E0                     	ds	3
   486  00E3                     _refValue:	
   487  00E3                     	ds	2
   488  00E5                     _LCDDisplayMode:	
   489  00E5                     	ds	1
   490                           
   491                           	psect	dataBANK1
   492  00E6                     __pdataBANK1:	
   493  00E6                     _shuntRes:	
   494  00E6                     	ds	3
   495  00E9                     _supVolt:	
   496  00E9                     	ds	3
   497                           
   498                           	psect	bssBANK3
   499  0190                     __pbssBANK3:	
   500  0190                     _btmStr:	
   501  0190                     	ds	16
   502  01A0                     _topStr:	
   503  01A0                     	ds	16
   504                           
   505                           	psect	clrtext
   506  07F8                     clear_ram0:	
   507                           ;	Called with FSR containing the base address, and
   508                           ;	W with the last address+1
   509                           
   510  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   511  07F9                     clrloop0:	
   512  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   513  07FA  0A84               	incf	4,f	;increment pointer
   514  07FB  0604               	xorwf	4,w	;XOR with final address
   515  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   516  07FD  3400               	retlw	0	;all done for this memory range, return
   517  07FE  0604               	xorwf	4,w	;XOR again to restore value
   518  07FF  2FF9               	goto	clrloop0	;do the next byte
   519                           
   520                           	psect	cstackBANK1
   521  00A0                     __pcstackBANK1:	
   522  00A0                     ??_handlePB:	
   523  00A0                     ??_sprintf:	
   524                           ; 0 bytes @ 0x0
   525                           
   526                           
   527                           ; 0 bytes @ 0x0
   528  00A0                     	ds	6
   529  00A6                     _sprintf$919:	
   530                           
   531                           ; 3 bytes @ 0x6
   532  00A6                     	ds	3
   533  00A9                     sprintf@ap:	
   534                           
   535                           ; 1 bytes @ 0x9
   536  00A9                     	ds	1
   537  00AA                     sprintf@flag:	
   538                           
   539                           ; 2 bytes @ 0xA
   540  00AA                     	ds	2
   541  00AC                     sprintf@val:	
   542                           
   543                           ; 4 bytes @ 0xC
   544  00AC                     	ds	4
   545  00B0                     sprintf@exp:	
   546                           
   547                           ; 2 bytes @ 0x10
   548  00B0                     	ds	2
   549  00B2                     sprintf@tmpval:	
   550                           
   551                           ; 4 bytes @ 0x12
   552  00B2                     	ds	4
   553  00B6                     sprintf@sp:	
   554                           
   555                           ; 1 bytes @ 0x16
   556  00B6                     	ds	1
   557  00B7                     sprintf@prec:	
   558                           
   559                           ; 2 bytes @ 0x17
   560  00B7                     	ds	2
   561  00B9                     sprintf@fval:	
   562                           
   563                           ; 3 bytes @ 0x19
   564  00B9                     	ds	3
   565  00BC                     sprintf@c:	
   566                           
   567                           ; 1 bytes @ 0x1C
   568  00BC                     	ds	1
   569  00BD                     ??_displayLCD:	
   570                           
   571                           ; 0 bytes @ 0x1D
   572  00BD                     	ds	3
   573  00C0                     displayLCD@valueU:	
   574                           
   575                           ; 3 bytes @ 0x20
   576  00C0                     	ds	3
   577  00C3                     displayLCD@valueL:	
   578                           
   579                           ; 3 bytes @ 0x23
   580  00C3                     	ds	3
   581  00C6                     displayLCD@itemU:	
   582                           
   583                           ; 1 bytes @ 0x26
   584  00C6                     	ds	1
   585  00C7                     displayLCD@itemL:	
   586                           
   587                           ; 1 bytes @ 0x27
   588  00C7                     	ds	1
   589  00C8                     ??_main:	
   590                           
   591                           ; 0 bytes @ 0x28
   592  00C8                     	ds	2
   593                           
   594                           	psect	cstackCOMMON
   595  0070                     __pcstackCOMMON:	
   596  0070                     ?_LCDSetBits:	
   597  0070                     ?_pulse:	
   598                           ; 0 bytes @ 0x0
   599                           
   600  0070                     ?_LCDcmd:	
   601                           ; 0 bytes @ 0x0
   602                           
   603  0070                     ?_currentGainInit:	
   604                           ; 0 bytes @ 0x0
   605                           
   606  0070                     ?_sampleReference:	
   607                           ; 0 bytes @ 0x0
   608                           
   609  0070                     ?_sampleCurrent:	
   610                           ; 0 bytes @ 0x0
   611                           
   612  0070                     ?_sampleBatteryCells:	
   613                           ; 0 bytes @ 0x0
   614                           
   615  0070                     ?_handlePB:	
   616                           ; 0 bytes @ 0x0
   617                           
   618  0070                     ?_isdigit:	
   619                           ; 0 bytes @ 0x0
   620                           
   621  0070                     ?_initLCD:	
   622                           ; 1 bit 
   623                           
   624  0070                     ?_LCD4bitCmd:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0070                     ?_LCDWriteChar:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0070                     ?_LCDSetCursor:	
   631                           ; 0 bytes @ 0x0
   632                           
   633  0070                     ?_LCDWriteString:	
   634                           ; 0 bytes @ 0x0
   635                           
   636  0070                     ?_timeSetup:	
   637                           ; 0 bytes @ 0x0
   638                           
   639  0070                     ?_isrTimer0:	
   640                           ; 0 bytes @ 0x0
   641                           
   642  0070                     ??_isrTimer0:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0070                     ?_initADC:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0070                     ?_initController:	
   649                           ; 0 bytes @ 0x0
   650                           
   651  0070                     ?_isr:	
   652                           ; 0 bytes @ 0x0
   653                           
   654  0070                     ?_main:	
   655                           ; 0 bytes @ 0x0
   656                           
   657                           
   658                           ; 0 bytes @ 0x0
   659  0070                     	ds	4
   660  0074                     ??_isr:	
   661                           
   662                           ; 0 bytes @ 0x4
   663  0074                     	ds	4
   664                           
   665                           	psect	cstackBANK0
   666  0020                     __pcstackBANK0:	
   667  0020                     ??_LCDSetBits:	
   668  0020                     ??_pulse:	
   669                           ; 0 bytes @ 0x0
   670                           
   671  0020                     ??_currentGainInit:	
   672                           ; 0 bytes @ 0x0
   673                           
   674  0020                     ??_isdigit:	
   675                           ; 0 bytes @ 0x0
   676                           
   677  0020                     ??_timeSetup:	
   678                           ; 0 bytes @ 0x0
   679                           
   680  0020                     ??_initADC:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0020                     ?___ftge:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0020                     ?_analogRead:	
   687                           ; 1 bit 
   688                           
   689  0020                     ?___wmul:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0020                     ?___awmod:	
   693                           ; 2 bytes @ 0x0
   694                           
   695  0020                     ?___lwdiv:	
   696                           ; 2 bytes @ 0x0
   697                           
   698  0020                     ?___ftpack:	
   699                           ; 2 bytes @ 0x0
   700                           
   701  0020                     ?___ftneg:	
   702                           ; 3 bytes @ 0x0
   703                           
   704  0020                     ?__tdiv_to_l_:	
   705                           ; 3 bytes @ 0x0
   706                           
   707  0020                     ?__div_to_l_:	
   708                           ; 4 bytes @ 0x0
   709                           
   710  0020                     ?___lldiv:	
   711                           ; 4 bytes @ 0x0
   712                           
   713  0020                     LCDSetBits@a:	
   714                           ; 4 bytes @ 0x0
   715                           
   716  0020                     currentGainInit@gain:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0020                     _isdigit$676:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0020                     ___wmul@multiplier:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0020                     ___awmod@divisor:	
   726                           ; 2 bytes @ 0x0
   727                           
   728  0020                     ___lwdiv@divisor:	
   729                           ; 2 bytes @ 0x0
   730                           
   731  0020                     __div_to_l_@f1:	
   732                           ; 2 bytes @ 0x0
   733                           
   734  0020                     ___ftpack@arg:	
   735                           ; 3 bytes @ 0x0
   736                           
   737  0020                     __tdiv_to_l_@f1:	
   738                           ; 3 bytes @ 0x0
   739                           
   740  0020                     ___ftge@ff1:	
   741                           ; 3 bytes @ 0x0
   742                           
   743  0020                     ___ftneg@f1:	
   744                           ; 3 bytes @ 0x0
   745                           
   746  0020                     ___lldiv@divisor:	
   747                           ; 3 bytes @ 0x0
   748                           
   749                           
   750                           ; 4 bytes @ 0x0
   751  0020                     	ds	1
   752  0021                     isdigit@c:	
   753                           
   754                           ; 1 bytes @ 0x1
   755  0021                     	ds	1
   756  0022                     ??_LCDcmd:	
   757  0022                     ??_LCD4bitCmd:	
   758                           ; 0 bytes @ 0x2
   759                           
   760  0022                     ??_LCDWriteChar:	
   761                           ; 0 bytes @ 0x2
   762                           
   763  0022                     ??_analogRead:	
   764                           ; 0 bytes @ 0x2
   765                           
   766  0022                     LCD4bitCmd@a:	
   767                           ; 0 bytes @ 0x2
   768                           
   769  0022                     ___wmul@multiplicand:	
   770                           ; 1 bytes @ 0x2
   771                           
   772  0022                     ___awmod@dividend:	
   773                           ; 2 bytes @ 0x2
   774                           
   775  0022                     ___lwdiv@dividend:	
   776                           ; 2 bytes @ 0x2
   777                           
   778                           
   779                           ; 2 bytes @ 0x2
   780  0022                     	ds	1
   781  0023                     ??_LCDSetCursor:	
   782  0023                     ??___ftneg:	
   783                           ; 0 bytes @ 0x3
   784                           
   785  0023                     ___ftpack@exp:	
   786                           ; 0 bytes @ 0x3
   787                           
   788  0023                     __div_to_l_@f2:	
   789                           ; 1 bytes @ 0x3
   790                           
   791  0023                     __tdiv_to_l_@f2:	
   792                           ; 3 bytes @ 0x3
   793                           
   794  0023                     ___ftge@ff2:	
   795                           ; 3 bytes @ 0x3
   796                           
   797                           
   798                           ; 3 bytes @ 0x3
   799  0023                     	ds	1
   800  0024                     ??___wmul:	
   801  0024                     ??___awmod:	
   802                           ; 0 bytes @ 0x4
   803                           
   804  0024                     ??___lwdiv:	
   805                           ; 0 bytes @ 0x4
   806                           
   807  0024                     LCDcmd@a:	
   808                           ; 0 bytes @ 0x4
   809                           
   810  0024                     LCDWriteChar@a:	
   811                           ; 1 bytes @ 0x4
   812                           
   813  0024                     analogRead@chan:	
   814                           ; 1 bytes @ 0x4
   815                           
   816  0024                     ___ftpack@sign:	
   817                           ; 1 bytes @ 0x4
   818                           
   819  0024                     ___wmul@product:	
   820                           ; 1 bytes @ 0x4
   821                           
   822  0024                     ___lldiv@dividend:	
   823                           ; 2 bytes @ 0x4
   824                           
   825                           
   826                           ; 4 bytes @ 0x4
   827  0024                     	ds	1
   828  0025                     ??___ftpack:	
   829  0025                     ??_initLCD:	
   830                           ; 0 bytes @ 0x5
   831                           
   832  0025                     ??_LCDWriteString:	
   833                           ; 0 bytes @ 0x5
   834                           
   835  0025                     LCDSetCursor@a:	
   836                           ; 0 bytes @ 0x5
   837                           
   838  0025                     ___awmod@counter:	
   839                           ; 1 bytes @ 0x5
   840                           
   841  0025                     analogRead@returnVal:	
   842                           ; 1 bytes @ 0x5
   843                           
   844  0025                     ___lwdiv@quotient:	
   845                           ; 2 bytes @ 0x5
   846                           
   847                           
   848                           ; 2 bytes @ 0x5
   849  0025                     	ds	1
   850  0026                     ??__tdiv_to_l_:	
   851  0026                     ??__div_to_l_:	
   852                           ; 0 bytes @ 0x6
   853                           
   854  0026                     ??___ftge:	
   855                           ; 0 bytes @ 0x6
   856                           
   857  0026                     ___awmod@sign:	
   858                           ; 0 bytes @ 0x6
   859                           
   860  0026                     LCDWriteString@i:	
   861                           ; 1 bytes @ 0x6
   862                           
   863                           
   864                           ; 2 bytes @ 0x6
   865  0026                     	ds	1
   866  0027                     ?___awdiv:	
   867  0027                     ___lwdiv@counter:	
   868                           ; 2 bytes @ 0x7
   869                           
   870  0027                     ___awdiv@divisor:	
   871                           ; 1 bytes @ 0x7
   872                           
   873                           
   874                           ; 2 bytes @ 0x7
   875  0027                     	ds	1
   876  0028                     ??_initController:	
   877  0028                     ??___lldiv:	
   878                           ; 0 bytes @ 0x8
   879                           
   880  0028                     ?___lbtoft:	
   881                           ; 0 bytes @ 0x8
   882                           
   883  0028                     ?___lltoft:	
   884                           ; 3 bytes @ 0x8
   885                           
   886  0028                     ?___lwtoft:	
   887                           ; 3 bytes @ 0x8
   888                           
   889  0028                     LCDWriteString@a:	
   890                           ; 3 bytes @ 0x8
   891                           
   892  0028                     ___lwtoft@c:	
   893                           ; 1 bytes @ 0x8
   894                           
   895  0028                     ___lltoft@c:	
   896                           ; 2 bytes @ 0x8
   897                           
   898                           
   899                           ; 4 bytes @ 0x8
   900  0028                     	ds	1
   901  0029                     ___awdiv@dividend:	
   902  0029                     ___lldiv@quotient:	
   903                           ; 2 bytes @ 0x9
   904                           
   905                           
   906                           ; 4 bytes @ 0x9
   907  0029                     	ds	1
   908  002A                     __tdiv_to_l_@quot:	
   909                           
   910                           ; 4 bytes @ 0xA
   911  002A                     	ds	1
   912  002B                     ??___awdiv:	
   913  002B                     ??___lbtoft:	
   914                           ; 0 bytes @ 0xB
   915                           
   916  002B                     ??___lwtoft:	
   917                           ; 0 bytes @ 0xB
   918                           
   919                           
   920                           ; 0 bytes @ 0xB
   921  002B                     	ds	1
   922  002C                     ??___lltoft:	
   923  002C                     ___awdiv@counter:	
   924                           ; 0 bytes @ 0xC
   925                           
   926                           
   927                           ; 1 bytes @ 0xC
   928  002C                     	ds	1
   929  002D                     ___awdiv@sign:	
   930  002D                     ___lldiv@counter:	
   931                           ; 1 bytes @ 0xD
   932                           
   933  002D                     ___lltoft@exp:	
   934                           ; 1 bytes @ 0xD
   935                           
   936                           
   937                           ; 1 bytes @ 0xD
   938  002D                     	ds	1
   939  002E                     ?___llmod:	
   940  002E                     __tdiv_to_l_@cntr:	
   941                           ; 4 bytes @ 0xE
   942                           
   943  002E                     ___awdiv@quotient:	
   944                           ; 1 bytes @ 0xE
   945                           
   946  002E                     __div_to_l_@quot:	
   947                           ; 2 bytes @ 0xE
   948                           
   949  002E                     ___llmod@divisor:	
   950                           ; 4 bytes @ 0xE
   951                           
   952                           
   953                           ; 4 bytes @ 0xE
   954  002E                     	ds	1
   955  002F                     __tdiv_to_l_@exp1:	
   956  002F                     ___lbtoft@c:	
   957                           ; 1 bytes @ 0xF
   958                           
   959                           
   960                           ; 1 bytes @ 0xF
   961  002F                     	ds	1
   962  0030                     ?___bmul:	
   963  0030                     ___bmul@multiplicand:	
   964                           ; 1 bytes @ 0x10
   965                           
   966                           
   967                           ; 1 bytes @ 0x10
   968  0030                     	ds	1
   969  0031                     ??___bmul:	
   970                           
   971                           ; 0 bytes @ 0x11
   972  0031                     	ds	1
   973  0032                     ___bmul@product:	
   974  0032                     __div_to_l_@cntr:	
   975                           ; 1 bytes @ 0x12
   976                           
   977  0032                     ___llmod@dividend:	
   978                           ; 1 bytes @ 0x12
   979                           
   980                           
   981                           ; 4 bytes @ 0x12
   982  0032                     	ds	1
   983  0033                     ___bmul@multiplier:	
   984  0033                     __div_to_l_@exp1:	
   985                           ; 1 bytes @ 0x13
   986                           
   987                           
   988                           ; 1 bytes @ 0x13
   989  0033                     	ds	1
   990  0034                     ?___ftmul:	
   991  0034                     ___ftmul@f1:	
   992                           ; 3 bytes @ 0x14
   993                           
   994                           
   995                           ; 3 bytes @ 0x14
   996  0034                     	ds	2
   997  0036                     ??___llmod:	
   998                           
   999                           ; 0 bytes @ 0x16
  1000  0036                     	ds	1
  1001  0037                     ___llmod@counter:	
  1002  0037                     ___ftmul@f2:	
  1003                           ; 1 bytes @ 0x17
  1004                           
  1005                           
  1006                           ; 3 bytes @ 0x17
  1007  0037                     	ds	3
  1008  003A                     ??___ftmul:	
  1009                           
  1010                           ; 0 bytes @ 0x1A
  1011  003A                     	ds	4
  1012  003E                     ___ftmul@exp:	
  1013                           
  1014                           ; 1 bytes @ 0x1E
  1015  003E                     	ds	1
  1016  003F                     ___ftmul@f3_as_product:	
  1017                           
  1018                           ; 3 bytes @ 0x1F
  1019  003F                     	ds	3
  1020  0042                     ___ftmul@cntr:	
  1021                           
  1022                           ; 1 bytes @ 0x22
  1023  0042                     	ds	1
  1024  0043                     ___ftmul@sign:	
  1025                           
  1026                           ; 1 bytes @ 0x23
  1027  0043                     	ds	1
  1028  0044                     ?_fround:	
  1029  0044                     ?_scale:	
  1030                           ; 3 bytes @ 0x24
  1031                           
  1032  0044                     ?___ftdiv:	
  1033                           ; 3 bytes @ 0x24
  1034                           
  1035  0044                     ___ftdiv@f2:	
  1036                           ; 3 bytes @ 0x24
  1037                           
  1038                           
  1039                           ; 3 bytes @ 0x24
  1040  0044                     	ds	3
  1041  0047                     ??_fround:	
  1042  0047                     ??_scale:	
  1043                           ; 0 bytes @ 0x27
  1044                           
  1045  0047                     ___ftdiv@f1:	
  1046                           ; 0 bytes @ 0x27
  1047                           
  1048                           
  1049                           ; 3 bytes @ 0x27
  1050  0047                     	ds	2
  1051  0049                     _scale$918:	
  1052                           
  1053                           ; 3 bytes @ 0x29
  1054  0049                     	ds	1
  1055  004A                     ??___ftdiv:	
  1056                           
  1057                           ; 0 bytes @ 0x2A
  1058  004A                     	ds	2
  1059  004C                     scale@scl:	
  1060                           
  1061                           ; 1 bytes @ 0x2C
  1062  004C                     	ds	1
  1063  004D                     ?___fttol:	
  1064  004D                     ___fttol@f1:	
  1065                           ; 4 bytes @ 0x2D
  1066                           
  1067  004D                     _fround$917:	
  1068                           ; 3 bytes @ 0x2D
  1069                           
  1070                           
  1071                           ; 3 bytes @ 0x2D
  1072  004D                     	ds	1
  1073  004E                     ___ftdiv@cntr:	
  1074                           
  1075                           ; 1 bytes @ 0x2E
  1076  004E                     	ds	1
  1077  004F                     ___ftdiv@f3:	
  1078                           
  1079                           ; 3 bytes @ 0x2F
  1080  004F                     	ds	1
  1081  0050                     _fround$916:	
  1082                           
  1083                           ; 3 bytes @ 0x30
  1084  0050                     	ds	1
  1085  0051                     ??___fttol:	
  1086                           
  1087                           ; 0 bytes @ 0x31
  1088  0051                     	ds	1
  1089  0052                     ___ftdiv@exp:	
  1090                           
  1091                           ; 1 bytes @ 0x32
  1092  0052                     	ds	1
  1093  0053                     fround@prec:	
  1094  0053                     ___ftdiv@sign:	
  1095                           ; 1 bytes @ 0x33
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x33
  1099  0053                     	ds	1
  1100  0054                     ??_sampleReference:	
  1101  0054                     ??_sampleCurrent:	
  1102                           ; 0 bytes @ 0x34
  1103                           
  1104  0054                     ?_sampleVoltage:	
  1105                           ; 0 bytes @ 0x34
  1106                           
  1107  0054                     ?___ftadd:	
  1108                           ; 3 bytes @ 0x34
  1109                           
  1110  0054                     ___ftadd@f1:	
  1111                           ; 3 bytes @ 0x34
  1112                           
  1113  0054                     _sampleCurrent$915:	
  1114                           ; 3 bytes @ 0x34
  1115                           
  1116                           
  1117                           ; 3 bytes @ 0x34
  1118  0054                     	ds	1
  1119  0055                     ___fttol@sign1:	
  1120                           
  1121                           ; 1 bytes @ 0x35
  1122  0055                     	ds	1
  1123  0056                     sampleReference@i:	
  1124  0056                     ___fttol@lval:	
  1125                           ; 2 bytes @ 0x36
  1126                           
  1127                           
  1128                           ; 4 bytes @ 0x36
  1129  0056                     	ds	1
  1130  0057                     sampleCurrent@i:	
  1131  0057                     ___ftadd@f2:	
  1132                           ; 2 bytes @ 0x37
  1133                           
  1134                           
  1135                           ; 3 bytes @ 0x37
  1136  0057                     	ds	1
  1137  0058                     ??_sampleVoltage:	
  1138  0058                     sampleVoltage@chan:	
  1139                           ; 0 bytes @ 0x38
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x38
  1143  0058                     	ds	1
  1144  0059                     sampleVoltage@i:	
  1145  0059                     sampleCurrent@temp:	
  1146                           ; 2 bytes @ 0x39
  1147                           
  1148                           
  1149                           ; 2 bytes @ 0x39
  1150  0059                     	ds	1
  1151  005A                     ??___ftadd:	
  1152  005A                     ___fttol@exp1:	
  1153                           ; 0 bytes @ 0x3A
  1154                           
  1155                           
  1156                           ; 1 bytes @ 0x3A
  1157  005A                     	ds	1
  1158  005B                     ?_stopWatch:	
  1159  005B                     sampleVoltage@temp:	
  1160                           ; 4 bytes @ 0x3B
  1161                           
  1162                           
  1163                           ; 2 bytes @ 0x3B
  1164  005B                     	ds	2
  1165  005D                     ??_sampleBatteryCells:	
  1166                           
  1167                           ; 0 bytes @ 0x3D
  1168  005D                     	ds	1
  1169  005E                     ___ftadd@sign:	
  1170                           
  1171                           ; 1 bytes @ 0x3E
  1172  005E                     	ds	1
  1173  005F                     ??_stopWatch:	
  1174  005F                     ___ftadd@exp2:	
  1175                           ; 0 bytes @ 0x3F
  1176                           
  1177                           
  1178                           ; 1 bytes @ 0x3F
  1179  005F                     	ds	1
  1180  0060                     ___ftadd@exp1:	
  1181                           
  1182                           ; 1 bytes @ 0x40
  1183  0060                     	ds	1
  1184  0061                     ?___ftsub:	
  1185  0061                     ___ftsub@f2:	
  1186                           ; 3 bytes @ 0x41
  1187                           
  1188  0061                     _sampleBatteryCells$914:	
  1189                           ; 3 bytes @ 0x41
  1190                           
  1191                           
  1192                           ; 3 bytes @ 0x41
  1193  0061                     	ds	3
  1194  0064                     ___ftsub@f1:	
  1195                           
  1196                           ; 3 bytes @ 0x44
  1197  0064                     	ds	3
  1198  0067                     ??___ftsub:	
  1199  0067                     ?_sprintf:	
  1200                           ; 0 bytes @ 0x47
  1201                           
  1202  0067                     sprintf@f:	
  1203                           ; 2 bytes @ 0x47
  1204                           
  1205                           
  1206                           ; 1 bytes @ 0x47
  1207  0067                     	ds	4
  1208  006B                     stopWatch@mode:	
  1209                           
  1210                           ; 1 bytes @ 0x4B
  1211  006B                     	ds	1
  1212  006C                     stopWatch@temp:	
  1213                           
  1214                           ; 4 bytes @ 0x4C
  1215  006C                     	ds	1
  1216  006D                     ?_displayLCD:	
  1217  006D                     displayLCD@disp:	
  1218                           ; 0 bytes @ 0x4D
  1219                           
  1220                           
  1221                           ; 2 bytes @ 0x4D
  1222  006D                     	ds	3
  1223                           
  1224                           	psect	maintext
  1225  1A87                     __pmaintext:	
  1226 ;;
  1227 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1228 ;;
  1229 ;; *************** function _main *****************
  1230 ;; Defined at:
  1231 ;;		line 64 in file "PIC16F917 Battery Management.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;		None               void
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : B00/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1245 ;;      Params:         0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0
  1247 ;;      Temps:          0       0       2       0       0
  1248 ;;      Totals:         0       0       2       0       0
  1249 ;;Total ram usage:        2 bytes
  1250 ;; Hardware stack levels required when called:    7
  1251 ;; This function calls:
  1252 ;;		_currentGainInit
  1253 ;;		_displayLCD
  1254 ;;		_handlePB
  1255 ;;		_initController
  1256 ;;		_sampleBatteryCells
  1257 ;;		_sampleCurrent
  1258 ;;		_sampleReference
  1259 ;; This function is called by:
  1260 ;;		Startup code after reset
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _main
  1266  1A87                     _main:	
  1267                           
  1268                           ;PIC16F917 Battery Management.c: 66: initController();
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272  1A87  160A  158A  22BE  160A  158A  	fcall	_initController
  1273                           
  1274                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
  1275  1A8C  1283               	bcf	3,5	;RP0=0, select bank0
  1276  1A8D  1303               	bcf	3,6	;RP1=0, select bank0
  1277  1A8E  1608               	bsf	8,4	;volatile
  1278                           
  1279                           ;PIC16F917 Battery Management.c: 72: currentGainInit(200);
  1280  1A8F  30C8               	movlw	200
  1281  1A90  160A  158A  213D  160A  158A  	fcall	_currentGainInit
  1282  1A95                     l3462:	
  1283                           ;PIC16F917 Battery Management.c: 75: while(1)
  1284                           
  1285                           
  1286                           ;PIC16F917 Battery Management.c: 76: {
  1287                           ;PIC16F917 Battery Management.c: 77: sampleReference();
  1288  1A95  160A  118A  20D7  160A  158A  	fcall	_sampleReference
  1289                           
  1290                           ;PIC16F917 Battery Management.c: 78: sampleCurrent();
  1291  1A9A  160A  118A  219B  160A  158A  	fcall	_sampleCurrent
  1292                           
  1293                           ;PIC16F917 Battery Management.c: 79: sampleBatteryCells();
  1294  1A9F  120A  118A  2059  160A  158A  	fcall	_sampleBatteryCells
  1295                           
  1296                           ;PIC16F917 Battery Management.c: 81: handlePB();
  1297  1AA4  160A  158A  245E  160A  158A  	fcall	_handlePB
  1298                           
  1299                           ;PIC16F917 Battery Management.c: 83: displayLCD(LCDDisplayMode);
  1300  1AA9  1683               	bsf	3,5	;RP0=1, select bank1
  1301  1AAA  1303               	bcf	3,6	;RP1=0, select bank1
  1302  1AAB  0865               	movf	_LCDDisplayMode^(0+128),w
  1303  1AAC  00C8               	movwf	??_main^(0+128)
  1304  1AAD  01C9               	clrf	(??_main^(0+128)+1)
  1305  1AAE  0848               	movf	??_main^(0+128),w
  1306  1AAF  1283               	bcf	3,5	;RP0=0, select bank0
  1307  1AB0  1303               	bcf	3,6	;RP1=0, select bank0
  1308  1AB1  00ED               	movwf	displayLCD@disp
  1309  1AB2  1683               	bsf	3,5	;RP0=1, select bank1
  1310  1AB3  1303               	bcf	3,6	;RP1=0, select bank1
  1311  1AB4  0849               	movf	(??_main+1)^(0+128),w
  1312  1AB5  1283               	bcf	3,5	;RP0=0, select bank0
  1313  1AB6  1303               	bcf	3,6	;RP1=0, select bank0
  1314  1AB7  00EE               	movwf	displayLCD@disp+1
  1315  1AB8  120A  118A  25E7  160A  158A  	fcall	_displayLCD
  1316  1ABD  2A95               	goto	l3462
  1317  1ABE                     __end_of_main:	
  1318                           
  1319                           	psect	text1
  1320  10D7                     __ptext1:	
  1321 ;; *************** function _sampleReference *****************
  1322 ;; Defined at:
  1323 ;;		line 119 in file "PIC16F917 Battery Management.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  i               2   54[BANK0 ] int 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;		None               void
  1330 ;; Registers used:
  1331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1337 ;;      Params:         0       0       0       0       0
  1338 ;;      Locals:         0       2       0       0       0
  1339 ;;      Temps:          0       2       0       0       0
  1340 ;;      Totals:         0       4       0       0       0
  1341 ;;Total ram usage:        4 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    4
  1344 ;; This function calls:
  1345 ;;		___ftdiv
  1346 ;;		___ftmul
  1347 ;;		___lwdiv
  1348 ;;		___lwtoft
  1349 ;;		_analogRead
  1350 ;; This function is called by:
  1351 ;;		_main
  1352 ;;		_checkCurrent
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           
  1357                           ;psect for function _sampleReference
  1358  10D7                     _sampleReference:	
  1359                           
  1360                           ;PIC16F917 Battery Management.c: 122: RD1 = 1;
  1361                           
  1362                           ;incstack = 0
  1363                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1364  10D7  1283               	bcf	3,5	;RP0=0, select bank0
  1365  10D8  1303               	bcf	3,6	;RP1=0, select bank0
  1366  10D9  1488               	bsf	8,1	;volatile
  1367                           
  1368                           ;PIC16F917 Battery Management.c: 124: RC2 = 1;
  1369  10DA  1507               	bsf	7,2	;volatile
  1370                           
  1371                           ;PIC16F917 Battery Management.c: 126: _delay((unsigned long)((5)*(8000000/4000.0)));
  1372  10DB  300D               	movlw	13
  1373  10DC  00D5               	movwf	??_sampleReference+1
  1374  10DD  30FB               	movlw	251
  1375  10DE  00D4               	movwf	??_sampleReference
  1376  10DF                     u4607:	
  1377  10DF  0BD4               	decfsz	??_sampleReference,f
  1378  10E0  28DF               	goto	u4607
  1379  10E1  0BD5               	decfsz	??_sampleReference+1,f
  1380  10E2  28DF               	goto	u4607
  1381  10E3  28E4               	nop2
  1382                           
  1383                           ;PIC16F917 Battery Management.c: 128: refValue = 0;
  1384  10E4  1683               	bsf	3,5	;RP0=1, select bank1
  1385  10E5  1303               	bcf	3,6	;RP1=0, select bank1
  1386  10E6  01E3               	clrf	_refValue^(0+128)
  1387  10E7  01E4               	clrf	(_refValue+1)^(0+128)
  1388                           
  1389                           ;PIC16F917 Battery Management.c: 130: for ( int i = 0; i <= 10; i++)
  1390  10E8  1283               	bcf	3,5	;RP0=0, select bank0
  1391  10E9  1303               	bcf	3,6	;RP1=0, select bank0
  1392  10EA  01D6               	clrf	sampleReference@i
  1393  10EB  01D7               	clrf	sampleReference@i+1
  1394  10EC  0857               	movf	sampleReference@i+1,w
  1395  10ED  3A80               	xorlw	128
  1396  10EE  00FF               	movwf	127
  1397  10EF  3080               	movlw	128
  1398  10F0  027F               	subwf	127,w
  1399  10F1  1D03               	skipz
  1400  10F2  28F5               	goto	u4495
  1401  10F3  300B               	movlw	11
  1402  10F4  0256               	subwf	sampleReference@i,w
  1403  10F5                     u4495:	
  1404  10F5  1803               	btfsc	3,0
  1405  10F6  291E               	goto	l3324
  1406  10F7                     l3318:	
  1407                           
  1408                           ;PIC16F917 Battery Management.c: 131: {
  1409                           ;PIC16F917 Battery Management.c: 132: refValue += analogRead(REFV);
  1410  10F7  3002               	movlw	2
  1411  10F8  160A  158A  232F  160A  118A  	fcall	_analogRead
  1412  10FD  1283               	bcf	3,5	;RP0=0, select bank0
  1413  10FE  1303               	bcf	3,6	;RP1=0, select bank0
  1414  10FF  0820               	movf	?_analogRead,w
  1415  1100  1683               	bsf	3,5	;RP0=1, select bank1
  1416  1101  1303               	bcf	3,6	;RP1=0, select bank1
  1417  1102  07E3               	addwf	_refValue^(0+128),f
  1418  1103  1803               	skipnc
  1419  1104  0AE4               	incf	(_refValue+1)^(0+128),f
  1420  1105  1283               	bcf	3,5	;RP0=0, select bank0
  1421  1106  1303               	bcf	3,6	;RP1=0, select bank0
  1422  1107  0821               	movf	?_analogRead+1,w
  1423  1108  1683               	bsf	3,5	;RP0=1, select bank1
  1424  1109  1303               	bcf	3,6	;RP1=0, select bank1
  1425  110A  07E4               	addwf	(_refValue+1)^(0+128),f
  1426  110B  3001               	movlw	1
  1427  110C  1283               	bcf	3,5	;RP0=0, select bank0
  1428  110D  1303               	bcf	3,6	;RP1=0, select bank0
  1429  110E  07D6               	addwf	sampleReference@i,f
  1430  110F  1803               	skipnc
  1431  1110  0AD7               	incf	sampleReference@i+1,f
  1432  1111  3000               	movlw	0
  1433  1112  07D7               	addwf	sampleReference@i+1,f
  1434  1113  0857               	movf	sampleReference@i+1,w
  1435  1114  3A80               	xorlw	128
  1436  1115  00FF               	movwf	127
  1437  1116  3080               	movlw	128
  1438  1117  027F               	subwf	127,w
  1439  1118  1D03               	skipz
  1440  1119  291C               	goto	u4505
  1441  111A  300B               	movlw	11
  1442  111B  0256               	subwf	sampleReference@i,w
  1443  111C                     u4505:	
  1444  111C  1C03               	skipc
  1445  111D  28F7               	goto	l3318
  1446  111E                     l3324:	
  1447                           
  1448                           ;PIC16F917 Battery Management.c: 133: }
  1449                           ;PIC16F917 Battery Management.c: 135: refValue = refValue / 10;
  1450  111E  300A               	movlw	10
  1451  111F  1283               	bcf	3,5	;RP0=0, select bank0
  1452  1120  1303               	bcf	3,6	;RP1=0, select bank0
  1453  1121  00A0               	movwf	___lwdiv@divisor
  1454  1122  3000               	movlw	0
  1455  1123  00A1               	movwf	___lwdiv@divisor+1
  1456  1124  1683               	bsf	3,5	;RP0=1, select bank1
  1457  1125  1303               	bcf	3,6	;RP1=0, select bank1
  1458  1126  0864               	movf	(_refValue+1)^(0+128),w
  1459  1127  1283               	bcf	3,5	;RP0=0, select bank0
  1460  1128  1303               	bcf	3,6	;RP1=0, select bank0
  1461  1129  00A3               	movwf	___lwdiv@dividend+1
  1462  112A  1683               	bsf	3,5	;RP0=1, select bank1
  1463  112B  1303               	bcf	3,6	;RP1=0, select bank1
  1464  112C  0863               	movf	_refValue^(0+128),w
  1465  112D  1283               	bcf	3,5	;RP0=0, select bank0
  1466  112E  1303               	bcf	3,6	;RP1=0, select bank0
  1467  112F  00A2               	movwf	___lwdiv@dividend
  1468  1130  120A  158A  200D  160A  118A  	fcall	___lwdiv
  1469  1135  1283               	bcf	3,5	;RP0=0, select bank0
  1470  1136  1303               	bcf	3,6	;RP1=0, select bank0
  1471  1137  0821               	movf	?___lwdiv+1,w
  1472  1138  1683               	bsf	3,5	;RP0=1, select bank1
  1473  1139  1303               	bcf	3,6	;RP1=0, select bank1
  1474  113A  00E4               	movwf	(_refValue+1)^(0+128)
  1475  113B  1283               	bcf	3,5	;RP0=0, select bank0
  1476  113C  1303               	bcf	3,6	;RP1=0, select bank0
  1477  113D  0820               	movf	?___lwdiv,w
  1478  113E  1683               	bsf	3,5	;RP0=1, select bank1
  1479  113F  1303               	bcf	3,6	;RP1=0, select bank1
  1480  1140  00E3               	movwf	_refValue^(0+128)
  1481                           
  1482                           ;PIC16F917 Battery Management.c: 138: RD1 = 0;
  1483  1141  1283               	bcf	3,5	;RP0=0, select bank0
  1484  1142  1303               	bcf	3,6	;RP1=0, select bank0
  1485  1143  1088               	bcf	8,1	;volatile
  1486                           
  1487                           ;PIC16F917 Battery Management.c: 140: RC2 = 0;
  1488  1144  1107               	bcf	7,2	;volatile
  1489                           
  1490                           ;PIC16F917 Battery Management.c: 142: supVolt = (refVolt * 1023)/refValue;
  1491  1145  1683               	bsf	3,5	;RP0=1, select bank1
  1492  1146  1303               	bcf	3,6	;RP1=0, select bank1
  1493  1147  0864               	movf	(_refValue+1)^(0+128),w
  1494  1148  1283               	bcf	3,5	;RP0=0, select bank0
  1495  1149  1303               	bcf	3,6	;RP1=0, select bank0
  1496  114A  00A9               	movwf	___lwtoft@c+1
  1497  114B  1683               	bsf	3,5	;RP0=1, select bank1
  1498  114C  1303               	bcf	3,6	;RP1=0, select bank1
  1499  114D  0863               	movf	_refValue^(0+128),w
  1500  114E  1283               	bcf	3,5	;RP0=0, select bank0
  1501  114F  1303               	bcf	3,6	;RP1=0, select bank0
  1502  1150  00A8               	movwf	___lwtoft@c
  1503  1151  160A  158A  2125  160A  118A  	fcall	___lwtoft
  1504  1156  1283               	bcf	3,5	;RP0=0, select bank0
  1505  1157  1303               	bcf	3,6	;RP1=0, select bank0
  1506  1158  0828               	movf	?___lwtoft,w
  1507  1159  00C4               	movwf	___ftdiv@f2
  1508  115A  0829               	movf	?___lwtoft+1,w
  1509  115B  00C5               	movwf	___ftdiv@f2+1
  1510  115C  082A               	movf	?___lwtoft+2,w
  1511  115D  00C6               	movwf	___ftdiv@f2+2
  1512  115E  30C0               	movlw	192
  1513  115F  00B4               	movwf	___ftmul@f1
  1514  1160  307F               	movlw	127
  1515  1161  00B5               	movwf	___ftmul@f1+1
  1516  1162  3044               	movlw	68
  1517  1163  00B6               	movwf	___ftmul@f1+2
  1518  1164  307A               	movlw	low (_refVolt-__stringbase)
  1519  1165  0084               	movwf	4
  1520  1166  160A  158A  2000  160A  118A  	fcall	stringdir
  1521  116B  00B7               	movwf	___ftmul@f2
  1522  116C  160A  158A  2000  160A  118A  	fcall	stringdir
  1523  1171  00B8               	movwf	___ftmul@f2+1
  1524  1172  160A  158A  2000  160A  118A  	fcall	stringdir
  1525  1177  00B9               	movwf	___ftmul@f2+2
  1526  1178  160A  118A  226C  160A  118A  	fcall	___ftmul
  1527  117D  1283               	bcf	3,5	;RP0=0, select bank0
  1528  117E  1303               	bcf	3,6	;RP1=0, select bank0
  1529  117F  0834               	movf	?___ftmul,w
  1530  1180  00C7               	movwf	___ftdiv@f1
  1531  1181  0835               	movf	?___ftmul+1,w
  1532  1182  00C8               	movwf	___ftdiv@f1+1
  1533  1183  0836               	movf	?___ftmul+2,w
  1534  1184  00C9               	movwf	___ftdiv@f1+2
  1535  1185  160A  158A  2748   	fcall	___ftdiv
  1536  1188  1283               	bcf	3,5	;RP0=0, select bank0
  1537  1189  1303               	bcf	3,6	;RP1=0, select bank0
  1538  118A  0844               	movf	?___ftdiv,w
  1539  118B  1683               	bsf	3,5	;RP0=1, select bank1
  1540  118C  1303               	bcf	3,6	;RP1=0, select bank1
  1541  118D  00E9               	movwf	_supVolt^(0+128)
  1542  118E  1283               	bcf	3,5	;RP0=0, select bank0
  1543  118F  1303               	bcf	3,6	;RP1=0, select bank0
  1544  1190  0845               	movf	?___ftdiv+1,w
  1545  1191  1683               	bsf	3,5	;RP0=1, select bank1
  1546  1192  1303               	bcf	3,6	;RP1=0, select bank1
  1547  1193  00EA               	movwf	(_supVolt+1)^(0+128)
  1548  1194  1283               	bcf	3,5	;RP0=0, select bank0
  1549  1195  1303               	bcf	3,6	;RP1=0, select bank0
  1550  1196  0846               	movf	?___ftdiv+2,w
  1551  1197  1683               	bsf	3,5	;RP0=1, select bank1
  1552  1198  1303               	bcf	3,6	;RP1=0, select bank1
  1553  1199  00EB               	movwf	(_supVolt+2)^(0+128)
  1554  119A  0008               	return
  1555  119B                     __end_of_sampleReference:	
  1556                           
  1557                           	psect	text2
  1558  119B                     __ptext2:	
  1559 ;; *************** function _sampleCurrent *****************
  1560 ;; Defined at:
  1561 ;;		line 160 in file "PIC16F917 Battery Management.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  i               2   55[BANK0 ] int 
  1566 ;;  temp            2   57[BANK0 ] unsigned int 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;		None               void
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1576 ;;      Params:         0       0       0       0       0
  1577 ;;      Locals:         0       7       0       0       0
  1578 ;;      Temps:          0       0       0       0       0
  1579 ;;      Totals:         0       7       0       0       0
  1580 ;;Total ram usage:        7 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    4
  1583 ;; This function calls:
  1584 ;;		___ftdiv
  1585 ;;		___ftmul
  1586 ;;		___lbtoft
  1587 ;;		___lwdiv
  1588 ;;		___lwtoft
  1589 ;;		_analogRead
  1590 ;; This function is called by:
  1591 ;;		_main
  1592 ;;		_checkCurrent
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _sampleCurrent
  1598  119B                     _sampleCurrent:	
  1599                           
  1600                           ;PIC16F917 Battery Management.c: 162: uint16_t temp = 0;
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in _sampleCurrent: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1604  119B  1283               	bcf	3,5	;RP0=0, select bank0
  1605  119C  1303               	bcf	3,6	;RP1=0, select bank0
  1606  119D  01D9               	clrf	sampleCurrent@temp
  1607  119E  01DA               	clrf	sampleCurrent@temp+1
  1608                           
  1609                           ;PIC16F917 Battery Management.c: 164: for ( int i = 0; i <= 10; i++)
  1610  119F  01D7               	clrf	sampleCurrent@i
  1611  11A0  01D8               	clrf	sampleCurrent@i+1
  1612  11A1  0858               	movf	sampleCurrent@i+1,w
  1613  11A2  3A80               	xorlw	128
  1614  11A3  00FF               	movwf	127
  1615  11A4  3080               	movlw	128
  1616  11A5  027F               	subwf	127,w
  1617  11A6  1D03               	skipz
  1618  11A7  29AA               	goto	u4515
  1619  11A8  300B               	movlw	11
  1620  11A9  0257               	subwf	sampleCurrent@i,w
  1621  11AA                     u4515:	
  1622  11AA  1803               	btfsc	3,0
  1623  11AB  29CB               	goto	l3344
  1624  11AC                     l3338:	
  1625                           
  1626                           ;PIC16F917 Battery Management.c: 165: {
  1627                           ;PIC16F917 Battery Management.c: 166: temp += analogRead(CURRENT);
  1628  11AC  3007               	movlw	7
  1629  11AD  160A  158A  232F  160A  118A  	fcall	_analogRead
  1630  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  1631  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  1632  11B4  0820               	movf	?_analogRead,w
  1633  11B5  07D9               	addwf	sampleCurrent@temp,f
  1634  11B6  1803               	skipnc
  1635  11B7  0ADA               	incf	sampleCurrent@temp+1,f
  1636  11B8  0821               	movf	?_analogRead+1,w
  1637  11B9  07DA               	addwf	sampleCurrent@temp+1,f
  1638  11BA  3001               	movlw	1
  1639  11BB  07D7               	addwf	sampleCurrent@i,f
  1640  11BC  1803               	skipnc
  1641  11BD  0AD8               	incf	sampleCurrent@i+1,f
  1642  11BE  3000               	movlw	0
  1643  11BF  07D8               	addwf	sampleCurrent@i+1,f
  1644  11C0  0858               	movf	sampleCurrent@i+1,w
  1645  11C1  3A80               	xorlw	128
  1646  11C2  00FF               	movwf	127
  1647  11C3  3080               	movlw	128
  1648  11C4  027F               	subwf	127,w
  1649  11C5  1D03               	skipz
  1650  11C6  29C9               	goto	u4525
  1651  11C7  300B               	movlw	11
  1652  11C8  0257               	subwf	sampleCurrent@i,w
  1653  11C9                     u4525:	
  1654  11C9  1C03               	skipc
  1655  11CA  29AC               	goto	l3338
  1656  11CB                     l3344:	
  1657                           
  1658                           ;PIC16F917 Battery Management.c: 167: }
  1659                           ;PIC16F917 Battery Management.c: 169: temp = temp / 10;
  1660  11CB  300A               	movlw	10
  1661  11CC  1283               	bcf	3,5	;RP0=0, select bank0
  1662  11CD  1303               	bcf	3,6	;RP1=0, select bank0
  1663  11CE  00A0               	movwf	___lwdiv@divisor
  1664  11CF  3000               	movlw	0
  1665  11D0  00A1               	movwf	___lwdiv@divisor+1
  1666  11D1  085A               	movf	sampleCurrent@temp+1,w
  1667  11D2  00A3               	movwf	___lwdiv@dividend+1
  1668  11D3  0859               	movf	sampleCurrent@temp,w
  1669  11D4  00A2               	movwf	___lwdiv@dividend
  1670  11D5  120A  158A  200D  160A  118A  	fcall	___lwdiv
  1671  11DA  1283               	bcf	3,5	;RP0=0, select bank0
  1672  11DB  1303               	bcf	3,6	;RP1=0, select bank0
  1673  11DC  0821               	movf	?___lwdiv+1,w
  1674  11DD  00DA               	movwf	sampleCurrent@temp+1
  1675  11DE  0820               	movf	?___lwdiv,w
  1676  11DF  00D9               	movwf	sampleCurrent@temp
  1677                           
  1678                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1679  11E0  30C0               	movlw	192
  1680  11E1  00C4               	movwf	___ftdiv@f2
  1681  11E2  307F               	movlw	127
  1682  11E3  00C5               	movwf	___ftdiv@f2+1
  1683  11E4  3044               	movlw	68
  1684  11E5  00C6               	movwf	___ftdiv@f2+2
  1685  11E6  1683               	bsf	3,5	;RP0=1, select bank1
  1686  11E7  1303               	bcf	3,6	;RP1=0, select bank1
  1687  11E8  0869               	movf	_supVolt^(0+128),w
  1688  11E9  1283               	bcf	3,5	;RP0=0, select bank0
  1689  11EA  1303               	bcf	3,6	;RP1=0, select bank0
  1690  11EB  00B4               	movwf	___ftmul@f1
  1691  11EC  1683               	bsf	3,5	;RP0=1, select bank1
  1692  11ED  1303               	bcf	3,6	;RP1=0, select bank1
  1693  11EE  086A               	movf	(_supVolt+1)^(0+128),w
  1694  11EF  1283               	bcf	3,5	;RP0=0, select bank0
  1695  11F0  1303               	bcf	3,6	;RP1=0, select bank0
  1696  11F1  00B5               	movwf	___ftmul@f1+1
  1697  11F2  1683               	bsf	3,5	;RP0=1, select bank1
  1698  11F3  1303               	bcf	3,6	;RP1=0, select bank1
  1699  11F4  086B               	movf	(_supVolt+2)^(0+128),w
  1700  11F5  1283               	bcf	3,5	;RP0=0, select bank0
  1701  11F6  1303               	bcf	3,6	;RP1=0, select bank0
  1702  11F7  00B6               	movwf	___ftmul@f1+2
  1703  11F8  085A               	movf	sampleCurrent@temp+1,w
  1704  11F9  00A9               	movwf	___lwtoft@c+1
  1705  11FA  0859               	movf	sampleCurrent@temp,w
  1706  11FB  00A8               	movwf	___lwtoft@c
  1707  11FC  160A  158A  2125  160A  118A  	fcall	___lwtoft
  1708  1201  1283               	bcf	3,5	;RP0=0, select bank0
  1709  1202  1303               	bcf	3,6	;RP1=0, select bank0
  1710  1203  0828               	movf	?___lwtoft,w
  1711  1204  00B7               	movwf	___ftmul@f2
  1712  1205  0829               	movf	?___lwtoft+1,w
  1713  1206  00B8               	movwf	___ftmul@f2+1
  1714  1207  082A               	movf	?___lwtoft+2,w
  1715  1208  00B9               	movwf	___ftmul@f2+2
  1716  1209  160A  118A  226C  160A  118A  	fcall	___ftmul
  1717  120E  1283               	bcf	3,5	;RP0=0, select bank0
  1718  120F  1303               	bcf	3,6	;RP1=0, select bank0
  1719  1210  0834               	movf	?___ftmul,w
  1720  1211  00C7               	movwf	___ftdiv@f1
  1721  1212  0835               	movf	?___ftmul+1,w
  1722  1213  00C8               	movwf	___ftdiv@f1+1
  1723  1214  0836               	movf	?___ftmul+2,w
  1724  1215  00C9               	movwf	___ftdiv@f1+2
  1725  1216  160A  158A  2748  160A  118A  	fcall	___ftdiv
  1726  121B  1283               	bcf	3,5	;RP0=0, select bank0
  1727  121C  1303               	bcf	3,6	;RP1=0, select bank0
  1728  121D  0844               	movf	?___ftdiv,w
  1729  121E  00D4               	movwf	_sampleCurrent$915
  1730  121F  0845               	movf	?___ftdiv+1,w
  1731  1220  00D5               	movwf	_sampleCurrent$915+1
  1732  1221  0846               	movf	?___ftdiv+2,w
  1733  1222  00D6               	movwf	_sampleCurrent$915+2
  1734                           
  1735                           ;PIC16F917 Battery Management.c: 174: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1736  1223  1683               	bsf	3,5	;RP0=1, select bank1
  1737  1224  1303               	bcf	3,6	;RP1=0, select bank1
  1738  1225  0866               	movf	_shuntRes^(0+128),w
  1739  1226  1283               	bcf	3,5	;RP0=0, select bank0
  1740  1227  1303               	bcf	3,6	;RP1=0, select bank0
  1741  1228  00B4               	movwf	___ftmul@f1
  1742  1229  1683               	bsf	3,5	;RP0=1, select bank1
  1743  122A  1303               	bcf	3,6	;RP1=0, select bank1
  1744  122B  0867               	movf	(_shuntRes+1)^(0+128),w
  1745  122C  1283               	bcf	3,5	;RP0=0, select bank0
  1746  122D  1303               	bcf	3,6	;RP1=0, select bank0
  1747  122E  00B5               	movwf	___ftmul@f1+1
  1748  122F  1683               	bsf	3,5	;RP0=1, select bank1
  1749  1230  1303               	bcf	3,6	;RP1=0, select bank1
  1750  1231  0868               	movf	(_shuntRes+2)^(0+128),w
  1751  1232  1283               	bcf	3,5	;RP0=0, select bank0
  1752  1233  1303               	bcf	3,6	;RP1=0, select bank0
  1753  1234  00B6               	movwf	___ftmul@f1+2
  1754  1235  087C               	movf	_currentGain,w
  1755  1236  160A  158A  2156  160A  118A  	fcall	___lbtoft
  1756  123B  1283               	bcf	3,5	;RP0=0, select bank0
  1757  123C  1303               	bcf	3,6	;RP1=0, select bank0
  1758  123D  0828               	movf	?___lbtoft,w
  1759  123E  00B7               	movwf	___ftmul@f2
  1760  123F  0829               	movf	?___lbtoft+1,w
  1761  1240  00B8               	movwf	___ftmul@f2+1
  1762  1241  082A               	movf	?___lbtoft+2,w
  1763  1242  00B9               	movwf	___ftmul@f2+2
  1764  1243  160A  118A  226C  160A  118A  	fcall	___ftmul
  1765  1248  1283               	bcf	3,5	;RP0=0, select bank0
  1766  1249  1303               	bcf	3,6	;RP1=0, select bank0
  1767  124A  0834               	movf	?___ftmul,w
  1768  124B  00C4               	movwf	___ftdiv@f2
  1769  124C  0835               	movf	?___ftmul+1,w
  1770  124D  00C5               	movwf	___ftdiv@f2+1
  1771  124E  0836               	movf	?___ftmul+2,w
  1772  124F  00C6               	movwf	___ftdiv@f2+2
  1773  1250  0854               	movf	_sampleCurrent$915,w
  1774  1251  00C7               	movwf	___ftdiv@f1
  1775  1252  0855               	movf	_sampleCurrent$915+1,w
  1776  1253  00C8               	movwf	___ftdiv@f1+1
  1777  1254  0856               	movf	_sampleCurrent$915+2,w
  1778  1255  00C9               	movwf	___ftdiv@f1+2
  1779  1256  160A  158A  2748   	fcall	___ftdiv
  1780  1259  1283               	bcf	3,5	;RP0=0, select bank0
  1781  125A  1303               	bcf	3,6	;RP1=0, select bank0
  1782  125B  0844               	movf	?___ftdiv,w
  1783  125C  1683               	bsf	3,5	;RP0=1, select bank1
  1784  125D  1303               	bcf	3,6	;RP1=0, select bank1
  1785  125E  00E0               	movwf	_current^(0+128)
  1786  125F  1283               	bcf	3,5	;RP0=0, select bank0
  1787  1260  1303               	bcf	3,6	;RP1=0, select bank0
  1788  1261  0845               	movf	?___ftdiv+1,w
  1789  1262  1683               	bsf	3,5	;RP0=1, select bank1
  1790  1263  1303               	bcf	3,6	;RP1=0, select bank1
  1791  1264  00E1               	movwf	(_current+1)^(0+128)
  1792  1265  1283               	bcf	3,5	;RP0=0, select bank0
  1793  1266  1303               	bcf	3,6	;RP1=0, select bank0
  1794  1267  0846               	movf	?___ftdiv+2,w
  1795  1268  1683               	bsf	3,5	;RP0=1, select bank1
  1796  1269  1303               	bcf	3,6	;RP1=0, select bank1
  1797  126A  00E2               	movwf	(_current+2)^(0+128)
  1798  126B  0008               	return
  1799  126C                     __end_of_sampleCurrent:	
  1800                           
  1801                           	psect	text3
  1802  1956                     __ptext3:	
  1803 ;; *************** function ___lbtoft *****************
  1804 ;; Defined at:
  1805 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  c               1    wreg     unsigned char 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  c               1   15[BANK0 ] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  3    8[BANK0 ] float 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, status,0, pclath, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1819 ;;      Params:         0       3       0       0       0
  1820 ;;      Locals:         0       1       0       0       0
  1821 ;;      Temps:          0       4       0       0       0
  1822 ;;      Totals:         0       8       0       0       0
  1823 ;;Total ram usage:        8 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    3
  1826 ;; This function calls:
  1827 ;;		___ftpack
  1828 ;; This function is called by:
  1829 ;;		_sampleCurrent
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           
  1834                           ;psect for function ___lbtoft
  1835  1956                     ___lbtoft:	
  1836                           
  1837                           ;incstack = 0
  1838                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1839                           ;___lbtoft@c stored from wreg
  1840  1956  1283               	bcf	3,5	;RP0=0, select bank0
  1841  1957  1303               	bcf	3,6	;RP1=0, select bank0
  1842  1958  00AF               	movwf	___lbtoft@c
  1843  1959  082F               	movf	___lbtoft@c,w
  1844  195A  00AB               	movwf	??___lbtoft
  1845  195B  01AC               	clrf	??___lbtoft+1
  1846  195C  01AD               	clrf	??___lbtoft+2
  1847  195D  082B               	movf	??___lbtoft,w
  1848  195E  00A0               	movwf	___ftpack@arg
  1849  195F  082C               	movf	??___lbtoft+1,w
  1850  1960  00A1               	movwf	___ftpack@arg+1
  1851  1961  082D               	movf	??___lbtoft+2,w
  1852  1962  00A2               	movwf	___ftpack@arg+2
  1853  1963  308E               	movlw	142
  1854  1964  00AE               	movwf	??___lbtoft+3
  1855  1965  082E               	movf	??___lbtoft+3,w
  1856  1966  00A3               	movwf	___ftpack@exp
  1857  1967  01A4               	clrf	___ftpack@sign
  1858  1968  160A  158A  2519   	fcall	___ftpack
  1859  196B  1283               	bcf	3,5	;RP0=0, select bank0
  1860  196C  1303               	bcf	3,6	;RP1=0, select bank0
  1861  196D  0820               	movf	?___ftpack,w
  1862  196E  00A8               	movwf	?___lbtoft
  1863  196F  0821               	movf	?___ftpack+1,w
  1864  1970  00A9               	movwf	?___lbtoft+1
  1865  1971  0822               	movf	?___ftpack+2,w
  1866  1972  00AA               	movwf	?___lbtoft+2
  1867  1973  0008               	return
  1868  1974                     __end_of___lbtoft:	
  1869                           
  1870                           	psect	text4
  1871  0059                     __ptext4:	
  1872 ;; *************** function _sampleBatteryCells *****************
  1873 ;; Defined at:
  1874 ;;		line 89 in file "PIC16F917 Battery Management.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;		None               void
  1881 ;; Registers used:
  1882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1888 ;;      Params:         0       0       0       0       0
  1889 ;;      Locals:         0       3       0       0       0
  1890 ;;      Temps:          0       4       0       0       0
  1891 ;;      Totals:         0       7       0       0       0
  1892 ;;Total ram usage:        7 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    5
  1895 ;; This function calls:
  1896 ;;		___ftmul
  1897 ;;		___lwdiv
  1898 ;;		___lwtoft
  1899 ;;		_sampleVoltage
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function _sampleBatteryCells
  1907  0059                     _sampleBatteryCells:	
  1908                           
  1909                           ;PIC16F917 Battery Management.c: 92: RC2 = 1;
  1910                           
  1911                           ;incstack = 0
  1912                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1913  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1914  005A  1303               	bcf	3,6	;RP1=0, select bank0
  1915  005B  1507               	bsf	7,2	;volatile
  1916                           
  1917                           ;PIC16F917 Battery Management.c: 95: RD0 = 1;
  1918  005C  1408               	bsf	8,0	;volatile
  1919                           
  1920                           ;PIC16F917 Battery Management.c: 97: _delay((unsigned long)((5)*(8000000/4000.0)));
  1921  005D  300D               	movlw	13
  1922  005E  00DE               	movwf	??_sampleBatteryCells+1
  1923  005F  30FB               	movlw	251
  1924  0060  00DD               	movwf	??_sampleBatteryCells
  1925  0061                     u4617:	
  1926  0061  0BDD               	decfsz	??_sampleBatteryCells,f
  1927  0062  2861               	goto	u4617
  1928  0063  0BDE               	decfsz	??_sampleBatteryCells+1,f
  1929  0064  2861               	goto	u4617
  1930  0065  2866               	nop2
  1931                           
  1932                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1933  0066  3000               	movlw	0
  1934  0067  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  1935  006C  1283               	bcf	3,5	;RP0=0, select bank0
  1936  006D  1303               	bcf	3,6	;RP1=0, select bank0
  1937  006E  0854               	movf	?_sampleVoltage,w
  1938  006F  00E1               	movwf	_sampleBatteryCells$914
  1939  0070  0855               	movf	?_sampleVoltage+1,w
  1940  0071  00E2               	movwf	_sampleBatteryCells$914+1
  1941  0072  0856               	movf	?_sampleVoltage+2,w
  1942  0073  00E3               	movwf	_sampleBatteryCells$914+2
  1943                           
  1944                           ;PIC16F917 Battery Management.c: 100: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1945  0074  0861               	movf	_sampleBatteryCells$914,w
  1946  0075  00B4               	movwf	___ftmul@f1
  1947  0076  0862               	movf	_sampleBatteryCells$914+1,w
  1948  0077  00B5               	movwf	___ftmul@f1+1
  1949  0078  0863               	movf	_sampleBatteryCells$914+2,w
  1950  0079  00B6               	movwf	___ftmul@f1+2
  1951  007A  3089               	movlw	low (_cellRDB-__stringbase)
  1952  007B  0084               	movwf	4
  1953  007C  160A  158A  2000  120A  118A  	fcall	stringdir
  1954  0081  00A0               	movwf	___lwdiv@divisor
  1955  0082  160A  158A  2000  120A  118A  	fcall	stringdir
  1956  0087  00A1               	movwf	___lwdiv@divisor+1
  1957  0088  3089               	movlw	low (_cellRDB-__stringbase)
  1958  0089  0084               	movwf	4
  1959  008A  160A  158A  2000  120A  118A  	fcall	stringdir
  1960  008F  00DD               	movwf	??_sampleBatteryCells
  1961  0090  160A  158A  2000  120A  118A  	fcall	stringdir
  1962  0095  00DE               	movwf	??_sampleBatteryCells+1
  1963  0096  307D               	movlw	low (_cell1RDT-__stringbase)
  1964  0097  0084               	movwf	4
  1965  0098  160A  158A  2000  120A  118A  	fcall	stringdir
  1966  009D  00DF               	movwf	??_sampleBatteryCells+2
  1967  009E  160A  158A  2000  120A  118A  	fcall	stringdir
  1968  00A3  00E0               	movwf	??_sampleBatteryCells+3
  1969  00A4  085D               	movf	??_sampleBatteryCells,w
  1970  00A5  075F               	addwf	??_sampleBatteryCells+2,w
  1971  00A6  00A2               	movwf	___lwdiv@dividend
  1972  00A7  085E               	movf	??_sampleBatteryCells+1,w
  1973  00A8  1803               	skipnc
  1974  00A9  0A5E               	incf	??_sampleBatteryCells+1,w
  1975  00AA  0760               	addwf	??_sampleBatteryCells+3,w
  1976  00AB  00A3               	movwf	___lwdiv@dividend+1
  1977  00AC  120A  158A  200D  120A  118A  	fcall	___lwdiv
  1978  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1979  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  1980  00B3  0821               	movf	?___lwdiv+1,w
  1981  00B4  00A9               	movwf	___lwtoft@c+1
  1982  00B5  0820               	movf	?___lwdiv,w
  1983  00B6  00A8               	movwf	___lwtoft@c
  1984  00B7  160A  158A  2125  120A  118A  	fcall	___lwtoft
  1985  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  1986  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  1987  00BE  0828               	movf	?___lwtoft,w
  1988  00BF  00B7               	movwf	___ftmul@f2
  1989  00C0  0829               	movf	?___lwtoft+1,w
  1990  00C1  00B8               	movwf	___ftmul@f2+1
  1991  00C2  082A               	movf	?___lwtoft+2,w
  1992  00C3  00B9               	movwf	___ftmul@f2+2
  1993  00C4  160A  118A  226C  120A  118A  	fcall	___ftmul
  1994  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1995  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1996  00CB  0834               	movf	?___ftmul,w
  1997  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  1998  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  1999  00CE  00CA               	movwf	_cellVolt^(0+128)
  2000  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2001  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2002  00D1  0835               	movf	?___ftmul+1,w
  2003  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  2004  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  2005  00D4  00CB               	movwf	(_cellVolt+1)^(0+128)
  2006  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2007  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2008  00D7  0836               	movf	?___ftmul+2,w
  2009  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  2010  00D9  1303               	bcf	3,6	;RP1=0, select bank1
  2011  00DA  00CC               	movwf	(_cellVolt+2)^(0+128)
  2012                           
  2013                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  2014  00DB  3001               	movlw	1
  2015  00DC  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  2016  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2017  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2018  00E3  0854               	movf	?_sampleVoltage,w
  2019  00E4  00E1               	movwf	_sampleBatteryCells$914
  2020  00E5  0855               	movf	?_sampleVoltage+1,w
  2021  00E6  00E2               	movwf	_sampleBatteryCells$914+1
  2022  00E7  0856               	movf	?_sampleVoltage+2,w
  2023  00E8  00E3               	movwf	_sampleBatteryCells$914+2
  2024                           
  2025                           ;PIC16F917 Battery Management.c: 101: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  2026  00E9  0861               	movf	_sampleBatteryCells$914,w
  2027  00EA  00B4               	movwf	___ftmul@f1
  2028  00EB  0862               	movf	_sampleBatteryCells$914+1,w
  2029  00EC  00B5               	movwf	___ftmul@f1+1
  2030  00ED  0863               	movf	_sampleBatteryCells$914+2,w
  2031  00EE  00B6               	movwf	___ftmul@f1+2
  2032  00EF  3089               	movlw	low (_cellRDB-__stringbase)
  2033  00F0  0084               	movwf	4
  2034  00F1  160A  158A  2000  120A  118A  	fcall	stringdir
  2035  00F6  00A0               	movwf	___lwdiv@divisor
  2036  00F7  160A  158A  2000  120A  118A  	fcall	stringdir
  2037  00FC  00A1               	movwf	___lwdiv@divisor+1
  2038  00FD  3089               	movlw	low (_cellRDB-__stringbase)
  2039  00FE  0084               	movwf	4
  2040  00FF  160A  158A  2000  120A  118A  	fcall	stringdir
  2041  0104  00DD               	movwf	??_sampleBatteryCells
  2042  0105  160A  158A  2000  120A  118A  	fcall	stringdir
  2043  010A  00DE               	movwf	??_sampleBatteryCells+1
  2044  010B  307F               	movlw	low (_cell2RDT-__stringbase)
  2045  010C  0084               	movwf	4
  2046  010D  160A  158A  2000  120A  118A  	fcall	stringdir
  2047  0112  00DF               	movwf	??_sampleBatteryCells+2
  2048  0113  160A  158A  2000  120A  118A  	fcall	stringdir
  2049  0118  00E0               	movwf	??_sampleBatteryCells+3
  2050  0119  085D               	movf	??_sampleBatteryCells,w
  2051  011A  075F               	addwf	??_sampleBatteryCells+2,w
  2052  011B  00A2               	movwf	___lwdiv@dividend
  2053  011C  085E               	movf	??_sampleBatteryCells+1,w
  2054  011D  1803               	skipnc
  2055  011E  0A5E               	incf	??_sampleBatteryCells+1,w
  2056  011F  0760               	addwf	??_sampleBatteryCells+3,w
  2057  0120  00A3               	movwf	___lwdiv@dividend+1
  2058  0121  120A  158A  200D  120A  118A  	fcall	___lwdiv
  2059  0126  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0127  1303               	bcf	3,6	;RP1=0, select bank0
  2061  0128  0821               	movf	?___lwdiv+1,w
  2062  0129  00A9               	movwf	___lwtoft@c+1
  2063  012A  0820               	movf	?___lwdiv,w
  2064  012B  00A8               	movwf	___lwtoft@c
  2065  012C  160A  158A  2125  120A  118A  	fcall	___lwtoft
  2066  0131  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0132  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0133  0828               	movf	?___lwtoft,w
  2069  0134  00B7               	movwf	___ftmul@f2
  2070  0135  0829               	movf	?___lwtoft+1,w
  2071  0136  00B8               	movwf	___ftmul@f2+1
  2072  0137  082A               	movf	?___lwtoft+2,w
  2073  0138  00B9               	movwf	___ftmul@f2+2
  2074  0139  160A  118A  226C  120A  118A  	fcall	___ftmul
  2075  013E  1283               	bcf	3,5	;RP0=0, select bank0
  2076  013F  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0140  0834               	movf	?___ftmul,w
  2078  0141  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0142  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0143  00CD               	movwf	(_cellVolt^(0+128)+3)
  2081  0144  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0145  1303               	bcf	3,6	;RP1=0, select bank0
  2083  0146  0835               	movf	?___ftmul+1,w
  2084  0147  1683               	bsf	3,5	;RP0=1, select bank1
  2085  0148  1303               	bcf	3,6	;RP1=0, select bank1
  2086  0149  00CE               	movwf	((_cellVolt+1)^(0+128)+3)
  2087  014A  1283               	bcf	3,5	;RP0=0, select bank0
  2088  014B  1303               	bcf	3,6	;RP1=0, select bank0
  2089  014C  0836               	movf	?___ftmul+2,w
  2090  014D  1683               	bsf	3,5	;RP0=1, select bank1
  2091  014E  1303               	bcf	3,6	;RP1=0, select bank1
  2092  014F  00CF               	movwf	((_cellVolt+2)^(0+128)+3)
  2093                           
  2094                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  2095  0150  3005               	movlw	5
  2096  0151  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  2097  0156  1283               	bcf	3,5	;RP0=0, select bank0
  2098  0157  1303               	bcf	3,6	;RP1=0, select bank0
  2099  0158  0854               	movf	?_sampleVoltage,w
  2100  0159  00E1               	movwf	_sampleBatteryCells$914
  2101  015A  0855               	movf	?_sampleVoltage+1,w
  2102  015B  00E2               	movwf	_sampleBatteryCells$914+1
  2103  015C  0856               	movf	?_sampleVoltage+2,w
  2104  015D  00E3               	movwf	_sampleBatteryCells$914+2
  2105                           
  2106                           ;PIC16F917 Battery Management.c: 102: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  2107  015E  0861               	movf	_sampleBatteryCells$914,w
  2108  015F  00B4               	movwf	___ftmul@f1
  2109  0160  0862               	movf	_sampleBatteryCells$914+1,w
  2110  0161  00B5               	movwf	___ftmul@f1+1
  2111  0162  0863               	movf	_sampleBatteryCells$914+2,w
  2112  0163  00B6               	movwf	___ftmul@f1+2
  2113  0164  3089               	movlw	low (_cellRDB-__stringbase)
  2114  0165  0084               	movwf	4
  2115  0166  160A  158A  2000  120A  118A  	fcall	stringdir
  2116  016B  00A0               	movwf	___lwdiv@divisor
  2117  016C  160A  158A  2000  120A  118A  	fcall	stringdir
  2118  0171  00A1               	movwf	___lwdiv@divisor+1
  2119  0172  3089               	movlw	low (_cellRDB-__stringbase)
  2120  0173  0084               	movwf	4
  2121  0174  160A  158A  2000  120A  118A  	fcall	stringdir
  2122  0179  00DD               	movwf	??_sampleBatteryCells
  2123  017A  160A  158A  2000  120A  118A  	fcall	stringdir
  2124  017F  00DE               	movwf	??_sampleBatteryCells+1
  2125  0180  3081               	movlw	low (_cell3RDT-__stringbase)
  2126  0181  0084               	movwf	4
  2127  0182  160A  158A  2000  120A  118A  	fcall	stringdir
  2128  0187  00DF               	movwf	??_sampleBatteryCells+2
  2129  0188  160A  158A  2000  120A  118A  	fcall	stringdir
  2130  018D  00E0               	movwf	??_sampleBatteryCells+3
  2131  018E  085D               	movf	??_sampleBatteryCells,w
  2132  018F  075F               	addwf	??_sampleBatteryCells+2,w
  2133  0190  00A2               	movwf	___lwdiv@dividend
  2134  0191  085E               	movf	??_sampleBatteryCells+1,w
  2135  0192  1803               	skipnc
  2136  0193  0A5E               	incf	??_sampleBatteryCells+1,w
  2137  0194  0760               	addwf	??_sampleBatteryCells+3,w
  2138  0195  00A3               	movwf	___lwdiv@dividend+1
  2139  0196  120A  158A  200D  120A  118A  	fcall	___lwdiv
  2140  019B  1283               	bcf	3,5	;RP0=0, select bank0
  2141  019C  1303               	bcf	3,6	;RP1=0, select bank0
  2142  019D  0821               	movf	?___lwdiv+1,w
  2143  019E  00A9               	movwf	___lwtoft@c+1
  2144  019F  0820               	movf	?___lwdiv,w
  2145  01A0  00A8               	movwf	___lwtoft@c
  2146  01A1  160A  158A  2125  120A  118A  	fcall	___lwtoft
  2147  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2148  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2149  01A8  0828               	movf	?___lwtoft,w
  2150  01A9  00B7               	movwf	___ftmul@f2
  2151  01AA  0829               	movf	?___lwtoft+1,w
  2152  01AB  00B8               	movwf	___ftmul@f2+1
  2153  01AC  082A               	movf	?___lwtoft+2,w
  2154  01AD  00B9               	movwf	___ftmul@f2+2
  2155  01AE  160A  118A  226C  120A  118A  	fcall	___ftmul
  2156  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  2157  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  2158  01B5  0834               	movf	?___ftmul,w
  2159  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  2160  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  2161  01B8  00D0               	movwf	(_cellVolt^(0+128)+6)
  2162  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  2163  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  2164  01BB  0835               	movf	?___ftmul+1,w
  2165  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  2166  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  2167  01BE  00D1               	movwf	((_cellVolt+1)^(0+128)+6)
  2168  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2169  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2170  01C1  0836               	movf	?___ftmul+2,w
  2171  01C2  1683               	bsf	3,5	;RP0=1, select bank1
  2172  01C3  1303               	bcf	3,6	;RP1=0, select bank1
  2173  01C4  00D2               	movwf	((_cellVolt+2)^(0+128)+6)
  2174                           
  2175                           ;PIC16F917 Battery Management.c: 104: RD0 = 0;
  2176  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  2177  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  2178  01C7  1008               	bcf	8,0	;volatile
  2179                           
  2180                           ;PIC16F917 Battery Management.c: 105: RC3 = 1;
  2181  01C8  1587               	bsf	7,3	;volatile
  2182                           
  2183                           ;PIC16F917 Battery Management.c: 107: _delay((unsigned long)((5)*(8000000/4000.0)));
  2184  01C9  300D               	movlw	13
  2185  01CA  00DE               	movwf	??_sampleBatteryCells+1
  2186  01CB  30FB               	movlw	251
  2187  01CC  00DD               	movwf	??_sampleBatteryCells
  2188  01CD                     u4627:	
  2189  01CD  0BDD               	decfsz	??_sampleBatteryCells,f
  2190  01CE  29CD               	goto	u4627
  2191  01CF  0BDE               	decfsz	??_sampleBatteryCells+1,f
  2192  01D0  29CD               	goto	u4627
  2193  01D1  29D2               	nop2
  2194                           
  2195                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  2196  01D2  3006               	movlw	6
  2197  01D3  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  2198  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  2199  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  2200  01DA  0854               	movf	?_sampleVoltage,w
  2201  01DB  00E1               	movwf	_sampleBatteryCells$914
  2202  01DC  0855               	movf	?_sampleVoltage+1,w
  2203  01DD  00E2               	movwf	_sampleBatteryCells$914+1
  2204  01DE  0856               	movf	?_sampleVoltage+2,w
  2205  01DF  00E3               	movwf	_sampleBatteryCells$914+2
  2206                           
  2207                           ;PIC16F917 Battery Management.c: 109: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  2208  01E0  0861               	movf	_sampleBatteryCells$914,w
  2209  01E1  00B4               	movwf	___ftmul@f1
  2210  01E2  0862               	movf	_sampleBatteryCells$914+1,w
  2211  01E3  00B5               	movwf	___ftmul@f1+1
  2212  01E4  0863               	movf	_sampleBatteryCells$914+2,w
  2213  01E5  00B6               	movwf	___ftmul@f1+2
  2214  01E6  3089               	movlw	low (_cellRDB-__stringbase)
  2215  01E7  0084               	movwf	4
  2216  01E8  160A  158A  2000  120A  118A  	fcall	stringdir
  2217  01ED  00A0               	movwf	___lwdiv@divisor
  2218  01EE  160A  158A  2000  120A  118A  	fcall	stringdir
  2219  01F3  00A1               	movwf	___lwdiv@divisor+1
  2220  01F4  3089               	movlw	low (_cellRDB-__stringbase)
  2221  01F5  0084               	movwf	4
  2222  01F6  160A  158A  2000  120A  118A  	fcall	stringdir
  2223  01FB  00DD               	movwf	??_sampleBatteryCells
  2224  01FC  160A  158A  2000  120A  118A  	fcall	stringdir
  2225  0201  00DE               	movwf	??_sampleBatteryCells+1
  2226  0202  3083               	movlw	low (_cell4RDT-__stringbase)
  2227  0203  0084               	movwf	4
  2228  0204  160A  158A  2000  120A  118A  	fcall	stringdir
  2229  0209  00DF               	movwf	??_sampleBatteryCells+2
  2230  020A  160A  158A  2000  120A  118A  	fcall	stringdir
  2231  020F  00E0               	movwf	??_sampleBatteryCells+3
  2232  0210  085D               	movf	??_sampleBatteryCells,w
  2233  0211  075F               	addwf	??_sampleBatteryCells+2,w
  2234  0212  00A2               	movwf	___lwdiv@dividend
  2235  0213  085E               	movf	??_sampleBatteryCells+1,w
  2236  0214  1803               	skipnc
  2237  0215  0A5E               	incf	??_sampleBatteryCells+1,w
  2238  0216  0760               	addwf	??_sampleBatteryCells+3,w
  2239  0217  00A3               	movwf	___lwdiv@dividend+1
  2240  0218  120A  158A  200D  120A  118A  	fcall	___lwdiv
  2241  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2242  021E  1303               	bcf	3,6	;RP1=0, select bank0
  2243  021F  0821               	movf	?___lwdiv+1,w
  2244  0220  00A9               	movwf	___lwtoft@c+1
  2245  0221  0820               	movf	?___lwdiv,w
  2246  0222  00A8               	movwf	___lwtoft@c
  2247  0223  160A  158A  2125  120A  118A  	fcall	___lwtoft
  2248  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2249  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2250  022A  0828               	movf	?___lwtoft,w
  2251  022B  00B7               	movwf	___ftmul@f2
  2252  022C  0829               	movf	?___lwtoft+1,w
  2253  022D  00B8               	movwf	___ftmul@f2+1
  2254  022E  082A               	movf	?___lwtoft+2,w
  2255  022F  00B9               	movwf	___ftmul@f2+2
  2256  0230  160A  118A  226C  120A  118A  	fcall	___ftmul
  2257  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2259  0237  0834               	movf	?___ftmul,w
  2260  0238  1683               	bsf	3,5	;RP0=1, select bank1
  2261  0239  1303               	bcf	3,6	;RP1=0, select bank1
  2262  023A  00D3               	movwf	(_cellVolt^(0+128)+9)
  2263  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2264  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2265  023D  0835               	movf	?___ftmul+1,w
  2266  023E  1683               	bsf	3,5	;RP0=1, select bank1
  2267  023F  1303               	bcf	3,6	;RP1=0, select bank1
  2268  0240  00D4               	movwf	((_cellVolt+1)^(0+128)+9)
  2269  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0243  0836               	movf	?___ftmul+2,w
  2272  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2273  0245  1303               	bcf	3,6	;RP1=0, select bank1
  2274  0246  00D5               	movwf	((_cellVolt+2)^(0+128)+9)
  2275                           
  2276                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  2277  0247  3003               	movlw	3
  2278  0248  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  2279  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2280  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2281  024F  0854               	movf	?_sampleVoltage,w
  2282  0250  00E1               	movwf	_sampleBatteryCells$914
  2283  0251  0855               	movf	?_sampleVoltage+1,w
  2284  0252  00E2               	movwf	_sampleBatteryCells$914+1
  2285  0253  0856               	movf	?_sampleVoltage+2,w
  2286  0254  00E3               	movwf	_sampleBatteryCells$914+2
  2287                           
  2288                           ;PIC16F917 Battery Management.c: 110: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  2289  0255  0861               	movf	_sampleBatteryCells$914,w
  2290  0256  00B4               	movwf	___ftmul@f1
  2291  0257  0862               	movf	_sampleBatteryCells$914+1,w
  2292  0258  00B5               	movwf	___ftmul@f1+1
  2293  0259  0863               	movf	_sampleBatteryCells$914+2,w
  2294  025A  00B6               	movwf	___ftmul@f1+2
  2295  025B  3089               	movlw	low (_cellRDB-__stringbase)
  2296  025C  0084               	movwf	4
  2297  025D  160A  158A  2000  120A  118A  	fcall	stringdir
  2298  0262  00A0               	movwf	___lwdiv@divisor
  2299  0263  160A  158A  2000  120A  118A  	fcall	stringdir
  2300  0268  00A1               	movwf	___lwdiv@divisor+1
  2301  0269  3089               	movlw	low (_cellRDB-__stringbase)
  2302  026A  0084               	movwf	4
  2303  026B  160A  158A  2000  120A  118A  	fcall	stringdir
  2304  0270  00DD               	movwf	??_sampleBatteryCells
  2305  0271  160A  158A  2000  120A  118A  	fcall	stringdir
  2306  0276  00DE               	movwf	??_sampleBatteryCells+1
  2307  0277  3085               	movlw	low (_cell5RDT-__stringbase)
  2308  0278  0084               	movwf	4
  2309  0279  160A  158A  2000  120A  118A  	fcall	stringdir
  2310  027E  00DF               	movwf	??_sampleBatteryCells+2
  2311  027F  160A  158A  2000  120A  118A  	fcall	stringdir
  2312  0284  00E0               	movwf	??_sampleBatteryCells+3
  2313  0285  085D               	movf	??_sampleBatteryCells,w
  2314  0286  075F               	addwf	??_sampleBatteryCells+2,w
  2315  0287  00A2               	movwf	___lwdiv@dividend
  2316  0288  085E               	movf	??_sampleBatteryCells+1,w
  2317  0289  1803               	skipnc
  2318  028A  0A5E               	incf	??_sampleBatteryCells+1,w
  2319  028B  0760               	addwf	??_sampleBatteryCells+3,w
  2320  028C  00A3               	movwf	___lwdiv@dividend+1
  2321  028D  120A  158A  200D  120A  118A  	fcall	___lwdiv
  2322  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2323  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2324  0294  0821               	movf	?___lwdiv+1,w
  2325  0295  00A9               	movwf	___lwtoft@c+1
  2326  0296  0820               	movf	?___lwdiv,w
  2327  0297  00A8               	movwf	___lwtoft@c
  2328  0298  160A  158A  2125  120A  118A  	fcall	___lwtoft
  2329  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2330  029E  1303               	bcf	3,6	;RP1=0, select bank0
  2331  029F  0828               	movf	?___lwtoft,w
  2332  02A0  00B7               	movwf	___ftmul@f2
  2333  02A1  0829               	movf	?___lwtoft+1,w
  2334  02A2  00B8               	movwf	___ftmul@f2+1
  2335  02A3  082A               	movf	?___lwtoft+2,w
  2336  02A4  00B9               	movwf	___ftmul@f2+2
  2337  02A5  160A  118A  226C  120A  118A  	fcall	___ftmul
  2338  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2339  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2340  02AC  0834               	movf	?___ftmul,w
  2341  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2342  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  2343  02AF  00D6               	movwf	(_cellVolt^(0+128)+12)
  2344  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2345  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2346  02B2  0835               	movf	?___ftmul+1,w
  2347  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2348  02B4  1303               	bcf	3,6	;RP1=0, select bank1
  2349  02B5  00D7               	movwf	((_cellVolt+1)^(0+128)+12)
  2350  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  2351  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  2352  02B8  0836               	movf	?___ftmul+2,w
  2353  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2354  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2355  02BB  00D8               	movwf	((_cellVolt+2)^(0+128)+12)
  2356                           
  2357                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2358  02BC  3004               	movlw	4
  2359  02BD  160A  158A  2587  120A  118A  	fcall	_sampleVoltage
  2360  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2361  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2362  02C4  0854               	movf	?_sampleVoltage,w
  2363  02C5  00E1               	movwf	_sampleBatteryCells$914
  2364  02C6  0855               	movf	?_sampleVoltage+1,w
  2365  02C7  00E2               	movwf	_sampleBatteryCells$914+1
  2366  02C8  0856               	movf	?_sampleVoltage+2,w
  2367  02C9  00E3               	movwf	_sampleBatteryCells$914+2
  2368                           
  2369                           ;PIC16F917 Battery Management.c: 111: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2370  02CA  0861               	movf	_sampleBatteryCells$914,w
  2371  02CB  00B4               	movwf	___ftmul@f1
  2372  02CC  0862               	movf	_sampleBatteryCells$914+1,w
  2373  02CD  00B5               	movwf	___ftmul@f1+1
  2374  02CE  0863               	movf	_sampleBatteryCells$914+2,w
  2375  02CF  00B6               	movwf	___ftmul@f1+2
  2376  02D0  3089               	movlw	low (_cellRDB-__stringbase)
  2377  02D1  0084               	movwf	4
  2378  02D2  160A  158A  2000  120A  118A  	fcall	stringdir
  2379  02D7  00A0               	movwf	___lwdiv@divisor
  2380  02D8  160A  158A  2000  120A  118A  	fcall	stringdir
  2381  02DD  00A1               	movwf	___lwdiv@divisor+1
  2382  02DE  3089               	movlw	low (_cellRDB-__stringbase)
  2383  02DF  0084               	movwf	4
  2384  02E0  160A  158A  2000  120A  118A  	fcall	stringdir
  2385  02E5  00DD               	movwf	??_sampleBatteryCells
  2386  02E6  160A  158A  2000  120A  118A  	fcall	stringdir
  2387  02EB  00DE               	movwf	??_sampleBatteryCells+1
  2388  02EC  3087               	movlw	low (_cell6RDT-__stringbase)
  2389  02ED  0084               	movwf	4
  2390  02EE  160A  158A  2000  120A  118A  	fcall	stringdir
  2391  02F3  00DF               	movwf	??_sampleBatteryCells+2
  2392  02F4  160A  158A  2000  120A  118A  	fcall	stringdir
  2393  02F9  00E0               	movwf	??_sampleBatteryCells+3
  2394  02FA  085D               	movf	??_sampleBatteryCells,w
  2395  02FB  075F               	addwf	??_sampleBatteryCells+2,w
  2396  02FC  00A2               	movwf	___lwdiv@dividend
  2397  02FD  085E               	movf	??_sampleBatteryCells+1,w
  2398  02FE  1803               	skipnc
  2399  02FF  0A5E               	incf	??_sampleBatteryCells+1,w
  2400  0300  0760               	addwf	??_sampleBatteryCells+3,w
  2401  0301  00A3               	movwf	___lwdiv@dividend+1
  2402  0302  120A  158A  200D  120A  118A  	fcall	___lwdiv
  2403  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0309  0821               	movf	?___lwdiv+1,w
  2406  030A  00A9               	movwf	___lwtoft@c+1
  2407  030B  0820               	movf	?___lwdiv,w
  2408  030C  00A8               	movwf	___lwtoft@c
  2409  030D  160A  158A  2125  120A  118A  	fcall	___lwtoft
  2410  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2411  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2412  0314  0828               	movf	?___lwtoft,w
  2413  0315  00B7               	movwf	___ftmul@f2
  2414  0316  0829               	movf	?___lwtoft+1,w
  2415  0317  00B8               	movwf	___ftmul@f2+1
  2416  0318  082A               	movf	?___lwtoft+2,w
  2417  0319  00B9               	movwf	___ftmul@f2+2
  2418  031A  160A  118A  226C   	fcall	___ftmul
  2419  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2420  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2421  031F  0834               	movf	?___ftmul,w
  2422  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2423  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2424  0322  00D9               	movwf	(_cellVolt^(0+128)+15)
  2425  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0324  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0325  0835               	movf	?___ftmul+1,w
  2428  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0327  1303               	bcf	3,6	;RP1=0, select bank1
  2430  0328  00DA               	movwf	((_cellVolt+1)^(0+128)+15)
  2431  0329  1283               	bcf	3,5	;RP0=0, select bank0
  2432  032A  1303               	bcf	3,6	;RP1=0, select bank0
  2433  032B  0836               	movf	?___ftmul+2,w
  2434  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2435  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2436  032E  00DB               	movwf	((_cellVolt+2)^(0+128)+15)
  2437                           
  2438                           ;PIC16F917 Battery Management.c: 113: RC3 = 0;
  2439  032F  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0330  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0331  1187               	bcf	7,3	;volatile
  2442                           
  2443                           ;PIC16F917 Battery Management.c: 115: RC2 = 0;
  2444  0332  1107               	bcf	7,2	;volatile
  2445  0333  0008               	return
  2446  0334                     __end_of_sampleBatteryCells:	
  2447                           
  2448                           	psect	text5
  2449  1D87                     __ptext5:	
  2450 ;; *************** function _sampleVoltage *****************
  2451 ;; Defined at:
  2452 ;;		line 145 in file "PIC16F917 Battery Management.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  chan            1    wreg     enum E2747
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  chan            1   56[BANK0 ] enum E2747
  2457 ;;  i               2   57[BANK0 ] int 
  2458 ;;  temp            2   59[BANK0 ] unsigned int 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  3   52[BANK0 ] float 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2468 ;;      Params:         0       4       0       0       0
  2469 ;;      Locals:         0       5       0       0       0
  2470 ;;      Temps:          0       0       0       0       0
  2471 ;;      Totals:         0       9       0       0       0
  2472 ;;Total ram usage:        9 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    4
  2475 ;; This function calls:
  2476 ;;		___ftdiv
  2477 ;;		___ftmul
  2478 ;;		___lwdiv
  2479 ;;		___lwtoft
  2480 ;;		_analogRead
  2481 ;; This function is called by:
  2482 ;;		_sampleBatteryCells
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           
  2487                           ;psect for function _sampleVoltage
  2488  1D87                     _sampleVoltage:	
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _sampleVoltage: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2492                           ;sampleVoltage@chan stored from wreg
  2493  1D87  1283               	bcf	3,5	;RP0=0, select bank0
  2494  1D88  1303               	bcf	3,6	;RP1=0, select bank0
  2495  1D89  00D8               	movwf	sampleVoltage@chan
  2496                           
  2497                           ;PIC16F917 Battery Management.c: 147: uint16_t temp = 0;
  2498  1D8A  01DB               	clrf	sampleVoltage@temp
  2499  1D8B  01DC               	clrf	sampleVoltage@temp+1
  2500                           
  2501                           ;PIC16F917 Battery Management.c: 149: for ( int i = 0; i <= 10; i++)
  2502  1D8C  01D9               	clrf	sampleVoltage@i
  2503  1D8D  01DA               	clrf	sampleVoltage@i+1
  2504  1D8E  085A               	movf	sampleVoltage@i+1,w
  2505  1D8F  3A80               	xorlw	128
  2506  1D90  00FF               	movwf	127
  2507  1D91  3080               	movlw	128
  2508  1D92  027F               	subwf	127,w
  2509  1D93  1D03               	skipz
  2510  1D94  2D97               	goto	u4015
  2511  1D95  300B               	movlw	11
  2512  1D96  0259               	subwf	sampleVoltage@i,w
  2513  1D97                     u4015:	
  2514  1D97  1803               	btfsc	3,0
  2515  1D98  2DBA               	goto	l3016
  2516  1D99                     l3010:	
  2517                           
  2518                           ;PIC16F917 Battery Management.c: 150: {
  2519                           ;PIC16F917 Battery Management.c: 151: temp += analogRead(chan);
  2520  1D99  1283               	bcf	3,5	;RP0=0, select bank0
  2521  1D9A  1303               	bcf	3,6	;RP1=0, select bank0
  2522  1D9B  0858               	movf	sampleVoltage@chan,w
  2523  1D9C  160A  158A  232F  160A  158A  	fcall	_analogRead
  2524  1DA1  1283               	bcf	3,5	;RP0=0, select bank0
  2525  1DA2  1303               	bcf	3,6	;RP1=0, select bank0
  2526  1DA3  0820               	movf	?_analogRead,w
  2527  1DA4  07DB               	addwf	sampleVoltage@temp,f
  2528  1DA5  1803               	skipnc
  2529  1DA6  0ADC               	incf	sampleVoltage@temp+1,f
  2530  1DA7  0821               	movf	?_analogRead+1,w
  2531  1DA8  07DC               	addwf	sampleVoltage@temp+1,f
  2532  1DA9  3001               	movlw	1
  2533  1DAA  07D9               	addwf	sampleVoltage@i,f
  2534  1DAB  1803               	skipnc
  2535  1DAC  0ADA               	incf	sampleVoltage@i+1,f
  2536  1DAD  3000               	movlw	0
  2537  1DAE  07DA               	addwf	sampleVoltage@i+1,f
  2538  1DAF  085A               	movf	sampleVoltage@i+1,w
  2539  1DB0  3A80               	xorlw	128
  2540  1DB1  00FF               	movwf	127
  2541  1DB2  3080               	movlw	128
  2542  1DB3  027F               	subwf	127,w
  2543  1DB4  1D03               	skipz
  2544  1DB5  2DB8               	goto	u4025
  2545  1DB6  300B               	movlw	11
  2546  1DB7  0259               	subwf	sampleVoltage@i,w
  2547  1DB8                     u4025:	
  2548  1DB8  1C03               	skipc
  2549  1DB9  2D99               	goto	l3010
  2550  1DBA                     l3016:	
  2551                           
  2552                           ;PIC16F917 Battery Management.c: 152: }
  2553                           ;PIC16F917 Battery Management.c: 154: temp = temp / 10;
  2554  1DBA  300A               	movlw	10
  2555  1DBB  1283               	bcf	3,5	;RP0=0, select bank0
  2556  1DBC  1303               	bcf	3,6	;RP1=0, select bank0
  2557  1DBD  00A0               	movwf	___lwdiv@divisor
  2558  1DBE  3000               	movlw	0
  2559  1DBF  00A1               	movwf	___lwdiv@divisor+1
  2560  1DC0  085C               	movf	sampleVoltage@temp+1,w
  2561  1DC1  00A3               	movwf	___lwdiv@dividend+1
  2562  1DC2  085B               	movf	sampleVoltage@temp,w
  2563  1DC3  00A2               	movwf	___lwdiv@dividend
  2564  1DC4  120A  158A  200D  160A  158A  	fcall	___lwdiv
  2565  1DC9  1283               	bcf	3,5	;RP0=0, select bank0
  2566  1DCA  1303               	bcf	3,6	;RP1=0, select bank0
  2567  1DCB  0821               	movf	?___lwdiv+1,w
  2568  1DCC  00DC               	movwf	sampleVoltage@temp+1
  2569  1DCD  0820               	movf	?___lwdiv,w
  2570  1DCE  00DB               	movwf	sampleVoltage@temp
  2571                           
  2572                           ;PIC16F917 Battery Management.c: 157: return (temp * supVolt)/1023;
  2573  1DCF  30C0               	movlw	192
  2574  1DD0  00C4               	movwf	___ftdiv@f2
  2575  1DD1  307F               	movlw	127
  2576  1DD2  00C5               	movwf	___ftdiv@f2+1
  2577  1DD3  3044               	movlw	68
  2578  1DD4  00C6               	movwf	___ftdiv@f2+2
  2579  1DD5  1683               	bsf	3,5	;RP0=1, select bank1
  2580  1DD6  1303               	bcf	3,6	;RP1=0, select bank1
  2581  1DD7  0869               	movf	_supVolt^(0+128),w
  2582  1DD8  1283               	bcf	3,5	;RP0=0, select bank0
  2583  1DD9  1303               	bcf	3,6	;RP1=0, select bank0
  2584  1DDA  00B4               	movwf	___ftmul@f1
  2585  1DDB  1683               	bsf	3,5	;RP0=1, select bank1
  2586  1DDC  1303               	bcf	3,6	;RP1=0, select bank1
  2587  1DDD  086A               	movf	(_supVolt+1)^(0+128),w
  2588  1DDE  1283               	bcf	3,5	;RP0=0, select bank0
  2589  1DDF  1303               	bcf	3,6	;RP1=0, select bank0
  2590  1DE0  00B5               	movwf	___ftmul@f1+1
  2591  1DE1  1683               	bsf	3,5	;RP0=1, select bank1
  2592  1DE2  1303               	bcf	3,6	;RP1=0, select bank1
  2593  1DE3  086B               	movf	(_supVolt+2)^(0+128),w
  2594  1DE4  1283               	bcf	3,5	;RP0=0, select bank0
  2595  1DE5  1303               	bcf	3,6	;RP1=0, select bank0
  2596  1DE6  00B6               	movwf	___ftmul@f1+2
  2597  1DE7  085C               	movf	sampleVoltage@temp+1,w
  2598  1DE8  00A9               	movwf	___lwtoft@c+1
  2599  1DE9  085B               	movf	sampleVoltage@temp,w
  2600  1DEA  00A8               	movwf	___lwtoft@c
  2601  1DEB  160A  158A  2125  160A  158A  	fcall	___lwtoft
  2602  1DF0  1283               	bcf	3,5	;RP0=0, select bank0
  2603  1DF1  1303               	bcf	3,6	;RP1=0, select bank0
  2604  1DF2  0828               	movf	?___lwtoft,w
  2605  1DF3  00B7               	movwf	___ftmul@f2
  2606  1DF4  0829               	movf	?___lwtoft+1,w
  2607  1DF5  00B8               	movwf	___ftmul@f2+1
  2608  1DF6  082A               	movf	?___lwtoft+2,w
  2609  1DF7  00B9               	movwf	___ftmul@f2+2
  2610  1DF8  160A  118A  226C  160A  158A  	fcall	___ftmul
  2611  1DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2612  1DFE  1303               	bcf	3,6	;RP1=0, select bank0
  2613  1DFF  0834               	movf	?___ftmul,w
  2614  1E00  00C7               	movwf	___ftdiv@f1
  2615  1E01  0835               	movf	?___ftmul+1,w
  2616  1E02  00C8               	movwf	___ftdiv@f1+1
  2617  1E03  0836               	movf	?___ftmul+2,w
  2618  1E04  00C9               	movwf	___ftdiv@f1+2
  2619  1E05  160A  158A  2748   	fcall	___ftdiv
  2620  1E08  1283               	bcf	3,5	;RP0=0, select bank0
  2621  1E09  1303               	bcf	3,6	;RP1=0, select bank0
  2622  1E0A  0844               	movf	?___ftdiv,w
  2623  1E0B  00D4               	movwf	?_sampleVoltage
  2624  1E0C  0845               	movf	?___ftdiv+1,w
  2625  1E0D  00D5               	movwf	?_sampleVoltage+1
  2626  1E0E  0846               	movf	?___ftdiv+2,w
  2627  1E0F  00D6               	movwf	?_sampleVoltage+2
  2628  1E10  0008               	return
  2629  1E11                     __end_of_sampleVoltage:	
  2630                           
  2631                           	psect	text6
  2632  1B2F                     __ptext6:	
  2633 ;; *************** function _analogRead *****************
  2634 ;; Defined at:
  2635 ;;		line 73 in file "adc.h"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  chan            1    wreg     unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  chan            1    4[BANK0 ] unsigned char 
  2640 ;;  returnVal       2    5[BANK0 ] unsigned int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  2    0[BANK0 ] unsigned int 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2650 ;;      Params:         0       2       0       0       0
  2651 ;;      Locals:         0       3       0       0       0
  2652 ;;      Temps:          0       2       0       0       0
  2653 ;;      Totals:         0       7       0       0       0
  2654 ;;Total ram usage:        7 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    2
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_sampleReference
  2661 ;;		_sampleVoltage
  2662 ;;		_sampleCurrent
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _analogRead
  2668  1B2F                     _analogRead:	
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2672                           ;analogRead@chan stored from wreg
  2673  1B2F  1283               	bcf	3,5	;RP0=0, select bank0
  2674  1B30  1303               	bcf	3,6	;RP1=0, select bank0
  2675  1B31  00A4               	movwf	analogRead@chan
  2676                           
  2677                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2678  1B32  0824               	movf	analogRead@chan,w
  2679  1B33  00A2               	movwf	??_analogRead
  2680  1B34  0DA2               	rlf	??_analogRead,f
  2681  1B35  0DA2               	rlf	??_analogRead,f
  2682  1B36  081F               	movf	31,w	;volatile
  2683  1B37  0622               	xorwf	??_analogRead,w
  2684  1B38  39E3               	andlw	-29
  2685  1B39  0622               	xorwf	??_analogRead,w
  2686  1B3A  009F               	movwf	31	;volatile
  2687                           
  2688                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2689  1B3B  141F               	bsf	31,0	;volatile
  2690                           
  2691                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2692  1B3C  3006               	movlw	6
  2693  1B3D  00A2               	movwf	??_analogRead
  2694  1B3E                     u4637:	
  2695  1B3E  0BA2               	decfsz	??_analogRead,f
  2696  1B3F  2B3E               	goto	u4637
  2697  1B40  0000               	nop
  2698                           
  2699                           ;adc.h: 81: ADCON0bits.GO = 1;
  2700  1B41  1283               	bcf	3,5	;RP0=0, select bank0
  2701  1B42  1303               	bcf	3,6	;RP1=0, select bank0
  2702  1B43  149F               	bsf	31,1	;volatile
  2703                           
  2704                           ;adc.h: 83: unsigned int returnVal = 0;
  2705  1B44  01A5               	clrf	analogRead@returnVal
  2706  1B45  01A6               	clrf	analogRead@returnVal+1
  2707  1B46                     l185:	
  2708                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2709                           
  2710  1B46  189F               	btfsc	31,1	;volatile
  2711  1B47  2B46               	goto	l185
  2712                           
  2713                           ;adc.h: 89: returnVal = ADRESH;
  2714  1B48  081E               	movf	30,w	;volatile
  2715  1B49  00A2               	movwf	??_analogRead
  2716  1B4A  01A3               	clrf	??_analogRead+1
  2717  1B4B  0822               	movf	??_analogRead,w
  2718  1B4C  00A5               	movwf	analogRead@returnVal
  2719  1B4D  0823               	movf	??_analogRead+1,w
  2720  1B4E  00A6               	movwf	analogRead@returnVal+1
  2721                           
  2722                           ;adc.h: 90: returnVal = returnVal << 8;
  2723  1B4F  0825               	movf	analogRead@returnVal,w
  2724  1B50  00A3               	movwf	??_analogRead+1
  2725  1B51  01A2               	clrf	??_analogRead
  2726  1B52  0822               	movf	??_analogRead,w
  2727  1B53  00A5               	movwf	analogRead@returnVal
  2728  1B54  0823               	movf	??_analogRead+1,w
  2729  1B55  00A6               	movwf	analogRead@returnVal+1
  2730                           
  2731                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2732  1B56  0825               	movf	analogRead@returnVal,w
  2733  1B57  1683               	bsf	3,5	;RP0=1, select bank1
  2734  1B58  1303               	bcf	3,6	;RP1=0, select bank1
  2735  1B59  041E               	iorwf	30,w	;volatile
  2736  1B5A  1283               	bcf	3,5	;RP0=0, select bank0
  2737  1B5B  1303               	bcf	3,6	;RP1=0, select bank0
  2738  1B5C  00A2               	movwf	??_analogRead
  2739  1B5D  0826               	movf	analogRead@returnVal+1,w
  2740  1B5E  00A3               	movwf	??_analogRead+1
  2741  1B5F  0822               	movf	??_analogRead,w
  2742  1B60  00A5               	movwf	analogRead@returnVal
  2743  1B61  0823               	movf	??_analogRead+1,w
  2744  1B62  00A6               	movwf	analogRead@returnVal+1
  2745                           
  2746                           ;adc.h: 93: return returnVal;
  2747  1B63  0826               	movf	analogRead@returnVal+1,w
  2748  1B64  00A1               	movwf	?_analogRead+1
  2749  1B65  0825               	movf	analogRead@returnVal,w
  2750  1B66  00A0               	movwf	?_analogRead
  2751  1B67  0008               	return
  2752  1B68                     __end_of_analogRead:	
  2753                           
  2754                           	psect	text7
  2755  1925                     __ptext7:	
  2756 ;; *************** function ___lwtoft *****************
  2757 ;; Defined at:
  2758 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  c               2    8[BANK0 ] unsigned int 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  3    8[BANK0 ] float 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0, pclath, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2772 ;;      Params:         0       3       0       0       0
  2773 ;;      Locals:         0       0       0       0       0
  2774 ;;      Temps:          0       1       0       0       0
  2775 ;;      Totals:         0       4       0       0       0
  2776 ;;Total ram usage:        4 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    3
  2779 ;; This function calls:
  2780 ;;		___ftpack
  2781 ;; This function is called by:
  2782 ;;		_sampleBatteryCells
  2783 ;;		_sampleReference
  2784 ;;		_sampleVoltage
  2785 ;;		_sampleCurrent
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           
  2790                           ;psect for function ___lwtoft
  2791  1925                     ___lwtoft:	
  2792                           
  2793                           ;incstack = 0
  2794                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2795  1925  1283               	bcf	3,5	;RP0=0, select bank0
  2796  1926  1303               	bcf	3,6	;RP1=0, select bank0
  2797  1927  0828               	movf	___lwtoft@c,w
  2798  1928  00A0               	movwf	___ftpack@arg
  2799  1929  0829               	movf	___lwtoft@c+1,w
  2800  192A  00A1               	movwf	___ftpack@arg+1
  2801  192B  01A2               	clrf	___ftpack@arg+2
  2802  192C  308E               	movlw	142
  2803  192D  00AB               	movwf	??___lwtoft
  2804  192E  082B               	movf	??___lwtoft,w
  2805  192F  00A3               	movwf	___ftpack@exp
  2806  1930  01A4               	clrf	___ftpack@sign
  2807  1931  160A  158A  2519   	fcall	___ftpack
  2808  1934  1283               	bcf	3,5	;RP0=0, select bank0
  2809  1935  1303               	bcf	3,6	;RP1=0, select bank0
  2810  1936  0820               	movf	?___ftpack,w
  2811  1937  00A8               	movwf	?___lwtoft
  2812  1938  0821               	movf	?___ftpack+1,w
  2813  1939  00A9               	movwf	?___lwtoft+1
  2814  193A  0822               	movf	?___ftpack+2,w
  2815  193B  00AA               	movwf	?___lwtoft+2
  2816  193C  0008               	return
  2817  193D                     __end_of___lwtoft:	
  2818                           
  2819                           	psect	text8
  2820  080D                     __ptext8:	
  2821 ;; *************** function ___lwdiv *****************
  2822 ;; Defined at:
  2823 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;  divisor         2    0[BANK0 ] unsigned int 
  2826 ;;  dividend        2    2[BANK0 ] unsigned int 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  quotient        2    5[BANK0 ] unsigned int 
  2829 ;;  counter         1    7[BANK0 ] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2    0[BANK0 ] unsigned int 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2839 ;;      Params:         0       4       0       0       0
  2840 ;;      Locals:         0       3       0       0       0
  2841 ;;      Temps:          0       1       0       0       0
  2842 ;;      Totals:         0       8       0       0       0
  2843 ;;Total ram usage:        8 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_sampleBatteryCells
  2850 ;;		_sampleReference
  2851 ;;		_sampleVoltage
  2852 ;;		_sampleCurrent
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function ___lwdiv
  2858  080D                     ___lwdiv:	
  2859                           
  2860                           ;incstack = 0
  2861                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2862  080D  1283               	bcf	3,5	;RP0=0, select bank0
  2863  080E  1303               	bcf	3,6	;RP1=0, select bank0
  2864  080F  01A5               	clrf	___lwdiv@quotient
  2865  0810  01A6               	clrf	___lwdiv@quotient+1
  2866  0811  0820               	movf	___lwdiv@divisor,w
  2867  0812  0421               	iorwf	___lwdiv@divisor+1,w
  2868  0813  1903               	btfsc	3,2
  2869  0814  2846               	goto	l2902
  2870  0815  01A7               	clrf	___lwdiv@counter
  2871  0816  0AA7               	incf	___lwdiv@counter,f
  2872  0817                     l2890:	
  2873  0817  1BA1               	btfsc	___lwdiv@divisor+1,7
  2874  0818  2825               	goto	l2892
  2875  0819  3001               	movlw	1
  2876  081A                     u3895:	
  2877  081A  1003               	clrc
  2878  081B  0DA0               	rlf	___lwdiv@divisor,f
  2879  081C  0DA1               	rlf	___lwdiv@divisor+1,f
  2880  081D  3EFF               	addlw	-1
  2881  081E  1D03               	skipz
  2882  081F  281A               	goto	u3895
  2883  0820  3001               	movlw	1
  2884  0821  00A4               	movwf	??___lwdiv
  2885  0822  0824               	movf	??___lwdiv,w
  2886  0823  07A7               	addwf	___lwdiv@counter,f
  2887  0824  2817               	goto	l2890
  2888  0825                     l2892:	
  2889  0825  3001               	movlw	1
  2890  0826                     u3915:	
  2891  0826  1003               	clrc
  2892  0827  0DA5               	rlf	___lwdiv@quotient,f
  2893  0828  0DA6               	rlf	___lwdiv@quotient+1,f
  2894  0829  3EFF               	addlw	-1
  2895  082A  1D03               	skipz
  2896  082B  2826               	goto	u3915
  2897  082C  0821               	movf	___lwdiv@divisor+1,w
  2898  082D  0223               	subwf	___lwdiv@dividend+1,w
  2899  082E  1D03               	skipz
  2900  082F  2832               	goto	u3925
  2901  0830  0820               	movf	___lwdiv@divisor,w
  2902  0831  0222               	subwf	___lwdiv@dividend,w
  2903  0832                     u3925:	
  2904  0832  1C03               	skipc
  2905  0833  283B               	goto	l2898
  2906  0834  0820               	movf	___lwdiv@divisor,w
  2907  0835  02A2               	subwf	___lwdiv@dividend,f
  2908  0836  0821               	movf	___lwdiv@divisor+1,w
  2909  0837  1C03               	skipc
  2910  0838  03A3               	decf	___lwdiv@dividend+1,f
  2911  0839  02A3               	subwf	___lwdiv@dividend+1,f
  2912  083A  1425               	bsf	___lwdiv@quotient,0
  2913  083B                     l2898:	
  2914  083B  3001               	movlw	1
  2915  083C                     u3935:	
  2916  083C  1003               	clrc
  2917  083D  0CA1               	rrf	___lwdiv@divisor+1,f
  2918  083E  0CA0               	rrf	___lwdiv@divisor,f
  2919  083F  3EFF               	addlw	-1
  2920  0840  1D03               	skipz
  2921  0841  283C               	goto	u3935
  2922  0842  3001               	movlw	1
  2923  0843  02A7               	subwf	___lwdiv@counter,f
  2924  0844  1D03               	btfss	3,2
  2925  0845  2825               	goto	l2892
  2926  0846                     l2902:	
  2927  0846  0826               	movf	___lwdiv@quotient+1,w
  2928  0847  00A1               	movwf	?___lwdiv+1
  2929  0848  0825               	movf	___lwdiv@quotient,w
  2930  0849  00A0               	movwf	?___lwdiv
  2931  084A  0008               	return
  2932  084B                     __end_of___lwdiv:	
  2933                           
  2934                           	psect	text9
  2935  1F48                     __ptext9:	
  2936 ;; *************** function ___ftdiv *****************
  2937 ;; Defined at:
  2938 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  f2              3   36[BANK0 ] float 
  2941 ;;  f1              3   39[BANK0 ] float 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  f3              3   47[BANK0 ] float 
  2944 ;;  sign            1   51[BANK0 ] unsigned char 
  2945 ;;  exp             1   50[BANK0 ] unsigned char 
  2946 ;;  cntr            1   46[BANK0 ] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  3   36[BANK0 ] float 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, pclath, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2956 ;;      Params:         0       6       0       0       0
  2957 ;;      Locals:         0       6       0       0       0
  2958 ;;      Temps:          0       4       0       0       0
  2959 ;;      Totals:         0      16       0       0       0
  2960 ;;Total ram usage:       16 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    3
  2963 ;; This function calls:
  2964 ;;		___ftpack
  2965 ;; This function is called by:
  2966 ;;		_sampleReference
  2967 ;;		_sampleVoltage
  2968 ;;		_sampleCurrent
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function ___ftdiv
  2974  1F48                     ___ftdiv:	
  2975                           
  2976                           ;incstack = 0
  2977                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2978  1F48  1283               	bcf	3,5	;RP0=0, select bank0
  2979  1F49  1303               	bcf	3,6	;RP1=0, select bank0
  2980  1F4A  0847               	movf	___ftdiv@f1,w
  2981  1F4B  00CA               	movwf	??___ftdiv
  2982  1F4C  0848               	movf	___ftdiv@f1+1,w
  2983  1F4D  00CB               	movwf	??___ftdiv+1
  2984  1F4E  0849               	movf	___ftdiv@f1+2,w
  2985  1F4F  00CC               	movwf	??___ftdiv+2
  2986  1F50  1003               	clrc
  2987  1F51  0D4B               	rlf	??___ftdiv+1,w
  2988  1F52  0D4C               	rlf	??___ftdiv+2,w
  2989  1F53  00CD               	movwf	??___ftdiv+3
  2990  1F54  084D               	movf	??___ftdiv+3,w
  2991  1F55  00D2               	movwf	___ftdiv@exp
  2992  1F56  0852               	movf	___ftdiv@exp,w
  2993  1F57  1D03               	btfss	3,2
  2994  1F58  2F60               	goto	l2712
  2995  1F59  3000               	movlw	0
  2996  1F5A  00C4               	movwf	?___ftdiv
  2997  1F5B  3000               	movlw	0
  2998  1F5C  00C5               	movwf	?___ftdiv+1
  2999  1F5D  3000               	movlw	0
  3000  1F5E  00C6               	movwf	?___ftdiv+2
  3001  1F5F  0008               	return
  3002  1F60                     l2712:	
  3003  1F60  0844               	movf	___ftdiv@f2,w
  3004  1F61  00CA               	movwf	??___ftdiv
  3005  1F62  0845               	movf	___ftdiv@f2+1,w
  3006  1F63  00CB               	movwf	??___ftdiv+1
  3007  1F64  0846               	movf	___ftdiv@f2+2,w
  3008  1F65  00CC               	movwf	??___ftdiv+2
  3009  1F66  1003               	clrc
  3010  1F67  0D4B               	rlf	??___ftdiv+1,w
  3011  1F68  0D4C               	rlf	??___ftdiv+2,w
  3012  1F69  00CD               	movwf	??___ftdiv+3
  3013  1F6A  084D               	movf	??___ftdiv+3,w
  3014  1F6B  00D3               	movwf	___ftdiv@sign
  3015  1F6C  0853               	movf	___ftdiv@sign,w
  3016  1F6D  1D03               	btfss	3,2
  3017  1F6E  2F76               	goto	l2718
  3018  1F6F  3000               	movlw	0
  3019  1F70  00C4               	movwf	?___ftdiv
  3020  1F71  3000               	movlw	0
  3021  1F72  00C5               	movwf	?___ftdiv+1
  3022  1F73  3000               	movlw	0
  3023  1F74  00C6               	movwf	?___ftdiv+2
  3024  1F75  0008               	return
  3025  1F76                     l2718:	
  3026  1F76  3000               	movlw	0
  3027  1F77  00CF               	movwf	___ftdiv@f3
  3028  1F78  3000               	movlw	0
  3029  1F79  00D0               	movwf	___ftdiv@f3+1
  3030  1F7A  3000               	movlw	0
  3031  1F7B  00D1               	movwf	___ftdiv@f3+2
  3032  1F7C  3089               	movlw	137
  3033  1F7D  0753               	addwf	___ftdiv@sign,w
  3034  1F7E  00CA               	movwf	??___ftdiv
  3035  1F7F  084A               	movf	??___ftdiv,w
  3036  1F80  02D2               	subwf	___ftdiv@exp,f
  3037  1F81  0847               	movf	___ftdiv@f1,w
  3038  1F82  00CA               	movwf	??___ftdiv
  3039  1F83  0848               	movf	___ftdiv@f1+1,w
  3040  1F84  00CB               	movwf	??___ftdiv+1
  3041  1F85  0849               	movf	___ftdiv@f1+2,w
  3042  1F86  00CC               	movwf	??___ftdiv+2
  3043  1F87  3010               	movlw	16
  3044  1F88                     u3505:	
  3045  1F88  1003               	clrc
  3046  1F89  0CCC               	rrf	??___ftdiv+2,f
  3047  1F8A  0CCB               	rrf	??___ftdiv+1,f
  3048  1F8B  0CCA               	rrf	??___ftdiv,f
  3049  1F8C  3EFF               	addlw	-1
  3050  1F8D  1D03               	skipz
  3051  1F8E  2F88               	goto	u3505
  3052  1F8F  084A               	movf	??___ftdiv,w
  3053  1F90  00CD               	movwf	??___ftdiv+3
  3054  1F91  084D               	movf	??___ftdiv+3,w
  3055  1F92  00D3               	movwf	___ftdiv@sign
  3056  1F93  0844               	movf	___ftdiv@f2,w
  3057  1F94  00CA               	movwf	??___ftdiv
  3058  1F95  0845               	movf	___ftdiv@f2+1,w
  3059  1F96  00CB               	movwf	??___ftdiv+1
  3060  1F97  0846               	movf	___ftdiv@f2+2,w
  3061  1F98  00CC               	movwf	??___ftdiv+2
  3062  1F99  3010               	movlw	16
  3063  1F9A                     u3515:	
  3064  1F9A  1003               	clrc
  3065  1F9B  0CCC               	rrf	??___ftdiv+2,f
  3066  1F9C  0CCB               	rrf	??___ftdiv+1,f
  3067  1F9D  0CCA               	rrf	??___ftdiv,f
  3068  1F9E  3EFF               	addlw	-1
  3069  1F9F  1D03               	skipz
  3070  1FA0  2F9A               	goto	u3515
  3071  1FA1  084A               	movf	??___ftdiv,w
  3072  1FA2  00CD               	movwf	??___ftdiv+3
  3073  1FA3  084D               	movf	??___ftdiv+3,w
  3074  1FA4  06D3               	xorwf	___ftdiv@sign,f
  3075  1FA5  3080               	movlw	128
  3076  1FA6  00CA               	movwf	??___ftdiv
  3077  1FA7  084A               	movf	??___ftdiv,w
  3078  1FA8  05D3               	andwf	___ftdiv@sign,f
  3079  1FA9  17C8               	bsf	___ftdiv@f1+1,7
  3080  1FAA  30FF               	movlw	255
  3081  1FAB  05C7               	andwf	___ftdiv@f1,f
  3082  1FAC  30FF               	movlw	255
  3083  1FAD  05C8               	andwf	___ftdiv@f1+1,f
  3084  1FAE  3000               	movlw	0
  3085  1FAF  05C9               	andwf	___ftdiv@f1+2,f
  3086  1FB0  17C5               	bsf	___ftdiv@f2+1,7
  3087  1FB1  30FF               	movlw	255
  3088  1FB2  05C4               	andwf	___ftdiv@f2,f
  3089  1FB3  30FF               	movlw	255
  3090  1FB4  05C5               	andwf	___ftdiv@f2+1,f
  3091  1FB5  3000               	movlw	0
  3092  1FB6  05C6               	andwf	___ftdiv@f2+2,f
  3093  1FB7  3018               	movlw	24
  3094  1FB8  00CA               	movwf	??___ftdiv
  3095  1FB9  084A               	movf	??___ftdiv,w
  3096  1FBA  00CE               	movwf	___ftdiv@cntr
  3097  1FBB                     l2732:	
  3098  1FBB  3001               	movlw	1
  3099  1FBC                     u3525:	
  3100  1FBC  1003               	clrc
  3101  1FBD  0DCF               	rlf	___ftdiv@f3,f
  3102  1FBE  0DD0               	rlf	___ftdiv@f3+1,f
  3103  1FBF  0DD1               	rlf	___ftdiv@f3+2,f
  3104  1FC0  3EFF               	addlw	-1
  3105  1FC1  1D03               	skipz
  3106  1FC2  2FBC               	goto	u3525
  3107  1FC3  0846               	movf	___ftdiv@f2+2,w
  3108  1FC4  0249               	subwf	___ftdiv@f1+2,w
  3109  1FC5  1D03               	skipz
  3110  1FC6  2FCD               	goto	u3535
  3111  1FC7  0845               	movf	___ftdiv@f2+1,w
  3112  1FC8  0248               	subwf	___ftdiv@f1+1,w
  3113  1FC9  1D03               	skipz
  3114  1FCA  2FCD               	goto	u3535
  3115  1FCB  0844               	movf	___ftdiv@f2,w
  3116  1FCC  0247               	subwf	___ftdiv@f1,w
  3117  1FCD                     u3535:	
  3118  1FCD  1C03               	skipc
  3119  1FCE  2FDA               	goto	l2740
  3120  1FCF  0844               	movf	___ftdiv@f2,w
  3121  1FD0  02C7               	subwf	___ftdiv@f1,f
  3122  1FD1  0845               	movf	___ftdiv@f2+1,w
  3123  1FD2  1C03               	skipc
  3124  1FD3  0F45               	incfsz	___ftdiv@f2+1,w
  3125  1FD4  02C8               	subwf	___ftdiv@f1+1,f
  3126  1FD5  0846               	movf	___ftdiv@f2+2,w
  3127  1FD6  1C03               	skipc
  3128  1FD7  0A46               	incf	___ftdiv@f2+2,w
  3129  1FD8  02C9               	subwf	___ftdiv@f1+2,f
  3130  1FD9  144F               	bsf	___ftdiv@f3,0
  3131  1FDA                     l2740:	
  3132  1FDA  3001               	movlw	1
  3133  1FDB                     u3545:	
  3134  1FDB  1003               	clrc
  3135  1FDC  0DC7               	rlf	___ftdiv@f1,f
  3136  1FDD  0DC8               	rlf	___ftdiv@f1+1,f
  3137  1FDE  0DC9               	rlf	___ftdiv@f1+2,f
  3138  1FDF  3EFF               	addlw	-1
  3139  1FE0  1D03               	skipz
  3140  1FE1  2FDB               	goto	u3545
  3141  1FE2  3001               	movlw	1
  3142  1FE3  02CE               	subwf	___ftdiv@cntr,f
  3143  1FE4  1D03               	btfss	3,2
  3144  1FE5  2FBB               	goto	l2732
  3145  1FE6  084F               	movf	___ftdiv@f3,w
  3146  1FE7  00A0               	movwf	___ftpack@arg
  3147  1FE8  0850               	movf	___ftdiv@f3+1,w
  3148  1FE9  00A1               	movwf	___ftpack@arg+1
  3149  1FEA  0851               	movf	___ftdiv@f3+2,w
  3150  1FEB  00A2               	movwf	___ftpack@arg+2
  3151  1FEC  0852               	movf	___ftdiv@exp,w
  3152  1FED  00CA               	movwf	??___ftdiv
  3153  1FEE  084A               	movf	??___ftdiv,w
  3154  1FEF  00A3               	movwf	___ftpack@exp
  3155  1FF0  0853               	movf	___ftdiv@sign,w
  3156  1FF1  00CB               	movwf	??___ftdiv+1
  3157  1FF2  084B               	movf	??___ftdiv+1,w
  3158  1FF3  00A4               	movwf	___ftpack@sign
  3159  1FF4  160A  158A  2519   	fcall	___ftpack
  3160  1FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3161  1FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3162  1FF9  0820               	movf	?___ftpack,w
  3163  1FFA  00C4               	movwf	?___ftdiv
  3164  1FFB  0821               	movf	?___ftpack+1,w
  3165  1FFC  00C5               	movwf	?___ftdiv+1
  3166  1FFD  0822               	movf	?___ftpack+2,w
  3167  1FFE  00C6               	movwf	?___ftdiv+2
  3168  1FFF  0008               	return
  3169  2000                     __end_of___ftdiv:	
  3170                           
  3171                           	psect	text10
  3172  1ABE                     __ptext10:	
  3173 ;; *************** function _initController *****************
  3174 ;; Defined at:
  3175 ;;		line 211 in file "setup.h"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;		None               void
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0, pclath, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3189 ;;      Params:         0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0
  3192 ;;      Totals:         0       0       0       0       0
  3193 ;;Total ram usage:        0 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    5
  3196 ;; This function calls:
  3197 ;;		_initADC
  3198 ;;		_initLCD
  3199 ;;		_timeSetup
  3200 ;; This function is called by:
  3201 ;;		_main
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           
  3206                           ;psect for function _initController
  3207  1ABE                     _initController:	
  3208                           
  3209                           ;setup.h: 214: OSCCONbits.IRCF = 0b111;
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  3213  1ABE  3070               	movlw	112
  3214  1ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3215  1AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3216  1AC1  048F               	iorwf	15,f	;volatile
  3217                           
  3218                           ;setup.h: 215: OSCCONbits.SCS = 0;
  3219  1AC2  100F               	bcf	15,0	;volatile
  3220                           
  3221                           ;setup.h: 218: TRISA = 0b00111111;
  3222  1AC3  303F               	movlw	63
  3223  1AC4  0085               	movwf	5	;volatile
  3224                           
  3225                           ;setup.h: 219: TRISB = 0b00000000;
  3226  1AC5  0186               	clrf	6	;volatile
  3227                           
  3228                           ;setup.h: 220: TRISC = 0b00000000;
  3229  1AC6  0187               	clrf	7	;volatile
  3230                           
  3231                           ;setup.h: 221: TRISD = 0b00100000;
  3232  1AC7  3020               	movlw	32
  3233  1AC8  0088               	movwf	8	;volatile
  3234                           
  3235                           ;setup.h: 222: TRISE = 0b00000111;
  3236  1AC9  3007               	movlw	7
  3237  1ACA  0089               	movwf	9	;volatile
  3238                           
  3239                           ;setup.h: 224: ANSEL = 0xFF;
  3240  1ACB  30FF               	movlw	255
  3241  1ACC  0091               	movwf	17	;volatile
  3242                           
  3243                           ;setup.h: 226: PORTA = 0;
  3244  1ACD  1283               	bcf	3,5	;RP0=0, select bank0
  3245  1ACE  1303               	bcf	3,6	;RP1=0, select bank0
  3246  1ACF  0185               	clrf	5	;volatile
  3247                           
  3248                           ;setup.h: 227: PORTB = 0;
  3249  1AD0  0186               	clrf	6	;volatile
  3250                           
  3251                           ;setup.h: 228: PORTC = 0;
  3252  1AD1  0187               	clrf	7	;volatile
  3253                           
  3254                           ;setup.h: 229: PORTD = 0;
  3255  1AD2  0188               	clrf	8	;volatile
  3256                           
  3257                           ;setup.h: 230: PORTE = 0;
  3258  1AD3  0189               	clrf	9	;volatile
  3259                           
  3260                           ;setup.h: 232: CMCON0bits.CM = 0b111;
  3261  1AD4  3007               	movlw	7
  3262  1AD5  1683               	bsf	3,5	;RP0=1, select bank1
  3263  1AD6  1303               	bcf	3,6	;RP1=0, select bank1
  3264  1AD7  049C               	iorwf	28,f	;volatile
  3265                           
  3266                           ;setup.h: 233: LCDCON = 0;
  3267  1AD8  1283               	bcf	3,5	;RP0=0, select bank2
  3268  1AD9  1703               	bsf	3,6	;RP1=1, select bank2
  3269  1ADA  0187               	clrf	7	;volatile
  3270                           
  3271                           ;setup.h: 234: LVDCONbits.LVDEN = 0;
  3272  1ADB  1209               	bcf	9,4	;volatile
  3273                           
  3274                           ;setup.h: 235: CCP1CON = 0;
  3275  1ADC  1283               	bcf	3,5	;RP0=0, select bank0
  3276  1ADD  1303               	bcf	3,6	;RP1=0, select bank0
  3277  1ADE  0197               	clrf	23	;volatile
  3278                           
  3279                           ;setup.h: 236: CCP2CON = 0;
  3280  1ADF  019D               	clrf	29	;volatile
  3281                           
  3282                           ;setup.h: 237: OPTION_REGbits.nRBPU = 1;
  3283  1AE0  1683               	bsf	3,5	;RP0=1, select bank1
  3284  1AE1  1303               	bcf	3,6	;RP1=0, select bank1
  3285  1AE2  1781               	bsf	1,7	;volatile
  3286                           
  3287                           ;setup.h: 239: RD2 = 0;
  3288  1AE3  1283               	bcf	3,5	;RP0=0, select bank0
  3289  1AE4  1303               	bcf	3,6	;RP1=0, select bank0
  3290  1AE5  1108               	bcf	8,2	;volatile
  3291                           
  3292                           ;setup.h: 241: RD6 = 0;
  3293  1AE6  1308               	bcf	8,6	;volatile
  3294                           
  3295                           ;setup.h: 244: RC0 = 1;
  3296  1AE7  1407               	bsf	7,0	;volatile
  3297                           
  3298                           ;setup.h: 247: initADC();
  3299  1AE8  160A  158A  20BB  160A  158A  	fcall	_initADC
  3300                           
  3301                           ;setup.h: 249: timeSetup();
  3302  1AED  120A  158A  2001  160A  158A  	fcall	_timeSetup
  3303                           
  3304                           ;setup.h: 251: initLCD();
  3305  1AF2  160A  158A  269F   	fcall	_initLCD
  3306  1AF5  0008               	return
  3307  1AF6                     __end_of_initController:	
  3308                           
  3309                           	psect	text11
  3310  0801                     __ptext11:	
  3311 ;; *************** function _timeSetup *****************
  3312 ;; Defined at:
  3313 ;;		line 49 in file "timer0.h"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;		None               void
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3327 ;;      Params:         0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0
  3330 ;;      Totals:         0       0       0       0       0
  3331 ;;Total ram usage:        0 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    2
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_initController
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           
  3342                           ;psect for function _timeSetup
  3343  0801                     _timeSetup:	
  3344                           
  3345                           ;timer0.h: 51: OPTION_REGbits.T0CS = 0;
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _timeSetup: [wreg+status,2+status,0]
  3349  0801  1683               	bsf	3,5	;RP0=1, select bank1
  3350  0802  1303               	bcf	3,6	;RP1=0, select bank1
  3351  0803  1281               	bcf	1,5	;volatile
  3352                           
  3353                           ;timer0.h: 52: OPTION_REGbits.T0SE = 1;
  3354  0804  1601               	bsf	1,4	;volatile
  3355                           
  3356                           ;timer0.h: 53: OPTION_REGbits.PSA = 0 ;
  3357  0805  1181               	bcf	1,3	;volatile
  3358                           
  3359                           ;timer0.h: 54: OPTION_REGbits.PS = 0b111;
  3360  0806  3007               	movlw	7
  3361  0807  0481               	iorwf	1,f	;volatile
  3362                           
  3363                           ;timer0.h: 57: INTCONbits.T0IE = 1;
  3364  0808  168B               	bsf	11,5	;volatile
  3365                           
  3366                           ;timer0.h: 58: INTCONbits.T0IF = 0;
  3367  0809  110B               	bcf	11,2	;volatile
  3368                           
  3369                           ;timer0.h: 59: INTCONbits.PEIE = 1;
  3370  080A  170B               	bsf	11,6	;volatile
  3371                           
  3372                           ;timer0.h: 60: INTCONbits.GIE = 1;
  3373  080B  178B               	bsf	11,7	;volatile
  3374  080C  0008               	return
  3375  080D                     __end_of_timeSetup:	
  3376                           
  3377                           	psect	text12
  3378  18BB                     __ptext12:	
  3379 ;; *************** function _initADC *****************
  3380 ;; Defined at:
  3381 ;;		line 56 in file "adc.h"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		wreg, status,2
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3395 ;;      Params:         0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0
  3398 ;;      Totals:         0       0       0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    2
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_initController
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           
  3410                           ;psect for function _initADC
  3411  18BB                     _initADC:	
  3412                           
  3413                           ;adc.h: 58: ADCON0 = 0b10000001;
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in _initADC: [wreg+status,2]
  3417  18BB  3081               	movlw	129
  3418  18BC  1283               	bcf	3,5	;RP0=0, select bank0
  3419  18BD  1303               	bcf	3,6	;RP1=0, select bank0
  3420  18BE  009F               	movwf	31	;volatile
  3421                           
  3422                           ;adc.h: 65: ADCON1 = 0b01110000;
  3423  18BF  3070               	movlw	112
  3424  18C0  1683               	bsf	3,5	;RP0=1, select bank1
  3425  18C1  1303               	bcf	3,6	;RP1=0, select bank1
  3426  18C2  009F               	movwf	31	;volatile
  3427                           
  3428                           ;adc.h: 68: ADRESH = 0x00;
  3429  18C3  1283               	bcf	3,5	;RP0=0, select bank0
  3430  18C4  1303               	bcf	3,6	;RP1=0, select bank0
  3431  18C5  019E               	clrf	30	;volatile
  3432                           
  3433                           ;adc.h: 69: ADRESL = 0x00;
  3434  18C6  1683               	bsf	3,5	;RP0=1, select bank1
  3435  18C7  1303               	bcf	3,6	;RP1=0, select bank1
  3436  18C8  019E               	clrf	30	;volatile
  3437  18C9  0008               	return
  3438  18CA                     __end_of_initADC:	
  3439                           
  3440                           	psect	text13
  3441  1C5E                     __ptext13:	
  3442 ;; *************** function _handlePB *****************
  3443 ;; Defined at:
  3444 ;;		line 328 in file "PIC16F917 Battery Management.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;		None               void
  3451 ;; Registers used:
  3452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         0       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0
  3460 ;;      Temps:          0       0       3       0       0
  3461 ;;      Totals:         0       0       3       0       0
  3462 ;;Total ram usage:        3 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    5
  3465 ;; This function calls:
  3466 ;;		_initLCD
  3467 ;;		_stopWatch
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _handlePB
  3475  1C5E                     _handlePB:	
  3476                           
  3477                           ;PIC16F917 Battery Management.c: 330: if( RD5 == 1 )
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _handlePB: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3481  1C5E  1283               	bcf	3,5	;RP0=0, select bank0
  3482  1C5F  1303               	bcf	3,6	;RP1=0, select bank0
  3483  1C60  1A88               	btfsc	8,5	;volatile
  3484  1C61  0008               	return
  3485                           
  3486                           ;PIC16F917 Battery Management.c: 333: _delay((unsigned long)((50)*(8000000/4000.0)));
  3487                           
  3488                           ;PIC16F917 Battery Management.c: 331: return;
  3489  1C62  3082               	movlw	130
  3490  1C63  1683               	bsf	3,5	;RP0=1, select bank1
  3491  1C64  1303               	bcf	3,6	;RP1=0, select bank1
  3492  1C65  00A1               	movwf	(??_handlePB^(0+128)+1)
  3493  1C66  30DD               	movlw	221
  3494  1C67  00A0               	movwf	??_handlePB^(0+128)
  3495  1C68                     u4647:	
  3496  1C68  0BA0               	decfsz	??_handlePB^(0+128),f
  3497  1C69  2C68               	goto	u4647
  3498  1C6A  0BA1               	decfsz	(??_handlePB^(0+128)+1),f
  3499  1C6B  2C68               	goto	u4647
  3500  1C6C  2C6D               	nop2
  3501                           
  3502                           ;PIC16F917 Battery Management.c: 335: if( RD5 == 1 )
  3503  1C6D  1283               	bcf	3,5	;RP0=0, select bank0
  3504  1C6E  1303               	bcf	3,6	;RP1=0, select bank0
  3505  1C6F  1A88               	btfsc	8,5	;volatile
  3506  1C70  0008               	return
  3507                           
  3508                           ;PIC16F917 Battery Management.c: 338: stopWatch(0);
  3509                           
  3510                           ;PIC16F917 Battery Management.c: 336: return;
  3511  1C71  3000               	movlw	0
  3512  1C72  160A  118A  233F  160A  158A  	fcall	_stopWatch
  3513  1C77                     l272:	
  3514                           ;PIC16F917 Battery Management.c: 339: while( RD5 == 0 )
  3515                           
  3516  1C77  1283               	bcf	3,5	;RP0=0, select bank0
  3517  1C78  1303               	bcf	3,6	;RP1=0, select bank0
  3518  1C79  1A88               	btfsc	8,5	;volatile
  3519  1C7A  2CAE               	goto	l3404
  3520                           
  3521                           ;PIC16F917 Battery Management.c: 340: {
  3522                           ;PIC16F917 Battery Management.c: 341: if(stopWatch(1) >= 1000)
  3523  1C7B  3001               	movlw	1
  3524  1C7C  160A  118A  233F  160A  158A  	fcall	_stopWatch
  3525  1C81  1283               	bcf	3,5	;RP0=0, select bank0
  3526  1C82  1303               	bcf	3,6	;RP1=0, select bank0
  3527  1C83  085E               	movf	?_stopWatch+3,w
  3528  1C84  1D03               	btfss	3,2
  3529  1C85  2C93               	goto	l3394
  3530  1C86  085D               	movf	?_stopWatch+2,w
  3531  1C87  1D03               	btfss	3,2
  3532  1C88  2C93               	goto	l3394
  3533  1C89  3003               	movlw	3
  3534  1C8A  025C               	subwf	?_stopWatch+1,w
  3535  1C8B  1D03               	skipz
  3536  1C8C  2C91               	goto	u4553
  3537  1C8D  30E8               	movlw	232
  3538  1C8E  025B               	subwf	?_stopWatch,w
  3539  1C8F  1D03               	skipz
  3540  1C90  2C91               	goto	u4553
  3541  1C91                     u4553:	
  3542  1C91  1C03               	btfss	3,0
  3543  1C92  2C77               	goto	l272
  3544  1C93                     l3394:	
  3545                           
  3546                           ;PIC16F917 Battery Management.c: 342: {
  3547                           ;PIC16F917 Battery Management.c: 343: initLCD();
  3548  1C93  160A  158A  269F  160A  158A  	fcall	_initLCD
  3549                           
  3550                           ;PIC16F917 Battery Management.c: 345: RC1 = 1;
  3551  1C98  1283               	bcf	3,5	;RP0=0, select bank0
  3552  1C99  1303               	bcf	3,6	;RP1=0, select bank0
  3553  1C9A  1487               	bsf	7,1	;volatile
  3554                           
  3555                           ;PIC16F917 Battery Management.c: 346: _delay((unsigned long)((100)*(8000000/4000.0)));
  3556  1C9B  3002               	movlw	2
  3557  1C9C  1683               	bsf	3,5	;RP0=1, select bank1
  3558  1C9D  1303               	bcf	3,6	;RP1=0, select bank1
  3559  1C9E  00A2               	movwf	(??_handlePB^(0+128)+2)
  3560  1C9F  3004               	movlw	4
  3561  1CA0  00A1               	movwf	(??_handlePB^(0+128)+1)
  3562  1CA1  30BA               	movlw	186
  3563  1CA2  00A0               	movwf	??_handlePB^(0+128)
  3564  1CA3                     u4657:	
  3565  1CA3  0BA0               	decfsz	??_handlePB^(0+128),f
  3566  1CA4  2CA3               	goto	u4657
  3567  1CA5  0BA1               	decfsz	(??_handlePB^(0+128)+1),f
  3568  1CA6  2CA3               	goto	u4657
  3569  1CA7  0BA2               	decfsz	(??_handlePB^(0+128)+2),f
  3570  1CA8  2CA3               	goto	u4657
  3571  1CA9  0000               	nop
  3572                           
  3573                           ;PIC16F917 Battery Management.c: 347: RC1 = 0;
  3574  1CAA  1283               	bcf	3,5	;RP0=0, select bank0
  3575  1CAB  1303               	bcf	3,6	;RP1=0, select bank0
  3576  1CAC  1087               	bcf	7,1	;volatile
  3577                           
  3578                           ;PIC16F917 Battery Management.c: 348: return;
  3579  1CAD  0008               	return
  3580  1CAE                     l3404:	
  3581                           
  3582                           ;PIC16F917 Battery Management.c: 349: }
  3583                           ;PIC16F917 Battery Management.c: 350: }
  3584                           ;PIC16F917 Battery Management.c: 352: LCDDisplayMode++;
  3585  1CAE  3001               	movlw	1
  3586  1CAF  1683               	bsf	3,5	;RP0=1, select bank1
  3587  1CB0  1303               	bcf	3,6	;RP1=0, select bank1
  3588  1CB1  00A0               	movwf	??_handlePB^(0+128)
  3589  1CB2  0820               	movf	??_handlePB^(0+128),w
  3590  1CB3  07E5               	addwf	_LCDDisplayMode^(0+128),f
  3591                           
  3592                           ;PIC16F917 Battery Management.c: 354: if (LCDDisplayMode > 3)
  3593  1CB4  3004               	movlw	4
  3594  1CB5  0265               	subwf	_LCDDisplayMode^(0+128),w
  3595  1CB6  1C03               	skipc
  3596  1CB7  0008               	return
  3597                           
  3598                           ;PIC16F917 Battery Management.c: 355: LCDDisplayMode = 0;
  3599  1CB8  01E5               	clrf	_LCDDisplayMode^(0+128)
  3600  1CB9  0008               	return
  3601  1CBA                     __end_of_handlePB:	
  3602                           
  3603                           	psect	text14
  3604  133F                     __ptext14:	
  3605 ;; *************** function _stopWatch *****************
  3606 ;; Defined at:
  3607 ;;		line 81 in file "timer0.h"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  mode            1    wreg     unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  mode            1   75[BANK0 ] unsigned char 
  3612 ;;  temp            4   76[BANK0 ] unsigned long 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  4   59[BANK0 ] unsigned long 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3622 ;;      Params:         0       4       0       0       0
  3623 ;;      Locals:         0       5       0       0       0
  3624 ;;      Temps:          0      12       0       0       0
  3625 ;;      Totals:         0      21       0       0       0
  3626 ;;Total ram usage:       21 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    4
  3629 ;; This function calls:
  3630 ;;		___ftmul
  3631 ;;		___fttol
  3632 ;;		___lltoft
  3633 ;; This function is called by:
  3634 ;;		_handlePB
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _stopWatch
  3640  133F                     _stopWatch:	
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _stopWatch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3644                           ;stopWatch@mode stored from wreg
  3645  133F  1283               	bcf	3,5	;RP0=0, select bank0
  3646  1340  1303               	bcf	3,6	;RP1=0, select bank0
  3647  1341  00EB               	movwf	stopWatch@mode
  3648                           
  3649                           ;timer0.h: 83: static unsigned long startTime = 0;
  3650                           ;timer0.h: 85: unsigned long temp = 0;
  3651  1342  3000               	movlw	0
  3652  1343  00EF               	movwf	stopWatch@temp+3
  3653  1344  3000               	movlw	0
  3654  1345  00EE               	movwf	stopWatch@temp+2
  3655  1346  3000               	movlw	0
  3656  1347  00ED               	movwf	stopWatch@temp+1
  3657  1348  3000               	movlw	0
  3658  1349  00EC               	movwf	stopWatch@temp
  3659                           
  3660                           ;timer0.h: 87: switch (mode)
  3661  134A  2C0D               	goto	l2992
  3662  134B                     l2978:	
  3663                           ;timer0.h: 88: {
  3664                           ;timer0.h: 89: case(0):
  3665                           
  3666                           
  3667                           ;timer0.h: 90: {
  3668                           ;timer0.h: 91: startTime = time + TMR0;
  3669  134B  0801               	movf	1,w	;volatile
  3670  134C  0778               	addwf	_time,w
  3671  134D  1683               	bsf	3,5	;RP0=1, select bank1
  3672  134E  1303               	bcf	3,6	;RP1=0, select bank1
  3673  134F  00DC               	movwf	stopWatch@startTime^(0+128)
  3674  1350  0879               	movf	_time+1,w
  3675  1351  1803               	skipnc
  3676  1352  0F79               	incfsz	_time+1,w
  3677  1353  1003               	clrc
  3678  1354  00DD               	movwf	(stopWatch@startTime^(0+128)+1)
  3679  1355  087A               	movf	_time+2,w
  3680  1356  1803               	skipnc
  3681  1357  0F7A               	incfsz	_time+2,w
  3682  1358  1003               	clrc
  3683  1359  00DE               	movwf	(stopWatch@startTime^(0+128)+2)
  3684  135A  087B               	movf	_time+3,w
  3685  135B  1803               	skipnc
  3686  135C  0A7B               	incf	_time+3,w
  3687  135D  00DF               	movwf	(stopWatch@startTime^(0+128)+3)
  3688                           
  3689                           ;timer0.h: 93: return 1;
  3690  135E  3000               	movlw	0
  3691  135F  1283               	bcf	3,5	;RP0=0, select bank0
  3692  1360  1303               	bcf	3,6	;RP1=0, select bank0
  3693  1361  00DE               	movwf	?_stopWatch+3
  3694  1362  3000               	movlw	0
  3695  1363  00DD               	movwf	?_stopWatch+2
  3696  1364  3000               	movlw	0
  3697  1365  00DC               	movwf	?_stopWatch+1
  3698  1366  3001               	movlw	1
  3699  1367  00DB               	movwf	?_stopWatch
  3700  1368  0008               	return
  3701  1369                     l2982:	
  3702                           ;timer0.h: 94: }
  3703                           ;timer0.h: 96: case (1):
  3704                           
  3705                           
  3706                           ;timer0.h: 97: {
  3707                           ;timer0.h: 98: temp = time + TMR0 - startTime;
  3708  1369  0878               	movf	_time,w
  3709  136A  00DF               	movwf	??_stopWatch
  3710  136B  0879               	movf	_time+1,w
  3711  136C  00E0               	movwf	??_stopWatch+1
  3712  136D  087A               	movf	_time+2,w
  3713  136E  00E1               	movwf	??_stopWatch+2
  3714  136F  087B               	movf	_time+3,w
  3715  1370  00E2               	movwf	??_stopWatch+3
  3716  1371  1683               	bsf	3,5	;RP0=1, select bank1
  3717  1372  1303               	bcf	3,6	;RP1=0, select bank1
  3718  1373  095C               	comf	stopWatch@startTime^(0+128),w
  3719  1374  1283               	bcf	3,5	;RP0=0, select bank0
  3720  1375  1303               	bcf	3,6	;RP1=0, select bank0
  3721  1376  00E3               	movwf	??_stopWatch+4
  3722  1377  1683               	bsf	3,5	;RP0=1, select bank1
  3723  1378  1303               	bcf	3,6	;RP1=0, select bank1
  3724  1379  095D               	comf	(stopWatch@startTime+1)^(0+128),w
  3725  137A  1283               	bcf	3,5	;RP0=0, select bank0
  3726  137B  1303               	bcf	3,6	;RP1=0, select bank0
  3727  137C  00E4               	movwf	??_stopWatch+5
  3728  137D  1683               	bsf	3,5	;RP0=1, select bank1
  3729  137E  1303               	bcf	3,6	;RP1=0, select bank1
  3730  137F  095E               	comf	(stopWatch@startTime+2)^(0+128),w
  3731  1380  1283               	bcf	3,5	;RP0=0, select bank0
  3732  1381  1303               	bcf	3,6	;RP1=0, select bank0
  3733  1382  00E5               	movwf	??_stopWatch+6
  3734  1383  1683               	bsf	3,5	;RP0=1, select bank1
  3735  1384  1303               	bcf	3,6	;RP1=0, select bank1
  3736  1385  095F               	comf	(stopWatch@startTime+3)^(0+128),w
  3737  1386  1283               	bcf	3,5	;RP0=0, select bank0
  3738  1387  1303               	bcf	3,6	;RP1=0, select bank0
  3739  1388  00E6               	movwf	??_stopWatch+7
  3740  1389  0AE3               	incf	??_stopWatch+4,f
  3741  138A  1903               	skipnz
  3742  138B  0AE4               	incf	??_stopWatch+5,f
  3743  138C  1903               	skipnz
  3744  138D  0AE5               	incf	??_stopWatch+6,f
  3745  138E  1903               	skipnz
  3746  138F  0AE6               	incf	??_stopWatch+7,f
  3747  1390  0801               	movf	1,w	;volatile
  3748  1391  00E7               	movwf	??_stopWatch+8
  3749  1392  01E8               	clrf	??_stopWatch+9
  3750  1393  01E9               	clrf	??_stopWatch+10
  3751  1394  01EA               	clrf	??_stopWatch+11
  3752  1395  0867               	movf	??_stopWatch+8,w
  3753  1396  07E3               	addwf	??_stopWatch+4,f
  3754  1397  0868               	movf	??_stopWatch+9,w
  3755  1398  1803               	skipnc
  3756  1399  0F68               	incfsz	??_stopWatch+9,w
  3757  139A  2B9C               	goto	u3990
  3758  139B  2B9D               	goto	u3991
  3759  139C                     u3990:	
  3760  139C  07E4               	addwf	??_stopWatch+5,f
  3761  139D                     u3991:	
  3762  139D  0869               	movf	??_stopWatch+10,w
  3763  139E  1803               	skipnc
  3764  139F  0F69               	incfsz	??_stopWatch+10,w
  3765  13A0  2BA2               	goto	u3992
  3766  13A1  2BA3               	goto	u3993
  3767  13A2                     u3992:	
  3768  13A2  07E5               	addwf	??_stopWatch+6,f
  3769  13A3                     u3993:	
  3770  13A3  086A               	movf	??_stopWatch+11,w
  3771  13A4  1803               	skipnc
  3772  13A5  0A6A               	incf	??_stopWatch+11,w
  3773  13A6  07E6               	addwf	??_stopWatch+7,f
  3774  13A7  0863               	movf	??_stopWatch+4,w
  3775  13A8  07DF               	addwf	??_stopWatch,f
  3776  13A9  0864               	movf	??_stopWatch+5,w
  3777  13AA  1803               	skipnc
  3778  13AB  0F64               	incfsz	??_stopWatch+5,w
  3779  13AC  2BAE               	goto	u4000
  3780  13AD  2BAF               	goto	u4001
  3781  13AE                     u4000:	
  3782  13AE  07E0               	addwf	??_stopWatch+1,f
  3783  13AF                     u4001:	
  3784  13AF  0865               	movf	??_stopWatch+6,w
  3785  13B0  1803               	skipnc
  3786  13B1  0F65               	incfsz	??_stopWatch+6,w
  3787  13B2  2BB4               	goto	u4002
  3788  13B3  2BB5               	goto	u4003
  3789  13B4                     u4002:	
  3790  13B4  07E1               	addwf	??_stopWatch+2,f
  3791  13B5                     u4003:	
  3792  13B5  0866               	movf	??_stopWatch+7,w
  3793  13B6  1803               	skipnc
  3794  13B7  0A66               	incf	??_stopWatch+7,w
  3795  13B8  07E2               	addwf	??_stopWatch+3,f
  3796  13B9  0862               	movf	??_stopWatch+3,w
  3797  13BA  00EF               	movwf	stopWatch@temp+3
  3798  13BB  0861               	movf	??_stopWatch+2,w
  3799  13BC  00EE               	movwf	stopWatch@temp+2
  3800  13BD  0860               	movf	??_stopWatch+1,w
  3801  13BE  00ED               	movwf	stopWatch@temp+1
  3802  13BF  085F               	movf	??_stopWatch,w
  3803  13C0  00EC               	movwf	stopWatch@temp
  3804                           
  3805                           ;timer0.h: 100: temp = convConst * temp;
  3806  13C1  086F               	movf	stopWatch@temp+3,w
  3807  13C2  00AB               	movwf	___lltoft@c+3
  3808  13C3  086E               	movf	stopWatch@temp+2,w
  3809  13C4  00AA               	movwf	___lltoft@c+2
  3810  13C5  086D               	movf	stopWatch@temp+1,w
  3811  13C6  00A9               	movwf	___lltoft@c+1
  3812  13C7  086C               	movf	stopWatch@temp,w
  3813  13C8  00A8               	movwf	___lltoft@c
  3814  13C9  160A  158A  2258  160A  118A  	fcall	___lltoft
  3815  13CE  1283               	bcf	3,5	;RP0=0, select bank0
  3816  13CF  1303               	bcf	3,6	;RP1=0, select bank0
  3817  13D0  0828               	movf	?___lltoft,w
  3818  13D1  00B7               	movwf	___ftmul@f2
  3819  13D2  0829               	movf	?___lltoft+1,w
  3820  13D3  00B8               	movwf	___ftmul@f2+1
  3821  13D4  082A               	movf	?___lltoft+2,w
  3822  13D5  00B9               	movwf	___ftmul@f2+2
  3823  13D6  3077               	movlw	low (_convConst-__stringbase)
  3824  13D7  0084               	movwf	4
  3825  13D8  160A  158A  2000  160A  118A  	fcall	stringdir
  3826  13DD  00B4               	movwf	___ftmul@f1
  3827  13DE  160A  158A  2000  160A  118A  	fcall	stringdir
  3828  13E3  00B5               	movwf	___ftmul@f1+1
  3829  13E4  160A  158A  2000  160A  118A  	fcall	stringdir
  3830  13E9  00B6               	movwf	___ftmul@f1+2
  3831  13EA  160A  118A  226C  160A  118A  	fcall	___ftmul
  3832  13EF  1283               	bcf	3,5	;RP0=0, select bank0
  3833  13F0  1303               	bcf	3,6	;RP1=0, select bank0
  3834  13F1  0834               	movf	?___ftmul,w
  3835  13F2  00CD               	movwf	___fttol@f1
  3836  13F3  0835               	movf	?___ftmul+1,w
  3837  13F4  00CE               	movwf	___fttol@f1+1
  3838  13F5  0836               	movf	?___ftmul+2,w
  3839  13F6  00CF               	movwf	___fttol@f1+2
  3840  13F7  160A  158A  2611   	fcall	___fttol
  3841  13FA  1283               	bcf	3,5	;RP0=0, select bank0
  3842  13FB  1303               	bcf	3,6	;RP1=0, select bank0
  3843  13FC  0850               	movf	?___fttol+3,w
  3844  13FD  00EF               	movwf	stopWatch@temp+3
  3845  13FE  084F               	movf	?___fttol+2,w
  3846  13FF  00EE               	movwf	stopWatch@temp+2
  3847  1400  084E               	movf	?___fttol+1,w
  3848  1401  00ED               	movwf	stopWatch@temp+1
  3849  1402  084D               	movf	?___fttol,w
  3850  1403  00EC               	movwf	stopWatch@temp
  3851                           
  3852                           ;timer0.h: 102: return temp;
  3853  1404  086F               	movf	stopWatch@temp+3,w
  3854  1405  00DE               	movwf	?_stopWatch+3
  3855  1406  086E               	movf	stopWatch@temp+2,w
  3856  1407  00DD               	movwf	?_stopWatch+2
  3857  1408  086D               	movf	stopWatch@temp+1,w
  3858  1409  00DC               	movwf	?_stopWatch+1
  3859  140A  086C               	movf	stopWatch@temp,w
  3860  140B  00DB               	movwf	?_stopWatch
  3861  140C  0008               	return
  3862  140D                     l2992:	
  3863                           ;timer0.h: 103: }
  3864                           ;timer0.h: 104: }
  3865                           
  3866  140D  086B               	movf	stopWatch@mode,w
  3867                           
  3868                           ; Switch size 1, requested type "space"
  3869                           ; Number of cases is 2, Range of values is 0 to 1
  3870                           ; switch strategies available:
  3871                           ; Name         Instructions Cycles
  3872                           ; simple_byte            7     4 (average)
  3873                           ; direct_byte           14     8 (fixed)
  3874                           ; jumptable            260     6 (fixed)
  3875                           ;	Chosen strategy is simple_byte
  3876  140E  3A00               	xorlw	0	; case 0
  3877  140F  1903               	skipnz
  3878  1410  2B4B               	goto	l2978
  3879  1411  3A01               	xorlw	1	; case 1
  3880  1412  1903               	skipnz
  3881  1413  2B69               	goto	l2982
  3882  1414  2C15               	goto	l2994
  3883  1415                     l2994:	
  3884                           
  3885                           ;timer0.h: 106: return 0;
  3886  1415  3000               	movlw	0
  3887  1416  00DE               	movwf	?_stopWatch+3
  3888  1417  3000               	movlw	0
  3889  1418  00DD               	movwf	?_stopWatch+2
  3890  1419  3000               	movlw	0
  3891  141A  00DC               	movwf	?_stopWatch+1
  3892  141B  3000               	movlw	0
  3893  141C  00DB               	movwf	?_stopWatch
  3894  141D  0008               	return
  3895  141E                     __end_of_stopWatch:	
  3896                           
  3897                           	psect	text15
  3898  1E9F                     __ptext15:	
  3899 ;; *************** function _initLCD *****************
  3900 ;; Defined at:
  3901 ;;		line 49 in file "lcd.h"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;		None               void
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3915 ;;      Params:         0       0       0       0       0
  3916 ;;      Locals:         0       0       0       0       0
  3917 ;;      Temps:          0       3       0       0       0
  3918 ;;      Totals:         0       3       0       0       0
  3919 ;;Total ram usage:        3 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    4
  3922 ;; This function calls:
  3923 ;;		_LCDSetBits
  3924 ;;		_LCDcmd
  3925 ;;		_pulse
  3926 ;; This function is called by:
  3927 ;;		_initController
  3928 ;;		_handlePB
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function _initLCD
  3934  1E9F                     _initLCD:	
  3935                           
  3936                           ;lcd.h: 51: RB0 = 0;
  3937                           
  3938                           ;incstack = 0
  3939                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3940  1E9F  1283               	bcf	3,5	;RP0=0, select bank0
  3941  1EA0  1303               	bcf	3,6	;RP1=0, select bank0
  3942  1EA1  1006               	bcf	6,0	;volatile
  3943                           
  3944                           ;lcd.h: 52: RD7 = 0;
  3945  1EA2  1388               	bcf	8,7	;volatile
  3946                           
  3947                           ;lcd.h: 53: LCDSetBits(0x00);
  3948  1EA3  3000               	movlw	0
  3949  1EA4  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
  3950                           
  3951                           ;lcd.h: 54: _delay((unsigned long)((100)*(8000000/4000.0)));
  3952  1EA9  3002               	movlw	2
  3953  1EAA  1283               	bcf	3,5	;RP0=0, select bank0
  3954  1EAB  1303               	bcf	3,6	;RP1=0, select bank0
  3955  1EAC  00A7               	movwf	??_initLCD+2
  3956  1EAD  3004               	movlw	4
  3957  1EAE  00A6               	movwf	??_initLCD+1
  3958  1EAF  30BA               	movlw	186
  3959  1EB0  00A5               	movwf	??_initLCD
  3960  1EB1                     u4667:	
  3961  1EB1  0BA5               	decfsz	??_initLCD,f
  3962  1EB2  2EB1               	goto	u4667
  3963  1EB3  0BA6               	decfsz	??_initLCD+1,f
  3964  1EB4  2EB1               	goto	u4667
  3965  1EB5  0BA7               	decfsz	??_initLCD+2,f
  3966  1EB6  2EB1               	goto	u4667
  3967  1EB7  0000               	nop
  3968                           
  3969                           ;lcd.h: 55: LCDSetBits(0x30);
  3970  1EB8  3030               	movlw	48
  3971  1EB9  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
  3972                           
  3973                           ;lcd.h: 56: _delay((unsigned long)((30)*(8000000/4000.0)));
  3974  1EBE  304E               	movlw	78
  3975  1EBF  1283               	bcf	3,5	;RP0=0, select bank0
  3976  1EC0  1303               	bcf	3,6	;RP1=0, select bank0
  3977  1EC1  00A6               	movwf	??_initLCD+1
  3978  1EC2  30EB               	movlw	235
  3979  1EC3  00A5               	movwf	??_initLCD
  3980  1EC4                     u4677:	
  3981  1EC4  0BA5               	decfsz	??_initLCD,f
  3982  1EC5  2EC4               	goto	u4677
  3983  1EC6  0BA6               	decfsz	??_initLCD+1,f
  3984  1EC7  2EC4               	goto	u4677
  3985                           
  3986                           ;lcd.h: 57: pulse();
  3987  1EC8  160A  158A  20CA  160A  158A  	fcall	_pulse
  3988                           
  3989                           ;lcd.h: 58: _delay((unsigned long)((10)*(8000000/4000.0)));
  3990  1ECD  301A               	movlw	26
  3991  1ECE  1283               	bcf	3,5	;RP0=0, select bank0
  3992  1ECF  1303               	bcf	3,6	;RP1=0, select bank0
  3993  1ED0  00A6               	movwf	??_initLCD+1
  3994  1ED1  30F8               	movlw	248
  3995  1ED2  00A5               	movwf	??_initLCD
  3996  1ED3                     u4687:	
  3997  1ED3  0BA5               	decfsz	??_initLCD,f
  3998  1ED4  2ED3               	goto	u4687
  3999  1ED5  0BA6               	decfsz	??_initLCD+1,f
  4000  1ED6  2ED3               	goto	u4687
  4001  1ED7  0000               	nop
  4002                           
  4003                           ;lcd.h: 59: pulse();
  4004  1ED8  160A  158A  20CA  160A  158A  	fcall	_pulse
  4005                           
  4006                           ;lcd.h: 60: _delay((unsigned long)((10)*(8000000/4000.0)));
  4007  1EDD  301A               	movlw	26
  4008  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
  4009  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
  4010  1EE0  00A6               	movwf	??_initLCD+1
  4011  1EE1  30F8               	movlw	248
  4012  1EE2  00A5               	movwf	??_initLCD
  4013  1EE3                     u4697:	
  4014  1EE3  0BA5               	decfsz	??_initLCD,f
  4015  1EE4  2EE3               	goto	u4697
  4016  1EE5  0BA6               	decfsz	??_initLCD+1,f
  4017  1EE6  2EE3               	goto	u4697
  4018  1EE7  0000               	nop
  4019                           
  4020                           ;lcd.h: 61: pulse();
  4021  1EE8  160A  158A  20CA  160A  158A  	fcall	_pulse
  4022                           
  4023                           ;lcd.h: 62: _delay((unsigned long)((10)*(8000000/4000.0)));
  4024  1EED  301A               	movlw	26
  4025  1EEE  1283               	bcf	3,5	;RP0=0, select bank0
  4026  1EEF  1303               	bcf	3,6	;RP1=0, select bank0
  4027  1EF0  00A6               	movwf	??_initLCD+1
  4028  1EF1  30F8               	movlw	248
  4029  1EF2  00A5               	movwf	??_initLCD
  4030  1EF3                     u4707:	
  4031  1EF3  0BA5               	decfsz	??_initLCD,f
  4032  1EF4  2EF3               	goto	u4707
  4033  1EF5  0BA6               	decfsz	??_initLCD+1,f
  4034  1EF6  2EF3               	goto	u4707
  4035  1EF7  0000               	nop
  4036                           
  4037                           ;lcd.h: 63: LCDSetBits(0x20);
  4038  1EF8  3020               	movlw	32
  4039  1EF9  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
  4040                           
  4041                           ;lcd.h: 64: pulse();
  4042  1EFE  160A  158A  20CA  160A  158A  	fcall	_pulse
  4043                           
  4044                           ;lcd.h: 66: LCDcmd(0x28);
  4045  1F03  3028               	movlw	40
  4046  1F04  160A  158A  222D  160A  158A  	fcall	_LCDcmd
  4047                           
  4048                           ;lcd.h: 67: _delay((unsigned long)((10)*(8000000/4000.0)));
  4049  1F09  301A               	movlw	26
  4050  1F0A  1283               	bcf	3,5	;RP0=0, select bank0
  4051  1F0B  1303               	bcf	3,6	;RP1=0, select bank0
  4052  1F0C  00A6               	movwf	??_initLCD+1
  4053  1F0D  30F8               	movlw	248
  4054  1F0E  00A5               	movwf	??_initLCD
  4055  1F0F                     u4717:	
  4056  1F0F  0BA5               	decfsz	??_initLCD,f
  4057  1F10  2F0F               	goto	u4717
  4058  1F11  0BA6               	decfsz	??_initLCD+1,f
  4059  1F12  2F0F               	goto	u4717
  4060  1F13  0000               	nop
  4061                           
  4062                           ;lcd.h: 68: LCDcmd(0x10);
  4063  1F14  3010               	movlw	16
  4064  1F15  160A  158A  222D  160A  158A  	fcall	_LCDcmd
  4065                           
  4066                           ;lcd.h: 69: _delay((unsigned long)((10)*(8000000/4000.0)));
  4067  1F1A  301A               	movlw	26
  4068  1F1B  1283               	bcf	3,5	;RP0=0, select bank0
  4069  1F1C  1303               	bcf	3,6	;RP1=0, select bank0
  4070  1F1D  00A6               	movwf	??_initLCD+1
  4071  1F1E  30F8               	movlw	248
  4072  1F1F  00A5               	movwf	??_initLCD
  4073  1F20                     u4727:	
  4074  1F20  0BA5               	decfsz	??_initLCD,f
  4075  1F21  2F20               	goto	u4727
  4076  1F22  0BA6               	decfsz	??_initLCD+1,f
  4077  1F23  2F20               	goto	u4727
  4078  1F24  0000               	nop
  4079                           
  4080                           ;lcd.h: 70: LCDcmd(0x0F);
  4081  1F25  300F               	movlw	15
  4082  1F26  160A  158A  222D  160A  158A  	fcall	_LCDcmd
  4083                           
  4084                           ;lcd.h: 71: _delay((unsigned long)((10)*(8000000/4000.0)));
  4085  1F2B  301A               	movlw	26
  4086  1F2C  1283               	bcf	3,5	;RP0=0, select bank0
  4087  1F2D  1303               	bcf	3,6	;RP1=0, select bank0
  4088  1F2E  00A6               	movwf	??_initLCD+1
  4089  1F2F  30F8               	movlw	248
  4090  1F30  00A5               	movwf	??_initLCD
  4091  1F31                     u4737:	
  4092  1F31  0BA5               	decfsz	??_initLCD,f
  4093  1F32  2F31               	goto	u4737
  4094  1F33  0BA6               	decfsz	??_initLCD+1,f
  4095  1F34  2F31               	goto	u4737
  4096  1F35  0000               	nop
  4097                           
  4098                           ;lcd.h: 72: LCDcmd(0x06);
  4099  1F36  3006               	movlw	6
  4100  1F37  160A  158A  222D  160A  158A  	fcall	_LCDcmd
  4101                           
  4102                           ;lcd.h: 73: _delay((unsigned long)((10)*(8000000/4000.0)));
  4103  1F3C  301A               	movlw	26
  4104  1F3D  1283               	bcf	3,5	;RP0=0, select bank0
  4105  1F3E  1303               	bcf	3,6	;RP1=0, select bank0
  4106  1F3F  00A6               	movwf	??_initLCD+1
  4107  1F40  30F8               	movlw	248
  4108  1F41  00A5               	movwf	??_initLCD
  4109  1F42                     u4747:	
  4110  1F42  0BA5               	decfsz	??_initLCD,f
  4111  1F43  2F42               	goto	u4747
  4112  1F44  0BA6               	decfsz	??_initLCD+1,f
  4113  1F45  2F42               	goto	u4747
  4114  1F46  0000               	nop
  4115  1F47  0008               	return
  4116  1F48                     __end_of_initLCD:	
  4117                           
  4118                           	psect	text16
  4119  1A2D                     __ptext16:	
  4120 ;; *************** function _LCDcmd *****************
  4121 ;; Defined at:
  4122 ;;		line 108 in file "lcd.h"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  a               1    wreg     unsigned char 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  a               1    4[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;		None               void
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0, pclath, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4136 ;;      Params:         0       0       0       0       0
  4137 ;;      Locals:         0       1       0       0       0
  4138 ;;      Temps:          0       2       0       0       0
  4139 ;;      Totals:         0       3       0       0       0
  4140 ;;Total ram usage:        3 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    3
  4143 ;; This function calls:
  4144 ;;		_LCDSetBits
  4145 ;;		_pulse
  4146 ;; This function is called by:
  4147 ;;		_initLCD
  4148 ;;		_clearLCD
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           
  4153                           ;psect for function _LCDcmd
  4154  1A2D                     _LCDcmd:	
  4155                           
  4156                           ;incstack = 0
  4157                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  4158                           ;LCDcmd@a stored from wreg
  4159  1A2D  1283               	bcf	3,5	;RP0=0, select bank0
  4160  1A2E  1303               	bcf	3,6	;RP1=0, select bank0
  4161  1A2F  00A4               	movwf	LCDcmd@a
  4162                           
  4163                           ;lcd.h: 110: LCDSetBits(a);
  4164  1A30  0824               	movf	LCDcmd@a,w
  4165  1A31  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
  4166                           
  4167                           ;lcd.h: 111: RB0 = 0;
  4168  1A36  1283               	bcf	3,5	;RP0=0, select bank0
  4169  1A37  1303               	bcf	3,6	;RP1=0, select bank0
  4170  1A38  1006               	bcf	6,0	;volatile
  4171                           
  4172                           ;lcd.h: 112: RD7 = 0;
  4173  1A39  1388               	bcf	8,7	;volatile
  4174                           
  4175                           ;lcd.h: 113: pulse();
  4176  1A3A  160A  158A  20CA  160A  158A  	fcall	_pulse
  4177                           
  4178                           ;lcd.h: 114: a = a<<4;
  4179  1A3F  1283               	bcf	3,5	;RP0=0, select bank0
  4180  1A40  1303               	bcf	3,6	;RP1=0, select bank0
  4181  1A41  0824               	movf	LCDcmd@a,w
  4182  1A42  00A2               	movwf	??_LCDcmd
  4183  1A43  3003               	movlw	3
  4184  1A44                     u3075:	
  4185  1A44  1003               	clrc
  4186  1A45  0DA2               	rlf	??_LCDcmd,f
  4187  1A46  3EFF               	addlw	-1
  4188  1A47  1D03               	skipz
  4189  1A48  2A44               	goto	u3075
  4190  1A49  1003               	clrc
  4191  1A4A  0D22               	rlf	??_LCDcmd,w
  4192  1A4B  00A3               	movwf	??_LCDcmd+1
  4193  1A4C  0823               	movf	??_LCDcmd+1,w
  4194  1A4D  00A4               	movwf	LCDcmd@a
  4195                           
  4196                           ;lcd.h: 115: LCDSetBits(a);
  4197  1A4E  0824               	movf	LCDcmd@a,w
  4198  1A4F  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
  4199                           
  4200                           ;lcd.h: 116: pulse();
  4201  1A54  160A  158A  20CA   	fcall	_pulse
  4202  1A57  0008               	return
  4203  1A58                     __end_of_LCDcmd:	
  4204                           
  4205                           	psect	text17
  4206  05E7                     __ptext17:	
  4207 ;; *************** function _displayLCD *****************
  4208 ;; Defined at:
  4209 ;;		line 179 in file "PIC16F917 Battery Management.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  disp            2   77[BANK0 ] int 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  valueL          3   35[BANK1 ] float 
  4214 ;;  valueU          3   32[BANK1 ] float 
  4215 ;;  itemL           1   39[BANK1 ] unsigned char 
  4216 ;;  itemU           1   38[BANK1 ] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4226 ;;      Params:         0       2       0       0       0
  4227 ;;      Locals:         0       0       8       0       0
  4228 ;;      Temps:          0       0       3       0       0
  4229 ;;      Totals:         0       2      11       0       0
  4230 ;;Total ram usage:       13 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    6
  4233 ;; This function calls:
  4234 ;;		_LCDSetCursor
  4235 ;;		_LCDWriteString
  4236 ;;		___ftadd
  4237 ;;		___ftneg
  4238 ;;		_sprintf
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _displayLCD
  4246  05E7                     _displayLCD:	
  4247                           
  4248                           ;PIC16F917 Battery Management.c: 181: uint8_t itemU;
  4249                           ;PIC16F917 Battery Management.c: 182: uint8_t itemL;
  4250                           ;PIC16F917 Battery Management.c: 183: float valueU;
  4251                           ;PIC16F917 Battery Management.c: 184: float valueL;
  4252                           ;PIC16F917 Battery Management.c: 187: switch( disp )
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4256  05E7  2F0E               	goto	l3436
  4257  05E8                     l3412:	
  4258                           ;PIC16F917 Battery Management.c: 188: {
  4259                           ;PIC16F917 Battery Management.c: 191: case 0:
  4260                           
  4261                           
  4262                           ;PIC16F917 Battery Management.c: 192: {
  4263                           ;PIC16F917 Battery Management.c: 193: itemU = 11;
  4264  05E8  300B               	movlw	11
  4265  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  4266  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  4267  05EB  00BD               	movwf	??_displayLCD^(0+128)
  4268  05EC  083D               	movf	??_displayLCD^(0+128),w
  4269  05ED  00C6               	movwf	displayLCD@itemU^(0+128)
  4270                           
  4271                           ;PIC16F917 Battery Management.c: 194: itemL = 12;
  4272  05EE  300C               	movlw	12
  4273  05EF  00BD               	movwf	??_displayLCD^(0+128)
  4274  05F0  083D               	movf	??_displayLCD^(0+128),w
  4275  05F1  00C7               	movwf	displayLCD@itemL^(0+128)
  4276                           
  4277                           ;PIC16F917 Battery Management.c: 195: valueU = cellVolt[5];
  4278  05F2  300F               	movlw	15
  4279  05F3  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4280  05F4  0084               	movwf	4
  4281  05F5  1383               	bcf	3,7	;select IRP bank1
  4282  05F6  0800               	movf	0,w
  4283  05F7  00C0               	movwf	displayLCD@valueU^(0+128)
  4284  05F8  0A84               	incf	4,f
  4285  05F9  0800               	movf	0,w
  4286  05FA  00C1               	movwf	(displayLCD@valueU+1)^(0+128)
  4287  05FB  0A84               	incf	4,f
  4288  05FC  0800               	movf	0,w
  4289  05FD  00C2               	movwf	(displayLCD@valueU+2)^(0+128)
  4290                           
  4291                           ;PIC16F917 Battery Management.c: 196: valueL = current;
  4292  05FE  0860               	movf	_current^(0+128),w
  4293  05FF  00C3               	movwf	displayLCD@valueL^(0+128)
  4294  0600  0861               	movf	(_current+1)^(0+128),w
  4295  0601  00C4               	movwf	(displayLCD@valueL+1)^(0+128)
  4296  0602  0862               	movf	(_current+2)^(0+128),w
  4297  0603  2F0C               	goto	L3
  4298  0604                     l254:	
  4299                           ;PIC16F917 Battery Management.c: 210: }
  4300                           ;PIC16F917 Battery Management.c: 213: case 1:
  4301                           
  4302                           ;PIC16F917 Battery Management.c: 209: break;
  4303                           
  4304                           
  4305                           ;PIC16F917 Battery Management.c: 214: {
  4306                           ;PIC16F917 Battery Management.c: 215: itemU = 1;
  4307  0604  1683               	bsf	3,5	;RP0=1, select bank1
  4308  0605  1303               	bcf	3,6	;RP1=0, select bank1
  4309  0606  01C6               	clrf	displayLCD@itemU^(0+128)
  4310  0607  0AC6               	incf	displayLCD@itemU^(0+128),f
  4311                           
  4312                           ;PIC16F917 Battery Management.c: 216: itemL = 2;
  4313  0608  3002               	movlw	2
  4314  0609  00BD               	movwf	??_displayLCD^(0+128)
  4315  060A  083D               	movf	??_displayLCD^(0+128),w
  4316  060B  00C7               	movwf	displayLCD@itemL^(0+128)
  4317                           
  4318                           ;PIC16F917 Battery Management.c: 217: valueU = cellVolt[0];
  4319  060C  084A               	movf	_cellVolt^(0+128),w
  4320  060D  00C0               	movwf	displayLCD@valueU^(0+128)
  4321  060E  084B               	movf	(_cellVolt+1)^(0+128),w
  4322  060F  00C1               	movwf	(displayLCD@valueU+1)^(0+128)
  4323  0610  084C               	movf	(_cellVolt+2)^(0+128),w
  4324  0611  00C2               	movwf	(displayLCD@valueU+2)^(0+128)
  4325                           
  4326                           ;PIC16F917 Battery Management.c: 218: valueL = cellVolt[1] - cellVolt[0];
  4327  0612  3003               	movlw	3
  4328  0613  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4329  0614  0084               	movwf	4
  4330  0615  1383               	bcf	3,7	;select IRP bank1
  4331  0616  0800               	movf	0,w
  4332  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0619  00D4               	movwf	___ftadd@f1
  4335  061A  0A84               	incf	4,f
  4336  061B  0800               	movf	0,w
  4337  061C  00D5               	movwf	___ftadd@f1+1
  4338  061D  0A84               	incf	4,f
  4339  061E  0800               	movf	0,w
  4340  061F  00D6               	movwf	___ftadd@f1+2
  4341  0620  1683               	bsf	3,5	;RP0=1, select bank1
  4342  0621  1303               	bcf	3,6	;RP1=0, select bank1
  4343  0622  084A               	movf	_cellVolt^(0+128),w
  4344  0623  1283               	bcf	3,5	;RP0=0, select bank0
  4345  0624  1303               	bcf	3,6	;RP1=0, select bank0
  4346  0625  00A0               	movwf	___ftneg@f1
  4347  0626  1683               	bsf	3,5	;RP0=1, select bank1
  4348  0627  1303               	bcf	3,6	;RP1=0, select bank1
  4349  0628  084B               	movf	(_cellVolt+1)^(0+128),w
  4350  0629  1283               	bcf	3,5	;RP0=0, select bank0
  4351  062A  1303               	bcf	3,6	;RP1=0, select bank0
  4352  062B  00A1               	movwf	___ftneg@f1+1
  4353  062C  1683               	bsf	3,5	;RP0=1, select bank1
  4354  062D  1303               	bcf	3,6	;RP1=0, select bank1
  4355  062E  084C               	movf	(_cellVolt+2)^(0+128),w
  4356  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4357  0630  1303               	bcf	3,6	;RP1=0, select bank0
  4358  0631  2EE8               	goto	L4
  4359  0632                     l3422:	
  4360                           ;PIC16F917 Battery Management.c: 231: }
  4361                           ;PIC16F917 Battery Management.c: 234: case 2:
  4362                           
  4363                           ;PIC16F917 Battery Management.c: 230: break;
  4364                           
  4365                           
  4366                           ;PIC16F917 Battery Management.c: 235: {
  4367                           ;PIC16F917 Battery Management.c: 236: itemU = 3;
  4368  0632  3003               	movlw	3
  4369  0633  1683               	bsf	3,5	;RP0=1, select bank1
  4370  0634  1303               	bcf	3,6	;RP1=0, select bank1
  4371  0635  00BD               	movwf	??_displayLCD^(0+128)
  4372  0636  083D               	movf	??_displayLCD^(0+128),w
  4373  0637  00C6               	movwf	displayLCD@itemU^(0+128)
  4374                           
  4375                           ;PIC16F917 Battery Management.c: 237: itemL = 4;
  4376  0638  3004               	movlw	4
  4377  0639  00BD               	movwf	??_displayLCD^(0+128)
  4378  063A  083D               	movf	??_displayLCD^(0+128),w
  4379  063B  00C7               	movwf	displayLCD@itemL^(0+128)
  4380                           
  4381                           ;PIC16F917 Battery Management.c: 238: valueU = cellVolt[2] - cellVolt[1];
  4382  063C  3006               	movlw	6
  4383  063D  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4384  063E  0084               	movwf	4
  4385  063F  1383               	bcf	3,7	;select IRP bank1
  4386  0640  0800               	movf	0,w
  4387  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4388  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4389  0643  00D4               	movwf	___ftadd@f1
  4390  0644  0A84               	incf	4,f
  4391  0645  0800               	movf	0,w
  4392  0646  00D5               	movwf	___ftadd@f1+1
  4393  0647  0A84               	incf	4,f
  4394  0648  0800               	movf	0,w
  4395  0649  00D6               	movwf	___ftadd@f1+2
  4396  064A  3003               	movlw	3
  4397  064B  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4398  064C  0084               	movwf	4
  4399  064D  0800               	movf	0,w
  4400  064E  00A0               	movwf	___ftneg@f1
  4401  064F  0A84               	incf	4,f
  4402  0650  0800               	movf	0,w
  4403  0651  00A1               	movwf	___ftneg@f1+1
  4404  0652  0A84               	incf	4,f
  4405  0653  0800               	movf	0,w
  4406  0654  00A2               	movwf	___ftneg@f1+2
  4407  0655  160A  158A  20B1  120A  118A  	fcall	___ftneg
  4408  065A  1283               	bcf	3,5	;RP0=0, select bank0
  4409  065B  1303               	bcf	3,6	;RP1=0, select bank0
  4410  065C  0820               	movf	?___ftneg,w
  4411  065D  00D7               	movwf	___ftadd@f2
  4412  065E  0821               	movf	?___ftneg+1,w
  4413  065F  00D8               	movwf	___ftadd@f2+1
  4414  0660  0822               	movf	?___ftneg+2,w
  4415  0661  00D9               	movwf	___ftadd@f2+2
  4416  0662  160A  118A  241E  120A  118A  	fcall	___ftadd
  4417  0667  1283               	bcf	3,5	;RP0=0, select bank0
  4418  0668  1303               	bcf	3,6	;RP1=0, select bank0
  4419  0669  0854               	movf	?___ftadd,w
  4420  066A  1683               	bsf	3,5	;RP0=1, select bank1
  4421  066B  1303               	bcf	3,6	;RP1=0, select bank1
  4422  066C  00C0               	movwf	displayLCD@valueU^(0+128)
  4423  066D  1283               	bcf	3,5	;RP0=0, select bank0
  4424  066E  1303               	bcf	3,6	;RP1=0, select bank0
  4425  066F  0855               	movf	?___ftadd+1,w
  4426  0670  1683               	bsf	3,5	;RP0=1, select bank1
  4427  0671  1303               	bcf	3,6	;RP1=0, select bank1
  4428  0672  00C1               	movwf	(displayLCD@valueU+1)^(0+128)
  4429  0673  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0674  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0675  0856               	movf	?___ftadd+2,w
  4432  0676  1683               	bsf	3,5	;RP0=1, select bank1
  4433  0677  1303               	bcf	3,6	;RP1=0, select bank1
  4434  0678  00C2               	movwf	(displayLCD@valueU+2)^(0+128)
  4435                           
  4436                           ;PIC16F917 Battery Management.c: 239: valueL = cellVolt[3] - cellVolt[2];
  4437  0679  3009               	movlw	9
  4438  067A  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4439  067B  0084               	movwf	4
  4440  067C  1383               	bcf	3,7	;select IRP bank1
  4441  067D  0800               	movf	0,w
  4442  067E  1283               	bcf	3,5	;RP0=0, select bank0
  4443  067F  1303               	bcf	3,6	;RP1=0, select bank0
  4444  0680  00D4               	movwf	___ftadd@f1
  4445  0681  0A84               	incf	4,f
  4446  0682  0800               	movf	0,w
  4447  0683  00D5               	movwf	___ftadd@f1+1
  4448  0684  0A84               	incf	4,f
  4449  0685  0800               	movf	0,w
  4450  0686  00D6               	movwf	___ftadd@f1+2
  4451  0687  3006               	movlw	6
  4452  0688  2EDF               	goto	L5
  4453  0689                     l3428:	
  4454                           ;PIC16F917 Battery Management.c: 252: }
  4455                           ;PIC16F917 Battery Management.c: 255: case 3:
  4456                           
  4457                           ;PIC16F917 Battery Management.c: 251: break;
  4458                           
  4459                           
  4460                           ;PIC16F917 Battery Management.c: 256: {
  4461                           ;PIC16F917 Battery Management.c: 257: itemU = 5;
  4462  0689  3005               	movlw	5
  4463  068A  1683               	bsf	3,5	;RP0=1, select bank1
  4464  068B  1303               	bcf	3,6	;RP1=0, select bank1
  4465  068C  00BD               	movwf	??_displayLCD^(0+128)
  4466  068D  083D               	movf	??_displayLCD^(0+128),w
  4467  068E  00C6               	movwf	displayLCD@itemU^(0+128)
  4468                           
  4469                           ;PIC16F917 Battery Management.c: 258: itemL = 6;
  4470  068F  3006               	movlw	6
  4471  0690  00BD               	movwf	??_displayLCD^(0+128)
  4472  0691  083D               	movf	??_displayLCD^(0+128),w
  4473  0692  00C7               	movwf	displayLCD@itemL^(0+128)
  4474                           
  4475                           ;PIC16F917 Battery Management.c: 259: valueU = cellVolt[4] - cellVolt[3];
  4476  0693  300C               	movlw	12
  4477  0694  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4478  0695  0084               	movwf	4
  4479  0696  1383               	bcf	3,7	;select IRP bank1
  4480  0697  0800               	movf	0,w
  4481  0698  1283               	bcf	3,5	;RP0=0, select bank0
  4482  0699  1303               	bcf	3,6	;RP1=0, select bank0
  4483  069A  00D4               	movwf	___ftadd@f1
  4484  069B  0A84               	incf	4,f
  4485  069C  0800               	movf	0,w
  4486  069D  00D5               	movwf	___ftadd@f1+1
  4487  069E  0A84               	incf	4,f
  4488  069F  0800               	movf	0,w
  4489  06A0  00D6               	movwf	___ftadd@f1+2
  4490  06A1  3009               	movlw	9
  4491  06A2  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4492  06A3  0084               	movwf	4
  4493  06A4  0800               	movf	0,w
  4494  06A5  00A0               	movwf	___ftneg@f1
  4495  06A6  0A84               	incf	4,f
  4496  06A7  0800               	movf	0,w
  4497  06A8  00A1               	movwf	___ftneg@f1+1
  4498  06A9  0A84               	incf	4,f
  4499  06AA  0800               	movf	0,w
  4500  06AB  00A2               	movwf	___ftneg@f1+2
  4501  06AC  160A  158A  20B1  120A  118A  	fcall	___ftneg
  4502  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  4503  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  4504  06B3  0820               	movf	?___ftneg,w
  4505  06B4  00D7               	movwf	___ftadd@f2
  4506  06B5  0821               	movf	?___ftneg+1,w
  4507  06B6  00D8               	movwf	___ftadd@f2+1
  4508  06B7  0822               	movf	?___ftneg+2,w
  4509  06B8  00D9               	movwf	___ftadd@f2+2
  4510  06B9  160A  118A  241E  120A  118A  	fcall	___ftadd
  4511  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  4512  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  4513  06C0  0854               	movf	?___ftadd,w
  4514  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  4515  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  4516  06C3  00C0               	movwf	displayLCD@valueU^(0+128)
  4517  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  4518  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  4519  06C6  0855               	movf	?___ftadd+1,w
  4520  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  4521  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  4522  06C9  00C1               	movwf	(displayLCD@valueU+1)^(0+128)
  4523  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  4524  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  4525  06CC  0856               	movf	?___ftadd+2,w
  4526  06CD  1683               	bsf	3,5	;RP0=1, select bank1
  4527  06CE  1303               	bcf	3,6	;RP1=0, select bank1
  4528  06CF  00C2               	movwf	(displayLCD@valueU+2)^(0+128)
  4529                           
  4530                           ;PIC16F917 Battery Management.c: 260: valueL = cellVolt[5] - cellVolt[4];
  4531  06D0  300F               	movlw	15
  4532  06D1  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4533  06D2  0084               	movwf	4
  4534  06D3  1383               	bcf	3,7	;select IRP bank1
  4535  06D4  0800               	movf	0,w
  4536  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  4537  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  4538  06D7  00D4               	movwf	___ftadd@f1
  4539  06D8  0A84               	incf	4,f
  4540  06D9  0800               	movf	0,w
  4541  06DA  00D5               	movwf	___ftadd@f1+1
  4542  06DB  0A84               	incf	4,f
  4543  06DC  0800               	movf	0,w
  4544  06DD  00D6               	movwf	___ftadd@f1+2
  4545  06DE  300C               	movlw	12
  4546  06DF                     L5:	
  4547  06DF  3ECA               	addlw	(low (_cellVolt| 0))& (0+255)
  4548  06E0  0084               	movwf	4
  4549  06E1  0800               	movf	0,w
  4550  06E2  00A0               	movwf	___ftneg@f1
  4551  06E3  0A84               	incf	4,f
  4552  06E4  0800               	movf	0,w
  4553  06E5  00A1               	movwf	___ftneg@f1+1
  4554  06E6  0A84               	incf	4,f
  4555  06E7  0800               	movf	0,w
  4556  06E8                     L4:	
  4557  06E8  00A2               	movwf	___ftneg@f1+2
  4558  06E9  160A  158A  20B1  120A  118A  	fcall	___ftneg
  4559  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  4560  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  4561  06F0  0820               	movf	?___ftneg,w
  4562  06F1  00D7               	movwf	___ftadd@f2
  4563  06F2  0821               	movf	?___ftneg+1,w
  4564  06F3  00D8               	movwf	___ftadd@f2+1
  4565  06F4  0822               	movf	?___ftneg+2,w
  4566  06F5  00D9               	movwf	___ftadd@f2+2
  4567  06F6  160A  118A  241E  120A  118A  	fcall	___ftadd
  4568  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  4569  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  4570  06FD  0854               	movf	?___ftadd,w
  4571  06FE  1683               	bsf	3,5	;RP0=1, select bank1
  4572  06FF  1303               	bcf	3,6	;RP1=0, select bank1
  4573  0700  00C3               	movwf	displayLCD@valueL^(0+128)
  4574  0701  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0702  1303               	bcf	3,6	;RP1=0, select bank0
  4576  0703  0855               	movf	?___ftadd+1,w
  4577  0704  1683               	bsf	3,5	;RP0=1, select bank1
  4578  0705  1303               	bcf	3,6	;RP1=0, select bank1
  4579  0706  00C4               	movwf	(displayLCD@valueL+1)^(0+128)
  4580  0707  1283               	bcf	3,5	;RP0=0, select bank0
  4581  0708  1303               	bcf	3,6	;RP1=0, select bank0
  4582  0709  0856               	movf	?___ftadd+2,w
  4583  070A  1683               	bsf	3,5	;RP0=1, select bank1
  4584  070B  1303               	bcf	3,6	;RP1=0, select bank1
  4585  070C                     L3:	
  4586  070C  00C5               	movwf	(displayLCD@valueL+2)^(0+128)
  4587                           
  4588                           ;PIC16F917 Battery Management.c: 273: }
  4589                           ;PIC16F917 Battery Management.c: 274: }
  4590                           
  4591                           ;PIC16F917 Battery Management.c: 272: break;
  4592  070D  2F23               	goto	l3438
  4593  070E                     l3436:	
  4594                           
  4595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4596                           ; Switch size 1, requested type "space"
  4597                           ; Number of cases is 1, Range of values is 0 to 0
  4598                           ; switch strategies available:
  4599                           ; Name         Instructions Cycles
  4600                           ; simple_byte            4     3 (average)
  4601                           ; direct_byte           11     8 (fixed)
  4602                           ; jumptable            260     6 (fixed)
  4603                           ;	Chosen strategy is simple_byte
  4604  070E  1283               	bcf	3,5	;RP0=0, select bank0
  4605  070F  1303               	bcf	3,6	;RP1=0, select bank0
  4606  0710  086E               	movf	displayLCD@disp+1,w
  4607  0711  3A00               	xorlw	0	; case 0
  4608  0712  1903               	skipnz
  4609  0713  2F15               	goto	l3502
  4610  0714  2F23               	goto	l3438
  4611  0715                     l3502:	
  4612                           
  4613                           ; Switch size 1, requested type "space"
  4614                           ; Number of cases is 4, Range of values is 0 to 3
  4615                           ; switch strategies available:
  4616                           ; Name         Instructions Cycles
  4617                           ; simple_byte           13     7 (average)
  4618                           ; direct_byte           20     8 (fixed)
  4619                           ; jumptable            260     6 (fixed)
  4620                           ;	Chosen strategy is simple_byte
  4621  0715  086D               	movf	displayLCD@disp,w
  4622  0716  3A00               	xorlw	0	; case 0
  4623  0717  1903               	skipnz
  4624  0718  2DE8               	goto	l3412
  4625  0719  3A01               	xorlw	1	; case 1
  4626  071A  1903               	skipnz
  4627  071B  2E04               	goto	l254
  4628  071C  3A03               	xorlw	3	; case 2
  4629  071D  1903               	skipnz
  4630  071E  2E32               	goto	l3422
  4631  071F  3A01               	xorlw	1	; case 3
  4632  0720  1903               	skipnz
  4633  0721  2E89               	goto	l3428
  4634  0722  2F23               	goto	l3438
  4635  0723                     l3438:	
  4636                           
  4637                           ;PIC16F917 Battery Management.c: 276: sprintf( topStr, "%u: %.2f         ", itemU, value
      +                          U );
  4638  0723  308B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4639  0724  1683               	bsf	3,5	;RP0=1, select bank1
  4640  0725  1303               	bcf	3,6	;RP1=0, select bank1
  4641  0726  00BD               	movwf	??_displayLCD^(0+128)
  4642  0727  083D               	movf	??_displayLCD^(0+128),w
  4643  0728  1283               	bcf	3,5	;RP0=0, select bank0
  4644  0729  1303               	bcf	3,6	;RP1=0, select bank0
  4645  072A  00E7               	movwf	sprintf@f
  4646  072B  1683               	bsf	3,5	;RP0=1, select bank1
  4647  072C  1303               	bcf	3,6	;RP1=0, select bank1
  4648  072D  0846               	movf	displayLCD@itemU^(0+128),w
  4649  072E  00BE               	movwf	(??_displayLCD+1)^(0+128)
  4650  072F  01BF               	clrf	((??_displayLCD+1)^(0+128)+1)
  4651  0730  083E               	movf	(??_displayLCD+1)^(0+128),w
  4652  0731  1283               	bcf	3,5	;RP0=0, select bank0
  4653  0732  1303               	bcf	3,6	;RP1=0, select bank0
  4654  0733  00E8               	movwf	?_sprintf+1
  4655  0734  1683               	bsf	3,5	;RP0=1, select bank1
  4656  0735  1303               	bcf	3,6	;RP1=0, select bank1
  4657  0736  083F               	movf	(??_displayLCD+2)^(0+128),w
  4658  0737  1283               	bcf	3,5	;RP0=0, select bank0
  4659  0738  1303               	bcf	3,6	;RP1=0, select bank0
  4660  0739  00E9               	movwf	?_sprintf+2
  4661  073A  1683               	bsf	3,5	;RP0=1, select bank1
  4662  073B  1303               	bcf	3,6	;RP1=0, select bank1
  4663  073C  0840               	movf	displayLCD@valueU^(0+128),w
  4664  073D  1283               	bcf	3,5	;RP0=0, select bank0
  4665  073E  1303               	bcf	3,6	;RP1=0, select bank0
  4666  073F  00EA               	movwf	?_sprintf+3
  4667  0740  1683               	bsf	3,5	;RP0=1, select bank1
  4668  0741  1303               	bcf	3,6	;RP1=0, select bank1
  4669  0742  0841               	movf	(displayLCD@valueU+1)^(0+128),w
  4670  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4671  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4672  0745  00EB               	movwf	?_sprintf+4
  4673  0746  1683               	bsf	3,5	;RP0=1, select bank1
  4674  0747  1303               	bcf	3,6	;RP1=0, select bank1
  4675  0748  0842               	movf	(displayLCD@valueU+2)^(0+128),w
  4676  0749  1283               	bcf	3,5	;RP0=0, select bank0
  4677  074A  1303               	bcf	3,6	;RP1=0, select bank0
  4678  074B  00EC               	movwf	?_sprintf+5
  4679  074C  30A0               	movlw	(low (_topStr| (0+256)))& (0+255)
  4680  074D  120A  158A  204B  120A  118A  	fcall	_sprintf
  4681                           
  4682                           ;PIC16F917 Battery Management.c: 278: LCDSetCursor(0x00);
  4683  0752  3000               	movlw	0
  4684  0753  160A  158A  22F6  120A  118A  	fcall	_LCDSetCursor
  4685                           
  4686                           ;PIC16F917 Battery Management.c: 279: LCDWriteString(topStr);
  4687  0758  30A0               	movlw	(low (_topStr| (0+256)))& (0+255)
  4688  0759  160A  158A  2195  120A  118A  	fcall	_LCDWriteString
  4689                           
  4690                           ;PIC16F917 Battery Management.c: 281: sprintf( btmStr, "%u: %.2f         ", itemL, value
      +                          L );
  4691  075E  308B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4692  075F  1683               	bsf	3,5	;RP0=1, select bank1
  4693  0760  1303               	bcf	3,6	;RP1=0, select bank1
  4694  0761  00BD               	movwf	??_displayLCD^(0+128)
  4695  0762  083D               	movf	??_displayLCD^(0+128),w
  4696  0763  1283               	bcf	3,5	;RP0=0, select bank0
  4697  0764  1303               	bcf	3,6	;RP1=0, select bank0
  4698  0765  00E7               	movwf	sprintf@f
  4699  0766  1683               	bsf	3,5	;RP0=1, select bank1
  4700  0767  1303               	bcf	3,6	;RP1=0, select bank1
  4701  0768  0847               	movf	displayLCD@itemL^(0+128),w
  4702  0769  00BE               	movwf	(??_displayLCD+1)^(0+128)
  4703  076A  01BF               	clrf	((??_displayLCD+1)^(0+128)+1)
  4704  076B  083E               	movf	(??_displayLCD+1)^(0+128),w
  4705  076C  1283               	bcf	3,5	;RP0=0, select bank0
  4706  076D  1303               	bcf	3,6	;RP1=0, select bank0
  4707  076E  00E8               	movwf	?_sprintf+1
  4708  076F  1683               	bsf	3,5	;RP0=1, select bank1
  4709  0770  1303               	bcf	3,6	;RP1=0, select bank1
  4710  0771  083F               	movf	(??_displayLCD+2)^(0+128),w
  4711  0772  1283               	bcf	3,5	;RP0=0, select bank0
  4712  0773  1303               	bcf	3,6	;RP1=0, select bank0
  4713  0774  00E9               	movwf	?_sprintf+2
  4714  0775  1683               	bsf	3,5	;RP0=1, select bank1
  4715  0776  1303               	bcf	3,6	;RP1=0, select bank1
  4716  0777  0843               	movf	displayLCD@valueL^(0+128),w
  4717  0778  1283               	bcf	3,5	;RP0=0, select bank0
  4718  0779  1303               	bcf	3,6	;RP1=0, select bank0
  4719  077A  00EA               	movwf	?_sprintf+3
  4720  077B  1683               	bsf	3,5	;RP0=1, select bank1
  4721  077C  1303               	bcf	3,6	;RP1=0, select bank1
  4722  077D  0844               	movf	(displayLCD@valueL+1)^(0+128),w
  4723  077E  1283               	bcf	3,5	;RP0=0, select bank0
  4724  077F  1303               	bcf	3,6	;RP1=0, select bank0
  4725  0780  00EB               	movwf	?_sprintf+4
  4726  0781  1683               	bsf	3,5	;RP0=1, select bank1
  4727  0782  1303               	bcf	3,6	;RP1=0, select bank1
  4728  0783  0845               	movf	(displayLCD@valueL+2)^(0+128),w
  4729  0784  1283               	bcf	3,5	;RP0=0, select bank0
  4730  0785  1303               	bcf	3,6	;RP1=0, select bank0
  4731  0786  00EC               	movwf	?_sprintf+5
  4732  0787  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  4733  0788  120A  158A  204B  120A  118A  	fcall	_sprintf
  4734                           
  4735                           ;PIC16F917 Battery Management.c: 283: LCDSetCursor(0x10);
  4736  078D  3010               	movlw	16
  4737  078E  160A  158A  22F6  120A  118A  	fcall	_LCDSetCursor
  4738                           
  4739                           ;PIC16F917 Battery Management.c: 284: LCDWriteString(btmStr);
  4740  0793  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  4741  0794  160A  158A  2195   	fcall	_LCDWriteString
  4742  0797  0008               	return
  4743  0798                     __end_of_displayLCD:	
  4744                           
  4745                           	psect	text18
  4746  084B                     __ptext18:	
  4747 ;; *************** function _sprintf *****************
  4748 ;; Defined at:
  4749 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  sp              1    wreg     PTR unsigned char 
  4752 ;;		 -> btmStr(16), topStr(16), 
  4753 ;;  f               1   71[BANK0 ] PTR const unsigned char 
  4754 ;;		 -> STR_2(18), STR_1(18), 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  sp              1   22[BANK1 ] PTR unsigned char 
  4757 ;;		 -> btmStr(16), topStr(16), 
  4758 ;;  tmpval          4   18[BANK1 ] struct .
  4759 ;;  val             4   12[BANK1 ] unsigned long 
  4760 ;;  fval            3   25[BANK1 ] unsigned long 
  4761 ;;  prec            2   23[BANK1 ] int 
  4762 ;;  exp             2   16[BANK1 ] int 
  4763 ;;  flag            2   10[BANK1 ] unsigned short 
  4764 ;;  cp              2    0        PTR const unsigned char 
  4765 ;;  len             2    0        unsigned int 
  4766 ;;  width           2    0        int 
  4767 ;;  c               1   28[BANK1 ] char 
  4768 ;;  ap              1    9[BANK1 ] PTR void [1]
  4769 ;;		 -> ?_sprintf(2), 
  4770 ;;  d               1    0        unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  2   71[BANK0 ] int 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4780 ;;      Params:         0       6       0       0       0
  4781 ;;      Locals:         0       0      23       0       0
  4782 ;;      Temps:          0       0       6       0       0
  4783 ;;      Totals:         0       6      29       0       0
  4784 ;;Total ram usage:       35 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    5
  4787 ;; This function calls:
  4788 ;;		___awdiv
  4789 ;;		___ftadd
  4790 ;;		___ftge
  4791 ;;		___ftmul
  4792 ;;		___ftneg
  4793 ;;		___ftsub
  4794 ;;		___fttol
  4795 ;;		___lldiv
  4796 ;;		___llmod
  4797 ;;		___lltoft
  4798 ;;		___wmul
  4799 ;;		__div_to_l_
  4800 ;;		__tdiv_to_l_
  4801 ;;		_fround
  4802 ;;		_isdigit
  4803 ;;		_scale
  4804 ;; This function is called by:
  4805 ;;		_displayLCD
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _sprintf
  4811  084B                     _sprintf:	
  4812                           
  4813                           ;incstack = 0
  4814                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4815                           ;sprintf@sp stored from wreg
  4816  084B  1683               	bsf	3,5	;RP0=1, select bank1
  4817  084C  1303               	bcf	3,6	;RP1=0, select bank1
  4818  084D  00B6               	movwf	sprintf@sp^(0+128)
  4819                           
  4820                           ;doprnt.c: 494: va_list ap;
  4821                           ;doprnt.c: 499: signed char c;
  4822                           ;doprnt.c: 501: int width;
  4823                           ;doprnt.c: 504: int prec;
  4824                           ;doprnt.c: 508: unsigned short flag;
  4825                           ;doprnt.c: 515: char d;
  4826                           ;doprnt.c: 516: double fval;
  4827                           ;doprnt.c: 517: int exp;
  4828                           ;doprnt.c: 523: union {
  4829                           ;doprnt.c: 524: unsigned long vd;
  4830                           ;doprnt.c: 525: double integ;
  4831                           ;doprnt.c: 526: } tmpval;
  4832                           ;doprnt.c: 528: unsigned long val;
  4833                           ;doprnt.c: 529: unsigned len;
  4834                           ;doprnt.c: 530: const char * cp;
  4835                           ;doprnt.c: 533: *ap = __va_start();
  4836  084E  3068               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4837  084F  00A0               	movwf	??_sprintf^(0+128)
  4838  0850  0820               	movf	??_sprintf^(0+128),w
  4839  0851  00A9               	movwf	sprintf@ap^(0+128)
  4840  0852                     l3236:	
  4841                           ;doprnt.c: 536: while(c = *f++) {
  4842                           
  4843  0852  3001               	movlw	1
  4844  0853  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0854  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0855  07E7               	addwf	sprintf@f,f
  4847  0856  30FF               	movlw	-1
  4848  0857  0767               	addwf	sprintf@f,w
  4849  0858  0084               	movwf	4
  4850  0859  160A  158A  2000  120A  158A  	fcall	stringdir
  4851  085E  1683               	bsf	3,5	;RP0=1, select bank1
  4852  085F  1303               	bcf	3,6	;RP1=0, select bank1
  4853  0860  00A0               	movwf	??_sprintf^(0+128)
  4854  0861  0820               	movf	??_sprintf^(0+128),w
  4855  0862  00BC               	movwf	sprintf@c^(0+128)
  4856  0863  083C               	movf	sprintf@c^(0+128),w
  4857  0864  1903               	btfsc	3,2
  4858  0865  2FFB               	goto	l3238
  4859                           
  4860                           ;doprnt.c: 538: if(c != '%')
  4861  0866  3025               	movlw	37
  4862  0867  063C               	xorwf	sprintf@c^(0+128),w
  4863  0868  1903               	btfsc	3,2
  4864  0869  2876               	goto	l3028
  4865                           
  4866                           ;doprnt.c: 540: {
  4867                           ;doprnt.c: 541: ((*sp++ = (c)));
  4868  086A  083C               	movf	sprintf@c^(0+128),w
  4869  086B  00A0               	movwf	??_sprintf^(0+128)
  4870  086C  0836               	movf	sprintf@sp^(0+128),w
  4871  086D  0084               	movwf	4
  4872  086E  0820               	movf	??_sprintf^(0+128),w
  4873  086F  1783               	bsf	3,7	;select IRP bank2
  4874  0870  0080               	movwf	0
  4875  0871  3001               	movlw	1
  4876  0872  00A0               	movwf	??_sprintf^(0+128)
  4877  0873  0820               	movf	??_sprintf^(0+128),w
  4878  0874  07B6               	addwf	sprintf@sp^(0+128),f
  4879                           
  4880                           ;doprnt.c: 542: continue;
  4881  0875  2852               	goto	l3236
  4882  0876                     l3028:	
  4883                           
  4884                           ;doprnt.c: 543: }
  4885                           ;doprnt.c: 548: flag = 0;
  4886  0876  01AA               	clrf	sprintf@flag^(0+128)
  4887  0877  01AB               	clrf	(sprintf@flag+1)^(0+128)
  4888                           
  4889                           ;doprnt.c: 611: if(*f == '.') {
  4890  0878  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0879  1303               	bcf	3,6	;RP1=0, select bank0
  4892  087A  0867               	movf	sprintf@f,w
  4893  087B  0084               	movwf	4
  4894  087C  160A  158A  2000  120A  158A  	fcall	stringdir
  4895  0881  3A2E               	xorlw	46
  4896  0882  1D03               	skipz
  4897  0883  28DA               	goto	l3044
  4898                           
  4899                           ;doprnt.c: 612: flag |= 0x4000;
  4900  0884  1683               	bsf	3,5	;RP0=1, select bank1
  4901  0885  1303               	bcf	3,6	;RP1=0, select bank1
  4902  0886  172B               	bsf	(sprintf@flag^(0+128)+1),6
  4903                           
  4904                           ;doprnt.c: 613: f++;
  4905  0887  3001               	movlw	1
  4906  0888  00A0               	movwf	??_sprintf^(0+128)
  4907  0889  0820               	movf	??_sprintf^(0+128),w
  4908  088A  1283               	bcf	3,5	;RP0=0, select bank0
  4909  088B  1303               	bcf	3,6	;RP1=0, select bank0
  4910  088C  07E7               	addwf	sprintf@f,f
  4911                           
  4912                           ;doprnt.c: 620: {
  4913                           ;doprnt.c: 621: prec = 0;
  4914  088D  1683               	bsf	3,5	;RP0=1, select bank1
  4915  088E  1303               	bcf	3,6	;RP1=0, select bank1
  4916  088F  01B7               	clrf	sprintf@prec^(0+128)
  4917  0890  01B8               	clrf	(sprintf@prec+1)^(0+128)
  4918  0891                     l3042:	
  4919                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4920                           
  4921  0891  1283               	bcf	3,5	;RP0=0, select bank0
  4922  0892  0867               	movf	sprintf@f,w
  4923  0893  0084               	movwf	4
  4924  0894  160A  158A  2000  120A  158A  	fcall	stringdir
  4925  0899  160A  158A  20DA  120A  158A  	fcall	_isdigit
  4926  089E  1C03               	btfss	3,0
  4927  089F  28E7               	goto	l3052
  4928                           
  4929                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4930  08A0  1683               	bsf	3,5	;RP0=1, select bank1
  4931  08A1  1303               	bcf	3,6	;RP1=0, select bank1
  4932  08A2  0838               	movf	(sprintf@prec+1)^(0+128),w
  4933  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  4934  08A4  1303               	bcf	3,6	;RP1=0, select bank0
  4935  08A5  00A1               	movwf	___wmul@multiplier+1
  4936  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  4937  08A7  1303               	bcf	3,6	;RP1=0, select bank1
  4938  08A8  0837               	movf	sprintf@prec^(0+128),w
  4939  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  4940  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  4941  08AB  00A0               	movwf	___wmul@multiplier
  4942  08AC  300A               	movlw	10
  4943  08AD  00A2               	movwf	___wmul@multiplicand
  4944  08AE  3000               	movlw	0
  4945  08AF  00A3               	movwf	___wmul@multiplicand+1
  4946  08B0  160A  158A  21B8  120A  158A  	fcall	___wmul
  4947  08B5  1283               	bcf	3,5	;RP0=0, select bank0
  4948  08B6  1303               	bcf	3,6	;RP1=0, select bank0
  4949  08B7  0867               	movf	sprintf@f,w
  4950  08B8  0084               	movwf	4
  4951  08B9  160A  158A  2000  120A  158A  	fcall	stringdir
  4952  08BE  0720               	addwf	?___wmul,w
  4953  08BF  1683               	bsf	3,5	;RP0=1, select bank1
  4954  08C0  1303               	bcf	3,6	;RP1=0, select bank1
  4955  08C1  00A0               	movwf	??_sprintf^(0+128)
  4956  08C2  3000               	movlw	0
  4957  08C3  1803               	skipnc
  4958  08C4  3001               	movlw	1
  4959  08C5  1283               	bcf	3,5	;RP0=0, select bank0
  4960  08C6  1303               	bcf	3,6	;RP1=0, select bank0
  4961  08C7  0721               	addwf	?___wmul+1,w
  4962  08C8  1683               	bsf	3,5	;RP0=1, select bank1
  4963  08C9  1303               	bcf	3,6	;RP1=0, select bank1
  4964  08CA  00A1               	movwf	(??_sprintf+1)^(0+128)
  4965  08CB  0820               	movf	??_sprintf^(0+128),w
  4966  08CC  3ED0               	addlw	208
  4967  08CD  00B7               	movwf	sprintf@prec^(0+128)
  4968  08CE  0821               	movf	(??_sprintf+1)^(0+128),w
  4969  08CF  1803               	skipnc
  4970  08D0  3E01               	addlw	1
  4971  08D1  3EFF               	addlw	255
  4972  08D2  00B8               	movwf	(sprintf@prec+1)^(0+128)
  4973  08D3  3001               	movlw	1
  4974  08D4  00A0               	movwf	??_sprintf^(0+128)
  4975  08D5  0820               	movf	??_sprintf^(0+128),w
  4976  08D6  1283               	bcf	3,5	;RP0=0, select bank0
  4977  08D7  1303               	bcf	3,6	;RP1=0, select bank0
  4978  08D8  07E7               	addwf	sprintf@f,f
  4979  08D9  2891               	goto	l3042
  4980  08DA                     l3044:	
  4981                           ;doprnt.c: 624: }
  4982                           ;doprnt.c: 625: } else {
  4983                           
  4984                           
  4985                           ;doprnt.c: 626: prec = 0;
  4986  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  4987  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  4988  08DC  01B7               	clrf	sprintf@prec^(0+128)
  4989  08DD  01B8               	clrf	(sprintf@prec+1)^(0+128)
  4990                           
  4991                           ;doprnt.c: 628: flag |= 0x1000;
  4992  08DE  162B               	bsf	(sprintf@flag^(0+128)+1),4
  4993                           
  4994                           ;doprnt.c: 630: }
  4995                           ;doprnt.c: 635: switch(c = *f++) {
  4996  08DF  28E7               	goto	l3052
  4997  08E0                     l327:	
  4998                           ;doprnt.c: 662: case 'f':
  4999                           
  5000                           ;doprnt.c: 638: goto alldone;
  5001                           
  5002                           ;doprnt.c: 637: case 0:
  5003                           
  5004                           
  5005                           ;doprnt.c: 663: flag |= 0x400;
  5006  08E0  152B               	bsf	(sprintf@flag^(0+128)+1),2
  5007                           
  5008                           ;doprnt.c: 664: break;
  5009  08E1  2900               	goto	l3054
  5010  08E2                     l3048:	
  5011                           ;doprnt.c: 817: case 'u':
  5012                           
  5013                           ;doprnt.c: 813: continue;
  5014                           
  5015                           ;doprnt.c: 802: default:
  5016                           
  5017                           
  5018                           ;doprnt.c: 818: flag |= 0xC0;
  5019  08E2  30C0               	movlw	192
  5020  08E3  04AA               	iorwf	sprintf@flag^(0+128),f
  5021  08E4  3000               	movlw	0
  5022  08E5  04AB               	iorwf	(sprintf@flag+1)^(0+128),f
  5023                           
  5024                           ;doprnt.c: 822: }
  5025                           
  5026                           ;doprnt.c: 819: break;
  5027  08E6  2900               	goto	l3054
  5028  08E7                     l3052:	
  5029  08E7  3001               	movlw	1
  5030  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  5031  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  5032  08EA  07E7               	addwf	sprintf@f,f
  5033  08EB  30FF               	movlw	-1
  5034  08EC  0767               	addwf	sprintf@f,w
  5035  08ED  0084               	movwf	4
  5036  08EE  160A  158A  2000  120A  158A  	fcall	stringdir
  5037  08F3  1683               	bsf	3,5	;RP0=1, select bank1
  5038  08F4  1303               	bcf	3,6	;RP1=0, select bank1
  5039  08F5  00BC               	movwf	sprintf@c^(0+128)
  5040                           
  5041                           ; Switch size 1, requested type "space"
  5042                           ; Number of cases is 3, Range of values is 0 to 117
  5043                           ; switch strategies available:
  5044                           ; Name         Instructions Cycles
  5045                           ; simple_byte           10     6 (average)
  5046                           ; jumptable            260     6 (fixed)
  5047                           ;	Chosen strategy is simple_byte
  5048  08F6  3A00               	xorlw	0	; case 0
  5049  08F7  1903               	skipnz
  5050  08F8  2FFB               	goto	l3238
  5051  08F9  3A66               	xorlw	102	; case 102
  5052  08FA  1903               	skipnz
  5053  08FB  28E0               	goto	l327
  5054  08FC  3A13               	xorlw	19	; case 117
  5055  08FD  1903               	skipnz
  5056  08FE  28E2               	goto	l3048
  5057  08FF  2852               	goto	l3236
  5058  0900                     l3054:	
  5059                           
  5060                           ;doprnt.c: 825: if(flag & (0x700)) {
  5061  0900  3000               	movlw	0
  5062  0901  052A               	andwf	sprintf@flag^(0+128),w
  5063  0902  00A0               	movwf	??_sprintf^(0+128)
  5064  0903  3007               	movlw	7
  5065  0904  052B               	andwf	(sprintf@flag+1)^(0+128),w
  5066  0905  00A1               	movwf	(??_sprintf+1)^(0+128)
  5067  0906  0820               	movf	??_sprintf^(0+128),w
  5068  0907  0421               	iorwf	(??_sprintf^(0+128)+1),w
  5069  0908  1903               	btfsc	3,2
  5070  0909  2EDA               	goto	l3194
  5071                           
  5072                           ;doprnt.c: 827: if(flag & 0x1000)
  5073  090A  1E2B               	btfss	(sprintf@flag+1)^(0+128),4
  5074  090B  2910               	goto	l3060
  5075                           
  5076                           ;doprnt.c: 829: prec = 6;
  5077  090C  3006               	movlw	6
  5078  090D  00B7               	movwf	sprintf@prec^(0+128)
  5079  090E  3000               	movlw	0
  5080  090F  00B8               	movwf	(sprintf@prec^(0+128)+1)
  5081  0910                     l3060:	
  5082                           
  5083                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5084  0910  0829               	movf	sprintf@ap^(0+128),w
  5085  0911  0084               	movwf	4
  5086  0912  1383               	bcf	3,7	;select IRP bank0
  5087  0913  0800               	movf	0,w
  5088  0914  00B9               	movwf	sprintf@fval^(0+128)
  5089  0915  0A84               	incf	4,f
  5090  0916  0800               	movf	0,w
  5091  0917  00BA               	movwf	(sprintf@fval+1)^(0+128)
  5092  0918  0A84               	incf	4,f
  5093  0919  0800               	movf	0,w
  5094  091A  00BB               	movwf	(sprintf@fval+2)^(0+128)
  5095  091B  3003               	movlw	3
  5096  091C  00A0               	movwf	??_sprintf^(0+128)
  5097  091D  0820               	movf	??_sprintf^(0+128),w
  5098  091E  07A9               	addwf	sprintf@ap^(0+128),f
  5099                           
  5100                           ;doprnt.c: 831: if(fval < 0.0) {
  5101  091F  0839               	movf	sprintf@fval^(0+128),w
  5102  0920  1283               	bcf	3,5	;RP0=0, select bank0
  5103  0921  1303               	bcf	3,6	;RP1=0, select bank0
  5104  0922  00A0               	movwf	___ftge@ff1
  5105  0923  1683               	bsf	3,5	;RP0=1, select bank1
  5106  0924  1303               	bcf	3,6	;RP1=0, select bank1
  5107  0925  083A               	movf	(sprintf@fval+1)^(0+128),w
  5108  0926  1283               	bcf	3,5	;RP0=0, select bank0
  5109  0927  1303               	bcf	3,6	;RP1=0, select bank0
  5110  0928  00A1               	movwf	___ftge@ff1+1
  5111  0929  1683               	bsf	3,5	;RP0=1, select bank1
  5112  092A  1303               	bcf	3,6	;RP1=0, select bank1
  5113  092B  083B               	movf	(sprintf@fval+2)^(0+128),w
  5114  092C  1283               	bcf	3,5	;RP0=0, select bank0
  5115  092D  1303               	bcf	3,6	;RP1=0, select bank0
  5116  092E  00A2               	movwf	___ftge@ff1+2
  5117  092F  3000               	movlw	0
  5118  0930  00A3               	movwf	___ftge@ff2
  5119  0931  3000               	movlw	0
  5120  0932  00A4               	movwf	___ftge@ff2+1
  5121  0933  3000               	movlw	0
  5122  0934  00A5               	movwf	___ftge@ff2+2
  5123  0935  160A  158A  24BA  120A  158A  	fcall	___ftge
  5124  093A  1803               	btfsc	3,0
  5125  093B  2969               	goto	l3070
  5126                           
  5127                           ;doprnt.c: 832: fval = -fval;
  5128  093C  1683               	bsf	3,5	;RP0=1, select bank1
  5129  093D  1303               	bcf	3,6	;RP1=0, select bank1
  5130  093E  0839               	movf	sprintf@fval^(0+128),w
  5131  093F  1283               	bcf	3,5	;RP0=0, select bank0
  5132  0940  1303               	bcf	3,6	;RP1=0, select bank0
  5133  0941  00A0               	movwf	___ftneg@f1
  5134  0942  1683               	bsf	3,5	;RP0=1, select bank1
  5135  0943  1303               	bcf	3,6	;RP1=0, select bank1
  5136  0944  083A               	movf	(sprintf@fval+1)^(0+128),w
  5137  0945  1283               	bcf	3,5	;RP0=0, select bank0
  5138  0946  1303               	bcf	3,6	;RP1=0, select bank0
  5139  0947  00A1               	movwf	___ftneg@f1+1
  5140  0948  1683               	bsf	3,5	;RP0=1, select bank1
  5141  0949  1303               	bcf	3,6	;RP1=0, select bank1
  5142  094A  083B               	movf	(sprintf@fval+2)^(0+128),w
  5143  094B  1283               	bcf	3,5	;RP0=0, select bank0
  5144  094C  1303               	bcf	3,6	;RP1=0, select bank0
  5145  094D  00A2               	movwf	___ftneg@f1+2
  5146  094E  160A  158A  20B1  120A  158A  	fcall	___ftneg
  5147  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0955  0820               	movf	?___ftneg,w
  5150  0956  1683               	bsf	3,5	;RP0=1, select bank1
  5151  0957  1303               	bcf	3,6	;RP1=0, select bank1
  5152  0958  00B9               	movwf	sprintf@fval^(0+128)
  5153  0959  1283               	bcf	3,5	;RP0=0, select bank0
  5154  095A  1303               	bcf	3,6	;RP1=0, select bank0
  5155  095B  0821               	movf	?___ftneg+1,w
  5156  095C  1683               	bsf	3,5	;RP0=1, select bank1
  5157  095D  1303               	bcf	3,6	;RP1=0, select bank1
  5158  095E  00BA               	movwf	(sprintf@fval+1)^(0+128)
  5159  095F  1283               	bcf	3,5	;RP0=0, select bank0
  5160  0960  1303               	bcf	3,6	;RP1=0, select bank0
  5161  0961  0822               	movf	?___ftneg+2,w
  5162  0962  1683               	bsf	3,5	;RP0=1, select bank1
  5163  0963  1303               	bcf	3,6	;RP1=0, select bank1
  5164  0964  00BB               	movwf	(sprintf@fval+2)^(0+128)
  5165                           
  5166                           ;doprnt.c: 833: flag |= 0x03;
  5167  0965  3003               	movlw	3
  5168  0966  04AA               	iorwf	sprintf@flag^(0+128),f
  5169  0967  3000               	movlw	0
  5170  0968  04AB               	iorwf	(sprintf@flag+1)^(0+128),f
  5171  0969                     l3070:	
  5172                           
  5173                           ;doprnt.c: 834: }
  5174                           ;doprnt.c: 835: exp = 0;
  5175  0969  1683               	bsf	3,5	;RP0=1, select bank1
  5176  096A  1303               	bcf	3,6	;RP1=0, select bank1
  5177  096B  01B0               	clrf	sprintf@exp^(0+128)
  5178  096C  01B1               	clrf	(sprintf@exp+1)^(0+128)
  5179                           
  5180                           ;doprnt.c: 836: if( fval!=0) {
  5181  096D  083B               	movf	(sprintf@fval+2)^(0+128),w
  5182  096E  043A               	iorwf	(sprintf@fval+1)^(0+128),w
  5183  096F  0439               	iorwf	sprintf@fval^(0+128),w
  5184  0970  1903               	skipnz
  5185  0971  2A89               	goto	l3098
  5186                           
  5187                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5188  0972  30B9               	movlw	low (sprintf@fval| 0)
  5189  0973  0084               	movwf	4
  5190  0974  1383               	bcf	3,7	;select IRP bank1
  5191  0975  0800               	movf	0,w
  5192  0976  00A0               	movwf	??_sprintf^(0+128)
  5193  0977  0A84               	incf	4,f
  5194  0978  0800               	movf	0,w
  5195  0979  00A1               	movwf	(??_sprintf^(0+128)+1)
  5196  097A  0A84               	incf	4,f
  5197  097B  0800               	movf	0,w
  5198  097C  00A2               	movwf	(??_sprintf^(0+128)+2)
  5199  097D  0A84               	incf	4,f
  5200  097E  0800               	movf	0,w
  5201  097F  00A3               	movwf	(??_sprintf^(0+128)+3)
  5202  0980  300F               	movlw	15
  5203  0981                     u4105:	
  5204  0981  1003               	clrc
  5205  0982  0CA3               	rrf	(??_sprintf^(0+128)+3),f
  5206  0983  0CA2               	rrf	(??_sprintf^(0+128)+2),f
  5207  0984  0CA1               	rrf	(??_sprintf^(0+128)+1),f
  5208  0985  0CA0               	rrf	??_sprintf^(0+128),f
  5209  0986  3EFF               	addlw	-1
  5210  0987  1D03               	skipz
  5211  0988  2981               	goto	u4105
  5212  0989  30FF               	movlw	255
  5213  098A  0520               	andwf	??_sprintf^(0+128),w
  5214  098B  00A4               	movwf	(??_sprintf+4)^(0+128)
  5215  098C  3000               	movlw	0
  5216  098D  0521               	andwf	(??_sprintf+1)^(0+128),w
  5217  098E  00A5               	movwf	(??_sprintf+5)^(0+128)
  5218  098F  0824               	movf	(??_sprintf+4)^(0+128),w
  5219  0990  3E82               	addlw	130
  5220  0991  00B0               	movwf	sprintf@exp^(0+128)
  5221  0992  0825               	movf	(??_sprintf+5)^(0+128),w
  5222  0993  1803               	skipnc
  5223  0994  3E01               	addlw	1
  5224  0995  3EFF               	addlw	255
  5225  0996  00B1               	movwf	(sprintf@exp+1)^(0+128)
  5226                           
  5227                           ;doprnt.c: 838: exp--;
  5228  0997  30FF               	movlw	255
  5229  0998  07B0               	addwf	sprintf@exp^(0+128),f
  5230  0999  1803               	skipnc
  5231  099A  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  5232  099B  30FF               	movlw	255
  5233  099C  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  5234                           
  5235                           ;doprnt.c: 839: exp *= 3;
  5236  099D  3003               	movlw	3
  5237  099E  1283               	bcf	3,5	;RP0=0, select bank0
  5238  099F  1303               	bcf	3,6	;RP1=0, select bank0
  5239  09A0  00A0               	movwf	___wmul@multiplier
  5240  09A1  3000               	movlw	0
  5241  09A2  00A1               	movwf	___wmul@multiplier+1
  5242  09A3  1683               	bsf	3,5	;RP0=1, select bank1
  5243  09A4  1303               	bcf	3,6	;RP1=0, select bank1
  5244  09A5  0831               	movf	(sprintf@exp+1)^(0+128),w
  5245  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  5246  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  5247  09A8  00A3               	movwf	___wmul@multiplicand+1
  5248  09A9  1683               	bsf	3,5	;RP0=1, select bank1
  5249  09AA  1303               	bcf	3,6	;RP1=0, select bank1
  5250  09AB  0830               	movf	sprintf@exp^(0+128),w
  5251  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  5252  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  5253  09AE  00A2               	movwf	___wmul@multiplicand
  5254  09AF  160A  158A  21B8  120A  158A  	fcall	___wmul
  5255  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  5256  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  5257  09B6  0821               	movf	?___wmul+1,w
  5258  09B7  1683               	bsf	3,5	;RP0=1, select bank1
  5259  09B8  1303               	bcf	3,6	;RP1=0, select bank1
  5260  09B9  00B1               	movwf	(sprintf@exp+1)^(0+128)
  5261  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  5262  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  5263  09BC  0820               	movf	?___wmul,w
  5264  09BD  1683               	bsf	3,5	;RP0=1, select bank1
  5265  09BE  1303               	bcf	3,6	;RP1=0, select bank1
  5266  09BF  00B0               	movwf	sprintf@exp^(0+128)
  5267                           
  5268                           ;doprnt.c: 840: exp /= 10;
  5269  09C0  300A               	movlw	10
  5270  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  5271  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  5272  09C3  00A7               	movwf	___awdiv@divisor
  5273  09C4  3000               	movlw	0
  5274  09C5  00A8               	movwf	___awdiv@divisor+1
  5275  09C6  1683               	bsf	3,5	;RP0=1, select bank1
  5276  09C7  1303               	bcf	3,6	;RP1=0, select bank1
  5277  09C8  0831               	movf	(sprintf@exp+1)^(0+128),w
  5278  09C9  1283               	bcf	3,5	;RP0=0, select bank0
  5279  09CA  1303               	bcf	3,6	;RP1=0, select bank0
  5280  09CB  00AA               	movwf	___awdiv@dividend+1
  5281  09CC  1683               	bsf	3,5	;RP0=1, select bank1
  5282  09CD  1303               	bcf	3,6	;RP1=0, select bank1
  5283  09CE  0830               	movf	sprintf@exp^(0+128),w
  5284  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  5285  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  5286  09D1  00A9               	movwf	___awdiv@dividend
  5287  09D2  160A  158A  2403  120A  158A  	fcall	___awdiv
  5288  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  5289  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  5290  09D9  0828               	movf	?___awdiv+1,w
  5291  09DA  1683               	bsf	3,5	;RP0=1, select bank1
  5292  09DB  1303               	bcf	3,6	;RP1=0, select bank1
  5293  09DC  00B1               	movwf	(sprintf@exp+1)^(0+128)
  5294  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  5295  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  5296  09DF  0827               	movf	?___awdiv,w
  5297  09E0  1683               	bsf	3,5	;RP0=1, select bank1
  5298  09E1  1303               	bcf	3,6	;RP1=0, select bank1
  5299  09E2  00B0               	movwf	sprintf@exp^(0+128)
  5300                           
  5301                           ;doprnt.c: 841: if(exp < 0)
  5302  09E3  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  5303  09E4  29EB               	goto	l3086
  5304                           
  5305                           ;doprnt.c: 842: exp--;
  5306  09E5  30FF               	movlw	255
  5307  09E6  07B0               	addwf	sprintf@exp^(0+128),f
  5308  09E7  1803               	skipnc
  5309  09E8  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  5310  09E9  30FF               	movlw	255
  5311  09EA  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  5312  09EB                     l3086:	
  5313                           
  5314                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5315  09EB  0330               	decf	sprintf@exp^(0+128),w
  5316  09EC  3AFF               	xorlw	255
  5317  09ED  120A  118A  2334  120A  158A  	fcall	_scale
  5318  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  5319  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  5320  09F4  0844               	movf	?_scale,w
  5321  09F5  1683               	bsf	3,5	;RP0=1, select bank1
  5322  09F6  1303               	bcf	3,6	;RP1=0, select bank1
  5323  09F7  00B2               	movwf	sprintf@tmpval^(0+128)
  5324  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  5325  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  5326  09FA  0845               	movf	?_scale+1,w
  5327  09FB  1683               	bsf	3,5	;RP0=1, select bank1
  5328  09FC  1303               	bcf	3,6	;RP1=0, select bank1
  5329  09FD  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  5330  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  5331  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0A00  0846               	movf	?_scale+2,w
  5333  0A01  1683               	bsf	3,5	;RP0=1, select bank1
  5334  0A02  1303               	bcf	3,6	;RP1=0, select bank1
  5335  0A03  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  5336                           
  5337                           ;doprnt.c: 847: tmpval.integ *= fval;
  5338  0A04  0839               	movf	sprintf@fval^(0+128),w
  5339  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  5341  0A07  00B4               	movwf	___ftmul@f1
  5342  0A08  1683               	bsf	3,5	;RP0=1, select bank1
  5343  0A09  1303               	bcf	3,6	;RP1=0, select bank1
  5344  0A0A  083A               	movf	(sprintf@fval+1)^(0+128),w
  5345  0A0B  1283               	bcf	3,5	;RP0=0, select bank0
  5346  0A0C  1303               	bcf	3,6	;RP1=0, select bank0
  5347  0A0D  00B5               	movwf	___ftmul@f1+1
  5348  0A0E  1683               	bsf	3,5	;RP0=1, select bank1
  5349  0A0F  1303               	bcf	3,6	;RP1=0, select bank1
  5350  0A10  083B               	movf	(sprintf@fval+2)^(0+128),w
  5351  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0A13  00B6               	movwf	___ftmul@f1+2
  5354  0A14  1683               	bsf	3,5	;RP0=1, select bank1
  5355  0A15  1303               	bcf	3,6	;RP1=0, select bank1
  5356  0A16  0832               	movf	sprintf@tmpval^(0+128),w
  5357  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  5358  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0A19  00B7               	movwf	___ftmul@f2
  5360  0A1A  1683               	bsf	3,5	;RP0=1, select bank1
  5361  0A1B  1303               	bcf	3,6	;RP1=0, select bank1
  5362  0A1C  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  5363  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  5364  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  5365  0A1F  00B8               	movwf	___ftmul@f2+1
  5366  0A20  1683               	bsf	3,5	;RP0=1, select bank1
  5367  0A21  1303               	bcf	3,6	;RP1=0, select bank1
  5368  0A22  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  5369  0A23  1283               	bcf	3,5	;RP0=0, select bank0
  5370  0A24  1303               	bcf	3,6	;RP1=0, select bank0
  5371  0A25  00B9               	movwf	___ftmul@f2+2
  5372  0A26  160A  118A  226C  120A  158A  	fcall	___ftmul
  5373  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  5375  0A2D  0834               	movf	?___ftmul,w
  5376  0A2E  1683               	bsf	3,5	;RP0=1, select bank1
  5377  0A2F  1303               	bcf	3,6	;RP1=0, select bank1
  5378  0A30  00B2               	movwf	sprintf@tmpval^(0+128)
  5379  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  5380  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  5381  0A33  0835               	movf	?___ftmul+1,w
  5382  0A34  1683               	bsf	3,5	;RP0=1, select bank1
  5383  0A35  1303               	bcf	3,6	;RP1=0, select bank1
  5384  0A36  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  5385  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  5386  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  5387  0A39  0836               	movf	?___ftmul+2,w
  5388  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  5389  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  5390  0A3C  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  5391                           
  5392                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5393  0A3D  0832               	movf	sprintf@tmpval^(0+128),w
  5394  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  5395  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  5396  0A40  00A0               	movwf	___ftge@ff1
  5397  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  5398  0A42  1303               	bcf	3,6	;RP1=0, select bank1
  5399  0A43  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  5400  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  5401  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  5402  0A46  00A1               	movwf	___ftge@ff1+1
  5403  0A47  1683               	bsf	3,5	;RP0=1, select bank1
  5404  0A48  1303               	bcf	3,6	;RP1=0, select bank1
  5405  0A49  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  5406  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  5407  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  5408  0A4C  00A2               	movwf	___ftge@ff1+2
  5409  0A4D  3000               	movlw	0
  5410  0A4E  00A3               	movwf	___ftge@ff2
  5411  0A4F  3080               	movlw	128
  5412  0A50  00A4               	movwf	___ftge@ff2+1
  5413  0A51  303F               	movlw	63
  5414  0A52  00A5               	movwf	___ftge@ff2+2
  5415  0A53  160A  158A  24BA  120A  158A  	fcall	___ftge
  5416  0A58  1803               	btfsc	3,0
  5417  0A59  2A62               	goto	l3094
  5418                           
  5419                           ;doprnt.c: 849: exp--;
  5420  0A5A  30FF               	movlw	255
  5421  0A5B  1683               	bsf	3,5	;RP0=1, select bank1
  5422  0A5C  1303               	bcf	3,6	;RP1=0, select bank1
  5423  0A5D  07B0               	addwf	sprintf@exp^(0+128),f
  5424  0A5E  1803               	skipnc
  5425  0A5F  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  5426  0A60  30FF               	movlw	255
  5427  0A61  2A88               	goto	L6
  5428  0A62                     l3094:	
  5429                           
  5430                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5431  0A62  1683               	bsf	3,5	;RP0=1, select bank1
  5432  0A63  1303               	bcf	3,6	;RP1=0, select bank1
  5433  0A64  0832               	movf	sprintf@tmpval^(0+128),w
  5434  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  5435  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  5436  0A67  00A0               	movwf	___ftge@ff1
  5437  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  5438  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  5439  0A6A  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  5440  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  5441  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  5442  0A6D  00A1               	movwf	___ftge@ff1+1
  5443  0A6E  1683               	bsf	3,5	;RP0=1, select bank1
  5444  0A6F  1303               	bcf	3,6	;RP1=0, select bank1
  5445  0A70  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  5446  0A71  1283               	bcf	3,5	;RP0=0, select bank0
  5447  0A72  1303               	bcf	3,6	;RP1=0, select bank0
  5448  0A73  00A2               	movwf	___ftge@ff1+2
  5449  0A74  3000               	movlw	0
  5450  0A75  00A3               	movwf	___ftge@ff2
  5451  0A76  3020               	movlw	32
  5452  0A77  00A4               	movwf	___ftge@ff2+1
  5453  0A78  3041               	movlw	65
  5454  0A79  00A5               	movwf	___ftge@ff2+2
  5455  0A7A  160A  158A  24BA  120A  158A  	fcall	___ftge
  5456  0A7F  1C03               	btfss	3,0
  5457  0A80  2A89               	goto	l3098
  5458                           
  5459                           ;doprnt.c: 851: exp++;
  5460  0A81  3001               	movlw	1
  5461  0A82  1683               	bsf	3,5	;RP0=1, select bank1
  5462  0A83  1303               	bcf	3,6	;RP1=0, select bank1
  5463  0A84  07B0               	addwf	sprintf@exp^(0+128),f
  5464  0A85  1803               	skipnc
  5465  0A86  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  5466  0A87  3000               	movlw	0
  5467  0A88                     L6:	
  5468  0A88  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  5469  0A89                     l3098:	
  5470                           
  5471                           ;doprnt.c: 852: }
  5472                           ;doprnt.c: 1112: if(prec <= 12)
  5473  0A89  1683               	bsf	3,5	;RP0=1, select bank1
  5474  0A8A  1303               	bcf	3,6	;RP1=0, select bank1
  5475  0A8B  0838               	movf	(sprintf@prec+1)^(0+128),w
  5476  0A8C  3A80               	xorlw	128
  5477  0A8D  00FF               	movwf	127
  5478  0A8E  3080               	movlw	128
  5479  0A8F  027F               	subwf	127,w
  5480  0A90  1D03               	skipz
  5481  0A91  2A94               	goto	u4145
  5482  0A92  300D               	movlw	13
  5483  0A93  0237               	subwf	sprintf@prec^(0+128),w
  5484  0A94                     u4145:	
  5485  0A94  1803               	skipnc
  5486  0A95  2ACF               	goto	l3102
  5487                           
  5488                           ;doprnt.c: 1113: fval += fround(prec);
  5489  0A96  1683               	bsf	3,5	;RP0=1, select bank1
  5490  0A97  1303               	bcf	3,6	;RP1=0, select bank1
  5491  0A98  0837               	movf	sprintf@prec^(0+128),w
  5492  0A99  160A  118A  265A  120A  158A  	fcall	_fround
  5493  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0AA0  0844               	movf	?_fround,w
  5496  0AA1  00D4               	movwf	___ftadd@f1
  5497  0AA2  0845               	movf	?_fround+1,w
  5498  0AA3  00D5               	movwf	___ftadd@f1+1
  5499  0AA4  0846               	movf	?_fround+2,w
  5500  0AA5  00D6               	movwf	___ftadd@f1+2
  5501  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  5502  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  5503  0AA8  0839               	movf	sprintf@fval^(0+128),w
  5504  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  5505  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  5506  0AAB  00D7               	movwf	___ftadd@f2
  5507  0AAC  1683               	bsf	3,5	;RP0=1, select bank1
  5508  0AAD  1303               	bcf	3,6	;RP1=0, select bank1
  5509  0AAE  083A               	movf	(sprintf@fval+1)^(0+128),w
  5510  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  5511  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  5512  0AB1  00D8               	movwf	___ftadd@f2+1
  5513  0AB2  1683               	bsf	3,5	;RP0=1, select bank1
  5514  0AB3  1303               	bcf	3,6	;RP1=0, select bank1
  5515  0AB4  083B               	movf	(sprintf@fval+2)^(0+128),w
  5516  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  5517  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  5518  0AB7  00D9               	movwf	___ftadd@f2+2
  5519  0AB8  160A  118A  241E  120A  158A  	fcall	___ftadd
  5520  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0ABF  0854               	movf	?___ftadd,w
  5523  0AC0  1683               	bsf	3,5	;RP0=1, select bank1
  5524  0AC1  1303               	bcf	3,6	;RP1=0, select bank1
  5525  0AC2  00B9               	movwf	sprintf@fval^(0+128)
  5526  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  5527  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  5528  0AC5  0855               	movf	?___ftadd+1,w
  5529  0AC6  1683               	bsf	3,5	;RP0=1, select bank1
  5530  0AC7  1303               	bcf	3,6	;RP1=0, select bank1
  5531  0AC8  00BA               	movwf	(sprintf@fval+1)^(0+128)
  5532  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  5534  0ACB  0856               	movf	?___ftadd+2,w
  5535  0ACC  1683               	bsf	3,5	;RP0=1, select bank1
  5536  0ACD  1303               	bcf	3,6	;RP1=0, select bank1
  5537  0ACE  00BB               	movwf	(sprintf@fval+2)^(0+128)
  5538  0ACF                     l3102:	
  5539                           
  5540                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5541  0ACF  1683               	bsf	3,5	;RP0=1, select bank1
  5542  0AD0  1303               	bcf	3,6	;RP1=0, select bank1
  5543  0AD1  0831               	movf	(sprintf@exp+1)^(0+128),w
  5544  0AD2  3A80               	xorlw	128
  5545  0AD3  00FF               	movwf	127
  5546  0AD4  3080               	movlw	128
  5547  0AD5  027F               	subwf	127,w
  5548  0AD6  1D03               	skipz
  5549  0AD7  2ADA               	goto	u4155
  5550  0AD8  300A               	movlw	10
  5551  0AD9  0230               	subwf	sprintf@exp^(0+128),w
  5552  0ADA                     u4155:	
  5553  0ADA  1803               	skipnc
  5554  0ADB  2B0D               	goto	l3110
  5555  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  5556  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  5557  0ADE  083B               	movf	(sprintf@fval+2)^(0+128),w
  5558  0ADF  043A               	iorwf	(sprintf@fval+1)^(0+128),w
  5559  0AE0  0439               	iorwf	sprintf@fval^(0+128),w
  5560  0AE1  1903               	skipnz
  5561  0AE2  2B94               	goto	l3124
  5562  0AE3  0839               	movf	sprintf@fval^(0+128),w
  5563  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  5564  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  5565  0AE6  00CD               	movwf	___fttol@f1
  5566  0AE7  1683               	bsf	3,5	;RP0=1, select bank1
  5567  0AE8  1303               	bcf	3,6	;RP1=0, select bank1
  5568  0AE9  083A               	movf	(sprintf@fval+1)^(0+128),w
  5569  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  5570  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  5571  0AEC  00CE               	movwf	___fttol@f1+1
  5572  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  5573  0AEE  1303               	bcf	3,6	;RP1=0, select bank1
  5574  0AEF  083B               	movf	(sprintf@fval+2)^(0+128),w
  5575  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  5576  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  5577  0AF2  00CF               	movwf	___fttol@f1+2
  5578  0AF3  160A  158A  2611  120A  158A  	fcall	___fttol
  5579  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  5580  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  5581  0AFA  0850               	movf	?___fttol+3,w
  5582  0AFB  044F               	iorwf	?___fttol+2,w
  5583  0AFC  044E               	iorwf	?___fttol+1,w
  5584  0AFD  044D               	iorwf	?___fttol,w
  5585  0AFE  1D03               	skipz
  5586  0AFF  2B94               	goto	l3124
  5587  0B00  1683               	bsf	3,5	;RP0=1, select bank1
  5588  0B01  1303               	bcf	3,6	;RP1=0, select bank1
  5589  0B02  0831               	movf	(sprintf@exp+1)^(0+128),w
  5590  0B03  3A80               	xorlw	128
  5591  0B04  00FF               	movwf	127
  5592  0B05  3080               	movlw	128
  5593  0B06  027F               	subwf	127,w
  5594  0B07  1D03               	skipz
  5595  0B08  2B0B               	goto	u4185
  5596  0B09  3002               	movlw	2
  5597  0B0A  0230               	subwf	sprintf@exp^(0+128),w
  5598  0B0B                     u4185:	
  5599  0B0B  1C03               	skipc
  5600  0B0C  2B94               	goto	l3124
  5601  0B0D                     l3110:	
  5602                           
  5603                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5604  0B0D  1683               	bsf	3,5	;RP0=1, select bank1
  5605  0B0E  1303               	bcf	3,6	;RP1=0, select bank1
  5606  0B0F  0832               	movf	sprintf@tmpval^(0+128),w
  5607  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  5608  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  5609  0B12  00A0               	movwf	___ftge@ff1
  5610  0B13  1683               	bsf	3,5	;RP0=1, select bank1
  5611  0B14  1303               	bcf	3,6	;RP1=0, select bank1
  5612  0B15  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  5613  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  5614  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  5615  0B18  00A1               	movwf	___ftge@ff1+1
  5616  0B19  1683               	bsf	3,5	;RP0=1, select bank1
  5617  0B1A  1303               	bcf	3,6	;RP1=0, select bank1
  5618  0B1B  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  5619  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  5620  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  5621  0B1E  00A2               	movwf	___ftge@ff1+2
  5622  0B1F  3070               	movlw	112
  5623  0B20  00A3               	movwf	___ftge@ff2
  5624  0B21  3089               	movlw	137
  5625  0B22  00A4               	movwf	___ftge@ff2+1
  5626  0B23  3040               	movlw	64
  5627  0B24  00A5               	movwf	___ftge@ff2+2
  5628  0B25  160A  158A  24BA  120A  158A  	fcall	___ftge
  5629  0B2A  1803               	btfsc	3,0
  5630  0B2B  2B2E               	goto	l3114
  5631                           
  5632                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5633  0B2C  30F7               	movlw	247
  5634  0B2D  2B2F               	goto	L7
  5635  0B2E                     l3114:	
  5636                           ;doprnt.c: 1122: }else{
  5637                           
  5638                           
  5639                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5640  0B2E  30F8               	movlw	248
  5641  0B2F                     L7:	
  5642  0B2F  1683               	bsf	3,5	;RP0=1, select bank1
  5643  0B30  1303               	bcf	3,6	;RP1=0, select bank1
  5644  0B31  07B0               	addwf	sprintf@exp^(0+128),f
  5645  0B32  1803               	skipnc
  5646  0B33  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  5647  0B34  30FF               	movlw	255
  5648  0B35  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  5649                           
  5650                           ;doprnt.c: 1124: }
  5651                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5652  0B36  0830               	movf	sprintf@exp^(0+128),w
  5653  0B37  120A  118A  2334  120A  158A  	fcall	_scale
  5654  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  5655  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  5656  0B3E  0844               	movf	?_scale,w
  5657  0B3F  1683               	bsf	3,5	;RP0=1, select bank1
  5658  0B40  1303               	bcf	3,6	;RP1=0, select bank1
  5659  0B41  00B2               	movwf	sprintf@tmpval^(0+128)
  5660  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  5661  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  5662  0B44  0845               	movf	?_scale+1,w
  5663  0B45  1683               	bsf	3,5	;RP0=1, select bank1
  5664  0B46  1303               	bcf	3,6	;RP1=0, select bank1
  5665  0B47  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  5666  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  5667  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  5668  0B4A  0846               	movf	?_scale+2,w
  5669  0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  5670  0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  5671  0B4D  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  5672                           
  5673                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5674  0B4E  0839               	movf	sprintf@fval^(0+128),w
  5675  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0B51  00A0               	movwf	__tdiv_to_l_@f1
  5678  0B52  1683               	bsf	3,5	;RP0=1, select bank1
  5679  0B53  1303               	bcf	3,6	;RP1=0, select bank1
  5680  0B54  083A               	movf	(sprintf@fval+1)^(0+128),w
  5681  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  5682  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  5683  0B57  00A1               	movwf	__tdiv_to_l_@f1+1
  5684  0B58  1683               	bsf	3,5	;RP0=1, select bank1
  5685  0B59  1303               	bcf	3,6	;RP1=0, select bank1
  5686  0B5A  083B               	movf	(sprintf@fval+2)^(0+128),w
  5687  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0B5D  00A2               	movwf	__tdiv_to_l_@f1+2
  5690  0B5E  1683               	bsf	3,5	;RP0=1, select bank1
  5691  0B5F  1303               	bcf	3,6	;RP1=0, select bank1
  5692  0B60  0832               	movf	sprintf@tmpval^(0+128),w
  5693  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  5694  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  5695  0B63  00A3               	movwf	__tdiv_to_l_@f2
  5696  0B64  1683               	bsf	3,5	;RP0=1, select bank1
  5697  0B65  1303               	bcf	3,6	;RP1=0, select bank1
  5698  0B66  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  5699  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  5700  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  5701  0B69  00A4               	movwf	__tdiv_to_l_@f2+1
  5702  0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  5703  0B6B  1303               	bcf	3,6	;RP1=0, select bank1
  5704  0B6C  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  5705  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0B6F  00A5               	movwf	__tdiv_to_l_@f2+2
  5708  0B70  160A  118A  2014  120A  158A  	fcall	__tdiv_to_l_
  5709  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  5711  0B77  0823               	movf	?__tdiv_to_l_+3,w
  5712  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  5713  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  5714  0B7A  00AF               	movwf	(sprintf@val+3)^(0+128)
  5715  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  5717  0B7D  0822               	movf	?__tdiv_to_l_+2,w
  5718  0B7E  1683               	bsf	3,5	;RP0=1, select bank1
  5719  0B7F  1303               	bcf	3,6	;RP1=0, select bank1
  5720  0B80  00AE               	movwf	(sprintf@val+2)^(0+128)
  5721  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  5722  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  5723  0B83  0821               	movf	?__tdiv_to_l_+1,w
  5724  0B84  1683               	bsf	3,5	;RP0=1, select bank1
  5725  0B85  1303               	bcf	3,6	;RP1=0, select bank1
  5726  0B86  00AD               	movwf	(sprintf@val+1)^(0+128)
  5727  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  5728  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  5729  0B89  0820               	movf	?__tdiv_to_l_,w
  5730  0B8A  1683               	bsf	3,5	;RP0=1, select bank1
  5731  0B8B  1303               	bcf	3,6	;RP1=0, select bank1
  5732  0B8C  00AC               	movwf	sprintf@val^(0+128)
  5733                           
  5734                           ;doprnt.c: 1129: fval = 0.0;
  5735  0B8D  3000               	movlw	0
  5736  0B8E  00B9               	movwf	sprintf@fval^(0+128)
  5737  0B8F  3000               	movlw	0
  5738  0B90  00BA               	movwf	(sprintf@fval+1)^(0+128)
  5739  0B91  3000               	movlw	0
  5740  0B92  00BB               	movwf	(sprintf@fval+2)^(0+128)
  5741                           
  5742                           ;doprnt.c: 1130: } else {
  5743  0B93  2C11               	goto	l3128
  5744  0B94                     l3124:	
  5745                           
  5746                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5747  0B94  1683               	bsf	3,5	;RP0=1, select bank1
  5748  0B95  1303               	bcf	3,6	;RP1=0, select bank1
  5749  0B96  0839               	movf	sprintf@fval^(0+128),w
  5750  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  5751  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  5752  0B99  00CD               	movwf	___fttol@f1
  5753  0B9A  1683               	bsf	3,5	;RP0=1, select bank1
  5754  0B9B  1303               	bcf	3,6	;RP1=0, select bank1
  5755  0B9C  083A               	movf	(sprintf@fval+1)^(0+128),w
  5756  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
  5757  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
  5758  0B9F  00CE               	movwf	___fttol@f1+1
  5759  0BA0  1683               	bsf	3,5	;RP0=1, select bank1
  5760  0BA1  1303               	bcf	3,6	;RP1=0, select bank1
  5761  0BA2  083B               	movf	(sprintf@fval+2)^(0+128),w
  5762  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  5763  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  5764  0BA5  00CF               	movwf	___fttol@f1+2
  5765  0BA6  160A  158A  2611  120A  158A  	fcall	___fttol
  5766  0BAB  1283               	bcf	3,5	;RP0=0, select bank0
  5767  0BAC  1303               	bcf	3,6	;RP1=0, select bank0
  5768  0BAD  0850               	movf	?___fttol+3,w
  5769  0BAE  1683               	bsf	3,5	;RP0=1, select bank1
  5770  0BAF  1303               	bcf	3,6	;RP1=0, select bank1
  5771  0BB0  00AF               	movwf	(sprintf@val+3)^(0+128)
  5772  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  5773  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  5774  0BB3  084F               	movf	?___fttol+2,w
  5775  0BB4  1683               	bsf	3,5	;RP0=1, select bank1
  5776  0BB5  1303               	bcf	3,6	;RP1=0, select bank1
  5777  0BB6  00AE               	movwf	(sprintf@val+2)^(0+128)
  5778  0BB7  1283               	bcf	3,5	;RP0=0, select bank0
  5779  0BB8  1303               	bcf	3,6	;RP1=0, select bank0
  5780  0BB9  084E               	movf	?___fttol+1,w
  5781  0BBA  1683               	bsf	3,5	;RP0=1, select bank1
  5782  0BBB  1303               	bcf	3,6	;RP1=0, select bank1
  5783  0BBC  00AD               	movwf	(sprintf@val+1)^(0+128)
  5784  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  5785  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  5786  0BBF  084D               	movf	?___fttol,w
  5787  0BC0  1683               	bsf	3,5	;RP0=1, select bank1
  5788  0BC1  1303               	bcf	3,6	;RP1=0, select bank1
  5789  0BC2  00AC               	movwf	sprintf@val^(0+128)
  5790                           
  5791                           ;doprnt.c: 1132: fval -= (double)val;
  5792  0BC3  082F               	movf	(sprintf@val+3)^(0+128),w
  5793  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  5794  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  5795  0BC6  00AB               	movwf	___lltoft@c+3
  5796  0BC7  1683               	bsf	3,5	;RP0=1, select bank1
  5797  0BC8  1303               	bcf	3,6	;RP1=0, select bank1
  5798  0BC9  082E               	movf	(sprintf@val+2)^(0+128),w
  5799  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  5800  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  5801  0BCC  00AA               	movwf	___lltoft@c+2
  5802  0BCD  1683               	bsf	3,5	;RP0=1, select bank1
  5803  0BCE  1303               	bcf	3,6	;RP1=0, select bank1
  5804  0BCF  082D               	movf	(sprintf@val+1)^(0+128),w
  5805  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  5806  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  5807  0BD2  00A9               	movwf	___lltoft@c+1
  5808  0BD3  1683               	bsf	3,5	;RP0=1, select bank1
  5809  0BD4  1303               	bcf	3,6	;RP1=0, select bank1
  5810  0BD5  082C               	movf	sprintf@val^(0+128),w
  5811  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  5812  0BD7  1303               	bcf	3,6	;RP1=0, select bank0
  5813  0BD8  00A8               	movwf	___lltoft@c
  5814  0BD9  160A  158A  2258  120A  158A  	fcall	___lltoft
  5815  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  5816  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  5817  0BE0  0828               	movf	?___lltoft,w
  5818  0BE1  00E1               	movwf	___ftsub@f2
  5819  0BE2  0829               	movf	?___lltoft+1,w
  5820  0BE3  00E2               	movwf	___ftsub@f2+1
  5821  0BE4  082A               	movf	?___lltoft+2,w
  5822  0BE5  00E3               	movwf	___ftsub@f2+2
  5823  0BE6  1683               	bsf	3,5	;RP0=1, select bank1
  5824  0BE7  1303               	bcf	3,6	;RP1=0, select bank1
  5825  0BE8  0839               	movf	sprintf@fval^(0+128),w
  5826  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  5827  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  5828  0BEB  00E4               	movwf	___ftsub@f1
  5829  0BEC  1683               	bsf	3,5	;RP0=1, select bank1
  5830  0BED  1303               	bcf	3,6	;RP1=0, select bank1
  5831  0BEE  083A               	movf	(sprintf@fval+1)^(0+128),w
  5832  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  5834  0BF1  00E5               	movwf	___ftsub@f1+1
  5835  0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  5836  0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  5837  0BF4  083B               	movf	(sprintf@fval+2)^(0+128),w
  5838  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  5839  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  5840  0BF7  00E6               	movwf	___ftsub@f1+2
  5841  0BF8  160A  158A  2174  120A  158A  	fcall	___ftsub
  5842  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  5843  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  5844  0BFF  0861               	movf	?___ftsub,w
  5845  0C00  1683               	bsf	3,5	;RP0=1, select bank1
  5846  0C01  1303               	bcf	3,6	;RP1=0, select bank1
  5847  0C02  00B9               	movwf	sprintf@fval^(0+128)
  5848  0C03  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0C04  1303               	bcf	3,6	;RP1=0, select bank0
  5850  0C05  0862               	movf	?___ftsub+1,w
  5851  0C06  1683               	bsf	3,5	;RP0=1, select bank1
  5852  0C07  1303               	bcf	3,6	;RP1=0, select bank1
  5853  0C08  00BA               	movwf	(sprintf@fval+1)^(0+128)
  5854  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  5855  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
  5856  0C0B  0863               	movf	?___ftsub+2,w
  5857  0C0C  1683               	bsf	3,5	;RP0=1, select bank1
  5858  0C0D  1303               	bcf	3,6	;RP1=0, select bank1
  5859  0C0E  00BB               	movwf	(sprintf@fval+2)^(0+128)
  5860                           
  5861                           ;doprnt.c: 1133: exp = 0;
  5862  0C0F  01B0               	clrf	sprintf@exp^(0+128)
  5863  0C10  01B1               	clrf	(sprintf@exp+1)^(0+128)
  5864  0C11                     l3128:	
  5865                           
  5866                           ;doprnt.c: 1134: }
  5867                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5868  0C11  01BC               	clrf	sprintf@c^(0+128)
  5869  0C12  0ABC               	incf	sprintf@c^(0+128),f
  5870  0C13  300A               	movlw	10
  5871  0C14  063C               	xorwf	sprintf@c^(0+128),w
  5872  0C15  1903               	btfsc	3,2
  5873  0C16  2C53               	goto	l3140
  5874  0C17                     l3134:	
  5875                           
  5876                           ;doprnt.c: 1137: if(val < dpowers[c])
  5877  0C17  083C               	movf	sprintf@c^(0+128),w
  5878  0C18  00A0               	movwf	??_sprintf^(0+128)
  5879  0C19  3001               	movlw	1
  5880  0C1A                     u4215:	
  5881  0C1A  1003               	clrc
  5882  0C1B  0DA0               	rlf	??_sprintf^(0+128),f
  5883  0C1C  3EFF               	addlw	-1
  5884  0C1D  1D03               	skipz
  5885  0C1E  2C1A               	goto	u4215
  5886  0C1F  1003               	clrc
  5887  0C20  0D20               	rlf	??_sprintf^(0+128),w
  5888  0C21  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5889  0C22  0084               	movwf	4
  5890  0C23  160A  158A  2000  120A  158A  	fcall	stringdir
  5891  0C28  00A1               	movwf	(??_sprintf+1)^(0+128)
  5892  0C29  160A  158A  2000  120A  158A  	fcall	stringdir
  5893  0C2E  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  5894  0C2F  160A  158A  2000  120A  158A  	fcall	stringdir
  5895  0C34  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  5896  0C35  160A  158A  2000  120A  158A  	fcall	stringdir
  5897  0C3A  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  5898  0C3B  0824               	movf	(??_sprintf+4)^(0+128),w
  5899  0C3C  022F               	subwf	(sprintf@val+3)^(0+128),w
  5900  0C3D  1D03               	skipz
  5901  0C3E  2C49               	goto	u4225
  5902  0C3F  0823               	movf	(??_sprintf+3)^(0+128),w
  5903  0C40  022E               	subwf	(sprintf@val+2)^(0+128),w
  5904  0C41  1D03               	skipz
  5905  0C42  2C49               	goto	u4225
  5906  0C43  0822               	movf	(??_sprintf+2)^(0+128),w
  5907  0C44  022D               	subwf	(sprintf@val+1)^(0+128),w
  5908  0C45  1D03               	skipz
  5909  0C46  2C49               	goto	u4225
  5910  0C47  0821               	movf	(??_sprintf+1)^(0+128),w
  5911  0C48  022C               	subwf	sprintf@val^(0+128),w
  5912  0C49                     u4225:	
  5913  0C49  1C03               	btfss	3,0
  5914  0C4A  2C53               	goto	l3140
  5915                           
  5916                           ;doprnt.c: 1138: break;
  5917  0C4B  3001               	movlw	1
  5918  0C4C  00A0               	movwf	??_sprintf^(0+128)
  5919  0C4D  0820               	movf	??_sprintf^(0+128),w
  5920  0C4E  07BC               	addwf	sprintf@c^(0+128),f
  5921  0C4F  300A               	movlw	10
  5922  0C50  063C               	xorwf	sprintf@c^(0+128),w
  5923  0C51  1D03               	btfss	3,2
  5924  0C52  2C17               	goto	l3134
  5925  0C53                     l3140:	
  5926                           
  5927                           ;doprnt.c: 1175: {
  5928                           ;doprnt.c: 1188: if(flag & 0x03)
  5929  0C53  3003               	movlw	3
  5930  0C54  052A               	andwf	sprintf@flag^(0+128),w
  5931  0C55  00A0               	movwf	??_sprintf^(0+128)
  5932  0C56  3000               	movlw	0
  5933  0C57  052B               	andwf	(sprintf@flag+1)^(0+128),w
  5934  0C58  00A1               	movwf	(??_sprintf+1)^(0+128)
  5935  0C59  0820               	movf	??_sprintf^(0+128),w
  5936  0C5A  0421               	iorwf	(??_sprintf^(0+128)+1),w
  5937  0C5B  1903               	btfsc	3,2
  5938  0C5C  2C68               	goto	l354
  5939                           
  5940                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5941  0C5D  302D               	movlw	45
  5942  0C5E                     L8:	
  5943  0C5E  00A0               	movwf	??_sprintf^(0+128)
  5944  0C5F  0836               	movf	sprintf@sp^(0+128),w
  5945  0C60  0084               	movwf	4
  5946  0C61  0820               	movf	??_sprintf^(0+128),w
  5947  0C62  1783               	bsf	3,7	;select IRP bank2
  5948  0C63  0080               	movwf	0
  5949  0C64  3001               	movlw	1
  5950  0C65  00A0               	movwf	??_sprintf^(0+128)
  5951  0C66  0820               	movf	??_sprintf^(0+128),w
  5952  0C67  07B6               	addwf	sprintf@sp^(0+128),f
  5953  0C68                     l354:	
  5954  0C68  30FF               	movlw	255
  5955  0C69  00A0               	movwf	??_sprintf^(0+128)
  5956  0C6A  0820               	movf	??_sprintf^(0+128),w
  5957  0C6B  07BC               	addwf	sprintf@c^(0+128),f
  5958  0C6C  0A3C               	incf	sprintf@c^(0+128),w
  5959  0C6D  1903               	btfsc	3,2
  5960  0C6E  2D1F               	goto	l3158
  5961                           
  5962                           ;doprnt.c: 1200: {
  5963                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5964                           
  5965                           ;doprnt.c: 1195: }
  5966                           ;doprnt.c: 1196: while(c--) {
  5967  0C6F  083C               	movf	sprintf@c^(0+128),w
  5968  0C70  00A0               	movwf	??_sprintf^(0+128)
  5969  0C71  3001               	movlw	1
  5970  0C72                     u4255:	
  5971  0C72  1003               	clrc
  5972  0C73  0DA0               	rlf	??_sprintf^(0+128),f
  5973  0C74  3EFF               	addlw	-1
  5974  0C75  1D03               	skipz
  5975  0C76  2C72               	goto	u4255
  5976  0C77  1003               	clrc
  5977  0C78  0D20               	rlf	??_sprintf^(0+128),w
  5978  0C79  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5979  0C7A  0084               	movwf	4
  5980  0C7B  160A  158A  2000  120A  158A  	fcall	stringdir
  5981  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  5982  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  5983  0C82  00A0               	movwf	___lldiv@divisor
  5984  0C83  160A  158A  2000  120A  158A  	fcall	stringdir
  5985  0C88  00A1               	movwf	___lldiv@divisor+1
  5986  0C89  160A  158A  2000  120A  158A  	fcall	stringdir
  5987  0C8E  00A2               	movwf	___lldiv@divisor+2
  5988  0C8F  160A  158A  2000  120A  158A  	fcall	stringdir
  5989  0C94  00A3               	movwf	___lldiv@divisor+3
  5990  0C95  1683               	bsf	3,5	;RP0=1, select bank1
  5991  0C96  1303               	bcf	3,6	;RP1=0, select bank1
  5992  0C97  082F               	movf	(sprintf@val+3)^(0+128),w
  5993  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  5994  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  5995  0C9A  00A7               	movwf	___lldiv@dividend+3
  5996  0C9B  1683               	bsf	3,5	;RP0=1, select bank1
  5997  0C9C  1303               	bcf	3,6	;RP1=0, select bank1
  5998  0C9D  082E               	movf	(sprintf@val+2)^(0+128),w
  5999  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0CA0  00A6               	movwf	___lldiv@dividend+2
  6002  0CA1  1683               	bsf	3,5	;RP0=1, select bank1
  6003  0CA2  1303               	bcf	3,6	;RP1=0, select bank1
  6004  0CA3  082D               	movf	(sprintf@val+1)^(0+128),w
  6005  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  6006  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  6007  0CA6  00A5               	movwf	___lldiv@dividend+1
  6008  0CA7  1683               	bsf	3,5	;RP0=1, select bank1
  6009  0CA8  1303               	bcf	3,6	;RP1=0, select bank1
  6010  0CA9  082C               	movf	sprintf@val^(0+128),w
  6011  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  6012  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0CAC  00A4               	movwf	___lldiv@dividend
  6014  0CAD  120A  118A  2798  120A  158A  	fcall	___lldiv
  6015  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  6017  0CB4  0823               	movf	?___lldiv+3,w
  6018  0CB5  1683               	bsf	3,5	;RP0=1, select bank1
  6019  0CB6  1303               	bcf	3,6	;RP1=0, select bank1
  6020  0CB7  00B5               	movwf	(sprintf@tmpval+3)^(0+128)
  6021  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  6022  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  6023  0CBA  0822               	movf	?___lldiv+2,w
  6024  0CBB  1683               	bsf	3,5	;RP0=1, select bank1
  6025  0CBC  1303               	bcf	3,6	;RP1=0, select bank1
  6026  0CBD  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  6027  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  6028  0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  6029  0CC0  0821               	movf	?___lldiv+1,w
  6030  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  6031  0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  6032  0CC3  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  6033  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  6034  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  6035  0CC6  0820               	movf	?___lldiv,w
  6036  0CC7  1683               	bsf	3,5	;RP0=1, select bank1
  6037  0CC8  1303               	bcf	3,6	;RP1=0, select bank1
  6038  0CC9  00B2               	movwf	sprintf@tmpval^(0+128)
  6039                           
  6040                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6041  0CCA  3000               	movlw	0
  6042  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  6043  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  6044  0CCD  00B1               	movwf	___llmod@divisor+3
  6045  0CCE  3000               	movlw	0
  6046  0CCF  00B0               	movwf	___llmod@divisor+2
  6047  0CD0  3000               	movlw	0
  6048  0CD1  00AF               	movwf	___llmod@divisor+1
  6049  0CD2  300A               	movlw	10
  6050  0CD3  00AE               	movwf	___llmod@divisor
  6051  0CD4  1683               	bsf	3,5	;RP0=1, select bank1
  6052  0CD5  1303               	bcf	3,6	;RP1=0, select bank1
  6053  0CD6  0835               	movf	(sprintf@tmpval+3)^(0+128),w
  6054  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  6055  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  6056  0CD9  00B5               	movwf	___llmod@dividend+3
  6057  0CDA  1683               	bsf	3,5	;RP0=1, select bank1
  6058  0CDB  1303               	bcf	3,6	;RP1=0, select bank1
  6059  0CDC  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  6060  0CDD  1283               	bcf	3,5	;RP0=0, select bank0
  6061  0CDE  1303               	bcf	3,6	;RP1=0, select bank0
  6062  0CDF  00B4               	movwf	___llmod@dividend+2
  6063  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  6064  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  6065  0CE2  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  6066  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  6067  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  6068  0CE5  00B3               	movwf	___llmod@dividend+1
  6069  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  6070  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  6071  0CE8  0832               	movf	sprintf@tmpval^(0+128),w
  6072  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0CEB  00B2               	movwf	___llmod@dividend
  6075  0CEC  160A  158A  23B5  120A  158A  	fcall	___llmod
  6076  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  6077  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  6078  0CF3  0831               	movf	?___llmod+3,w
  6079  0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  6080  0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  6081  0CF6  00B5               	movwf	(sprintf@tmpval+3)^(0+128)
  6082  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  6083  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  6084  0CF9  0830               	movf	?___llmod+2,w
  6085  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  6086  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  6087  0CFC  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  6088  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0CFF  082F               	movf	?___llmod+1,w
  6091  0D00  1683               	bsf	3,5	;RP0=1, select bank1
  6092  0D01  1303               	bcf	3,6	;RP1=0, select bank1
  6093  0D02  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  6094  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  6095  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  6096  0D05  082E               	movf	?___llmod,w
  6097  0D06  1683               	bsf	3,5	;RP0=1, select bank1
  6098  0D07  1303               	bcf	3,6	;RP1=0, select bank1
  6099  0D08  00B2               	movwf	sprintf@tmpval^(0+128)
  6100                           
  6101                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6102  0D09  0832               	movf	sprintf@tmpval^(0+128),w
  6103  0D0A  3E30               	addlw	48
  6104  0D0B  2C5E               	goto	L8
  6105  0D0C                     l3152:	
  6106                           ;doprnt.c: 1204: }
  6107                           ;doprnt.c: 1206: }
  6108                           ;doprnt.c: 1207: while(exp > 0) {
  6109                           
  6110                           
  6111                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6112  0D0C  3030               	movlw	48
  6113  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  6114  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  6115  0D0F  00A0               	movwf	??_sprintf^(0+128)
  6116  0D10  0836               	movf	sprintf@sp^(0+128),w
  6117  0D11  0084               	movwf	4
  6118  0D12  0820               	movf	??_sprintf^(0+128),w
  6119  0D13  1783               	bsf	3,7	;select IRP bank2
  6120  0D14  0080               	movwf	0
  6121  0D15  3001               	movlw	1
  6122  0D16  00A0               	movwf	??_sprintf^(0+128)
  6123  0D17  0820               	movf	??_sprintf^(0+128),w
  6124  0D18  07B6               	addwf	sprintf@sp^(0+128),f
  6125                           
  6126                           ;doprnt.c: 1209: exp--;
  6127  0D19  30FF               	movlw	255
  6128  0D1A  07B0               	addwf	sprintf@exp^(0+128),f
  6129  0D1B  1803               	skipnc
  6130  0D1C  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  6131  0D1D  30FF               	movlw	255
  6132  0D1E  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  6133  0D1F                     l3158:	
  6134  0D1F  0831               	movf	(sprintf@exp+1)^(0+128),w
  6135  0D20  3A80               	xorlw	128
  6136  0D21  00FF               	movwf	127
  6137  0D22  3080               	movlw	128
  6138  0D23  027F               	subwf	127,w
  6139  0D24  1D03               	skipz
  6140  0D25  2D28               	goto	u4275
  6141  0D26  3001               	movlw	1
  6142  0D27  0230               	subwf	sprintf@exp^(0+128),w
  6143  0D28                     u4275:	
  6144  0D28  1803               	skipnc
  6145  0D29  2D0C               	goto	l3152
  6146                           
  6147                           ;doprnt.c: 1210: }
  6148                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6149  0D2A  1683               	bsf	3,5	;RP0=1, select bank1
  6150  0D2B  1303               	bcf	3,6	;RP1=0, select bank1
  6151  0D2C  0838               	movf	(sprintf@prec+1)^(0+128),w
  6152  0D2D  3A80               	xorlw	128
  6153  0D2E  00FF               	movwf	127
  6154  0D2F  3080               	movlw	128
  6155  0D30  027F               	subwf	127,w
  6156  0D31  1D03               	skipz
  6157  0D32  2D35               	goto	u4285
  6158  0D33  3009               	movlw	9
  6159  0D34  0237               	subwf	sprintf@prec^(0+128),w
  6160  0D35                     u4285:	
  6161  0D35  1C03               	skipc
  6162  0D36  2D3B               	goto	l3164
  6163                           
  6164                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6165  0D37  3008               	movlw	8
  6166  0D38  1683               	bsf	3,5	;RP0=1, select bank1
  6167  0D39  1303               	bcf	3,6	;RP1=0, select bank1
  6168  0D3A  2D3E               	goto	L9
  6169  0D3B                     l3164:	
  6170                           
  6171                           ;doprnt.c: 1213: else
  6172                           ;doprnt.c: 1214: c = prec;
  6173  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  6174  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  6175  0D3D  0837               	movf	sprintf@prec^(0+128),w
  6176  0D3E                     L9:	
  6177  0D3E  00A0               	movwf	??_sprintf^(0+128)
  6178  0D3F  0820               	movf	??_sprintf^(0+128),w
  6179  0D40  00BC               	movwf	sprintf@c^(0+128)
  6180                           
  6181                           ;doprnt.c: 1215: prec -= c;
  6182  0D41  083C               	movf	sprintf@c^(0+128),w
  6183  0D42  00A0               	movwf	??_sprintf^(0+128)
  6184  0D43  01A1               	clrf	(??_sprintf^(0+128)+1)
  6185  0D44  1BA0               	btfsc	??_sprintf^(0+128),7
  6186  0D45  03A1               	decf	(??_sprintf^(0+128)+1),f
  6187  0D46  0820               	movf	??_sprintf^(0+128),w
  6188  0D47  02B7               	subwf	sprintf@prec^(0+128),f
  6189  0D48  0821               	movf	(??_sprintf+1)^(0+128),w
  6190  0D49  1C03               	skipc
  6191  0D4A  03B8               	decf	(sprintf@prec+1)^(0+128),f
  6192  0D4B  02B8               	subwf	(sprintf@prec+1)^(0+128),f
  6193                           
  6194                           ;doprnt.c: 1219: if(c)
  6195  0D4C  083C               	movf	sprintf@c^(0+128),w
  6196  0D4D  1903               	btfsc	3,2
  6197  0D4E  2D5A               	goto	l3172
  6198                           
  6199                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6200  0D4F  302E               	movlw	46
  6201  0D50  00A0               	movwf	??_sprintf^(0+128)
  6202  0D51  0836               	movf	sprintf@sp^(0+128),w
  6203  0D52  0084               	movwf	4
  6204  0D53  0820               	movf	??_sprintf^(0+128),w
  6205  0D54  1783               	bsf	3,7	;select IRP bank2
  6206  0D55  0080               	movwf	0
  6207  0D56  3001               	movlw	1
  6208  0D57  00A0               	movwf	??_sprintf^(0+128)
  6209  0D58  0820               	movf	??_sprintf^(0+128),w
  6210  0D59  07B6               	addwf	sprintf@sp^(0+128),f
  6211  0D5A                     l3172:	
  6212                           
  6213                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6214  0D5A  083C               	movf	sprintf@c^(0+128),w
  6215  0D5B  120A  118A  2334  120A  158A  	fcall	_scale
  6216  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  6217  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  6218  0D62  0844               	movf	?_scale,w
  6219  0D63  1683               	bsf	3,5	;RP0=1, select bank1
  6220  0D64  1303               	bcf	3,6	;RP1=0, select bank1
  6221  0D65  00A6               	movwf	_sprintf$919^(0+128)
  6222  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0D68  0845               	movf	?_scale+1,w
  6225  0D69  1683               	bsf	3,5	;RP0=1, select bank1
  6226  0D6A  1303               	bcf	3,6	;RP1=0, select bank1
  6227  0D6B  00A7               	movwf	(_sprintf$919+1)^(0+128)
  6228  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  6229  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  6230  0D6E  0846               	movf	?_scale+2,w
  6231  0D6F  1683               	bsf	3,5	;RP0=1, select bank1
  6232  0D70  1303               	bcf	3,6	;RP1=0, select bank1
  6233  0D71  00A8               	movwf	(_sprintf$919+2)^(0+128)
  6234                           
  6235                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6236  0D72  0826               	movf	_sprintf$919^(0+128),w
  6237  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  6238  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  6239  0D75  00B7               	movwf	___ftmul@f2
  6240  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  6241  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  6242  0D78  0827               	movf	(_sprintf$919+1)^(0+128),w
  6243  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  6244  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  6245  0D7B  00B8               	movwf	___ftmul@f2+1
  6246  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  6247  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  6248  0D7E  0828               	movf	(_sprintf$919+2)^(0+128),w
  6249  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  6250  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  6251  0D81  00B9               	movwf	___ftmul@f2+2
  6252  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  6253  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  6254  0D84  0839               	movf	sprintf@fval^(0+128),w
  6255  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  6256  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  6257  0D87  00B4               	movwf	___ftmul@f1
  6258  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  6259  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  6260  0D8A  083A               	movf	(sprintf@fval+1)^(0+128),w
  6261  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  6262  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  6263  0D8D  00B5               	movwf	___ftmul@f1+1
  6264  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
  6265  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
  6266  0D90  083B               	movf	(sprintf@fval+2)^(0+128),w
  6267  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0D93  00B6               	movwf	___ftmul@f1+2
  6270  0D94  160A  118A  226C  120A  158A  	fcall	___ftmul
  6271  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  6272  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
  6273  0D9B  0834               	movf	?___ftmul,w
  6274  0D9C  00CD               	movwf	___fttol@f1
  6275  0D9D  0835               	movf	?___ftmul+1,w
  6276  0D9E  00CE               	movwf	___fttol@f1+1
  6277  0D9F  0836               	movf	?___ftmul+2,w
  6278  0DA0  00CF               	movwf	___fttol@f1+2
  6279  0DA1  160A  158A  2611  120A  158A  	fcall	___fttol
  6280  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  6281  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  6282  0DA8  0850               	movf	?___fttol+3,w
  6283  0DA9  1683               	bsf	3,5	;RP0=1, select bank1
  6284  0DAA  1303               	bcf	3,6	;RP1=0, select bank1
  6285  0DAB  00AF               	movwf	(sprintf@val+3)^(0+128)
  6286  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6287  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6288  0DAE  084F               	movf	?___fttol+2,w
  6289  0DAF  1683               	bsf	3,5	;RP0=1, select bank1
  6290  0DB0  1303               	bcf	3,6	;RP1=0, select bank1
  6291  0DB1  00AE               	movwf	(sprintf@val+2)^(0+128)
  6292  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0DB4  084E               	movf	?___fttol+1,w
  6295  0DB5  1683               	bsf	3,5	;RP0=1, select bank1
  6296  0DB6  1303               	bcf	3,6	;RP1=0, select bank1
  6297  0DB7  00AD               	movwf	(sprintf@val+1)^(0+128)
  6298  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  6299  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  6300  0DBA  084D               	movf	?___fttol,w
  6301  0DBB                     L10:	
  6302  0DBB  1683               	bsf	3,5	;RP0=1, select bank1
  6303  0DBC  1303               	bcf	3,6	;RP1=0, select bank1
  6304  0DBD  00AC               	movwf	sprintf@val^(0+128)
  6305  0DBE  30FF               	movlw	255
  6306  0DBF  00A0               	movwf	??_sprintf^(0+128)
  6307  0DC0  0820               	movf	??_sprintf^(0+128),w
  6308  0DC1  07BC               	addwf	sprintf@c^(0+128),f
  6309  0DC2  0A3C               	incf	sprintf@c^(0+128),w
  6310  0DC3  1903               	btfsc	3,2
  6311  0DC4  2ED5               	goto	l3192
  6312                           
  6313                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6314                           
  6315                           ;doprnt.c: 1228: while(c--) {
  6316  0DC5  083C               	movf	sprintf@c^(0+128),w
  6317  0DC6  00A0               	movwf	??_sprintf^(0+128)
  6318  0DC7  3001               	movlw	1
  6319  0DC8                     u4305:	
  6320  0DC8  1003               	clrc
  6321  0DC9  0DA0               	rlf	??_sprintf^(0+128),f
  6322  0DCA  3EFF               	addlw	-1
  6323  0DCB  1D03               	skipz
  6324  0DCC  2DC8               	goto	u4305
  6325  0DCD  1003               	clrc
  6326  0DCE  0D20               	rlf	??_sprintf^(0+128),w
  6327  0DCF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6328  0DD0  0084               	movwf	4
  6329  0DD1  160A  158A  2000  120A  158A  	fcall	stringdir
  6330  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  6331  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  6332  0DD8  00A0               	movwf	___lldiv@divisor
  6333  0DD9  160A  158A  2000  120A  158A  	fcall	stringdir
  6334  0DDE  00A1               	movwf	___lldiv@divisor+1
  6335  0DDF  160A  158A  2000  120A  158A  	fcall	stringdir
  6336  0DE4  00A2               	movwf	___lldiv@divisor+2
  6337  0DE5  160A  158A  2000  120A  158A  	fcall	stringdir
  6338  0DEA  00A3               	movwf	___lldiv@divisor+3
  6339  0DEB  1683               	bsf	3,5	;RP0=1, select bank1
  6340  0DEC  1303               	bcf	3,6	;RP1=0, select bank1
  6341  0DED  082F               	movf	(sprintf@val+3)^(0+128),w
  6342  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  6343  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  6344  0DF0  00A7               	movwf	___lldiv@dividend+3
  6345  0DF1  1683               	bsf	3,5	;RP0=1, select bank1
  6346  0DF2  1303               	bcf	3,6	;RP1=0, select bank1
  6347  0DF3  082E               	movf	(sprintf@val+2)^(0+128),w
  6348  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  6349  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  6350  0DF6  00A6               	movwf	___lldiv@dividend+2
  6351  0DF7  1683               	bsf	3,5	;RP0=1, select bank1
  6352  0DF8  1303               	bcf	3,6	;RP1=0, select bank1
  6353  0DF9  082D               	movf	(sprintf@val+1)^(0+128),w
  6354  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  6355  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  6356  0DFC  00A5               	movwf	___lldiv@dividend+1
  6357  0DFD  1683               	bsf	3,5	;RP0=1, select bank1
  6358  0DFE  1303               	bcf	3,6	;RP1=0, select bank1
  6359  0DFF  082C               	movf	sprintf@val^(0+128),w
  6360  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  6361  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  6362  0E02  00A4               	movwf	___lldiv@dividend
  6363  0E03  120A  118A  2798  120A  158A  	fcall	___lldiv
  6364  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  6365  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  6366  0E0A  0823               	movf	?___lldiv+3,w
  6367  0E0B  1683               	bsf	3,5	;RP0=1, select bank1
  6368  0E0C  1303               	bcf	3,6	;RP1=0, select bank1
  6369  0E0D  00B5               	movwf	(sprintf@tmpval+3)^(0+128)
  6370  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  6371  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  6372  0E10  0822               	movf	?___lldiv+2,w
  6373  0E11  1683               	bsf	3,5	;RP0=1, select bank1
  6374  0E12  1303               	bcf	3,6	;RP1=0, select bank1
  6375  0E13  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  6376  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  6377  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  6378  0E16  0821               	movf	?___lldiv+1,w
  6379  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  6380  0E18  1303               	bcf	3,6	;RP1=0, select bank1
  6381  0E19  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  6382  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  6383  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  6384  0E1C  0820               	movf	?___lldiv,w
  6385  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  6386  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  6387  0E1F  00B2               	movwf	sprintf@tmpval^(0+128)
  6388                           
  6389                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6390  0E20  3000               	movlw	0
  6391  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  6392  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  6393  0E23  00B1               	movwf	___llmod@divisor+3
  6394  0E24  3000               	movlw	0
  6395  0E25  00B0               	movwf	___llmod@divisor+2
  6396  0E26  3000               	movlw	0
  6397  0E27  00AF               	movwf	___llmod@divisor+1
  6398  0E28  300A               	movlw	10
  6399  0E29  00AE               	movwf	___llmod@divisor
  6400  0E2A  1683               	bsf	3,5	;RP0=1, select bank1
  6401  0E2B  1303               	bcf	3,6	;RP1=0, select bank1
  6402  0E2C  0835               	movf	(sprintf@tmpval+3)^(0+128),w
  6403  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  6404  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  6405  0E2F  00B5               	movwf	___llmod@dividend+3
  6406  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  6407  0E31  1303               	bcf	3,6	;RP1=0, select bank1
  6408  0E32  0834               	movf	(sprintf@tmpval+2)^(0+128),w
  6409  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  6410  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  6411  0E35  00B4               	movwf	___llmod@dividend+2
  6412  0E36  1683               	bsf	3,5	;RP0=1, select bank1
  6413  0E37  1303               	bcf	3,6	;RP1=0, select bank1
  6414  0E38  0833               	movf	(sprintf@tmpval+1)^(0+128),w
  6415  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  6416  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  6417  0E3B  00B3               	movwf	___llmod@dividend+1
  6418  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  6419  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  6420  0E3E  0832               	movf	sprintf@tmpval^(0+128),w
  6421  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  6422  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  6423  0E41  00B2               	movwf	___llmod@dividend
  6424  0E42  160A  158A  23B5  120A  158A  	fcall	___llmod
  6425  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  6426  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  6427  0E49  0831               	movf	?___llmod+3,w
  6428  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  6429  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  6430  0E4C  00B5               	movwf	(sprintf@tmpval+3)^(0+128)
  6431  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  6432  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  6433  0E4F  0830               	movf	?___llmod+2,w
  6434  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  6435  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  6436  0E52  00B4               	movwf	(sprintf@tmpval+2)^(0+128)
  6437  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0E55  082F               	movf	?___llmod+1,w
  6440  0E56  1683               	bsf	3,5	;RP0=1, select bank1
  6441  0E57  1303               	bcf	3,6	;RP1=0, select bank1
  6442  0E58  00B3               	movwf	(sprintf@tmpval+1)^(0+128)
  6443  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  6444  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  6445  0E5B  082E               	movf	?___llmod,w
  6446  0E5C  1683               	bsf	3,5	;RP0=1, select bank1
  6447  0E5D  1303               	bcf	3,6	;RP1=0, select bank1
  6448  0E5E  00B2               	movwf	sprintf@tmpval^(0+128)
  6449                           
  6450                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  6451  0E5F  0832               	movf	sprintf@tmpval^(0+128),w
  6452  0E60  3E30               	addlw	48
  6453  0E61  00A0               	movwf	??_sprintf^(0+128)
  6454  0E62  0836               	movf	sprintf@sp^(0+128),w
  6455  0E63  0084               	movwf	4
  6456  0E64  0820               	movf	??_sprintf^(0+128),w
  6457  0E65  1783               	bsf	3,7	;select IRP bank2
  6458  0E66  0080               	movwf	0
  6459  0E67  3001               	movlw	1
  6460  0E68  00A0               	movwf	??_sprintf^(0+128)
  6461  0E69  0820               	movf	??_sprintf^(0+128),w
  6462  0E6A  07B6               	addwf	sprintf@sp^(0+128),f
  6463                           
  6464                           ;doprnt.c: 1232: val %= dpowers[c];
  6465  0E6B  083C               	movf	sprintf@c^(0+128),w
  6466  0E6C  00A0               	movwf	??_sprintf^(0+128)
  6467  0E6D  3001               	movlw	1
  6468  0E6E                     u4315:	
  6469  0E6E  1003               	clrc
  6470  0E6F  0DA0               	rlf	??_sprintf^(0+128),f
  6471  0E70  3EFF               	addlw	-1
  6472  0E71  1D03               	skipz
  6473  0E72  2E6E               	goto	u4315
  6474  0E73  1003               	clrc
  6475  0E74  0D20               	rlf	??_sprintf^(0+128),w
  6476  0E75  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6477  0E76  0084               	movwf	4
  6478  0E77  160A  158A  2000  120A  158A  	fcall	stringdir
  6479  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  6480  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  6481  0E7E  00AE               	movwf	___llmod@divisor
  6482  0E7F  160A  158A  2000  120A  158A  	fcall	stringdir
  6483  0E84  00AF               	movwf	___llmod@divisor+1
  6484  0E85  160A  158A  2000  120A  158A  	fcall	stringdir
  6485  0E8A  00B0               	movwf	___llmod@divisor+2
  6486  0E8B  160A  158A  2000  120A  158A  	fcall	stringdir
  6487  0E90  00B1               	movwf	___llmod@divisor+3
  6488  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  6489  0E92  1303               	bcf	3,6	;RP1=0, select bank1
  6490  0E93  082F               	movf	(sprintf@val+3)^(0+128),w
  6491  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  6492  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  6493  0E96  00B5               	movwf	___llmod@dividend+3
  6494  0E97  1683               	bsf	3,5	;RP0=1, select bank1
  6495  0E98  1303               	bcf	3,6	;RP1=0, select bank1
  6496  0E99  082E               	movf	(sprintf@val+2)^(0+128),w
  6497  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  6498  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  6499  0E9C  00B4               	movwf	___llmod@dividend+2
  6500  0E9D  1683               	bsf	3,5	;RP0=1, select bank1
  6501  0E9E  1303               	bcf	3,6	;RP1=0, select bank1
  6502  0E9F  082D               	movf	(sprintf@val+1)^(0+128),w
  6503  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  6504  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  6505  0EA2  00B3               	movwf	___llmod@dividend+1
  6506  0EA3  1683               	bsf	3,5	;RP0=1, select bank1
  6507  0EA4  1303               	bcf	3,6	;RP1=0, select bank1
  6508  0EA5  082C               	movf	sprintf@val^(0+128),w
  6509  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  6510  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  6511  0EA8  00B2               	movwf	___llmod@dividend
  6512  0EA9  160A  158A  23B5  120A  158A  	fcall	___llmod
  6513  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  6514  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  6515  0EB0  0831               	movf	?___llmod+3,w
  6516  0EB1  1683               	bsf	3,5	;RP0=1, select bank1
  6517  0EB2  1303               	bcf	3,6	;RP1=0, select bank1
  6518  0EB3  00AF               	movwf	(sprintf@val+3)^(0+128)
  6519  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  6520  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  6521  0EB6  0830               	movf	?___llmod+2,w
  6522  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  6523  0EB8  1303               	bcf	3,6	;RP1=0, select bank1
  6524  0EB9  00AE               	movwf	(sprintf@val+2)^(0+128)
  6525  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  6526  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  6527  0EBC  082F               	movf	?___llmod+1,w
  6528  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  6529  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  6530  0EBF  00AD               	movwf	(sprintf@val+1)^(0+128)
  6531  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  6532  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  6533  0EC2  082E               	movf	?___llmod,w
  6534  0EC3  2DBB               	goto	L10
  6535  0EC4                     l3186:	
  6536                           ;doprnt.c: 1233: }
  6537                           ;doprnt.c: 1235: while(prec) {
  6538                           
  6539                           
  6540                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  6541  0EC4  3030               	movlw	48
  6542  0EC5  00A0               	movwf	??_sprintf^(0+128)
  6543  0EC6  0836               	movf	sprintf@sp^(0+128),w
  6544  0EC7  0084               	movwf	4
  6545  0EC8  0820               	movf	??_sprintf^(0+128),w
  6546  0EC9  1783               	bsf	3,7	;select IRP bank2
  6547  0ECA  0080               	movwf	0
  6548  0ECB  3001               	movlw	1
  6549  0ECC  00A0               	movwf	??_sprintf^(0+128)
  6550  0ECD  0820               	movf	??_sprintf^(0+128),w
  6551  0ECE  07B6               	addwf	sprintf@sp^(0+128),f
  6552                           
  6553                           ;doprnt.c: 1237: prec--;
  6554  0ECF  30FF               	movlw	255
  6555  0ED0  07B7               	addwf	sprintf@prec^(0+128),f
  6556  0ED1  1803               	skipnc
  6557  0ED2  0AB8               	incf	(sprintf@prec+1)^(0+128),f
  6558  0ED3  30FF               	movlw	255
  6559  0ED4  07B8               	addwf	(sprintf@prec+1)^(0+128),f
  6560  0ED5                     l3192:	
  6561  0ED5  0837               	movf	sprintf@prec^(0+128),w
  6562  0ED6  0438               	iorwf	(sprintf@prec+1)^(0+128),w
  6563  0ED7  1903               	btfsc	3,2
  6564  0ED8  2852               	goto	l3236
  6565  0ED9  2EC4               	goto	l3186
  6566  0EDA                     l3194:	
  6567                           ;doprnt.c: 1238: }
  6568                           ;doprnt.c: 1245: continue;
  6569                           
  6570                           
  6571                           ;doprnt.c: 1246: }
  6572                           ;doprnt.c: 1273: {
  6573                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6574  0EDA  0829               	movf	sprintf@ap^(0+128),w
  6575  0EDB  0084               	movwf	4
  6576  0EDC  1383               	bcf	3,7	;select IRP bank0
  6577  0EDD  0800               	movf	0,w
  6578  0EDE  00A0               	movwf	??_sprintf^(0+128)
  6579  0EDF  0A84               	incf	4,f
  6580  0EE0  0800               	movf	0,w
  6581  0EE1  00A1               	movwf	(??_sprintf^(0+128)+1)
  6582  0EE2  0820               	movf	??_sprintf^(0+128),w
  6583  0EE3  00AC               	movwf	sprintf@val^(0+128)
  6584  0EE4  0821               	movf	(??_sprintf+1)^(0+128),w
  6585  0EE5  00AD               	movwf	(sprintf@val^(0+128)+1)
  6586  0EE6  01AE               	clrf	(sprintf@val^(0+128)+2)
  6587  0EE7  01AF               	clrf	(sprintf@val^(0+128)+3)
  6588  0EE8  3002               	movlw	2
  6589  0EE9  00A0               	movwf	??_sprintf^(0+128)
  6590  0EEA  0820               	movf	??_sprintf^(0+128),w
  6591  0EEB  07A9               	addwf	sprintf@ap^(0+128),f
  6592                           
  6593                           ;doprnt.c: 1287: }
  6594                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6595  0EEC  0837               	movf	sprintf@prec^(0+128),w
  6596  0EED  0438               	iorwf	(sprintf@prec+1)^(0+128),w
  6597  0EEE  1D03               	btfss	3,2
  6598  0EEF  2EFC               	goto	l3204
  6599  0EF0  082F               	movf	(sprintf@val+3)^(0+128),w
  6600  0EF1  042E               	iorwf	(sprintf@val+2)^(0+128),w
  6601  0EF2  042D               	iorwf	(sprintf@val+1)^(0+128),w
  6602  0EF3  042C               	iorwf	sprintf@val^(0+128),w
  6603  0EF4  1D03               	skipz
  6604  0EF5  2EFC               	goto	l3204
  6605                           
  6606                           ;doprnt.c: 1291: prec++;
  6607  0EF6  3001               	movlw	1
  6608  0EF7  07B7               	addwf	sprintf@prec^(0+128),f
  6609  0EF8  1803               	skipnc
  6610  0EF9  0AB8               	incf	(sprintf@prec+1)^(0+128),f
  6611  0EFA  3000               	movlw	0
  6612  0EFB  07B8               	addwf	(sprintf@prec+1)^(0+128),f
  6613  0EFC                     l3204:	
  6614                           
  6615                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6616  0EFC  01BC               	clrf	sprintf@c^(0+128)
  6617  0EFD  0ABC               	incf	sprintf@c^(0+128),f
  6618  0EFE  300A               	movlw	10
  6619  0EFF  063C               	xorwf	sprintf@c^(0+128),w
  6620  0F00  1903               	btfsc	3,2
  6621  0F01  2F3E               	goto	l3216
  6622  0F02                     l3210:	
  6623                           
  6624                           ;doprnt.c: 1306: if(val < dpowers[c])
  6625  0F02  083C               	movf	sprintf@c^(0+128),w
  6626  0F03  00A0               	movwf	??_sprintf^(0+128)
  6627  0F04  3001               	movlw	1
  6628  0F05                     u4375:	
  6629  0F05  1003               	clrc
  6630  0F06  0DA0               	rlf	??_sprintf^(0+128),f
  6631  0F07  3EFF               	addlw	-1
  6632  0F08  1D03               	skipz
  6633  0F09  2F05               	goto	u4375
  6634  0F0A  1003               	clrc
  6635  0F0B  0D20               	rlf	??_sprintf^(0+128),w
  6636  0F0C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6637  0F0D  0084               	movwf	4
  6638  0F0E  160A  158A  2000  120A  158A  	fcall	stringdir
  6639  0F13  00A1               	movwf	(??_sprintf+1)^(0+128)
  6640  0F14  160A  158A  2000  120A  158A  	fcall	stringdir
  6641  0F19  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  6642  0F1A  160A  158A  2000  120A  158A  	fcall	stringdir
  6643  0F1F  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  6644  0F20  160A  158A  2000  120A  158A  	fcall	stringdir
  6645  0F25  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  6646  0F26  0824               	movf	(??_sprintf+4)^(0+128),w
  6647  0F27  022F               	subwf	(sprintf@val+3)^(0+128),w
  6648  0F28  1D03               	skipz
  6649  0F29  2F34               	goto	u4385
  6650  0F2A  0823               	movf	(??_sprintf+3)^(0+128),w
  6651  0F2B  022E               	subwf	(sprintf@val+2)^(0+128),w
  6652  0F2C  1D03               	skipz
  6653  0F2D  2F34               	goto	u4385
  6654  0F2E  0822               	movf	(??_sprintf+2)^(0+128),w
  6655  0F2F  022D               	subwf	(sprintf@val+1)^(0+128),w
  6656  0F30  1D03               	skipz
  6657  0F31  2F34               	goto	u4385
  6658  0F32  0821               	movf	(??_sprintf+1)^(0+128),w
  6659  0F33  022C               	subwf	sprintf@val^(0+128),w
  6660  0F34                     u4385:	
  6661  0F34  1C03               	btfss	3,0
  6662  0F35  2F3E               	goto	l3216
  6663                           
  6664                           ;doprnt.c: 1307: break;
  6665  0F36  3001               	movlw	1
  6666  0F37  00A0               	movwf	??_sprintf^(0+128)
  6667  0F38  0820               	movf	??_sprintf^(0+128),w
  6668  0F39  07BC               	addwf	sprintf@c^(0+128),f
  6669  0F3A  300A               	movlw	10
  6670  0F3B  063C               	xorwf	sprintf@c^(0+128),w
  6671  0F3C  1D03               	btfss	3,2
  6672  0F3D  2F02               	goto	l3210
  6673  0F3E                     l3216:	
  6674                           
  6675                           ;doprnt.c: 1339: if(c < prec)
  6676  0F3E  083C               	movf	sprintf@c^(0+128),w
  6677  0F3F  00A0               	movwf	??_sprintf^(0+128)
  6678  0F40  01A1               	clrf	(??_sprintf^(0+128)+1)
  6679  0F41  1BA0               	btfsc	??_sprintf^(0+128),7
  6680  0F42  03A1               	decf	(??_sprintf^(0+128)+1),f
  6681  0F43  0821               	movf	(??_sprintf+1)^(0+128),w
  6682  0F44  3A80               	xorlw	128
  6683  0F45  00A2               	movwf	(??_sprintf+2)^(0+128)
  6684  0F46  0838               	movf	(sprintf@prec+1)^(0+128),w
  6685  0F47  3A80               	xorlw	128
  6686  0F48  0222               	subwf	(??_sprintf+2)^(0+128),w
  6687  0F49  1D03               	skipz
  6688  0F4A  2F4D               	goto	u4405
  6689  0F4B  0837               	movf	sprintf@prec^(0+128),w
  6690  0F4C  0220               	subwf	??_sprintf^(0+128),w
  6691  0F4D                     u4405:	
  6692  0F4D  1803               	skipnc
  6693  0F4E  2F56               	goto	l3220
  6694                           
  6695                           ;doprnt.c: 1340: c = prec;
  6696  0F4F  1683               	bsf	3,5	;RP0=1, select bank1
  6697  0F50  1303               	bcf	3,6	;RP1=0, select bank1
  6698  0F51  0837               	movf	sprintf@prec^(0+128),w
  6699  0F52  00A0               	movwf	??_sprintf^(0+128)
  6700  0F53  0820               	movf	??_sprintf^(0+128),w
  6701  0F54  00BC               	movwf	sprintf@c^(0+128)
  6702  0F55  2F70               	goto	l374
  6703  0F56                     l3220:	
  6704                           
  6705                           ;doprnt.c: 1341: else if(prec < c)
  6706  0F56  1683               	bsf	3,5	;RP0=1, select bank1
  6707  0F57  1303               	bcf	3,6	;RP1=0, select bank1
  6708  0F58  083C               	movf	sprintf@c^(0+128),w
  6709  0F59  00A0               	movwf	??_sprintf^(0+128)
  6710  0F5A  01A1               	clrf	(??_sprintf^(0+128)+1)
  6711  0F5B  1BA0               	btfsc	??_sprintf^(0+128),7
  6712  0F5C  03A1               	decf	(??_sprintf^(0+128)+1),f
  6713  0F5D  0838               	movf	(sprintf@prec+1)^(0+128),w
  6714  0F5E  3A80               	xorlw	128
  6715  0F5F  00A2               	movwf	(??_sprintf+2)^(0+128)
  6716  0F60  0821               	movf	(??_sprintf+1)^(0+128),w
  6717  0F61  3A80               	xorlw	128
  6718  0F62  0222               	subwf	(??_sprintf+2)^(0+128),w
  6719  0F63  1D03               	skipz
  6720  0F64  2F67               	goto	u4415
  6721  0F65  0820               	movf	??_sprintf^(0+128),w
  6722  0F66  0237               	subwf	sprintf@prec^(0+128),w
  6723  0F67                     u4415:	
  6724  0F67  1803               	skipnc
  6725  0F68  2F70               	goto	l374
  6726                           
  6727                           ;doprnt.c: 1342: prec = c;
  6728  0F69  1683               	bsf	3,5	;RP0=1, select bank1
  6729  0F6A  1303               	bcf	3,6	;RP1=0, select bank1
  6730  0F6B  083C               	movf	sprintf@c^(0+128),w
  6731  0F6C  00B7               	movwf	sprintf@prec^(0+128)
  6732  0F6D  01B8               	clrf	(sprintf@prec+1)^(0+128)
  6733  0F6E  1BB7               	btfsc	sprintf@prec^(0+128),7
  6734  0F6F  03B8               	decf	(sprintf@prec+1)^(0+128),f
  6735  0F70                     l374:	
  6736                           
  6737                           ;doprnt.c: 1422: {
  6738                           ;doprnt.c: 1438: if(flag & 0x03)
  6739  0F70  3003               	movlw	3
  6740  0F71  1683               	bsf	3,5	;RP0=1, select bank1
  6741  0F72  1303               	bcf	3,6	;RP1=0, select bank1
  6742  0F73  052A               	andwf	sprintf@flag^(0+128),w
  6743  0F74  00A0               	movwf	??_sprintf^(0+128)
  6744  0F75  3000               	movlw	0
  6745  0F76  052B               	andwf	(sprintf@flag+1)^(0+128),w
  6746  0F77  00A1               	movwf	(??_sprintf+1)^(0+128)
  6747  0F78  0820               	movf	??_sprintf^(0+128),w
  6748  0F79  0421               	iorwf	(??_sprintf^(0+128)+1),w
  6749  0F7A  1903               	btfsc	3,2
  6750  0F7B  2F87               	goto	l3234
  6751                           
  6752                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6753  0F7C  302D               	movlw	45
  6754  0F7D                     L11:	
  6755  0F7D  00A0               	movwf	??_sprintf^(0+128)
  6756  0F7E  0836               	movf	sprintf@sp^(0+128),w
  6757  0F7F  0084               	movwf	4
  6758  0F80  0820               	movf	??_sprintf^(0+128),w
  6759  0F81  1783               	bsf	3,7	;select IRP bank2
  6760  0F82  0080               	movwf	0
  6761  0F83  3001               	movlw	1
  6762  0F84  00A0               	movwf	??_sprintf^(0+128)
  6763  0F85  0820               	movf	??_sprintf^(0+128),w
  6764  0F86  07B6               	addwf	sprintf@sp^(0+128),f
  6765  0F87                     l3234:	
  6766  0F87  30FF               	movlw	255
  6767  0F88  07B7               	addwf	sprintf@prec^(0+128),f
  6768  0F89  1803               	skipnc
  6769  0F8A  0AB8               	incf	(sprintf@prec+1)^(0+128),f
  6770  0F8B  30FF               	movlw	255
  6771  0F8C  07B8               	addwf	(sprintf@prec+1)^(0+128),f
  6772  0F8D  0A37               	incf	sprintf@prec^(0+128),w
  6773  0F8E  1903               	btfsc	3,2
  6774  0F8F  0A38               	incf	(sprintf@prec+1)^(0+128),w
  6775  0F90  1903               	btfsc	3,2
  6776  0F91  2852               	goto	l3236
  6777                           
  6778                           ;doprnt.c: 1478: {
  6779                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6780                           
  6781                           ;doprnt.c: 1469: }
  6782                           ;doprnt.c: 1474: while(prec--) {
  6783  0F92  3000               	movlw	0
  6784  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  6785  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  6786  0F95  00B1               	movwf	___llmod@divisor+3
  6787  0F96  3000               	movlw	0
  6788  0F97  00B0               	movwf	___llmod@divisor+2
  6789  0F98  3000               	movlw	0
  6790  0F99  00AF               	movwf	___llmod@divisor+1
  6791  0F9A  300A               	movlw	10
  6792  0F9B  00AE               	movwf	___llmod@divisor
  6793  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  6794  0F9D  1303               	bcf	3,6	;RP1=0, select bank1
  6795  0F9E  0837               	movf	sprintf@prec^(0+128),w
  6796  0F9F  00A0               	movwf	??_sprintf^(0+128)
  6797  0FA0  3001               	movlw	1
  6798  0FA1                     u4435:	
  6799  0FA1  1003               	clrc
  6800  0FA2  0DA0               	rlf	??_sprintf^(0+128),f
  6801  0FA3  3EFF               	addlw	-1
  6802  0FA4  1D03               	skipz
  6803  0FA5  2FA1               	goto	u4435
  6804  0FA6  1003               	clrc
  6805  0FA7  0D20               	rlf	??_sprintf^(0+128),w
  6806  0FA8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6807  0FA9  0084               	movwf	4
  6808  0FAA  160A  158A  2000  120A  158A  	fcall	stringdir
  6809  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  6810  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  6811  0FB1  00A0               	movwf	___lldiv@divisor
  6812  0FB2  160A  158A  2000  120A  158A  	fcall	stringdir
  6813  0FB7  00A1               	movwf	___lldiv@divisor+1
  6814  0FB8  160A  158A  2000  120A  158A  	fcall	stringdir
  6815  0FBD  00A2               	movwf	___lldiv@divisor+2
  6816  0FBE  160A  158A  2000  120A  158A  	fcall	stringdir
  6817  0FC3  00A3               	movwf	___lldiv@divisor+3
  6818  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  6819  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  6820  0FC6  082F               	movf	(sprintf@val+3)^(0+128),w
  6821  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  6822  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  6823  0FC9  00A7               	movwf	___lldiv@dividend+3
  6824  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  6825  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  6826  0FCC  082E               	movf	(sprintf@val+2)^(0+128),w
  6827  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  6828  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  6829  0FCF  00A6               	movwf	___lldiv@dividend+2
  6830  0FD0  1683               	bsf	3,5	;RP0=1, select bank1
  6831  0FD1  1303               	bcf	3,6	;RP1=0, select bank1
  6832  0FD2  082D               	movf	(sprintf@val+1)^(0+128),w
  6833  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  6834  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  6835  0FD5  00A5               	movwf	___lldiv@dividend+1
  6836  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  6837  0FD7  1303               	bcf	3,6	;RP1=0, select bank1
  6838  0FD8  082C               	movf	sprintf@val^(0+128),w
  6839  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  6840  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
  6841  0FDB  00A4               	movwf	___lldiv@dividend
  6842  0FDC  120A  118A  2798  120A  158A  	fcall	___lldiv
  6843  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  6844  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  6845  0FE3  0823               	movf	?___lldiv+3,w
  6846  0FE4  00B5               	movwf	___llmod@dividend+3
  6847  0FE5  0822               	movf	?___lldiv+2,w
  6848  0FE6  00B4               	movwf	___llmod@dividend+2
  6849  0FE7  0821               	movf	?___lldiv+1,w
  6850  0FE8  00B3               	movwf	___llmod@dividend+1
  6851  0FE9  0820               	movf	?___lldiv,w
  6852  0FEA  00B2               	movwf	___llmod@dividend
  6853  0FEB  160A  158A  23B5  120A  158A  	fcall	___llmod
  6854  0FF0  1283               	bcf	3,5	;RP0=0, select bank0
  6855  0FF1  1303               	bcf	3,6	;RP1=0, select bank0
  6856  0FF2  082E               	movf	?___llmod,w
  6857  0FF3  3E30               	addlw	48
  6858  0FF4  1683               	bsf	3,5	;RP0=1, select bank1
  6859  0FF5  1303               	bcf	3,6	;RP1=0, select bank1
  6860  0FF6  00A1               	movwf	(??_sprintf+1)^(0+128)
  6861  0FF7  0821               	movf	(??_sprintf+1)^(0+128),w
  6862  0FF8  00BC               	movwf	sprintf@c^(0+128)
  6863                           
  6864                           ;doprnt.c: 1523: }
  6865                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6866  0FF9  083C               	movf	sprintf@c^(0+128),w
  6867  0FFA  2F7D               	goto	L11
  6868  0FFB                     l3238:	
  6869                           ;doprnt.c: 1525: }
  6870                           ;doprnt.c: 1533: }
  6871                           ;doprnt.c: 1535: alldone:
  6872                           
  6873                           
  6874                           ;doprnt.c: 1538: *sp = 0;
  6875  0FFB  0836               	movf	sprintf@sp^(0+128),w
  6876  0FFC  0084               	movwf	4
  6877  0FFD  1783               	bsf	3,7	;select IRP bank2
  6878  0FFE  0180               	clrf	0
  6879  0FFF  0008               	return
  6880  1000                     __end_of_sprintf:	
  6881                           ;doprnt.c: 1540: return 0;
  6882                           ;	Return value of _sprintf is never used
  6883                           
  6884                           
  6885                           	psect	text19
  6886  0334                     __ptext19:	
  6887 ;; *************** function _scale *****************
  6888 ;; Defined at:
  6889 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;  scl             1    wreg     char 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  scl             1   44[BANK0 ] char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  3   36[BANK0 ] char 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6903 ;;      Params:         0       3       0       0       0
  6904 ;;      Locals:         0       4       0       0       0
  6905 ;;      Temps:          0       2       0       0       0
  6906 ;;      Totals:         0       9       0       0       0
  6907 ;;Total ram usage:        9 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    4
  6910 ;; This function calls:
  6911 ;;		___awdiv
  6912 ;;		___awmod
  6913 ;;		___bmul
  6914 ;;		___ftmul
  6915 ;; This function is called by:
  6916 ;;		_sprintf
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           
  6921                           ;psect for function _scale
  6922  0334                     _scale:	
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6926                           ;scale@scl stored from wreg
  6927  0334  1283               	bcf	3,5	;RP0=0, select bank0
  6928  0335  1303               	bcf	3,6	;RP1=0, select bank0
  6929  0336  00CC               	movwf	scale@scl
  6930                           
  6931                           ;doprnt.c: 428: if(scl < 0) {
  6932  0337  1FCC               	btfss	scale@scl,7
  6933  0338  2C91               	goto	l2558
  6934                           
  6935                           ;doprnt.c: 429: scl = -scl;
  6936  0339  09CC               	comf	scale@scl,f
  6937  033A  0ACC               	incf	scale@scl,f
  6938                           
  6939                           ;doprnt.c: 430: if(scl>=110)
  6940  033B  084C               	movf	scale@scl,w
  6941  033C  3A80               	xorlw	128
  6942  033D  3E12               	addlw	-238
  6943  033E  1C03               	skipc
  6944  033F  2C00               	goto	l2548
  6945                           
  6946                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6947  0340  3003               	movlw	3
  6948  0341  00C7               	movwf	??_scale
  6949  0342  0847               	movf	??_scale,w
  6950  0343  00B0               	movwf	___bmul@multiplicand
  6951  0344  300A               	movlw	10
  6952  0345  00A7               	movwf	___awdiv@divisor
  6953  0346  3000               	movlw	0
  6954  0347  00A8               	movwf	___awdiv@divisor+1
  6955  0348  084C               	movf	scale@scl,w
  6956  0349  00A2               	movwf	___awmod@dividend
  6957  034A  01A3               	clrf	___awmod@dividend+1
  6958  034B  1BA2               	btfsc	___awmod@dividend,7
  6959  034C  03A3               	decf	___awmod@dividend+1,f
  6960  034D  3064               	movlw	100
  6961  034E  00A0               	movwf	___awmod@divisor
  6962  034F  3000               	movlw	0
  6963  0350  00A1               	movwf	___awmod@divisor+1
  6964  0351  160A  158A  2368  120A  118A  	fcall	___awmod
  6965  0356  1283               	bcf	3,5	;RP0=0, select bank0
  6966  0357  1303               	bcf	3,6	;RP1=0, select bank0
  6967  0358  0821               	movf	?___awmod+1,w
  6968  0359  00AA               	movwf	___awdiv@dividend+1
  6969  035A  0820               	movf	?___awmod,w
  6970  035B  00A9               	movwf	___awdiv@dividend
  6971  035C  160A  158A  2403  120A  118A  	fcall	___awdiv
  6972  0361  1283               	bcf	3,5	;RP0=0, select bank0
  6973  0362  1303               	bcf	3,6	;RP1=0, select bank0
  6974  0363  0827               	movf	?___awdiv,w
  6975  0364  3E09               	addlw	9
  6976  0365  160A  118A  2001  120A  118A  	fcall	___bmul
  6977  036A  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6978  036B  0084               	movwf	4
  6979  036C  160A  158A  2000  120A  118A  	fcall	stringdir
  6980  0371  1283               	bcf	3,5	;RP0=0, select bank0
  6981  0372  1303               	bcf	3,6	;RP1=0, select bank0
  6982  0373  00B4               	movwf	___ftmul@f1
  6983  0374  160A  158A  2000  120A  118A  	fcall	stringdir
  6984  0379  00B5               	movwf	___ftmul@f1+1
  6985  037A  160A  158A  2000  120A  118A  	fcall	stringdir
  6986  037F  00B6               	movwf	___ftmul@f1+2
  6987  0380  3003               	movlw	3
  6988  0381  00C8               	movwf	??_scale+1
  6989  0382  0848               	movf	??_scale+1,w
  6990  0383  00B0               	movwf	___bmul@multiplicand
  6991  0384  3064               	movlw	100
  6992  0385  00A7               	movwf	___awdiv@divisor
  6993  0386  3000               	movlw	0
  6994  0387  00A8               	movwf	___awdiv@divisor+1
  6995  0388  084C               	movf	scale@scl,w
  6996  0389  00A9               	movwf	___awdiv@dividend
  6997  038A  01AA               	clrf	___awdiv@dividend+1
  6998  038B  1BA9               	btfsc	___awdiv@dividend,7
  6999  038C  03AA               	decf	___awdiv@dividend+1,f
  7000  038D  160A  158A  2403  120A  118A  	fcall	___awdiv
  7001  0392  1283               	bcf	3,5	;RP0=0, select bank0
  7002  0393  1303               	bcf	3,6	;RP1=0, select bank0
  7003  0394  0827               	movf	?___awdiv,w
  7004  0395  3E12               	addlw	18
  7005  0396  160A  118A  2001  120A  118A  	fcall	___bmul
  7006  039B  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7007  039C  0084               	movwf	4
  7008  039D  160A  158A  2000  120A  118A  	fcall	stringdir
  7009  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  7010  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  7011  03A4  00B7               	movwf	___ftmul@f2
  7012  03A5  160A  158A  2000  120A  118A  	fcall	stringdir
  7013  03AA  00B8               	movwf	___ftmul@f2+1
  7014  03AB  160A  158A  2000  120A  118A  	fcall	stringdir
  7015  03B0  00B9               	movwf	___ftmul@f2+2
  7016  03B1  160A  118A  226C  120A  118A  	fcall	___ftmul
  7017  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  7018  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  7019  03B8  0834               	movf	?___ftmul,w
  7020  03B9  00C9               	movwf	_scale$918
  7021  03BA  0835               	movf	?___ftmul+1,w
  7022  03BB  00CA               	movwf	_scale$918+1
  7023  03BC  0836               	movf	?___ftmul+2,w
  7024  03BD  00CB               	movwf	_scale$918+2
  7025                           
  7026                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7027  03BE  3003               	movlw	3
  7028  03BF  00C7               	movwf	??_scale
  7029  03C0  0847               	movf	??_scale,w
  7030  03C1  00B0               	movwf	___bmul@multiplicand
  7031  03C2  084C               	movf	scale@scl,w
  7032  03C3  00A2               	movwf	___awmod@dividend
  7033  03C4  01A3               	clrf	___awmod@dividend+1
  7034  03C5  1BA2               	btfsc	___awmod@dividend,7
  7035  03C6  03A3               	decf	___awmod@dividend+1,f
  7036  03C7  300A               	movlw	10
  7037  03C8  00A0               	movwf	___awmod@divisor
  7038  03C9  3000               	movlw	0
  7039  03CA  00A1               	movwf	___awmod@divisor+1
  7040  03CB  160A  158A  2368  120A  118A  	fcall	___awmod
  7041  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  7042  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  7043  03D2  0820               	movf	?___awmod,w
  7044  03D3  160A  118A  2001  120A  118A  	fcall	___bmul
  7045  03D8  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7046  03D9  0084               	movwf	4
  7047  03DA  160A  158A  2000  120A  118A  	fcall	stringdir
  7048  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  7049  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  7050  03E1  00B4               	movwf	___ftmul@f1
  7051  03E2  160A  158A  2000  120A  118A  	fcall	stringdir
  7052  03E7  00B5               	movwf	___ftmul@f1+1
  7053  03E8  160A  158A  2000  120A  118A  	fcall	stringdir
  7054  03ED  00B6               	movwf	___ftmul@f1+2
  7055  03EE  0849               	movf	_scale$918,w
  7056  03EF  00B7               	movwf	___ftmul@f2
  7057  03F0  084A               	movf	_scale$918+1,w
  7058  03F1  00B8               	movwf	___ftmul@f2+1
  7059  03F2  084B               	movf	_scale$918+2,w
  7060  03F3  00B9               	movwf	___ftmul@f2+2
  7061  03F4  160A  118A  226C   	fcall	___ftmul
  7062  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  7063  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  7064  03F9  0834               	movf	?___ftmul,w
  7065  03FA  00C4               	movwf	?_scale
  7066  03FB  0835               	movf	?___ftmul+1,w
  7067  03FC  00C5               	movwf	?_scale+1
  7068  03FD  0836               	movf	?___ftmul+2,w
  7069  03FE  00C6               	movwf	?_scale+2
  7070  03FF  0008               	return
  7071  0400                     l2548:	
  7072                           
  7073                           ;doprnt.c: 432: else if(scl > 10)
  7074  0400  084C               	movf	scale@scl,w
  7075  0401  3A80               	xorlw	128
  7076  0402  3E75               	addlw	-139
  7077  0403  1C03               	skipc
  7078  0404  2C72               	goto	l2554
  7079                           
  7080                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7081  0405  3003               	movlw	3
  7082  0406  00C7               	movwf	??_scale
  7083  0407  0847               	movf	??_scale,w
  7084  0408  00B0               	movwf	___bmul@multiplicand
  7085  0409  084C               	movf	scale@scl,w
  7086  040A  00A2               	movwf	___awmod@dividend
  7087  040B  01A3               	clrf	___awmod@dividend+1
  7088  040C  1BA2               	btfsc	___awmod@dividend,7
  7089  040D  03A3               	decf	___awmod@dividend+1,f
  7090  040E  300A               	movlw	10
  7091  040F  00A0               	movwf	___awmod@divisor
  7092  0410  3000               	movlw	0
  7093  0411  00A1               	movwf	___awmod@divisor+1
  7094  0412  160A  158A  2368  120A  118A  	fcall	___awmod
  7095  0417  1283               	bcf	3,5	;RP0=0, select bank0
  7096  0418  1303               	bcf	3,6	;RP1=0, select bank0
  7097  0419  0820               	movf	?___awmod,w
  7098  041A  160A  118A  2001  120A  118A  	fcall	___bmul
  7099  041F  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7100  0420  0084               	movwf	4
  7101  0421  160A  158A  2000  120A  118A  	fcall	stringdir
  7102  0426  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0427  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0428  00B4               	movwf	___ftmul@f1
  7105  0429  160A  158A  2000  120A  118A  	fcall	stringdir
  7106  042E  00B5               	movwf	___ftmul@f1+1
  7107  042F  160A  158A  2000  120A  118A  	fcall	stringdir
  7108  0434  00B6               	movwf	___ftmul@f1+2
  7109  0435  3003               	movlw	3
  7110  0436  00C8               	movwf	??_scale+1
  7111  0437  0848               	movf	??_scale+1,w
  7112  0438  00B0               	movwf	___bmul@multiplicand
  7113  0439  300A               	movlw	10
  7114  043A  00A7               	movwf	___awdiv@divisor
  7115  043B  3000               	movlw	0
  7116  043C  00A8               	movwf	___awdiv@divisor+1
  7117  043D  084C               	movf	scale@scl,w
  7118  043E  00A9               	movwf	___awdiv@dividend
  7119  043F  01AA               	clrf	___awdiv@dividend+1
  7120  0440  1BA9               	btfsc	___awdiv@dividend,7
  7121  0441  03AA               	decf	___awdiv@dividend+1,f
  7122  0442  160A  158A  2403  120A  118A  	fcall	___awdiv
  7123  0447  1283               	bcf	3,5	;RP0=0, select bank0
  7124  0448  1303               	bcf	3,6	;RP1=0, select bank0
  7125  0449  0827               	movf	?___awdiv,w
  7126  044A  3E09               	addlw	9
  7127  044B  160A  118A  2001  120A  118A  	fcall	___bmul
  7128  0450  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7129  0451  0084               	movwf	4
  7130  0452  160A  158A  2000  120A  118A  	fcall	stringdir
  7131  0457  1283               	bcf	3,5	;RP0=0, select bank0
  7132  0458  1303               	bcf	3,6	;RP1=0, select bank0
  7133  0459  00B7               	movwf	___ftmul@f2
  7134  045A  160A  158A  2000  120A  118A  	fcall	stringdir
  7135  045F  00B8               	movwf	___ftmul@f2+1
  7136  0460  160A  158A  2000  120A  118A  	fcall	stringdir
  7137  0465  00B9               	movwf	___ftmul@f2+2
  7138  0466  160A  118A  226C   	fcall	___ftmul
  7139  0469  1283               	bcf	3,5	;RP0=0, select bank0
  7140  046A  1303               	bcf	3,6	;RP1=0, select bank0
  7141  046B  0834               	movf	?___ftmul,w
  7142  046C  00C4               	movwf	?_scale
  7143  046D  0835               	movf	?___ftmul+1,w
  7144  046E  00C5               	movwf	?_scale+1
  7145  046F  0836               	movf	?___ftmul+2,w
  7146  0470  00C6               	movwf	?_scale+2
  7147  0471  0008               	return
  7148  0472                     l2554:	
  7149                           
  7150                           ;doprnt.c: 434: return _npowers_[scl];
  7151  0472  3003               	movlw	3
  7152  0473  00C7               	movwf	??_scale
  7153  0474  0847               	movf	??_scale,w
  7154  0475  00B0               	movwf	___bmul@multiplicand
  7155  0476  084C               	movf	scale@scl,w
  7156  0477  160A  118A  2001  120A  118A  	fcall	___bmul
  7157  047C  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7158  047D  0084               	movwf	4
  7159  047E  160A  158A  2000  120A  118A  	fcall	stringdir
  7160  0483  1283               	bcf	3,5	;RP0=0, select bank0
  7161  0484  1303               	bcf	3,6	;RP1=0, select bank0
  7162  0485  00C4               	movwf	?_scale
  7163  0486  160A  158A  2000  120A  118A  	fcall	stringdir
  7164  048B  00C5               	movwf	?_scale+1
  7165  048C  160A  158A  2000   	fcall	stringdir
  7166  048F  00C6               	movwf	?_scale+2
  7167  0490  0008               	return
  7168  0491                     l2558:	
  7169                           
  7170                           ;doprnt.c: 435: }
  7171                           ;doprnt.c: 436: if(scl>=110)
  7172  0491  084C               	movf	scale@scl,w
  7173  0492  3A80               	xorlw	128
  7174  0493  3E12               	addlw	-238
  7175  0494  1C03               	skipc
  7176  0495  2D56               	goto	l2566
  7177                           
  7178                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7179  0496  3003               	movlw	3
  7180  0497  00C7               	movwf	??_scale
  7181  0498  0847               	movf	??_scale,w
  7182  0499  00B0               	movwf	___bmul@multiplicand
  7183  049A  300A               	movlw	10
  7184  049B  00A7               	movwf	___awdiv@divisor
  7185  049C  3000               	movlw	0
  7186  049D  00A8               	movwf	___awdiv@divisor+1
  7187  049E  084C               	movf	scale@scl,w
  7188  049F  00A2               	movwf	___awmod@dividend
  7189  04A0  01A3               	clrf	___awmod@dividend+1
  7190  04A1  1BA2               	btfsc	___awmod@dividend,7
  7191  04A2  03A3               	decf	___awmod@dividend+1,f
  7192  04A3  3064               	movlw	100
  7193  04A4  00A0               	movwf	___awmod@divisor
  7194  04A5  3000               	movlw	0
  7195  04A6  00A1               	movwf	___awmod@divisor+1
  7196  04A7  160A  158A  2368  120A  118A  	fcall	___awmod
  7197  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  7198  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  7199  04AE  0821               	movf	?___awmod+1,w
  7200  04AF  00AA               	movwf	___awdiv@dividend+1
  7201  04B0  0820               	movf	?___awmod,w
  7202  04B1  00A9               	movwf	___awdiv@dividend
  7203  04B2  160A  158A  2403  120A  118A  	fcall	___awdiv
  7204  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  7205  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  7206  04B9  0827               	movf	?___awdiv,w
  7207  04BA  3E09               	addlw	9
  7208  04BB  160A  118A  2001  120A  118A  	fcall	___bmul
  7209  04C0  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7210  04C1  0084               	movwf	4
  7211  04C2  160A  158A  2000  120A  118A  	fcall	stringdir
  7212  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  7213  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  7214  04C9  00B4               	movwf	___ftmul@f1
  7215  04CA  160A  158A  2000  120A  118A  	fcall	stringdir
  7216  04CF  00B5               	movwf	___ftmul@f1+1
  7217  04D0  160A  158A  2000  120A  118A  	fcall	stringdir
  7218  04D5  00B6               	movwf	___ftmul@f1+2
  7219  04D6  3003               	movlw	3
  7220  04D7  00C8               	movwf	??_scale+1
  7221  04D8  0848               	movf	??_scale+1,w
  7222  04D9  00B0               	movwf	___bmul@multiplicand
  7223  04DA  3064               	movlw	100
  7224  04DB  00A7               	movwf	___awdiv@divisor
  7225  04DC  3000               	movlw	0
  7226  04DD  00A8               	movwf	___awdiv@divisor+1
  7227  04DE  084C               	movf	scale@scl,w
  7228  04DF  00A9               	movwf	___awdiv@dividend
  7229  04E0  01AA               	clrf	___awdiv@dividend+1
  7230  04E1  1BA9               	btfsc	___awdiv@dividend,7
  7231  04E2  03AA               	decf	___awdiv@dividend+1,f
  7232  04E3  160A  158A  2403  120A  118A  	fcall	___awdiv
  7233  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  7234  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  7235  04EA  0827               	movf	?___awdiv,w
  7236  04EB  3E12               	addlw	18
  7237  04EC  160A  118A  2001  120A  118A  	fcall	___bmul
  7238  04F1  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7239  04F2  0084               	movwf	4
  7240  04F3  160A  158A  2000  120A  118A  	fcall	stringdir
  7241  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  7242  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  7243  04FA  00B7               	movwf	___ftmul@f2
  7244  04FB  160A  158A  2000  120A  118A  	fcall	stringdir
  7245  0500  00B8               	movwf	___ftmul@f2+1
  7246  0501  160A  158A  2000  120A  118A  	fcall	stringdir
  7247  0506  00B9               	movwf	___ftmul@f2+2
  7248  0507  160A  118A  226C  120A  118A  	fcall	___ftmul
  7249  050C  1283               	bcf	3,5	;RP0=0, select bank0
  7250  050D  1303               	bcf	3,6	;RP1=0, select bank0
  7251  050E  0834               	movf	?___ftmul,w
  7252  050F  00C9               	movwf	_scale$918
  7253  0510  0835               	movf	?___ftmul+1,w
  7254  0511  00CA               	movwf	_scale$918+1
  7255  0512  0836               	movf	?___ftmul+2,w
  7256  0513  00CB               	movwf	_scale$918+2
  7257                           
  7258                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7259  0514  3003               	movlw	3
  7260  0515  00C7               	movwf	??_scale
  7261  0516  0847               	movf	??_scale,w
  7262  0517  00B0               	movwf	___bmul@multiplicand
  7263  0518  084C               	movf	scale@scl,w
  7264  0519  00A2               	movwf	___awmod@dividend
  7265  051A  01A3               	clrf	___awmod@dividend+1
  7266  051B  1BA2               	btfsc	___awmod@dividend,7
  7267  051C  03A3               	decf	___awmod@dividend+1,f
  7268  051D  300A               	movlw	10
  7269  051E  00A0               	movwf	___awmod@divisor
  7270  051F  3000               	movlw	0
  7271  0520  00A1               	movwf	___awmod@divisor+1
  7272  0521  160A  158A  2368  120A  118A  	fcall	___awmod
  7273  0526  1283               	bcf	3,5	;RP0=0, select bank0
  7274  0527  1303               	bcf	3,6	;RP1=0, select bank0
  7275  0528  0820               	movf	?___awmod,w
  7276  0529  160A  118A  2001  120A  118A  	fcall	___bmul
  7277  052E  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7278  052F  0084               	movwf	4
  7279  0530  160A  158A  2000  120A  118A  	fcall	stringdir
  7280  0535  1283               	bcf	3,5	;RP0=0, select bank0
  7281  0536  1303               	bcf	3,6	;RP1=0, select bank0
  7282  0537  00B4               	movwf	___ftmul@f1
  7283  0538  160A  158A  2000  120A  118A  	fcall	stringdir
  7284  053D  00B5               	movwf	___ftmul@f1+1
  7285  053E  160A  158A  2000  120A  118A  	fcall	stringdir
  7286  0543  00B6               	movwf	___ftmul@f1+2
  7287  0544  0849               	movf	_scale$918,w
  7288  0545  00B7               	movwf	___ftmul@f2
  7289  0546  084A               	movf	_scale$918+1,w
  7290  0547  00B8               	movwf	___ftmul@f2+1
  7291  0548  084B               	movf	_scale$918+2,w
  7292  0549  00B9               	movwf	___ftmul@f2+2
  7293  054A  160A  118A  226C   	fcall	___ftmul
  7294  054D  1283               	bcf	3,5	;RP0=0, select bank0
  7295  054E  1303               	bcf	3,6	;RP1=0, select bank0
  7296  054F  0834               	movf	?___ftmul,w
  7297  0550  00C4               	movwf	?_scale
  7298  0551  0835               	movf	?___ftmul+1,w
  7299  0552  00C5               	movwf	?_scale+1
  7300  0553  0836               	movf	?___ftmul+2,w
  7301  0554  00C6               	movwf	?_scale+2
  7302  0555  0008               	return
  7303  0556                     l2566:	
  7304                           
  7305                           ;doprnt.c: 438: else if(scl > 10)
  7306  0556  084C               	movf	scale@scl,w
  7307  0557  3A80               	xorlw	128
  7308  0558  3E75               	addlw	-139
  7309  0559  1C03               	skipc
  7310  055A  2DC8               	goto	l2572
  7311                           
  7312                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7313  055B  3003               	movlw	3
  7314  055C  00C7               	movwf	??_scale
  7315  055D  0847               	movf	??_scale,w
  7316  055E  00B0               	movwf	___bmul@multiplicand
  7317  055F  084C               	movf	scale@scl,w
  7318  0560  00A2               	movwf	___awmod@dividend
  7319  0561  01A3               	clrf	___awmod@dividend+1
  7320  0562  1BA2               	btfsc	___awmod@dividend,7
  7321  0563  03A3               	decf	___awmod@dividend+1,f
  7322  0564  300A               	movlw	10
  7323  0565  00A0               	movwf	___awmod@divisor
  7324  0566  3000               	movlw	0
  7325  0567  00A1               	movwf	___awmod@divisor+1
  7326  0568  160A  158A  2368  120A  118A  	fcall	___awmod
  7327  056D  1283               	bcf	3,5	;RP0=0, select bank0
  7328  056E  1303               	bcf	3,6	;RP1=0, select bank0
  7329  056F  0820               	movf	?___awmod,w
  7330  0570  160A  118A  2001  120A  118A  	fcall	___bmul
  7331  0575  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7332  0576  0084               	movwf	4
  7333  0577  160A  158A  2000  120A  118A  	fcall	stringdir
  7334  057C  1283               	bcf	3,5	;RP0=0, select bank0
  7335  057D  1303               	bcf	3,6	;RP1=0, select bank0
  7336  057E  00B4               	movwf	___ftmul@f1
  7337  057F  160A  158A  2000  120A  118A  	fcall	stringdir
  7338  0584  00B5               	movwf	___ftmul@f1+1
  7339  0585  160A  158A  2000  120A  118A  	fcall	stringdir
  7340  058A  00B6               	movwf	___ftmul@f1+2
  7341  058B  3003               	movlw	3
  7342  058C  00C8               	movwf	??_scale+1
  7343  058D  0848               	movf	??_scale+1,w
  7344  058E  00B0               	movwf	___bmul@multiplicand
  7345  058F  300A               	movlw	10
  7346  0590  00A7               	movwf	___awdiv@divisor
  7347  0591  3000               	movlw	0
  7348  0592  00A8               	movwf	___awdiv@divisor+1
  7349  0593  084C               	movf	scale@scl,w
  7350  0594  00A9               	movwf	___awdiv@dividend
  7351  0595  01AA               	clrf	___awdiv@dividend+1
  7352  0596  1BA9               	btfsc	___awdiv@dividend,7
  7353  0597  03AA               	decf	___awdiv@dividend+1,f
  7354  0598  160A  158A  2403  120A  118A  	fcall	___awdiv
  7355  059D  1283               	bcf	3,5	;RP0=0, select bank0
  7356  059E  1303               	bcf	3,6	;RP1=0, select bank0
  7357  059F  0827               	movf	?___awdiv,w
  7358  05A0  3E09               	addlw	9
  7359  05A1  160A  118A  2001  120A  118A  	fcall	___bmul
  7360  05A6  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7361  05A7  0084               	movwf	4
  7362  05A8  160A  158A  2000  120A  118A  	fcall	stringdir
  7363  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  7364  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  7365  05AF  00B7               	movwf	___ftmul@f2
  7366  05B0  160A  158A  2000  120A  118A  	fcall	stringdir
  7367  05B5  00B8               	movwf	___ftmul@f2+1
  7368  05B6  160A  158A  2000  120A  118A  	fcall	stringdir
  7369  05BB  00B9               	movwf	___ftmul@f2+2
  7370  05BC  160A  118A  226C   	fcall	___ftmul
  7371  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  7372  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  7373  05C1  0834               	movf	?___ftmul,w
  7374  05C2  00C4               	movwf	?_scale
  7375  05C3  0835               	movf	?___ftmul+1,w
  7376  05C4  00C5               	movwf	?_scale+1
  7377  05C5  0836               	movf	?___ftmul+2,w
  7378  05C6  00C6               	movwf	?_scale+2
  7379  05C7  0008               	return
  7380  05C8                     l2572:	
  7381                           
  7382                           ;doprnt.c: 440: return _powers_[scl];
  7383  05C8  3003               	movlw	3
  7384  05C9  00C7               	movwf	??_scale
  7385  05CA  0847               	movf	??_scale,w
  7386  05CB  00B0               	movwf	___bmul@multiplicand
  7387  05CC  084C               	movf	scale@scl,w
  7388  05CD  160A  118A  2001  120A  118A  	fcall	___bmul
  7389  05D2  3E50               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7390  05D3  0084               	movwf	4
  7391  05D4  160A  158A  2000  120A  118A  	fcall	stringdir
  7392  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  7393  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  7394  05DB  00C4               	movwf	?_scale
  7395  05DC  160A  158A  2000  120A  118A  	fcall	stringdir
  7396  05E1  00C5               	movwf	?_scale+1
  7397  05E2  160A  158A  2000   	fcall	stringdir
  7398  05E5  00C6               	movwf	?_scale+2
  7399  05E6  0008               	return
  7400  05E7                     __end_of_scale:	
  7401                           
  7402                           	psect	text20
  7403  18DA                     __ptext20:	
  7404 ;; *************** function _isdigit *****************
  7405 ;; Defined at:
  7406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  c               1    wreg     unsigned char 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  c               1    1[BANK0 ] unsigned char 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;		None               void
  7413 ;; Registers used:
  7414 ;;		wreg, status,2, status,0
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7420 ;;      Params:         0       0       0       0       0
  7421 ;;      Locals:         0       2       0       0       0
  7422 ;;      Temps:          0       0       0       0       0
  7423 ;;      Totals:         0       2       0       0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    2
  7427 ;; This function calls:
  7428 ;;		Nothing
  7429 ;; This function is called by:
  7430 ;;		_sprintf
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _isdigit
  7436  18DA                     _isdigit:	
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7440                           ;isdigit@c stored from wreg
  7441  18DA  1283               	bcf	3,5	;RP0=0, select bank0
  7442  18DB  1303               	bcf	3,6	;RP1=0, select bank0
  7443  18DC  00A1               	movwf	isdigit@c
  7444  18DD  01A0               	clrf	_isdigit$676
  7445  18DE  303A               	movlw	58
  7446  18DF  0221               	subwf	isdigit@c,w
  7447  18E0  1803               	skipnc
  7448  18E1  28E8               	goto	l2584
  7449  18E2  3030               	movlw	48
  7450  18E3  0221               	subwf	isdigit@c,w
  7451  18E4  1C03               	skipc
  7452  18E5  28E8               	goto	l2584
  7453  18E6  01A0               	clrf	_isdigit$676
  7454  18E7  0AA0               	incf	_isdigit$676,f
  7455  18E8                     l2584:	
  7456  18E8  0C20               	rrf	_isdigit$676,w
  7457  18E9  0008               	return
  7458  18EA                     __end_of_isdigit:	
  7459                           
  7460                           	psect	text21
  7461  165A                     __ptext21:	
  7462 ;; *************** function _fround *****************
  7463 ;; Defined at:
  7464 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  prec            1    wreg     unsigned char 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  prec            1   51[BANK0 ] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  3   36[BANK0 ] unsigned char 
  7471 ;; Registers used:
  7472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7478 ;;      Params:         0       3       0       0       0
  7479 ;;      Locals:         0       7       0       0       0
  7480 ;;      Temps:          0       6       0       0       0
  7481 ;;      Totals:         0      16       0       0       0
  7482 ;;Total ram usage:       16 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    4
  7485 ;; This function calls:
  7486 ;;		___awdiv
  7487 ;;		___awmod
  7488 ;;		___bmul
  7489 ;;		___ftmul
  7490 ;; This function is called by:
  7491 ;;		_sprintf
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           
  7496                           ;psect for function _fround
  7497  165A                     _fround:	
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7501                           ;fround@prec stored from wreg
  7502  165A  1283               	bcf	3,5	;RP0=0, select bank0
  7503  165B  1303               	bcf	3,6	;RP1=0, select bank0
  7504  165C  00D3               	movwf	fround@prec
  7505                           
  7506                           ;doprnt.c: 413: if(prec>=110)
  7507  165D  306E               	movlw	110
  7508  165E  0253               	subwf	fround@prec,w
  7509  165F  1C03               	skipc
  7510  1660  2F40               	goto	l2524
  7511                           
  7512                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7513  1661  3003               	movlw	3
  7514  1662  00C7               	movwf	??_fround
  7515  1663  0847               	movf	??_fround,w
  7516  1664  00B0               	movwf	___bmul@multiplicand
  7517  1665  300A               	movlw	10
  7518  1666  00A7               	movwf	___awdiv@divisor
  7519  1667  3000               	movlw	0
  7520  1668  00A8               	movwf	___awdiv@divisor+1
  7521  1669  0853               	movf	fround@prec,w
  7522  166A  00C8               	movwf	??_fround+1
  7523  166B  01C9               	clrf	??_fround+2
  7524  166C  0848               	movf	??_fround+1,w
  7525  166D  00A2               	movwf	___awmod@dividend
  7526  166E  0849               	movf	??_fround+2,w
  7527  166F  00A3               	movwf	___awmod@dividend+1
  7528  1670  3064               	movlw	100
  7529  1671  00A0               	movwf	___awmod@divisor
  7530  1672  3000               	movlw	0
  7531  1673  00A1               	movwf	___awmod@divisor+1
  7532  1674  160A  158A  2368  160A  118A  	fcall	___awmod
  7533  1679  1283               	bcf	3,5	;RP0=0, select bank0
  7534  167A  1303               	bcf	3,6	;RP1=0, select bank0
  7535  167B  0821               	movf	?___awmod+1,w
  7536  167C  00AA               	movwf	___awdiv@dividend+1
  7537  167D  0820               	movf	?___awmod,w
  7538  167E  00A9               	movwf	___awdiv@dividend
  7539  167F  160A  158A  2403  160A  118A  	fcall	___awdiv
  7540  1684  1283               	bcf	3,5	;RP0=0, select bank0
  7541  1685  1303               	bcf	3,6	;RP1=0, select bank0
  7542  1686  0827               	movf	?___awdiv,w
  7543  1687  3E09               	addlw	9
  7544  1688  160A  118A  2001  160A  118A  	fcall	___bmul
  7545  168D  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7546  168E  0084               	movwf	4
  7547  168F  160A  158A  2000  160A  118A  	fcall	stringdir
  7548  1694  1283               	bcf	3,5	;RP0=0, select bank0
  7549  1695  1303               	bcf	3,6	;RP1=0, select bank0
  7550  1696  00B4               	movwf	___ftmul@f1
  7551  1697  160A  158A  2000  160A  118A  	fcall	stringdir
  7552  169C  00B5               	movwf	___ftmul@f1+1
  7553  169D  160A  158A  2000  160A  118A  	fcall	stringdir
  7554  16A2  00B6               	movwf	___ftmul@f1+2
  7555  16A3  3003               	movlw	3
  7556  16A4  00CA               	movwf	??_fround+3
  7557  16A5  084A               	movf	??_fround+3,w
  7558  16A6  00B0               	movwf	___bmul@multiplicand
  7559  16A7  3064               	movlw	100
  7560  16A8  00A7               	movwf	___awdiv@divisor
  7561  16A9  3000               	movlw	0
  7562  16AA  00A8               	movwf	___awdiv@divisor+1
  7563  16AB  0853               	movf	fround@prec,w
  7564  16AC  00CB               	movwf	??_fround+4
  7565  16AD  01CC               	clrf	??_fround+5
  7566  16AE  084B               	movf	??_fround+4,w
  7567  16AF  00A9               	movwf	___awdiv@dividend
  7568  16B0  084C               	movf	??_fround+5,w
  7569  16B1  00AA               	movwf	___awdiv@dividend+1
  7570  16B2  160A  158A  2403  160A  118A  	fcall	___awdiv
  7571  16B7  1283               	bcf	3,5	;RP0=0, select bank0
  7572  16B8  1303               	bcf	3,6	;RP1=0, select bank0
  7573  16B9  0827               	movf	?___awdiv,w
  7574  16BA  3E12               	addlw	18
  7575  16BB  160A  118A  2001  160A  118A  	fcall	___bmul
  7576  16C0  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7577  16C1  0084               	movwf	4
  7578  16C2  160A  158A  2000  160A  118A  	fcall	stringdir
  7579  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  7580  16C8  1303               	bcf	3,6	;RP1=0, select bank0
  7581  16C9  00B7               	movwf	___ftmul@f2
  7582  16CA  160A  158A  2000  160A  118A  	fcall	stringdir
  7583  16CF  00B8               	movwf	___ftmul@f2+1
  7584  16D0  160A  158A  2000  160A  118A  	fcall	stringdir
  7585  16D5  00B9               	movwf	___ftmul@f2+2
  7586  16D6  160A  118A  226C  160A  118A  	fcall	___ftmul
  7587  16DB  1283               	bcf	3,5	;RP0=0, select bank0
  7588  16DC  1303               	bcf	3,6	;RP1=0, select bank0
  7589  16DD  0834               	movf	?___ftmul,w
  7590  16DE  00D0               	movwf	_fround$916
  7591  16DF  0835               	movf	?___ftmul+1,w
  7592  16E0  00D1               	movwf	_fround$916+1
  7593  16E1  0836               	movf	?___ftmul+2,w
  7594  16E2  00D2               	movwf	_fround$916+2
  7595                           
  7596                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7597  16E3  3003               	movlw	3
  7598  16E4  00C7               	movwf	??_fround
  7599  16E5  0847               	movf	??_fround,w
  7600  16E6  00B0               	movwf	___bmul@multiplicand
  7601  16E7  0853               	movf	fround@prec,w
  7602  16E8  00C8               	movwf	??_fround+1
  7603  16E9  01C9               	clrf	??_fround+2
  7604  16EA  0848               	movf	??_fround+1,w
  7605  16EB  00A2               	movwf	___awmod@dividend
  7606  16EC  0849               	movf	??_fround+2,w
  7607  16ED  00A3               	movwf	___awmod@dividend+1
  7608  16EE  300A               	movlw	10
  7609  16EF  00A0               	movwf	___awmod@divisor
  7610  16F0  3000               	movlw	0
  7611  16F1  00A1               	movwf	___awmod@divisor+1
  7612  16F2  160A  158A  2368  160A  118A  	fcall	___awmod
  7613  16F7  1283               	bcf	3,5	;RP0=0, select bank0
  7614  16F8  1303               	bcf	3,6	;RP1=0, select bank0
  7615  16F9  0820               	movf	?___awmod,w
  7616  16FA  160A  118A  2001  160A  118A  	fcall	___bmul
  7617  16FF  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7618  1700  0084               	movwf	4
  7619  1701  160A  158A  2000  160A  118A  	fcall	stringdir
  7620  1706  1283               	bcf	3,5	;RP0=0, select bank0
  7621  1707  1303               	bcf	3,6	;RP1=0, select bank0
  7622  1708  00B4               	movwf	___ftmul@f1
  7623  1709  160A  158A  2000  160A  118A  	fcall	stringdir
  7624  170E  00B5               	movwf	___ftmul@f1+1
  7625  170F  160A  158A  2000  160A  118A  	fcall	stringdir
  7626  1714  00B6               	movwf	___ftmul@f1+2
  7627  1715  0850               	movf	_fround$916,w
  7628  1716  00B7               	movwf	___ftmul@f2
  7629  1717  0851               	movf	_fround$916+1,w
  7630  1718  00B8               	movwf	___ftmul@f2+1
  7631  1719  0852               	movf	_fround$916+2,w
  7632  171A  00B9               	movwf	___ftmul@f2+2
  7633  171B  160A  118A  226C  160A  118A  	fcall	___ftmul
  7634  1720  1283               	bcf	3,5	;RP0=0, select bank0
  7635  1721  1303               	bcf	3,6	;RP1=0, select bank0
  7636  1722  0834               	movf	?___ftmul,w
  7637  1723  00CD               	movwf	_fround$917
  7638  1724  0835               	movf	?___ftmul+1,w
  7639  1725  00CE               	movwf	_fround$917+1
  7640  1726  0836               	movf	?___ftmul+2,w
  7641  1727  00CF               	movwf	_fround$917+2
  7642                           
  7643                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7644  1728  3000               	movlw	0
  7645  1729  00B4               	movwf	___ftmul@f1
  7646  172A  3000               	movlw	0
  7647  172B  00B5               	movwf	___ftmul@f1+1
  7648  172C  303F               	movlw	63
  7649  172D  00B6               	movwf	___ftmul@f1+2
  7650  172E  084D               	movf	_fround$917,w
  7651  172F  00B7               	movwf	___ftmul@f2
  7652  1730  084E               	movf	_fround$917+1,w
  7653  1731  00B8               	movwf	___ftmul@f2+1
  7654  1732  084F               	movf	_fround$917+2,w
  7655  1733  00B9               	movwf	___ftmul@f2+2
  7656  1734  160A  118A  226C   	fcall	___ftmul
  7657  1737  1283               	bcf	3,5	;RP0=0, select bank0
  7658  1738  1303               	bcf	3,6	;RP1=0, select bank0
  7659  1739  0834               	movf	?___ftmul,w
  7660  173A  00C4               	movwf	?_fround
  7661  173B  0835               	movf	?___ftmul+1,w
  7662  173C  00C5               	movwf	?_fround+1
  7663  173D  0836               	movf	?___ftmul+2,w
  7664  173E  00C6               	movwf	?_fround+2
  7665  173F  0008               	return
  7666  1740                     l2524:	
  7667                           
  7668                           ;doprnt.c: 415: else if(prec > 10)
  7669  1740  300B               	movlw	11
  7670  1741  0253               	subwf	fround@prec,w
  7671  1742  1C03               	skipc
  7672  1743  2FCE               	goto	l2532
  7673                           
  7674                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7675  1744  3003               	movlw	3
  7676  1745  00C7               	movwf	??_fround
  7677  1746  0847               	movf	??_fround,w
  7678  1747  00B0               	movwf	___bmul@multiplicand
  7679  1748  0853               	movf	fround@prec,w
  7680  1749  00C8               	movwf	??_fround+1
  7681  174A  01C9               	clrf	??_fround+2
  7682  174B  0848               	movf	??_fround+1,w
  7683  174C  00A2               	movwf	___awmod@dividend
  7684  174D  0849               	movf	??_fround+2,w
  7685  174E  00A3               	movwf	___awmod@dividend+1
  7686  174F  300A               	movlw	10
  7687  1750  00A0               	movwf	___awmod@divisor
  7688  1751  3000               	movlw	0
  7689  1752  00A1               	movwf	___awmod@divisor+1
  7690  1753  160A  158A  2368  160A  118A  	fcall	___awmod
  7691  1758  1283               	bcf	3,5	;RP0=0, select bank0
  7692  1759  1303               	bcf	3,6	;RP1=0, select bank0
  7693  175A  0820               	movf	?___awmod,w
  7694  175B  160A  118A  2001  160A  118A  	fcall	___bmul
  7695  1760  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7696  1761  0084               	movwf	4
  7697  1762  160A  158A  2000  160A  118A  	fcall	stringdir
  7698  1767  1283               	bcf	3,5	;RP0=0, select bank0
  7699  1768  1303               	bcf	3,6	;RP1=0, select bank0
  7700  1769  00B4               	movwf	___ftmul@f1
  7701  176A  160A  158A  2000  160A  118A  	fcall	stringdir
  7702  176F  00B5               	movwf	___ftmul@f1+1
  7703  1770  160A  158A  2000  160A  118A  	fcall	stringdir
  7704  1775  00B6               	movwf	___ftmul@f1+2
  7705  1776  3003               	movlw	3
  7706  1777  00CA               	movwf	??_fround+3
  7707  1778  084A               	movf	??_fround+3,w
  7708  1779  00B0               	movwf	___bmul@multiplicand
  7709  177A  300A               	movlw	10
  7710  177B  00A7               	movwf	___awdiv@divisor
  7711  177C  3000               	movlw	0
  7712  177D  00A8               	movwf	___awdiv@divisor+1
  7713  177E  0853               	movf	fround@prec,w
  7714  177F  00CB               	movwf	??_fround+4
  7715  1780  01CC               	clrf	??_fround+5
  7716  1781  084B               	movf	??_fround+4,w
  7717  1782  00A9               	movwf	___awdiv@dividend
  7718  1783  084C               	movf	??_fround+5,w
  7719  1784  00AA               	movwf	___awdiv@dividend+1
  7720  1785  160A  158A  2403  160A  118A  	fcall	___awdiv
  7721  178A  1283               	bcf	3,5	;RP0=0, select bank0
  7722  178B  1303               	bcf	3,6	;RP1=0, select bank0
  7723  178C  0827               	movf	?___awdiv,w
  7724  178D  3E09               	addlw	9
  7725  178E  160A  118A  2001  160A  118A  	fcall	___bmul
  7726  1793  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7727  1794  0084               	movwf	4
  7728  1795  160A  158A  2000  160A  118A  	fcall	stringdir
  7729  179A  1283               	bcf	3,5	;RP0=0, select bank0
  7730  179B  1303               	bcf	3,6	;RP1=0, select bank0
  7731  179C  00B7               	movwf	___ftmul@f2
  7732  179D  160A  158A  2000  160A  118A  	fcall	stringdir
  7733  17A2  00B8               	movwf	___ftmul@f2+1
  7734  17A3  160A  158A  2000  160A  118A  	fcall	stringdir
  7735  17A8  00B9               	movwf	___ftmul@f2+2
  7736  17A9  160A  118A  226C  160A  118A  	fcall	___ftmul
  7737  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  7738  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  7739  17B0  0834               	movf	?___ftmul,w
  7740  17B1  00D0               	movwf	_fround$916
  7741  17B2  0835               	movf	?___ftmul+1,w
  7742  17B3  00D1               	movwf	_fround$916+1
  7743  17B4  0836               	movf	?___ftmul+2,w
  7744  17B5  00D2               	movwf	_fround$916+2
  7745                           
  7746                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7747  17B6  3000               	movlw	0
  7748  17B7  00B4               	movwf	___ftmul@f1
  7749  17B8  3000               	movlw	0
  7750  17B9  00B5               	movwf	___ftmul@f1+1
  7751  17BA  303F               	movlw	63
  7752  17BB  00B6               	movwf	___ftmul@f1+2
  7753  17BC  0850               	movf	_fround$916,w
  7754  17BD  00B7               	movwf	___ftmul@f2
  7755  17BE  0851               	movf	_fround$916+1,w
  7756  17BF  00B8               	movwf	___ftmul@f2+1
  7757  17C0  0852               	movf	_fround$916+2,w
  7758  17C1  00B9               	movwf	___ftmul@f2+2
  7759  17C2  160A  118A  226C   	fcall	___ftmul
  7760  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  7761  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  7762  17C7  0834               	movf	?___ftmul,w
  7763  17C8  00C4               	movwf	?_fround
  7764  17C9  0835               	movf	?___ftmul+1,w
  7765  17CA  00C5               	movwf	?_fround+1
  7766  17CB  0836               	movf	?___ftmul+2,w
  7767  17CC  00C6               	movwf	?_fround+2
  7768  17CD  0008               	return
  7769  17CE                     l2532:	
  7770                           
  7771                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7772  17CE  3000               	movlw	0
  7773  17CF  00B4               	movwf	___ftmul@f1
  7774  17D0  3000               	movlw	0
  7775  17D1  00B5               	movwf	___ftmul@f1+1
  7776  17D2  303F               	movlw	63
  7777  17D3  00B6               	movwf	___ftmul@f1+2
  7778  17D4  3003               	movlw	3
  7779  17D5  00C7               	movwf	??_fround
  7780  17D6  0847               	movf	??_fround,w
  7781  17D7  00B0               	movwf	___bmul@multiplicand
  7782  17D8  0853               	movf	fround@prec,w
  7783  17D9  160A  118A  2001  160A  118A  	fcall	___bmul
  7784  17DE  3E29               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7785  17DF  0084               	movwf	4
  7786  17E0  160A  158A  2000  160A  118A  	fcall	stringdir
  7787  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  7788  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  7789  17E7  00B7               	movwf	___ftmul@f2
  7790  17E8  160A  158A  2000  160A  118A  	fcall	stringdir
  7791  17ED  00B8               	movwf	___ftmul@f2+1
  7792  17EE  160A  158A  2000  160A  118A  	fcall	stringdir
  7793  17F3  00B9               	movwf	___ftmul@f2+2
  7794  17F4  160A  118A  226C   	fcall	___ftmul
  7795  17F7  1283               	bcf	3,5	;RP0=0, select bank0
  7796  17F8  1303               	bcf	3,6	;RP1=0, select bank0
  7797  17F9  0834               	movf	?___ftmul,w
  7798  17FA  00C4               	movwf	?_fround
  7799  17FB  0835               	movf	?___ftmul+1,w
  7800  17FC  00C5               	movwf	?_fround+1
  7801  17FD  0836               	movf	?___ftmul+2,w
  7802  17FE  00C6               	movwf	?_fround+2
  7803  17FF  0008               	return
  7804  1800                     __end_of_fround:	
  7805                           
  7806                           	psect	text22
  7807  126C                     __ptext22:	
  7808 ;; *************** function ___ftmul *****************
  7809 ;; Defined at:
  7810 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;  f1              3   20[BANK0 ] float 
  7813 ;;  f2              3   23[BANK0 ] float 
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
  7816 ;;  sign            1   35[BANK0 ] unsigned char 
  7817 ;;  cntr            1   34[BANK0 ] unsigned char 
  7818 ;;  exp             1   30[BANK0 ] unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  3   20[BANK0 ] float 
  7821 ;; Registers used:
  7822 ;;		wreg, status,2, status,0, pclath, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7828 ;;      Params:         0       6       0       0       0
  7829 ;;      Locals:         0       6       0       0       0
  7830 ;;      Temps:          0       4       0       0       0
  7831 ;;      Totals:         0      16       0       0       0
  7832 ;;Total ram usage:       16 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:    3
  7835 ;; This function calls:
  7836 ;;		___ftpack
  7837 ;; This function is called by:
  7838 ;;		_stopWatch
  7839 ;;		_sampleBatteryCells
  7840 ;;		_sampleReference
  7841 ;;		_sampleVoltage
  7842 ;;		_sampleCurrent
  7843 ;;		_fround
  7844 ;;		_scale
  7845 ;;		_sprintf
  7846 ;;		_currentTime
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function ___ftmul
  7852  126C                     ___ftmul:	
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7856  126C  1283               	bcf	3,5	;RP0=0, select bank0
  7857  126D  1303               	bcf	3,6	;RP1=0, select bank0
  7858  126E  0834               	movf	___ftmul@f1,w
  7859  126F  00BA               	movwf	??___ftmul
  7860  1270  0835               	movf	___ftmul@f1+1,w
  7861  1271  00BB               	movwf	??___ftmul+1
  7862  1272  0836               	movf	___ftmul@f1+2,w
  7863  1273  00BC               	movwf	??___ftmul+2
  7864  1274  1003               	clrc
  7865  1275  0D3B               	rlf	??___ftmul+1,w
  7866  1276  0D3C               	rlf	??___ftmul+2,w
  7867  1277  00BD               	movwf	??___ftmul+3
  7868  1278  083D               	movf	??___ftmul+3,w
  7869  1279  00BE               	movwf	___ftmul@exp
  7870  127A  083E               	movf	___ftmul@exp,w
  7871  127B  1D03               	btfss	3,2
  7872  127C  2A84               	goto	l2428
  7873  127D  3000               	movlw	0
  7874  127E  00B4               	movwf	?___ftmul
  7875  127F  3000               	movlw	0
  7876  1280  00B5               	movwf	?___ftmul+1
  7877  1281  3000               	movlw	0
  7878  1282  00B6               	movwf	?___ftmul+2
  7879  1283  0008               	return
  7880  1284                     l2428:	
  7881  1284  0837               	movf	___ftmul@f2,w
  7882  1285  00BA               	movwf	??___ftmul
  7883  1286  0838               	movf	___ftmul@f2+1,w
  7884  1287  00BB               	movwf	??___ftmul+1
  7885  1288  0839               	movf	___ftmul@f2+2,w
  7886  1289  00BC               	movwf	??___ftmul+2
  7887  128A  1003               	clrc
  7888  128B  0D3B               	rlf	??___ftmul+1,w
  7889  128C  0D3C               	rlf	??___ftmul+2,w
  7890  128D  00BD               	movwf	??___ftmul+3
  7891  128E  083D               	movf	??___ftmul+3,w
  7892  128F  00C3               	movwf	___ftmul@sign
  7893  1290  0843               	movf	___ftmul@sign,w
  7894  1291  1D03               	btfss	3,2
  7895  1292  2A9A               	goto	l2434
  7896  1293  3000               	movlw	0
  7897  1294  00B4               	movwf	?___ftmul
  7898  1295  3000               	movlw	0
  7899  1296  00B5               	movwf	?___ftmul+1
  7900  1297  3000               	movlw	0
  7901  1298  00B6               	movwf	?___ftmul+2
  7902  1299  0008               	return
  7903  129A                     l2434:	
  7904  129A  0843               	movf	___ftmul@sign,w
  7905  129B  3E7B               	addlw	123
  7906  129C  00BA               	movwf	??___ftmul
  7907  129D  083A               	movf	??___ftmul,w
  7908  129E  07BE               	addwf	___ftmul@exp,f
  7909  129F  0834               	movf	___ftmul@f1,w
  7910  12A0  00BA               	movwf	??___ftmul
  7911  12A1  0835               	movf	___ftmul@f1+1,w
  7912  12A2  00BB               	movwf	??___ftmul+1
  7913  12A3  0836               	movf	___ftmul@f1+2,w
  7914  12A4  00BC               	movwf	??___ftmul+2
  7915  12A5  3010               	movlw	16
  7916  12A6                     u2955:	
  7917  12A6  1003               	clrc
  7918  12A7  0CBC               	rrf	??___ftmul+2,f
  7919  12A8  0CBB               	rrf	??___ftmul+1,f
  7920  12A9  0CBA               	rrf	??___ftmul,f
  7921  12AA  3EFF               	addlw	-1
  7922  12AB  1D03               	skipz
  7923  12AC  2AA6               	goto	u2955
  7924  12AD  083A               	movf	??___ftmul,w
  7925  12AE  00BD               	movwf	??___ftmul+3
  7926  12AF  083D               	movf	??___ftmul+3,w
  7927  12B0  00C3               	movwf	___ftmul@sign
  7928  12B1  0837               	movf	___ftmul@f2,w
  7929  12B2  00BA               	movwf	??___ftmul
  7930  12B3  0838               	movf	___ftmul@f2+1,w
  7931  12B4  00BB               	movwf	??___ftmul+1
  7932  12B5  0839               	movf	___ftmul@f2+2,w
  7933  12B6  00BC               	movwf	??___ftmul+2
  7934  12B7  3010               	movlw	16
  7935  12B8                     u2965:	
  7936  12B8  1003               	clrc
  7937  12B9  0CBC               	rrf	??___ftmul+2,f
  7938  12BA  0CBB               	rrf	??___ftmul+1,f
  7939  12BB  0CBA               	rrf	??___ftmul,f
  7940  12BC  3EFF               	addlw	-1
  7941  12BD  1D03               	skipz
  7942  12BE  2AB8               	goto	u2965
  7943  12BF  083A               	movf	??___ftmul,w
  7944  12C0  00BD               	movwf	??___ftmul+3
  7945  12C1  083D               	movf	??___ftmul+3,w
  7946  12C2  06C3               	xorwf	___ftmul@sign,f
  7947  12C3  3080               	movlw	128
  7948  12C4  00BA               	movwf	??___ftmul
  7949  12C5  083A               	movf	??___ftmul,w
  7950  12C6  05C3               	andwf	___ftmul@sign,f
  7951  12C7  17B5               	bsf	___ftmul@f1+1,7
  7952  12C8  17B8               	bsf	___ftmul@f2+1,7
  7953  12C9  30FF               	movlw	255
  7954  12CA  05B7               	andwf	___ftmul@f2,f
  7955  12CB  30FF               	movlw	255
  7956  12CC  05B8               	andwf	___ftmul@f2+1,f
  7957  12CD  3000               	movlw	0
  7958  12CE  05B9               	andwf	___ftmul@f2+2,f
  7959  12CF  3000               	movlw	0
  7960  12D0  00BF               	movwf	___ftmul@f3_as_product
  7961  12D1  3000               	movlw	0
  7962  12D2  00C0               	movwf	___ftmul@f3_as_product+1
  7963  12D3  3000               	movlw	0
  7964  12D4  00C1               	movwf	___ftmul@f3_as_product+2
  7965  12D5  3007               	movlw	7
  7966  12D6  00BA               	movwf	??___ftmul
  7967  12D7  083A               	movf	??___ftmul,w
  7968  12D8  00C2               	movwf	___ftmul@cntr
  7969  12D9                     l2446:	
  7970  12D9  1C34               	btfss	___ftmul@f1,0
  7971  12DA  2AE9               	goto	l2450
  7972  12DB  0837               	movf	___ftmul@f2,w
  7973  12DC  07BF               	addwf	___ftmul@f3_as_product,f
  7974  12DD  0838               	movf	___ftmul@f2+1,w
  7975  12DE  1103               	clrz
  7976  12DF  1803               	skipnc
  7977  12E0  0A38               	incf	___ftmul@f2+1,w
  7978  12E1  1D03               	btfss	3,2
  7979  12E2  07C0               	addwf	___ftmul@f3_as_product+1,f
  7980  12E3  0839               	movf	___ftmul@f2+2,w
  7981  12E4  1103               	clrz
  7982  12E5  1803               	skipnc
  7983  12E6  0A39               	incf	___ftmul@f2+2,w
  7984  12E7  1D03               	btfss	3,2
  7985  12E8  07C1               	addwf	___ftmul@f3_as_product+2,f
  7986  12E9                     l2450:	
  7987  12E9  3001               	movlw	1
  7988  12EA                     u2995:	
  7989  12EA  1003               	clrc
  7990  12EB  0CB6               	rrf	___ftmul@f1+2,f
  7991  12EC  0CB5               	rrf	___ftmul@f1+1,f
  7992  12ED  0CB4               	rrf	___ftmul@f1,f
  7993  12EE  3EFF               	addlw	-1
  7994  12EF  1D03               	skipz
  7995  12F0  2AEA               	goto	u2995
  7996  12F1  3001               	movlw	1
  7997  12F2                     u3005:	
  7998  12F2  1003               	clrc
  7999  12F3  0DB7               	rlf	___ftmul@f2,f
  8000  12F4  0DB8               	rlf	___ftmul@f2+1,f
  8001  12F5  0DB9               	rlf	___ftmul@f2+2,f
  8002  12F6  3EFF               	addlw	-1
  8003  12F7  1D03               	skipz
  8004  12F8  2AF2               	goto	u3005
  8005  12F9  3001               	movlw	1
  8006  12FA  02C2               	subwf	___ftmul@cntr,f
  8007  12FB  1D03               	btfss	3,2
  8008  12FC  2AD9               	goto	l2446
  8009  12FD  3009               	movlw	9
  8010  12FE  00BA               	movwf	??___ftmul
  8011  12FF  083A               	movf	??___ftmul,w
  8012  1300  00C2               	movwf	___ftmul@cntr
  8013  1301                     l2458:	
  8014  1301  1C34               	btfss	___ftmul@f1,0
  8015  1302  2B11               	goto	l2462
  8016  1303  0837               	movf	___ftmul@f2,w
  8017  1304  07BF               	addwf	___ftmul@f3_as_product,f
  8018  1305  0838               	movf	___ftmul@f2+1,w
  8019  1306  1103               	clrz
  8020  1307  1803               	skipnc
  8021  1308  0A38               	incf	___ftmul@f2+1,w
  8022  1309  1D03               	btfss	3,2
  8023  130A  07C0               	addwf	___ftmul@f3_as_product+1,f
  8024  130B  0839               	movf	___ftmul@f2+2,w
  8025  130C  1103               	clrz
  8026  130D  1803               	skipnc
  8027  130E  0A39               	incf	___ftmul@f2+2,w
  8028  130F  1D03               	btfss	3,2
  8029  1310  07C1               	addwf	___ftmul@f3_as_product+2,f
  8030  1311                     l2462:	
  8031  1311  3001               	movlw	1
  8032  1312                     u3045:	
  8033  1312  1003               	clrc
  8034  1313  0CB6               	rrf	___ftmul@f1+2,f
  8035  1314  0CB5               	rrf	___ftmul@f1+1,f
  8036  1315  0CB4               	rrf	___ftmul@f1,f
  8037  1316  3EFF               	addlw	-1
  8038  1317  1D03               	skipz
  8039  1318  2B12               	goto	u3045
  8040  1319  3001               	movlw	1
  8041  131A                     u3055:	
  8042  131A  1003               	clrc
  8043  131B  0CC1               	rrf	___ftmul@f3_as_product+2,f
  8044  131C  0CC0               	rrf	___ftmul@f3_as_product+1,f
  8045  131D  0CBF               	rrf	___ftmul@f3_as_product,f
  8046  131E  3EFF               	addlw	-1
  8047  131F  1D03               	skipz
  8048  1320  2B1A               	goto	u3055
  8049  1321  3001               	movlw	1
  8050  1322  02C2               	subwf	___ftmul@cntr,f
  8051  1323  1D03               	btfss	3,2
  8052  1324  2B01               	goto	l2458
  8053  1325  083F               	movf	___ftmul@f3_as_product,w
  8054  1326  00A0               	movwf	___ftpack@arg
  8055  1327  0840               	movf	___ftmul@f3_as_product+1,w
  8056  1328  00A1               	movwf	___ftpack@arg+1
  8057  1329  0841               	movf	___ftmul@f3_as_product+2,w
  8058  132A  00A2               	movwf	___ftpack@arg+2
  8059  132B  083E               	movf	___ftmul@exp,w
  8060  132C  00BA               	movwf	??___ftmul
  8061  132D  083A               	movf	??___ftmul,w
  8062  132E  00A3               	movwf	___ftpack@exp
  8063  132F  0843               	movf	___ftmul@sign,w
  8064  1330  00BB               	movwf	??___ftmul+1
  8065  1331  083B               	movf	??___ftmul+1,w
  8066  1332  00A4               	movwf	___ftpack@sign
  8067  1333  160A  158A  2519   	fcall	___ftpack
  8068  1336  1283               	bcf	3,5	;RP0=0, select bank0
  8069  1337  1303               	bcf	3,6	;RP1=0, select bank0
  8070  1338  0820               	movf	?___ftpack,w
  8071  1339  00B4               	movwf	?___ftmul
  8072  133A  0821               	movf	?___ftpack+1,w
  8073  133B  00B5               	movwf	?___ftmul+1
  8074  133C  0822               	movf	?___ftpack+2,w
  8075  133D  00B6               	movwf	?___ftmul+2
  8076  133E  0008               	return
  8077  133F                     __end_of___ftmul:	
  8078                           
  8079                           	psect	text23
  8080  1001                     __ptext23:	
  8081 ;; *************** function ___bmul *****************
  8082 ;; Defined at:
  8083 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  multiplier      1    wreg     unsigned char 
  8086 ;;  multiplicand    1   16[BANK0 ] unsigned char 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  multiplier      1   19[BANK0 ] unsigned char 
  8089 ;;  product         1   18[BANK0 ] unsigned char 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      unsigned char 
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8099 ;;      Params:         0       1       0       0       0
  8100 ;;      Locals:         0       2       0       0       0
  8101 ;;      Temps:          0       1       0       0       0
  8102 ;;      Totals:         0       4       0       0       0
  8103 ;;Total ram usage:        4 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    2
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		_fround
  8110 ;;		_scale
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function ___bmul
  8116  1001                     ___bmul:	
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8120                           ;___bmul@multiplier stored from wreg
  8121  1001  1283               	bcf	3,5	;RP0=0, select bank0
  8122  1002  1303               	bcf	3,6	;RP1=0, select bank0
  8123  1003  00B3               	movwf	___bmul@multiplier
  8124  1004  01B2               	clrf	___bmul@product
  8125  1005                     l2258:	
  8126  1005  1C33               	btfss	___bmul@multiplier,0
  8127  1006  280B               	goto	l2262
  8128  1007  0830               	movf	___bmul@multiplicand,w
  8129  1008  00B1               	movwf	??___bmul
  8130  1009  0831               	movf	??___bmul,w
  8131  100A  07B2               	addwf	___bmul@product,f
  8132  100B                     l2262:	
  8133  100B  1003               	clrc
  8134  100C  0DB0               	rlf	___bmul@multiplicand,f
  8135  100D  1003               	clrc
  8136  100E  0CB3               	rrf	___bmul@multiplier,f
  8137  100F  0833               	movf	___bmul@multiplier,w
  8138  1010  1D03               	btfss	3,2
  8139  1011  2805               	goto	l2258
  8140  1012  0832               	movf	___bmul@product,w
  8141  1013  0008               	return
  8142  1014                     __end_of___bmul:	
  8143                           
  8144                           	psect	text24
  8145  1B68                     __ptext24:	
  8146 ;; *************** function ___awmod *****************
  8147 ;; Defined at:
  8148 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  divisor         2    0[BANK0 ] int 
  8151 ;;  dividend        2    2[BANK0 ] int 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  sign            1    6[BANK0 ] unsigned char 
  8154 ;;  counter         1    5[BANK0 ] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  2    0[BANK0 ] int 
  8157 ;; Registers used:
  8158 ;;		wreg, status,2, status,0
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8164 ;;      Params:         0       4       0       0       0
  8165 ;;      Locals:         0       2       0       0       0
  8166 ;;      Temps:          0       1       0       0       0
  8167 ;;      Totals:         0       7       0       0       0
  8168 ;;Total ram usage:        7 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    2
  8171 ;; This function calls:
  8172 ;;		Nothing
  8173 ;; This function is called by:
  8174 ;;		_fround
  8175 ;;		_scale
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function ___awmod
  8181  1B68                     ___awmod:	
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8185  1B68  1283               	bcf	3,5	;RP0=0, select bank0
  8186  1B69  1303               	bcf	3,6	;RP1=0, select bank0
  8187  1B6A  01A6               	clrf	___awmod@sign
  8188  1B6B  1FA3               	btfss	___awmod@dividend+1,7
  8189  1B6C  2B74               	goto	l2322
  8190  1B6D  09A2               	comf	___awmod@dividend,f
  8191  1B6E  09A3               	comf	___awmod@dividend+1,f
  8192  1B6F  0AA2               	incf	___awmod@dividend,f
  8193  1B70  1903               	skipnz
  8194  1B71  0AA3               	incf	___awmod@dividend+1,f
  8195  1B72  01A6               	clrf	___awmod@sign
  8196  1B73  0AA6               	incf	___awmod@sign,f
  8197  1B74                     l2322:	
  8198  1B74  1FA1               	btfss	___awmod@divisor+1,7
  8199  1B75  2B7B               	goto	l2326
  8200  1B76  09A0               	comf	___awmod@divisor,f
  8201  1B77  09A1               	comf	___awmod@divisor+1,f
  8202  1B78  0AA0               	incf	___awmod@divisor,f
  8203  1B79  1903               	skipnz
  8204  1B7A  0AA1               	incf	___awmod@divisor+1,f
  8205  1B7B                     l2326:	
  8206  1B7B  0820               	movf	___awmod@divisor,w
  8207  1B7C  0421               	iorwf	___awmod@divisor+1,w
  8208  1B7D  1903               	btfsc	3,2
  8209  1B7E  2BA8               	goto	l2344
  8210  1B7F  01A5               	clrf	___awmod@counter
  8211  1B80  0AA5               	incf	___awmod@counter,f
  8212  1B81                     l2334:	
  8213  1B81  1BA1               	btfsc	___awmod@divisor+1,7
  8214  1B82  2B8F               	goto	l2336
  8215  1B83  3001               	movlw	1
  8216  1B84                     u2635:	
  8217  1B84  1003               	clrc
  8218  1B85  0DA0               	rlf	___awmod@divisor,f
  8219  1B86  0DA1               	rlf	___awmod@divisor+1,f
  8220  1B87  3EFF               	addlw	-1
  8221  1B88  1D03               	skipz
  8222  1B89  2B84               	goto	u2635
  8223  1B8A  3001               	movlw	1
  8224  1B8B  00A4               	movwf	??___awmod
  8225  1B8C  0824               	movf	??___awmod,w
  8226  1B8D  07A5               	addwf	___awmod@counter,f
  8227  1B8E  2B81               	goto	l2334
  8228  1B8F                     l2336:	
  8229  1B8F  0821               	movf	___awmod@divisor+1,w
  8230  1B90  0223               	subwf	___awmod@dividend+1,w
  8231  1B91  1D03               	skipz
  8232  1B92  2B95               	goto	u2655
  8233  1B93  0820               	movf	___awmod@divisor,w
  8234  1B94  0222               	subwf	___awmod@dividend,w
  8235  1B95                     u2655:	
  8236  1B95  1C03               	skipc
  8237  1B96  2B9D               	goto	l2340
  8238  1B97  0820               	movf	___awmod@divisor,w
  8239  1B98  02A2               	subwf	___awmod@dividend,f
  8240  1B99  0821               	movf	___awmod@divisor+1,w
  8241  1B9A  1C03               	skipc
  8242  1B9B  03A3               	decf	___awmod@dividend+1,f
  8243  1B9C  02A3               	subwf	___awmod@dividend+1,f
  8244  1B9D                     l2340:	
  8245  1B9D  3001               	movlw	1
  8246  1B9E                     u2665:	
  8247  1B9E  1003               	clrc
  8248  1B9F  0CA1               	rrf	___awmod@divisor+1,f
  8249  1BA0  0CA0               	rrf	___awmod@divisor,f
  8250  1BA1  3EFF               	addlw	-1
  8251  1BA2  1D03               	skipz
  8252  1BA3  2B9E               	goto	u2665
  8253  1BA4  3001               	movlw	1
  8254  1BA5  02A5               	subwf	___awmod@counter,f
  8255  1BA6  1D03               	btfss	3,2
  8256  1BA7  2B8F               	goto	l2336
  8257  1BA8                     l2344:	
  8258  1BA8  0826               	movf	___awmod@sign,w
  8259  1BA9  1903               	btfsc	3,2
  8260  1BAA  2BB0               	goto	l2348
  8261  1BAB  09A2               	comf	___awmod@dividend,f
  8262  1BAC  09A3               	comf	___awmod@dividend+1,f
  8263  1BAD  0AA2               	incf	___awmod@dividend,f
  8264  1BAE  1903               	skipnz
  8265  1BAF  0AA3               	incf	___awmod@dividend+1,f
  8266  1BB0                     l2348:	
  8267  1BB0  0823               	movf	___awmod@dividend+1,w
  8268  1BB1  00A1               	movwf	?___awmod+1
  8269  1BB2  0822               	movf	___awmod@dividend,w
  8270  1BB3  00A0               	movwf	?___awmod
  8271  1BB4  0008               	return
  8272  1BB5                     __end_of___awmod:	
  8273                           
  8274                           	psect	text25
  8275  1C03                     __ptext25:	
  8276 ;; *************** function ___awdiv *****************
  8277 ;; Defined at:
  8278 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  divisor         2    7[BANK0 ] int 
  8281 ;;  dividend        2    9[BANK0 ] int 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  quotient        2   14[BANK0 ] int 
  8284 ;;  sign            1   13[BANK0 ] unsigned char 
  8285 ;;  counter         1   12[BANK0 ] unsigned char 
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  2    7[BANK0 ] int 
  8288 ;; Registers used:
  8289 ;;		wreg, status,2, status,0
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8295 ;;      Params:         0       4       0       0       0
  8296 ;;      Locals:         0       4       0       0       0
  8297 ;;      Temps:          0       1       0       0       0
  8298 ;;      Totals:         0       9       0       0       0
  8299 ;;Total ram usage:        9 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    2
  8302 ;; This function calls:
  8303 ;;		Nothing
  8304 ;; This function is called by:
  8305 ;;		_fround
  8306 ;;		_scale
  8307 ;;		_sprintf
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function ___awdiv
  8313  1C03                     ___awdiv:	
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8317  1C03  1283               	bcf	3,5	;RP0=0, select bank0
  8318  1C04  1303               	bcf	3,6	;RP1=0, select bank0
  8319  1C05  01AD               	clrf	___awdiv@sign
  8320  1C06  1FA8               	btfss	___awdiv@divisor+1,7
  8321  1C07  2C0F               	goto	l2278
  8322  1C08  09A7               	comf	___awdiv@divisor,f
  8323  1C09  09A8               	comf	___awdiv@divisor+1,f
  8324  1C0A  0AA7               	incf	___awdiv@divisor,f
  8325  1C0B  1903               	skipnz
  8326  1C0C  0AA8               	incf	___awdiv@divisor+1,f
  8327  1C0D  01AD               	clrf	___awdiv@sign
  8328  1C0E  0AAD               	incf	___awdiv@sign,f
  8329  1C0F                     l2278:	
  8330  1C0F  1FAA               	btfss	___awdiv@dividend+1,7
  8331  1C10  2C1A               	goto	l2284
  8332  1C11  09A9               	comf	___awdiv@dividend,f
  8333  1C12  09AA               	comf	___awdiv@dividend+1,f
  8334  1C13  0AA9               	incf	___awdiv@dividend,f
  8335  1C14  1903               	skipnz
  8336  1C15  0AAA               	incf	___awdiv@dividend+1,f
  8337  1C16  3001               	movlw	1
  8338  1C17  00AB               	movwf	??___awdiv
  8339  1C18  082B               	movf	??___awdiv,w
  8340  1C19  06AD               	xorwf	___awdiv@sign,f
  8341  1C1A                     l2284:	
  8342  1C1A  01AE               	clrf	___awdiv@quotient
  8343  1C1B  01AF               	clrf	___awdiv@quotient+1
  8344  1C1C  0827               	movf	___awdiv@divisor,w
  8345  1C1D  0428               	iorwf	___awdiv@divisor+1,w
  8346  1C1E  1903               	btfsc	3,2
  8347  1C1F  2C51               	goto	l2306
  8348  1C20  01AC               	clrf	___awdiv@counter
  8349  1C21  0AAC               	incf	___awdiv@counter,f
  8350  1C22                     l2294:	
  8351  1C22  1BA8               	btfsc	___awdiv@divisor+1,7
  8352  1C23  2C30               	goto	l2296
  8353  1C24  3001               	movlw	1
  8354  1C25                     u2535:	
  8355  1C25  1003               	clrc
  8356  1C26  0DA7               	rlf	___awdiv@divisor,f
  8357  1C27  0DA8               	rlf	___awdiv@divisor+1,f
  8358  1C28  3EFF               	addlw	-1
  8359  1C29  1D03               	skipz
  8360  1C2A  2C25               	goto	u2535
  8361  1C2B  3001               	movlw	1
  8362  1C2C  00AB               	movwf	??___awdiv
  8363  1C2D  082B               	movf	??___awdiv,w
  8364  1C2E  07AC               	addwf	___awdiv@counter,f
  8365  1C2F  2C22               	goto	l2294
  8366  1C30                     l2296:	
  8367  1C30  3001               	movlw	1
  8368  1C31                     u2555:	
  8369  1C31  1003               	clrc
  8370  1C32  0DAE               	rlf	___awdiv@quotient,f
  8371  1C33  0DAF               	rlf	___awdiv@quotient+1,f
  8372  1C34  3EFF               	addlw	-1
  8373  1C35  1D03               	skipz
  8374  1C36  2C31               	goto	u2555
  8375  1C37  0828               	movf	___awdiv@divisor+1,w
  8376  1C38  022A               	subwf	___awdiv@dividend+1,w
  8377  1C39  1D03               	skipz
  8378  1C3A  2C3D               	goto	u2565
  8379  1C3B  0827               	movf	___awdiv@divisor,w
  8380  1C3C  0229               	subwf	___awdiv@dividend,w
  8381  1C3D                     u2565:	
  8382  1C3D  1C03               	skipc
  8383  1C3E  2C46               	goto	l2302
  8384  1C3F  0827               	movf	___awdiv@divisor,w
  8385  1C40  02A9               	subwf	___awdiv@dividend,f
  8386  1C41  0828               	movf	___awdiv@divisor+1,w
  8387  1C42  1C03               	skipc
  8388  1C43  03AA               	decf	___awdiv@dividend+1,f
  8389  1C44  02AA               	subwf	___awdiv@dividend+1,f
  8390  1C45  142E               	bsf	___awdiv@quotient,0
  8391  1C46                     l2302:	
  8392  1C46  3001               	movlw	1
  8393  1C47                     u2575:	
  8394  1C47  1003               	clrc
  8395  1C48  0CA8               	rrf	___awdiv@divisor+1,f
  8396  1C49  0CA7               	rrf	___awdiv@divisor,f
  8397  1C4A  3EFF               	addlw	-1
  8398  1C4B  1D03               	skipz
  8399  1C4C  2C47               	goto	u2575
  8400  1C4D  3001               	movlw	1
  8401  1C4E  02AC               	subwf	___awdiv@counter,f
  8402  1C4F  1D03               	btfss	3,2
  8403  1C50  2C30               	goto	l2296
  8404  1C51                     l2306:	
  8405  1C51  082D               	movf	___awdiv@sign,w
  8406  1C52  1903               	btfsc	3,2
  8407  1C53  2C59               	goto	l2310
  8408  1C54  09AE               	comf	___awdiv@quotient,f
  8409  1C55  09AF               	comf	___awdiv@quotient+1,f
  8410  1C56  0AAE               	incf	___awdiv@quotient,f
  8411  1C57  1903               	skipnz
  8412  1C58  0AAF               	incf	___awdiv@quotient+1,f
  8413  1C59                     l2310:	
  8414  1C59  082F               	movf	___awdiv@quotient+1,w
  8415  1C5A  00A8               	movwf	?___awdiv+1
  8416  1C5B  082E               	movf	___awdiv@quotient,w
  8417  1C5C  00A7               	movwf	?___awdiv
  8418  1C5D  0008               	return
  8419  1C5E                     __end_of___awdiv:	
  8420                           
  8421                           	psect	text26
  8422  1014                     __ptext26:	
  8423 ;; *************** function __tdiv_to_l_ *****************
  8424 ;; Defined at:
  8425 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;  f1              3    0[BANK0 ] float 
  8428 ;;  f2              3    3[BANK0 ] float 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  quot            4   10[BANK0 ] unsigned long 
  8431 ;;  exp1            1   15[BANK0 ] unsigned char 
  8432 ;;  cntr            1   14[BANK0 ] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  4    0[BANK0 ] unsigned long 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8442 ;;      Params:         0       6       0       0       0
  8443 ;;      Locals:         0       6       0       0       0
  8444 ;;      Temps:          0       4       0       0       0
  8445 ;;      Totals:         0      16       0       0       0
  8446 ;;Total ram usage:       16 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    2
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_sprintf
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function __tdiv_to_l_
  8458  1014                     __tdiv_to_l_:	
  8459                           
  8460                           ;incstack = 0
  8461                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8462  1014  1283               	bcf	3,5	;RP0=0, select bank0
  8463  1015  1303               	bcf	3,6	;RP1=0, select bank0
  8464  1016  0820               	movf	__tdiv_to_l_@f1,w
  8465  1017  00A6               	movwf	??__tdiv_to_l_
  8466  1018  0821               	movf	__tdiv_to_l_@f1+1,w
  8467  1019  00A7               	movwf	??__tdiv_to_l_+1
  8468  101A  0822               	movf	__tdiv_to_l_@f1+2,w
  8469  101B  00A8               	movwf	??__tdiv_to_l_+2
  8470  101C  1003               	clrc
  8471  101D  0D27               	rlf	??__tdiv_to_l_+1,w
  8472  101E  0D28               	rlf	??__tdiv_to_l_+2,w
  8473  101F  00A9               	movwf	??__tdiv_to_l_+3
  8474  1020  0829               	movf	??__tdiv_to_l_+3,w
  8475  1021  00AF               	movwf	__tdiv_to_l_@exp1
  8476  1022  082F               	movf	__tdiv_to_l_@exp1,w
  8477  1023  1D03               	btfss	3,2
  8478  1024  282E               	goto	l2594
  8479  1025  3000               	movlw	0
  8480  1026  00A3               	movwf	?__tdiv_to_l_+3
  8481  1027  3000               	movlw	0
  8482  1028  00A2               	movwf	?__tdiv_to_l_+2
  8483  1029  3000               	movlw	0
  8484  102A  00A1               	movwf	?__tdiv_to_l_+1
  8485  102B  3000               	movlw	0
  8486  102C  00A0               	movwf	?__tdiv_to_l_
  8487  102D  0008               	return
  8488  102E                     l2594:	
  8489  102E  0823               	movf	__tdiv_to_l_@f2,w
  8490  102F  00A6               	movwf	??__tdiv_to_l_
  8491  1030  0824               	movf	__tdiv_to_l_@f2+1,w
  8492  1031  00A7               	movwf	??__tdiv_to_l_+1
  8493  1032  0825               	movf	__tdiv_to_l_@f2+2,w
  8494  1033  00A8               	movwf	??__tdiv_to_l_+2
  8495  1034  1003               	clrc
  8496  1035  0D27               	rlf	??__tdiv_to_l_+1,w
  8497  1036  0D28               	rlf	??__tdiv_to_l_+2,w
  8498  1037  00A9               	movwf	??__tdiv_to_l_+3
  8499  1038  0829               	movf	??__tdiv_to_l_+3,w
  8500  1039  00AE               	movwf	__tdiv_to_l_@cntr
  8501  103A  082E               	movf	__tdiv_to_l_@cntr,w
  8502  103B  1D03               	btfss	3,2
  8503  103C  2846               	goto	l700
  8504  103D  3000               	movlw	0
  8505  103E  00A3               	movwf	?__tdiv_to_l_+3
  8506  103F  3000               	movlw	0
  8507  1040  00A2               	movwf	?__tdiv_to_l_+2
  8508  1041  3000               	movlw	0
  8509  1042  00A1               	movwf	?__tdiv_to_l_+1
  8510  1043  3000               	movlw	0
  8511  1044  00A0               	movwf	?__tdiv_to_l_
  8512  1045  0008               	return
  8513  1046                     l700:	
  8514  1046  17A1               	bsf	__tdiv_to_l_@f1+1,7
  8515  1047  30FF               	movlw	255
  8516  1048  05A0               	andwf	__tdiv_to_l_@f1,f
  8517  1049  30FF               	movlw	255
  8518  104A  05A1               	andwf	__tdiv_to_l_@f1+1,f
  8519  104B  3000               	movlw	0
  8520  104C  05A2               	andwf	__tdiv_to_l_@f1+2,f
  8521  104D  17A4               	bsf	__tdiv_to_l_@f2+1,7
  8522  104E  30FF               	movlw	255
  8523  104F  05A3               	andwf	__tdiv_to_l_@f2,f
  8524  1050  30FF               	movlw	255
  8525  1051  05A4               	andwf	__tdiv_to_l_@f2+1,f
  8526  1052  3000               	movlw	0
  8527  1053  05A5               	andwf	__tdiv_to_l_@f2+2,f
  8528  1054  3000               	movlw	0
  8529  1055  00AD               	movwf	__tdiv_to_l_@quot+3
  8530  1056  3000               	movlw	0
  8531  1057  00AC               	movwf	__tdiv_to_l_@quot+2
  8532  1058  3000               	movlw	0
  8533  1059  00AB               	movwf	__tdiv_to_l_@quot+1
  8534  105A  3000               	movlw	0
  8535  105B  00AA               	movwf	__tdiv_to_l_@quot
  8536  105C  307F               	movlw	127
  8537  105D  02AF               	subwf	__tdiv_to_l_@exp1,f
  8538  105E  3098               	movlw	152
  8539  105F  072E               	addwf	__tdiv_to_l_@cntr,w
  8540  1060  00A6               	movwf	??__tdiv_to_l_
  8541  1061  0826               	movf	??__tdiv_to_l_,w
  8542  1062  02AF               	subwf	__tdiv_to_l_@exp1,f
  8543  1063  3018               	movlw	24
  8544  1064  00A6               	movwf	??__tdiv_to_l_
  8545  1065  0826               	movf	??__tdiv_to_l_,w
  8546  1066  00AE               	movwf	__tdiv_to_l_@cntr
  8547  1067                     l2608:	
  8548  1067  3001               	movlw	1
  8549  1068  00A6               	movwf	??__tdiv_to_l_
  8550  1069                     u3215:	
  8551  1069  1003               	clrc
  8552  106A  0DAA               	rlf	__tdiv_to_l_@quot,f
  8553  106B  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8554  106C  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8555  106D  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8556  106E  0BA6               	decfsz	??__tdiv_to_l_,f
  8557  106F  2869               	goto	u3215
  8558  1070  0825               	movf	__tdiv_to_l_@f2+2,w
  8559  1071  0222               	subwf	__tdiv_to_l_@f1+2,w
  8560  1072  1D03               	skipz
  8561  1073  287A               	goto	u3225
  8562  1074  0824               	movf	__tdiv_to_l_@f2+1,w
  8563  1075  0221               	subwf	__tdiv_to_l_@f1+1,w
  8564  1076  1D03               	skipz
  8565  1077  287A               	goto	u3225
  8566  1078  0823               	movf	__tdiv_to_l_@f2,w
  8567  1079  0220               	subwf	__tdiv_to_l_@f1,w
  8568  107A                     u3225:	
  8569  107A  1C03               	skipc
  8570  107B  2887               	goto	l2616
  8571  107C  0823               	movf	__tdiv_to_l_@f2,w
  8572  107D  02A0               	subwf	__tdiv_to_l_@f1,f
  8573  107E  0824               	movf	__tdiv_to_l_@f2+1,w
  8574  107F  1C03               	skipc
  8575  1080  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  8576  1081  02A1               	subwf	__tdiv_to_l_@f1+1,f
  8577  1082  0825               	movf	__tdiv_to_l_@f2+2,w
  8578  1083  1C03               	skipc
  8579  1084  0A25               	incf	__tdiv_to_l_@f2+2,w
  8580  1085  02A2               	subwf	__tdiv_to_l_@f1+2,f
  8581  1086  142A               	bsf	__tdiv_to_l_@quot,0
  8582  1087                     l2616:	
  8583  1087  3001               	movlw	1
  8584  1088                     u3235:	
  8585  1088  1003               	clrc
  8586  1089  0DA0               	rlf	__tdiv_to_l_@f1,f
  8587  108A  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  8588  108B  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  8589  108C  3EFF               	addlw	-1
  8590  108D  1D03               	skipz
  8591  108E  2888               	goto	u3235
  8592  108F  3001               	movlw	1
  8593  1090  02AE               	subwf	__tdiv_to_l_@cntr,f
  8594  1091  1D03               	btfss	3,2
  8595  1092  2867               	goto	l2608
  8596  1093  1FAF               	btfss	__tdiv_to_l_@exp1,7
  8597  1094  28B3               	goto	l2628
  8598  1095  082F               	movf	__tdiv_to_l_@exp1,w
  8599  1096  3A80               	xorlw	128
  8600  1097  3E97               	addlw	151
  8601  1098  1803               	skipnc
  8602  1099  28A3               	goto	l2626
  8603  109A  3000               	movlw	0
  8604  109B  00A3               	movwf	?__tdiv_to_l_+3
  8605  109C  3000               	movlw	0
  8606  109D  00A2               	movwf	?__tdiv_to_l_+2
  8607  109E  3000               	movlw	0
  8608  109F  00A1               	movwf	?__tdiv_to_l_+1
  8609  10A0  3000               	movlw	0
  8610  10A1  00A0               	movwf	?__tdiv_to_l_
  8611  10A2  0008               	return
  8612  10A3                     l2626:	
  8613  10A3  3001               	movlw	1
  8614  10A4                     u3275:	
  8615  10A4  1003               	clrc
  8616  10A5  0CAD               	rrf	__tdiv_to_l_@quot+3,f
  8617  10A6  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  8618  10A7  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  8619  10A8  0CAA               	rrf	__tdiv_to_l_@quot,f
  8620  10A9  3EFF               	addlw	-1
  8621  10AA  1D03               	skipz
  8622  10AB  28A4               	goto	u3275
  8623  10AC  3001               	movlw	1
  8624  10AD  00A6               	movwf	??__tdiv_to_l_
  8625  10AE  0826               	movf	??__tdiv_to_l_,w
  8626  10AF  07AF               	addwf	__tdiv_to_l_@exp1,f
  8627  10B0  1903               	btfsc	3,2
  8628  10B1  28CE               	goto	l2636
  8629  10B2  28A3               	goto	l2626
  8630  10B3                     l2628:	
  8631  10B3  3018               	movlw	24
  8632  10B4  022F               	subwf	__tdiv_to_l_@exp1,w
  8633  10B5  1C03               	skipc
  8634  10B6  28CB               	goto	l710
  8635  10B7  3000               	movlw	0
  8636  10B8  00A3               	movwf	?__tdiv_to_l_+3
  8637  10B9  3000               	movlw	0
  8638  10BA  00A2               	movwf	?__tdiv_to_l_+2
  8639  10BB  3000               	movlw	0
  8640  10BC  00A1               	movwf	?__tdiv_to_l_+1
  8641  10BD  3000               	movlw	0
  8642  10BE  00A0               	movwf	?__tdiv_to_l_
  8643  10BF  0008               	return
  8644  10C0                     l2634:	
  8645  10C0  3001               	movlw	1
  8646  10C1  00A6               	movwf	??__tdiv_to_l_
  8647  10C2                     u3305:	
  8648  10C2  1003               	clrc
  8649  10C3  0DAA               	rlf	__tdiv_to_l_@quot,f
  8650  10C4  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8651  10C5  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8652  10C6  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8653  10C7  0BA6               	decfsz	??__tdiv_to_l_,f
  8654  10C8  28C2               	goto	u3305
  8655  10C9  3001               	movlw	1
  8656  10CA  02AF               	subwf	__tdiv_to_l_@exp1,f
  8657  10CB                     l710:	
  8658  10CB  082F               	movf	__tdiv_to_l_@exp1,w
  8659  10CC  1D03               	btfss	3,2
  8660  10CD  28C0               	goto	l2634
  8661  10CE                     l2636:	
  8662  10CE  082D               	movf	__tdiv_to_l_@quot+3,w
  8663  10CF  00A3               	movwf	?__tdiv_to_l_+3
  8664  10D0  082C               	movf	__tdiv_to_l_@quot+2,w
  8665  10D1  00A2               	movwf	?__tdiv_to_l_+2
  8666  10D2  082B               	movf	__tdiv_to_l_@quot+1,w
  8667  10D3  00A1               	movwf	?__tdiv_to_l_+1
  8668  10D4  082A               	movf	__tdiv_to_l_@quot,w
  8669  10D5  00A0               	movwf	?__tdiv_to_l_
  8670  10D6  0008               	return
  8671  10D7                     __end_of__tdiv_to_l_:	
  8672                           
  8673                           	psect	text27
  8674  1527                     __ptext27:	
  8675 ;; *************** function __div_to_l_ *****************
  8676 ;; Defined at:
  8677 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  f1              3    0[BANK0 ] unsigned long 
  8680 ;;  f2              3    3[BANK0 ] unsigned long 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  quot            4   14[BANK0 ] unsigned long 
  8683 ;;  exp1            1   19[BANK0 ] unsigned char 
  8684 ;;  cntr            1   18[BANK0 ] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  4    0[BANK0 ] unsigned long 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8694 ;;      Params:         0       6       0       0       0
  8695 ;;      Locals:         0       6       0       0       0
  8696 ;;      Temps:          0       8       0       0       0
  8697 ;;      Totals:         0      20       0       0       0
  8698 ;;Total ram usage:       20 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    2
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_sprintf
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           
  8709                           ;psect for function __div_to_l_
  8710  1527                     __div_to_l_:	
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  8714  1527  3020               	movlw	low (__div_to_l_@f1| 0)
  8715  1528  0084               	movwf	4
  8716  1529  1383               	bcf	3,7	;select IRP bank0
  8717  152A  0800               	movf	0,w
  8718  152B  1283               	bcf	3,5	;RP0=0, select bank0
  8719  152C  1303               	bcf	3,6	;RP1=0, select bank0
  8720  152D  00A6               	movwf	??__div_to_l_
  8721  152E  0A84               	incf	4,f
  8722  152F  0800               	movf	0,w
  8723  1530  00A7               	movwf	??__div_to_l_+1
  8724  1531  0A84               	incf	4,f
  8725  1532  0800               	movf	0,w
  8726  1533  00A8               	movwf	??__div_to_l_+2
  8727  1534  0A84               	incf	4,f
  8728  1535  0800               	movf	0,w
  8729  1536  00A9               	movwf	??__div_to_l_+3
  8730  1537  1003               	clrc
  8731  1538  0D28               	rlf	??__div_to_l_+2,w
  8732  1539  0D29               	rlf	??__div_to_l_+3,w
  8733  153A  00AA               	movwf	??__div_to_l_+4
  8734  153B  082A               	movf	??__div_to_l_+4,w
  8735  153C  00B3               	movwf	__div_to_l_@exp1
  8736  153D  0833               	movf	__div_to_l_@exp1,w
  8737  153E  1D03               	btfss	3,2
  8738  153F  2D49               	goto	l2646
  8739  1540  3000               	movlw	0
  8740  1541  00A3               	movwf	?__div_to_l_+3
  8741  1542  3000               	movlw	0
  8742  1543  00A2               	movwf	?__div_to_l_+2
  8743  1544  3000               	movlw	0
  8744  1545  00A1               	movwf	?__div_to_l_+1
  8745  1546  3000               	movlw	0
  8746  1547  00A0               	movwf	?__div_to_l_
  8747  1548  0008               	return
  8748  1549                     l2646:	
  8749  1549  3023               	movlw	low (__div_to_l_@f2| 0)
  8750  154A  0084               	movwf	4
  8751  154B  0800               	movf	0,w
  8752  154C  00A6               	movwf	??__div_to_l_
  8753  154D  0A84               	incf	4,f
  8754  154E  0800               	movf	0,w
  8755  154F  00A7               	movwf	??__div_to_l_+1
  8756  1550  0A84               	incf	4,f
  8757  1551  0800               	movf	0,w
  8758  1552  00A8               	movwf	??__div_to_l_+2
  8759  1553  0A84               	incf	4,f
  8760  1554  0800               	movf	0,w
  8761  1555  00A9               	movwf	??__div_to_l_+3
  8762  1556  1003               	clrc
  8763  1557  0D28               	rlf	??__div_to_l_+2,w
  8764  1558  0D29               	rlf	??__div_to_l_+3,w
  8765  1559  00AA               	movwf	??__div_to_l_+4
  8766  155A  082A               	movf	??__div_to_l_+4,w
  8767  155B  00B2               	movwf	__div_to_l_@cntr
  8768  155C  0832               	movf	__div_to_l_@cntr,w
  8769  155D  1D03               	btfss	3,2
  8770  155E  2D68               	goto	l2652
  8771  155F  3000               	movlw	0
  8772  1560  00A3               	movwf	?__div_to_l_+3
  8773  1561  3000               	movlw	0
  8774  1562  00A2               	movwf	?__div_to_l_+2
  8775  1563  3000               	movlw	0
  8776  1564  00A1               	movwf	?__div_to_l_+1
  8777  1565  3000               	movlw	0
  8778  1566  00A0               	movwf	?__div_to_l_
  8779  1567  0008               	return
  8780  1568                     l2652:	
  8781  1568  3020               	movlw	low (__div_to_l_@f1| 0)
  8782  1569  0084               	movwf	4
  8783  156A  3000               	movlw	0
  8784  156B  0480               	iorwf	0,f
  8785  156C  0A84               	incf	4,f
  8786  156D  3000               	movlw	0
  8787  156E  0480               	iorwf	0,f
  8788  156F  0A84               	incf	4,f
  8789  1570  3080               	movlw	128
  8790  1571  0480               	iorwf	0,f
  8791  1572  0A84               	incf	4,f
  8792  1573  3000               	movlw	0
  8793  1574  0480               	iorwf	0,f
  8794  1575  3020               	movlw	low (__div_to_l_@f1| 0)
  8795  1576  0084               	movwf	4
  8796  1577  30FF               	movlw	255
  8797  1578  0580               	andwf	0,f
  8798  1579  0A84               	incf	4,f
  8799  157A  30FF               	movlw	255
  8800  157B  0580               	andwf	0,f
  8801  157C  0A84               	incf	4,f
  8802  157D  30FF               	movlw	255
  8803  157E  0580               	andwf	0,f
  8804  157F  0A84               	incf	4,f
  8805  1580  3000               	movlw	0
  8806  1581  0580               	andwf	0,f
  8807  1582  3023               	movlw	low (__div_to_l_@f2| 0)
  8808  1583  0084               	movwf	4
  8809  1584  3000               	movlw	0
  8810  1585  0480               	iorwf	0,f
  8811  1586  0A84               	incf	4,f
  8812  1587  3000               	movlw	0
  8813  1588  0480               	iorwf	0,f
  8814  1589  0A84               	incf	4,f
  8815  158A  3080               	movlw	128
  8816  158B  0480               	iorwf	0,f
  8817  158C  0A84               	incf	4,f
  8818  158D  3000               	movlw	0
  8819  158E  0480               	iorwf	0,f
  8820  158F  3023               	movlw	low (__div_to_l_@f2| 0)
  8821  1590  0084               	movwf	4
  8822  1591  30FF               	movlw	255
  8823  1592  0580               	andwf	0,f
  8824  1593  0A84               	incf	4,f
  8825  1594  30FF               	movlw	255
  8826  1595  0580               	andwf	0,f
  8827  1596  0A84               	incf	4,f
  8828  1597  30FF               	movlw	255
  8829  1598  0580               	andwf	0,f
  8830  1599  0A84               	incf	4,f
  8831  159A  3000               	movlw	0
  8832  159B  0580               	andwf	0,f
  8833  159C  3000               	movlw	0
  8834  159D  00B1               	movwf	__div_to_l_@quot+3
  8835  159E  3000               	movlw	0
  8836  159F  00B0               	movwf	__div_to_l_@quot+2
  8837  15A0  3000               	movlw	0
  8838  15A1  00AF               	movwf	__div_to_l_@quot+1
  8839  15A2  3000               	movlw	0
  8840  15A3  00AE               	movwf	__div_to_l_@quot
  8841  15A4  307F               	movlw	127
  8842  15A5  02B3               	subwf	__div_to_l_@exp1,f
  8843  15A6  30A0               	movlw	160
  8844  15A7  0732               	addwf	__div_to_l_@cntr,w
  8845  15A8  00A6               	movwf	??__div_to_l_
  8846  15A9  0826               	movf	??__div_to_l_,w
  8847  15AA  02B3               	subwf	__div_to_l_@exp1,f
  8848  15AB  3020               	movlw	32
  8849  15AC  00A6               	movwf	??__div_to_l_
  8850  15AD  0826               	movf	??__div_to_l_,w
  8851  15AE  00B2               	movwf	__div_to_l_@cntr
  8852  15AF                     l2662:	
  8853  15AF  3001               	movlw	1
  8854  15B0  00A6               	movwf	??__div_to_l_
  8855  15B1                     u3345:	
  8856  15B1  1003               	clrc
  8857  15B2  0DAE               	rlf	__div_to_l_@quot,f
  8858  15B3  0DAF               	rlf	__div_to_l_@quot+1,f
  8859  15B4  0DB0               	rlf	__div_to_l_@quot+2,f
  8860  15B5  0DB1               	rlf	__div_to_l_@quot+3,f
  8861  15B6  0BA6               	decfsz	??__div_to_l_,f
  8862  15B7  2DB1               	goto	u3345
  8863  15B8  3023               	movlw	low (__div_to_l_@f2| 0)
  8864  15B9  0084               	movwf	4
  8865  15BA  0800               	movf	0,w
  8866  15BB  00A6               	movwf	??__div_to_l_
  8867  15BC  0A84               	incf	4,f
  8868  15BD  0800               	movf	0,w
  8869  15BE  00A7               	movwf	??__div_to_l_+1
  8870  15BF  0A84               	incf	4,f
  8871  15C0  0800               	movf	0,w
  8872  15C1  00A8               	movwf	??__div_to_l_+2
  8873  15C2  0A84               	incf	4,f
  8874  15C3  0800               	movf	0,w
  8875  15C4  00A9               	movwf	??__div_to_l_+3
  8876  15C5  3020               	movlw	low (__div_to_l_@f1| 0)
  8877  15C6  0084               	movwf	4
  8878  15C7  0800               	movf	0,w
  8879  15C8  00AA               	movwf	??__div_to_l_+4
  8880  15C9  0A84               	incf	4,f
  8881  15CA  0800               	movf	0,w
  8882  15CB  00AB               	movwf	??__div_to_l_+5
  8883  15CC  0A84               	incf	4,f
  8884  15CD  0800               	movf	0,w
  8885  15CE  00AC               	movwf	??__div_to_l_+6
  8886  15CF  0A84               	incf	4,f
  8887  15D0  0800               	movf	0,w
  8888  15D1  00AD               	movwf	??__div_to_l_+7
  8889  15D2  0829               	movf	??__div_to_l_+3,w
  8890  15D3  022D               	subwf	??__div_to_l_+7,w
  8891  15D4  1D03               	skipz
  8892  15D5  2DE0               	goto	u3355
  8893  15D6  0828               	movf	??__div_to_l_+2,w
  8894  15D7  022C               	subwf	??__div_to_l_+6,w
  8895  15D8  1D03               	skipz
  8896  15D9  2DE0               	goto	u3355
  8897  15DA  0827               	movf	??__div_to_l_+1,w
  8898  15DB  022B               	subwf	??__div_to_l_+5,w
  8899  15DC  1D03               	skipz
  8900  15DD  2DE0               	goto	u3355
  8901  15DE  0826               	movf	??__div_to_l_,w
  8902  15DF  022A               	subwf	??__div_to_l_+4,w
  8903  15E0                     u3355:	
  8904  15E0  1C03               	skipc
  8905  15E1  2E05               	goto	l623
  8906  15E2  3023               	movlw	low (__div_to_l_@f2| 0)
  8907  15E3  0084               	movwf	4
  8908  15E4  0800               	movf	0,w
  8909  15E5  00A6               	movwf	??__div_to_l_
  8910  15E6  0A84               	incf	4,f
  8911  15E7  0800               	movf	0,w
  8912  15E8  00A7               	movwf	??__div_to_l_+1
  8913  15E9  0A84               	incf	4,f
  8914  15EA  0800               	movf	0,w
  8915  15EB  00A8               	movwf	??__div_to_l_+2
  8916  15EC  0A84               	incf	4,f
  8917  15ED  0800               	movf	0,w
  8918  15EE  00A9               	movwf	??__div_to_l_+3
  8919  15EF  3020               	movlw	low (__div_to_l_@f1| 0)
  8920  15F0  0084               	movwf	4
  8921  15F1  0826               	movf	??__div_to_l_,w
  8922  15F2  0280               	subwf	0,f
  8923  15F3  0A84               	incf	4,f
  8924  15F4  0827               	movf	??__div_to_l_+1,w
  8925  15F5  1C03               	skipc
  8926  15F6  0F27               	incfsz	??__div_to_l_+1,w
  8927  15F7  0280               	subwf	0,f
  8928  15F8  0A84               	incf	4,f
  8929  15F9  0828               	movf	??__div_to_l_+2,w
  8930  15FA  1C03               	skipc
  8931  15FB  0F28               	incfsz	??__div_to_l_+2,w
  8932  15FC  0280               	subwf	0,f
  8933  15FD  0A84               	incf	4,f
  8934  15FE  0829               	movf	??__div_to_l_+3,w
  8935  15FF  1C03               	skipc
  8936  1600  0A29               	incf	??__div_to_l_+3,w
  8937  1601  0280               	subwf	0,f
  8938  1602  3003               	movlw	3
  8939  1603  0284               	subwf	4,f
  8940  1604  142E               	bsf	__div_to_l_@quot,0
  8941  1605                     l623:	
  8942  1605  3020               	movlw	low (__div_to_l_@f1| 0)
  8943  1606  0084               	movwf	4
  8944  1607  1003               	clrc
  8945  1608  0D80               	rlf	0,f
  8946  1609  0A84               	incf	4,f
  8947  160A  0D80               	rlf	0,f
  8948  160B  0A84               	incf	4,f
  8949  160C  0D80               	rlf	0,f
  8950  160D  0A84               	incf	4,f
  8951  160E  0D80               	rlf	0,f
  8952  160F  0384               	decf	4,f
  8953  1610  0384               	decf	4,f
  8954  1611  0384               	decf	4,f
  8955  1612  3001               	movlw	1
  8956  1613  02B2               	subwf	__div_to_l_@cntr,f
  8957  1614  1D03               	btfss	3,2
  8958  1615  2DAF               	goto	l2662
  8959  1616  1FB3               	btfss	__div_to_l_@exp1,7
  8960  1617  2E36               	goto	l2680
  8961  1618  0833               	movf	__div_to_l_@exp1,w
  8962  1619  3A80               	xorlw	128
  8963  161A  3E9F               	addlw	159
  8964  161B  1803               	skipnc
  8965  161C  2E26               	goto	l2678
  8966  161D  3000               	movlw	0
  8967  161E  00A3               	movwf	?__div_to_l_+3
  8968  161F  3000               	movlw	0
  8969  1620  00A2               	movwf	?__div_to_l_+2
  8970  1621  3000               	movlw	0
  8971  1622  00A1               	movwf	?__div_to_l_+1
  8972  1623  3000               	movlw	0
  8973  1624  00A0               	movwf	?__div_to_l_
  8974  1625  0008               	return
  8975  1626                     l2678:	
  8976  1626  3001               	movlw	1
  8977  1627                     u3395:	
  8978  1627  1003               	clrc
  8979  1628  0CB1               	rrf	__div_to_l_@quot+3,f
  8980  1629  0CB0               	rrf	__div_to_l_@quot+2,f
  8981  162A  0CAF               	rrf	__div_to_l_@quot+1,f
  8982  162B  0CAE               	rrf	__div_to_l_@quot,f
  8983  162C  3EFF               	addlw	-1
  8984  162D  1D03               	skipz
  8985  162E  2E27               	goto	u3395
  8986  162F  3001               	movlw	1
  8987  1630  00A6               	movwf	??__div_to_l_
  8988  1631  0826               	movf	??__div_to_l_,w
  8989  1632  07B3               	addwf	__div_to_l_@exp1,f
  8990  1633  1903               	btfsc	3,2
  8991  1634  2E51               	goto	l2688
  8992  1635  2E26               	goto	l2678
  8993  1636                     l2680:	
  8994  1636  3020               	movlw	32
  8995  1637  0233               	subwf	__div_to_l_@exp1,w
  8996  1638  1C03               	skipc
  8997  1639  2E4E               	goto	l631
  8998  163A  3000               	movlw	0
  8999  163B  00A3               	movwf	?__div_to_l_+3
  9000  163C  3000               	movlw	0
  9001  163D  00A2               	movwf	?__div_to_l_+2
  9002  163E  3000               	movlw	0
  9003  163F  00A1               	movwf	?__div_to_l_+1
  9004  1640  3000               	movlw	0
  9005  1641  00A0               	movwf	?__div_to_l_
  9006  1642  0008               	return
  9007  1643                     l2686:	
  9008  1643  3001               	movlw	1
  9009  1644  00A6               	movwf	??__div_to_l_
  9010  1645                     u3425:	
  9011  1645  1003               	clrc
  9012  1646  0DAE               	rlf	__div_to_l_@quot,f
  9013  1647  0DAF               	rlf	__div_to_l_@quot+1,f
  9014  1648  0DB0               	rlf	__div_to_l_@quot+2,f
  9015  1649  0DB1               	rlf	__div_to_l_@quot+3,f
  9016  164A  0BA6               	decfsz	??__div_to_l_,f
  9017  164B  2E45               	goto	u3425
  9018  164C  3001               	movlw	1
  9019  164D  02B3               	subwf	__div_to_l_@exp1,f
  9020  164E                     l631:	
  9021  164E  0833               	movf	__div_to_l_@exp1,w
  9022  164F  1D03               	btfss	3,2
  9023  1650  2E43               	goto	l2686
  9024  1651                     l2688:	
  9025  1651  0831               	movf	__div_to_l_@quot+3,w
  9026  1652  00A3               	movwf	?__div_to_l_+3
  9027  1653  0830               	movf	__div_to_l_@quot+2,w
  9028  1654  00A2               	movwf	?__div_to_l_+2
  9029  1655  082F               	movf	__div_to_l_@quot+1,w
  9030  1656  00A1               	movwf	?__div_to_l_+1
  9031  1657  082E               	movf	__div_to_l_@quot,w
  9032  1658  00A0               	movwf	?__div_to_l_
  9033  1659  0008               	return
  9034  165A                     __end_of__div_to_l_:	
  9035                           
  9036                           	psect	text28
  9037  19B8                     __ptext28:	
  9038 ;; *************** function ___wmul *****************
  9039 ;; Defined at:
  9040 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9043 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  product         2    4[BANK0 ] unsigned int 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2    0[BANK0 ] unsigned int 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9055 ;;      Params:         0       4       0       0       0
  9056 ;;      Locals:         0       2       0       0       0
  9057 ;;      Temps:          0       0       0       0       0
  9058 ;;      Totals:         0       6       0       0       0
  9059 ;;Total ram usage:        6 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_sprintf
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function ___wmul
  9071  19B8                     ___wmul:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9075  19B8  1283               	bcf	3,5	;RP0=0, select bank0
  9076  19B9  1303               	bcf	3,6	;RP1=0, select bank0
  9077  19BA  01A4               	clrf	___wmul@product
  9078  19BB  01A5               	clrf	___wmul@product+1
  9079  19BC                     l2694:	
  9080  19BC  1C20               	btfss	___wmul@multiplier,0
  9081  19BD  29C4               	goto	l465
  9082  19BE  0822               	movf	___wmul@multiplicand,w
  9083  19BF  07A4               	addwf	___wmul@product,f
  9084  19C0  1803               	skipnc
  9085  19C1  0AA5               	incf	___wmul@product+1,f
  9086  19C2  0823               	movf	___wmul@multiplicand+1,w
  9087  19C3  07A5               	addwf	___wmul@product+1,f
  9088  19C4                     l465:	
  9089  19C4  3001               	movlw	1
  9090  19C5                     u3455:	
  9091  19C5  1003               	clrc
  9092  19C6  0DA2               	rlf	___wmul@multiplicand,f
  9093  19C7  0DA3               	rlf	___wmul@multiplicand+1,f
  9094  19C8  3EFF               	addlw	-1
  9095  19C9  1D03               	skipz
  9096  19CA  29C5               	goto	u3455
  9097  19CB  3001               	movlw	1
  9098  19CC                     u3465:	
  9099  19CC  1003               	clrc
  9100  19CD  0CA1               	rrf	___wmul@multiplier+1,f
  9101  19CE  0CA0               	rrf	___wmul@multiplier,f
  9102  19CF  3EFF               	addlw	-1
  9103  19D0  1D03               	skipz
  9104  19D1  29CC               	goto	u3465
  9105  19D2  0820               	movf	___wmul@multiplier,w
  9106  19D3  0421               	iorwf	___wmul@multiplier+1,w
  9107  19D4  1D03               	btfss	3,2
  9108  19D5  29BC               	goto	l2694
  9109  19D6  0825               	movf	___wmul@product+1,w
  9110  19D7  00A1               	movwf	?___wmul+1
  9111  19D8  0824               	movf	___wmul@product,w
  9112  19D9  00A0               	movwf	?___wmul
  9113  19DA  0008               	return
  9114  19DB                     __end_of___wmul:	
  9115                           
  9116                           	psect	text29
  9117  1A58                     __ptext29:	
  9118 ;; *************** function ___lltoft *****************
  9119 ;; Defined at:
  9120 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  c               4    8[BANK0 ] unsigned long 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  exp             1   13[BANK0 ] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  3    8[BANK0 ] float 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0, pclath, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9134 ;;      Params:         0       4       0       0       0
  9135 ;;      Locals:         0       1       0       0       0
  9136 ;;      Temps:          0       1       0       0       0
  9137 ;;      Totals:         0       6       0       0       0
  9138 ;;Total ram usage:        6 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    3
  9141 ;; This function calls:
  9142 ;;		___ftpack
  9143 ;; This function is called by:
  9144 ;;		_stopWatch
  9145 ;;		_sprintf
  9146 ;;		_currentTime
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function ___lltoft
  9152  1A58                     ___lltoft:	
  9153                           
  9154                           ;incstack = 0
  9155                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9156  1A58  308E               	movlw	142
  9157  1A59  1283               	bcf	3,5	;RP0=0, select bank0
  9158  1A5A  1303               	bcf	3,6	;RP1=0, select bank0
  9159  1A5B  00AC               	movwf	??___lltoft
  9160  1A5C  082C               	movf	??___lltoft,w
  9161  1A5D  00AD               	movwf	___lltoft@exp
  9162  1A5E                     l2874:	
  9163  1A5E  30FF               	movlw	255
  9164  1A5F  052B               	andwf	___lltoft@c+3,w
  9165  1A60  1903               	btfsc	3,2
  9166  1A61  2A70               	goto	l2876
  9167  1A62  3001               	movlw	1
  9168  1A63                     u3865:	
  9169  1A63  1003               	clrc
  9170  1A64  0CAB               	rrf	___lltoft@c+3,f
  9171  1A65  0CAA               	rrf	___lltoft@c+2,f
  9172  1A66  0CA9               	rrf	___lltoft@c+1,f
  9173  1A67  0CA8               	rrf	___lltoft@c,f
  9174  1A68  3EFF               	addlw	-1
  9175  1A69  1D03               	skipz
  9176  1A6A  2A63               	goto	u3865
  9177  1A6B  3001               	movlw	1
  9178  1A6C  00AC               	movwf	??___lltoft
  9179  1A6D  082C               	movf	??___lltoft,w
  9180  1A6E  07AD               	addwf	___lltoft@exp,f
  9181  1A6F  2A5E               	goto	l2874
  9182  1A70                     l2876:	
  9183  1A70  0828               	movf	___lltoft@c,w
  9184  1A71  00A0               	movwf	___ftpack@arg
  9185  1A72  0829               	movf	___lltoft@c+1,w
  9186  1A73  00A1               	movwf	___ftpack@arg+1
  9187  1A74  082A               	movf	___lltoft@c+2,w
  9188  1A75  00A2               	movwf	___ftpack@arg+2
  9189  1A76  082D               	movf	___lltoft@exp,w
  9190  1A77  00AC               	movwf	??___lltoft
  9191  1A78  082C               	movf	??___lltoft,w
  9192  1A79  00A3               	movwf	___ftpack@exp
  9193  1A7A  01A4               	clrf	___ftpack@sign
  9194  1A7B  160A  158A  2519   	fcall	___ftpack
  9195  1A7E  1283               	bcf	3,5	;RP0=0, select bank0
  9196  1A7F  1303               	bcf	3,6	;RP1=0, select bank0
  9197  1A80  0820               	movf	?___ftpack,w
  9198  1A81  00A8               	movwf	?___lltoft
  9199  1A82  0821               	movf	?___ftpack+1,w
  9200  1A83  00A9               	movwf	?___lltoft+1
  9201  1A84  0822               	movf	?___ftpack+2,w
  9202  1A85  00AA               	movwf	?___lltoft+2
  9203  1A86  0008               	return
  9204  1A87                     __end_of___lltoft:	
  9205                           
  9206                           	psect	text30
  9207  1BB5                     __ptext30:	
  9208 ;; *************** function ___llmod *****************
  9209 ;; Defined at:
  9210 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  divisor         4   14[BANK0 ] unsigned long 
  9213 ;;  dividend        4   18[BANK0 ] unsigned long 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  counter         1   23[BANK0 ] unsigned char 
  9216 ;; Return value:  Size  Location     Type
  9217 ;;                  4   14[BANK0 ] unsigned long 
  9218 ;; Registers used:
  9219 ;;		wreg, status,2, status,0
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9225 ;;      Params:         0       8       0       0       0
  9226 ;;      Locals:         0       1       0       0       0
  9227 ;;      Temps:          0       1       0       0       0
  9228 ;;      Totals:         0      10       0       0       0
  9229 ;;Total ram usage:       10 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    2
  9232 ;; This function calls:
  9233 ;;		Nothing
  9234 ;; This function is called by:
  9235 ;;		_sprintf
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           
  9240                           ;psect for function ___llmod
  9241  1BB5                     ___llmod:	
  9242                           
  9243                           ;incstack = 0
  9244                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9245  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
  9246  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
  9247  1BB7  0831               	movf	___llmod@divisor+3,w
  9248  1BB8  0430               	iorwf	___llmod@divisor+2,w
  9249  1BB9  042F               	iorwf	___llmod@divisor+1,w
  9250  1BBA  042E               	iorwf	___llmod@divisor,w
  9251  1BBB  1903               	skipnz
  9252  1BBC  2BFA               	goto	l2866
  9253  1BBD  01B7               	clrf	___llmod@counter
  9254  1BBE  0AB7               	incf	___llmod@counter,f
  9255  1BBF                     l2856:	
  9256  1BBF  1BB1               	btfsc	___llmod@divisor+3,7
  9257  1BC0  2BCF               	goto	l2858
  9258  1BC1  3001               	movlw	1
  9259  1BC2  00B6               	movwf	??___llmod
  9260  1BC3                     u3815:	
  9261  1BC3  1003               	clrc
  9262  1BC4  0DAE               	rlf	___llmod@divisor,f
  9263  1BC5  0DAF               	rlf	___llmod@divisor+1,f
  9264  1BC6  0DB0               	rlf	___llmod@divisor+2,f
  9265  1BC7  0DB1               	rlf	___llmod@divisor+3,f
  9266  1BC8  0BB6               	decfsz	??___llmod,f
  9267  1BC9  2BC3               	goto	u3815
  9268  1BCA  3001               	movlw	1
  9269  1BCB  00B6               	movwf	??___llmod
  9270  1BCC  0836               	movf	??___llmod,w
  9271  1BCD  07B7               	addwf	___llmod@counter,f
  9272  1BCE  2BBF               	goto	l2856
  9273  1BCF                     l2858:	
  9274  1BCF  0831               	movf	___llmod@divisor+3,w
  9275  1BD0  0235               	subwf	___llmod@dividend+3,w
  9276  1BD1  1D03               	skipz
  9277  1BD2  2BDD               	goto	u3835
  9278  1BD3  0830               	movf	___llmod@divisor+2,w
  9279  1BD4  0234               	subwf	___llmod@dividend+2,w
  9280  1BD5  1D03               	skipz
  9281  1BD6  2BDD               	goto	u3835
  9282  1BD7  082F               	movf	___llmod@divisor+1,w
  9283  1BD8  0233               	subwf	___llmod@dividend+1,w
  9284  1BD9  1D03               	skipz
  9285  1BDA  2BDD               	goto	u3835
  9286  1BDB  082E               	movf	___llmod@divisor,w
  9287  1BDC  0232               	subwf	___llmod@dividend,w
  9288  1BDD                     u3835:	
  9289  1BDD  1C03               	skipc
  9290  1BDE  2BED               	goto	l2862
  9291  1BDF  082E               	movf	___llmod@divisor,w
  9292  1BE0  02B2               	subwf	___llmod@dividend,f
  9293  1BE1  082F               	movf	___llmod@divisor+1,w
  9294  1BE2  1C03               	skipc
  9295  1BE3  0F2F               	incfsz	___llmod@divisor+1,w
  9296  1BE4  02B3               	subwf	___llmod@dividend+1,f
  9297  1BE5  0830               	movf	___llmod@divisor+2,w
  9298  1BE6  1C03               	skipc
  9299  1BE7  0F30               	incfsz	___llmod@divisor+2,w
  9300  1BE8  02B4               	subwf	___llmod@dividend+2,f
  9301  1BE9  0831               	movf	___llmod@divisor+3,w
  9302  1BEA  1C03               	skipc
  9303  1BEB  0F31               	incfsz	___llmod@divisor+3,w
  9304  1BEC  02B5               	subwf	___llmod@dividend+3,f
  9305  1BED                     l2862:	
  9306  1BED  3001               	movlw	1
  9307  1BEE                     u3845:	
  9308  1BEE  1003               	clrc
  9309  1BEF  0CB1               	rrf	___llmod@divisor+3,f
  9310  1BF0  0CB0               	rrf	___llmod@divisor+2,f
  9311  1BF1  0CAF               	rrf	___llmod@divisor+1,f
  9312  1BF2  0CAE               	rrf	___llmod@divisor,f
  9313  1BF3  3EFF               	addlw	-1
  9314  1BF4  1D03               	skipz
  9315  1BF5  2BEE               	goto	u3845
  9316  1BF6  3001               	movlw	1
  9317  1BF7  02B7               	subwf	___llmod@counter,f
  9318  1BF8  1D03               	btfss	3,2
  9319  1BF9  2BCF               	goto	l2858
  9320  1BFA                     l2866:	
  9321  1BFA  0835               	movf	___llmod@dividend+3,w
  9322  1BFB  00B1               	movwf	?___llmod+3
  9323  1BFC  0834               	movf	___llmod@dividend+2,w
  9324  1BFD  00B0               	movwf	?___llmod+2
  9325  1BFE  0833               	movf	___llmod@dividend+1,w
  9326  1BFF  00AF               	movwf	?___llmod+1
  9327  1C00  0832               	movf	___llmod@dividend,w
  9328  1C01  00AE               	movwf	?___llmod
  9329  1C02  0008               	return
  9330  1C03                     __end_of___llmod:	
  9331                           
  9332                           	psect	text31
  9333  0798                     __ptext31:	
  9334 ;; *************** function ___lldiv *****************
  9335 ;; Defined at:
  9336 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  divisor         4    0[BANK0 ] unsigned long 
  9339 ;;  dividend        4    4[BANK0 ] unsigned long 
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  quotient        4    9[BANK0 ] unsigned long 
  9342 ;;  counter         1   13[BANK0 ] unsigned char 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  4    0[BANK0 ] unsigned long 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9352 ;;      Params:         0       8       0       0       0
  9353 ;;      Locals:         0       5       0       0       0
  9354 ;;      Temps:          0       1       0       0       0
  9355 ;;      Totals:         0      14       0       0       0
  9356 ;;Total ram usage:       14 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    2
  9359 ;; This function calls:
  9360 ;;		Nothing
  9361 ;; This function is called by:
  9362 ;;		_sprintf
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function ___lldiv
  9368  0798                     ___lldiv:	
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9372  0798  3000               	movlw	0
  9373  0799  1283               	bcf	3,5	;RP0=0, select bank0
  9374  079A  1303               	bcf	3,6	;RP1=0, select bank0
  9375  079B  00AC               	movwf	___lldiv@quotient+3
  9376  079C  3000               	movlw	0
  9377  079D  00AB               	movwf	___lldiv@quotient+2
  9378  079E  3000               	movlw	0
  9379  079F  00AA               	movwf	___lldiv@quotient+1
  9380  07A0  3000               	movlw	0
  9381  07A1  00A9               	movwf	___lldiv@quotient
  9382  07A2  0823               	movf	___lldiv@divisor+3,w
  9383  07A3  0422               	iorwf	___lldiv@divisor+2,w
  9384  07A4  0421               	iorwf	___lldiv@divisor+1,w
  9385  07A5  0420               	iorwf	___lldiv@divisor,w
  9386  07A6  1903               	skipnz
  9387  07A7  2FEF               	goto	l2846
  9388  07A8  01AD               	clrf	___lldiv@counter
  9389  07A9  0AAD               	incf	___lldiv@counter,f
  9390  07AA                     l2832:	
  9391  07AA  1BA3               	btfsc	___lldiv@divisor+3,7
  9392  07AB  2FBA               	goto	l2834
  9393  07AC  3001               	movlw	1
  9394  07AD  00A8               	movwf	??___lldiv
  9395  07AE                     u3745:	
  9396  07AE  1003               	clrc
  9397  07AF  0DA0               	rlf	___lldiv@divisor,f
  9398  07B0  0DA1               	rlf	___lldiv@divisor+1,f
  9399  07B1  0DA2               	rlf	___lldiv@divisor+2,f
  9400  07B2  0DA3               	rlf	___lldiv@divisor+3,f
  9401  07B3  0BA8               	decfsz	??___lldiv,f
  9402  07B4  2FAE               	goto	u3745
  9403  07B5  3001               	movlw	1
  9404  07B6  00A8               	movwf	??___lldiv
  9405  07B7  0828               	movf	??___lldiv,w
  9406  07B8  07AD               	addwf	___lldiv@counter,f
  9407  07B9  2FAA               	goto	l2832
  9408  07BA                     l2834:	
  9409  07BA  3001               	movlw	1
  9410  07BB  00A8               	movwf	??___lldiv
  9411  07BC                     u3765:	
  9412  07BC  1003               	clrc
  9413  07BD  0DA9               	rlf	___lldiv@quotient,f
  9414  07BE  0DAA               	rlf	___lldiv@quotient+1,f
  9415  07BF  0DAB               	rlf	___lldiv@quotient+2,f
  9416  07C0  0DAC               	rlf	___lldiv@quotient+3,f
  9417  07C1  0BA8               	decfsz	??___lldiv,f
  9418  07C2  2FBC               	goto	u3765
  9419  07C3  0823               	movf	___lldiv@divisor+3,w
  9420  07C4  0227               	subwf	___lldiv@dividend+3,w
  9421  07C5  1D03               	skipz
  9422  07C6  2FD1               	goto	u3775
  9423  07C7  0822               	movf	___lldiv@divisor+2,w
  9424  07C8  0226               	subwf	___lldiv@dividend+2,w
  9425  07C9  1D03               	skipz
  9426  07CA  2FD1               	goto	u3775
  9427  07CB  0821               	movf	___lldiv@divisor+1,w
  9428  07CC  0225               	subwf	___lldiv@dividend+1,w
  9429  07CD  1D03               	skipz
  9430  07CE  2FD1               	goto	u3775
  9431  07CF  0820               	movf	___lldiv@divisor,w
  9432  07D0  0224               	subwf	___lldiv@dividend,w
  9433  07D1                     u3775:	
  9434  07D1  1C03               	skipc
  9435  07D2  2FE2               	goto	l2842
  9436  07D3  0820               	movf	___lldiv@divisor,w
  9437  07D4  02A4               	subwf	___lldiv@dividend,f
  9438  07D5  0821               	movf	___lldiv@divisor+1,w
  9439  07D6  1C03               	skipc
  9440  07D7  0F21               	incfsz	___lldiv@divisor+1,w
  9441  07D8  02A5               	subwf	___lldiv@dividend+1,f
  9442  07D9  0822               	movf	___lldiv@divisor+2,w
  9443  07DA  1C03               	skipc
  9444  07DB  0F22               	incfsz	___lldiv@divisor+2,w
  9445  07DC  02A6               	subwf	___lldiv@dividend+2,f
  9446  07DD  0823               	movf	___lldiv@divisor+3,w
  9447  07DE  1C03               	skipc
  9448  07DF  0F23               	incfsz	___lldiv@divisor+3,w
  9449  07E0  02A7               	subwf	___lldiv@dividend+3,f
  9450  07E1  1429               	bsf	___lldiv@quotient,0
  9451  07E2                     l2842:	
  9452  07E2  3001               	movlw	1
  9453  07E3                     u3785:	
  9454  07E3  1003               	clrc
  9455  07E4  0CA3               	rrf	___lldiv@divisor+3,f
  9456  07E5  0CA2               	rrf	___lldiv@divisor+2,f
  9457  07E6  0CA1               	rrf	___lldiv@divisor+1,f
  9458  07E7  0CA0               	rrf	___lldiv@divisor,f
  9459  07E8  3EFF               	addlw	-1
  9460  07E9  1D03               	skipz
  9461  07EA  2FE3               	goto	u3785
  9462  07EB  3001               	movlw	1
  9463  07EC  02AD               	subwf	___lldiv@counter,f
  9464  07ED  1D03               	btfss	3,2
  9465  07EE  2FBA               	goto	l2834
  9466  07EF                     l2846:	
  9467  07EF  082C               	movf	___lldiv@quotient+3,w
  9468  07F0  00A3               	movwf	?___lldiv+3
  9469  07F1  082B               	movf	___lldiv@quotient+2,w
  9470  07F2  00A2               	movwf	?___lldiv+2
  9471  07F3  082A               	movf	___lldiv@quotient+1,w
  9472  07F4  00A1               	movwf	?___lldiv+1
  9473  07F5  0829               	movf	___lldiv@quotient,w
  9474  07F6  00A0               	movwf	?___lldiv
  9475  07F7  0008               	return
  9476  07F8                     __end_of___lldiv:	
  9477                           
  9478                           	psect	text32
  9479  1E11                     __ptext32:	
  9480 ;; *************** function ___fttol *****************
  9481 ;; Defined at:
  9482 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;  f1              3   45[BANK0 ] float 
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  lval            4   54[BANK0 ] unsigned long 
  9487 ;;  exp1            1   58[BANK0 ] unsigned char 
  9488 ;;  sign1           1   53[BANK0 ] unsigned char 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  4   45[BANK0 ] long 
  9491 ;; Registers used:
  9492 ;;		wreg, status,2, status,0
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9498 ;;      Params:         0       4       0       0       0
  9499 ;;      Locals:         0       6       0       0       0
  9500 ;;      Temps:          0       4       0       0       0
  9501 ;;      Totals:         0      14       0       0       0
  9502 ;;Total ram usage:       14 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    2
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_stopWatch
  9509 ;;		_sprintf
  9510 ;;		_currentTime
  9511 ;; This function uses a non-reentrant model
  9512 ;;
  9513                           
  9514                           
  9515                           ;psect for function ___fttol
  9516  1E11                     ___fttol:	
  9517                           
  9518                           ;incstack = 0
  9519                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9520  1E11  1283               	bcf	3,5	;RP0=0, select bank0
  9521  1E12  1303               	bcf	3,6	;RP1=0, select bank0
  9522  1E13  084D               	movf	___fttol@f1,w
  9523  1E14  00D1               	movwf	??___fttol
  9524  1E15  084E               	movf	___fttol@f1+1,w
  9525  1E16  00D2               	movwf	??___fttol+1
  9526  1E17  084F               	movf	___fttol@f1+2,w
  9527  1E18  00D3               	movwf	??___fttol+2
  9528  1E19  1003               	clrc
  9529  1E1A  0D52               	rlf	??___fttol+1,w
  9530  1E1B  0D53               	rlf	??___fttol+2,w
  9531  1E1C  00D4               	movwf	??___fttol+3
  9532  1E1D  0854               	movf	??___fttol+3,w
  9533  1E1E  00DA               	movwf	___fttol@exp1
  9534  1E1F  085A               	movf	___fttol@exp1,w
  9535  1E20  1D03               	btfss	3,2
  9536  1E21  2E2B               	goto	l2790
  9537  1E22  3000               	movlw	0
  9538  1E23  00D0               	movwf	?___fttol+3
  9539  1E24  3000               	movlw	0
  9540  1E25  00CF               	movwf	?___fttol+2
  9541  1E26  3000               	movlw	0
  9542  1E27  00CE               	movwf	?___fttol+1
  9543  1E28  3000               	movlw	0
  9544  1E29  00CD               	movwf	?___fttol
  9545  1E2A  0008               	return
  9546  1E2B                     l2790:	
  9547  1E2B  084D               	movf	___fttol@f1,w
  9548  1E2C  00D1               	movwf	??___fttol
  9549  1E2D  084E               	movf	___fttol@f1+1,w
  9550  1E2E  00D2               	movwf	??___fttol+1
  9551  1E2F  084F               	movf	___fttol@f1+2,w
  9552  1E30  00D3               	movwf	??___fttol+2
  9553  1E31  3017               	movlw	23
  9554  1E32                     u3645:	
  9555  1E32  1003               	clrc
  9556  1E33  0CD3               	rrf	??___fttol+2,f
  9557  1E34  0CD2               	rrf	??___fttol+1,f
  9558  1E35  0CD1               	rrf	??___fttol,f
  9559  1E36  3EFF               	addlw	-1
  9560  1E37  1D03               	skipz
  9561  1E38  2E32               	goto	u3645
  9562  1E39  0851               	movf	??___fttol,w
  9563  1E3A  00D4               	movwf	??___fttol+3
  9564  1E3B  0854               	movf	??___fttol+3,w
  9565  1E3C  00D5               	movwf	___fttol@sign1
  9566  1E3D  17CE               	bsf	___fttol@f1+1,7
  9567  1E3E  30FF               	movlw	255
  9568  1E3F  05CD               	andwf	___fttol@f1,f
  9569  1E40  30FF               	movlw	255
  9570  1E41  05CE               	andwf	___fttol@f1+1,f
  9571  1E42  3000               	movlw	0
  9572  1E43  05CF               	andwf	___fttol@f1+2,f
  9573  1E44  084D               	movf	___fttol@f1,w
  9574  1E45  00D6               	movwf	___fttol@lval
  9575  1E46  084E               	movf	___fttol@f1+1,w
  9576  1E47  00D7               	movwf	___fttol@lval+1
  9577  1E48  084F               	movf	___fttol@f1+2,w
  9578  1E49  00D8               	movwf	___fttol@lval+2
  9579  1E4A  01D9               	clrf	___fttol@lval+3
  9580  1E4B  308E               	movlw	142
  9581  1E4C  02DA               	subwf	___fttol@exp1,f
  9582  1E4D  1FDA               	btfss	___fttol@exp1,7
  9583  1E4E  2E6D               	goto	l2810
  9584  1E4F  085A               	movf	___fttol@exp1,w
  9585  1E50  3A80               	xorlw	128
  9586  1E51  3E8F               	addlw	143
  9587  1E52  1803               	skipnc
  9588  1E53  2E5D               	goto	l2808
  9589  1E54  3000               	movlw	0
  9590  1E55  00D0               	movwf	?___fttol+3
  9591  1E56  3000               	movlw	0
  9592  1E57  00CF               	movwf	?___fttol+2
  9593  1E58  3000               	movlw	0
  9594  1E59  00CE               	movwf	?___fttol+1
  9595  1E5A  3000               	movlw	0
  9596  1E5B  00CD               	movwf	?___fttol
  9597  1E5C  0008               	return
  9598  1E5D                     l2808:	
  9599  1E5D  3001               	movlw	1
  9600  1E5E                     u3675:	
  9601  1E5E  1003               	clrc
  9602  1E5F  0CD9               	rrf	___fttol@lval+3,f
  9603  1E60  0CD8               	rrf	___fttol@lval+2,f
  9604  1E61  0CD7               	rrf	___fttol@lval+1,f
  9605  1E62  0CD6               	rrf	___fttol@lval,f
  9606  1E63  3EFF               	addlw	-1
  9607  1E64  1D03               	skipz
  9608  1E65  2E5E               	goto	u3675
  9609  1E66  3001               	movlw	1
  9610  1E67  00D1               	movwf	??___fttol
  9611  1E68  0851               	movf	??___fttol,w
  9612  1E69  07DA               	addwf	___fttol@exp1,f
  9613  1E6A  1903               	btfsc	3,2
  9614  1E6B  2E88               	goto	l2818
  9615  1E6C  2E5D               	goto	l2808
  9616  1E6D                     l2810:	
  9617  1E6D  3018               	movlw	24
  9618  1E6E  025A               	subwf	___fttol@exp1,w
  9619  1E6F  1C03               	skipc
  9620  1E70  2E85               	goto	l751
  9621  1E71  3000               	movlw	0
  9622  1E72  00D0               	movwf	?___fttol+3
  9623  1E73  3000               	movlw	0
  9624  1E74  00CF               	movwf	?___fttol+2
  9625  1E75  3000               	movlw	0
  9626  1E76  00CE               	movwf	?___fttol+1
  9627  1E77  3000               	movlw	0
  9628  1E78  00CD               	movwf	?___fttol
  9629  1E79  0008               	return
  9630  1E7A                     l2816:	
  9631  1E7A  3001               	movlw	1
  9632  1E7B  00D1               	movwf	??___fttol
  9633  1E7C                     u3705:	
  9634  1E7C  1003               	clrc
  9635  1E7D  0DD6               	rlf	___fttol@lval,f
  9636  1E7E  0DD7               	rlf	___fttol@lval+1,f
  9637  1E7F  0DD8               	rlf	___fttol@lval+2,f
  9638  1E80  0DD9               	rlf	___fttol@lval+3,f
  9639  1E81  0BD1               	decfsz	??___fttol,f
  9640  1E82  2E7C               	goto	u3705
  9641  1E83  3001               	movlw	1
  9642  1E84  02DA               	subwf	___fttol@exp1,f
  9643  1E85                     l751:	
  9644  1E85  085A               	movf	___fttol@exp1,w
  9645  1E86  1D03               	btfss	3,2
  9646  1E87  2E7A               	goto	l2816
  9647  1E88                     l2818:	
  9648  1E88  0855               	movf	___fttol@sign1,w
  9649  1E89  1903               	btfsc	3,2
  9650  1E8A  2E96               	goto	l2822
  9651  1E8B  09D6               	comf	___fttol@lval,f
  9652  1E8C  09D7               	comf	___fttol@lval+1,f
  9653  1E8D  09D8               	comf	___fttol@lval+2,f
  9654  1E8E  09D9               	comf	___fttol@lval+3,f
  9655  1E8F  0AD6               	incf	___fttol@lval,f
  9656  1E90  1903               	skipnz
  9657  1E91  0AD7               	incf	___fttol@lval+1,f
  9658  1E92  1903               	skipnz
  9659  1E93  0AD8               	incf	___fttol@lval+2,f
  9660  1E94  1903               	skipnz
  9661  1E95  0AD9               	incf	___fttol@lval+3,f
  9662  1E96                     l2822:	
  9663  1E96  0859               	movf	___fttol@lval+3,w
  9664  1E97  00D0               	movwf	?___fttol+3
  9665  1E98  0858               	movf	___fttol@lval+2,w
  9666  1E99  00CF               	movwf	?___fttol+2
  9667  1E9A  0857               	movf	___fttol@lval+1,w
  9668  1E9B  00CE               	movwf	?___fttol+1
  9669  1E9C  0856               	movf	___fttol@lval,w
  9670  1E9D  00CD               	movwf	?___fttol
  9671  1E9E  0008               	return
  9672  1E9F                     __end_of___fttol:	
  9673                           
  9674                           	psect	text33
  9675  1974                     __ptext33:	
  9676 ;; *************** function ___ftsub *****************
  9677 ;; Defined at:
  9678 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  f2              3   65[BANK0 ] float 
  9681 ;;  f1              3   68[BANK0 ] float 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;		None
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  3   65[BANK0 ] float 
  9686 ;; Registers used:
  9687 ;;		wreg, status,2, status,0, pclath, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9693 ;;      Params:         0       6       0       0       0
  9694 ;;      Locals:         0       0       0       0       0
  9695 ;;      Temps:          0       0       0       0       0
  9696 ;;      Totals:         0       6       0       0       0
  9697 ;;Total ram usage:        6 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    4
  9700 ;; This function calls:
  9701 ;;		___ftadd
  9702 ;; This function is called by:
  9703 ;;		_sprintf
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function ___ftsub
  9709  1974                     ___ftsub:	
  9710                           
  9711                           ;incstack = 0
  9712                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9713  1974  1283               	bcf	3,5	;RP0=0, select bank0
  9714  1975  1303               	bcf	3,6	;RP1=0, select bank0
  9715  1976  0863               	movf	___ftsub@f2+2,w
  9716  1977  0462               	iorwf	___ftsub@f2+1,w
  9717  1978  0461               	iorwf	___ftsub@f2,w
  9718  1979  1903               	skipnz
  9719  197A  297D               	goto	l2780
  9720  197B  3080               	movlw	128
  9721  197C  06E3               	xorwf	___ftsub@f2+2,f
  9722  197D                     l2780:	
  9723  197D  0864               	movf	___ftsub@f1,w
  9724  197E  00D4               	movwf	___ftadd@f1
  9725  197F  0865               	movf	___ftsub@f1+1,w
  9726  1980  00D5               	movwf	___ftadd@f1+1
  9727  1981  0866               	movf	___ftsub@f1+2,w
  9728  1982  00D6               	movwf	___ftadd@f1+2
  9729  1983  0861               	movf	___ftsub@f2,w
  9730  1984  00D7               	movwf	___ftadd@f2
  9731  1985  0862               	movf	___ftsub@f2+1,w
  9732  1986  00D8               	movwf	___ftadd@f2+1
  9733  1987  0863               	movf	___ftsub@f2+2,w
  9734  1988  00D9               	movwf	___ftadd@f2+2
  9735  1989  160A  118A  241E   	fcall	___ftadd
  9736  198C  1283               	bcf	3,5	;RP0=0, select bank0
  9737  198D  1303               	bcf	3,6	;RP1=0, select bank0
  9738  198E  0854               	movf	?___ftadd,w
  9739  198F  00E1               	movwf	?___ftsub
  9740  1990  0855               	movf	?___ftadd+1,w
  9741  1991  00E2               	movwf	?___ftsub+1
  9742  1992  0856               	movf	?___ftadd+2,w
  9743  1993  00E3               	movwf	?___ftsub+2
  9744  1994  0008               	return
  9745  1995                     __end_of___ftsub:	
  9746                           
  9747                           	psect	text34
  9748  141E                     __ptext34:	
  9749 ;; *************** function ___ftadd *****************
  9750 ;; Defined at:
  9751 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;  f1              3   52[BANK0 ] float 
  9754 ;;  f2              3   55[BANK0 ] float 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  exp1            1   64[BANK0 ] unsigned char 
  9757 ;;  exp2            1   63[BANK0 ] unsigned char 
  9758 ;;  sign            1   62[BANK0 ] unsigned char 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  3   52[BANK0 ] float 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0, pclath, cstack
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9768 ;;      Params:         0       6       0       0       0
  9769 ;;      Locals:         0       3       0       0       0
  9770 ;;      Temps:          0       4       0       0       0
  9771 ;;      Totals:         0      13       0       0       0
  9772 ;;Total ram usage:       13 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    3
  9775 ;; This function calls:
  9776 ;;		___ftpack
  9777 ;; This function is called by:
  9778 ;;		_displayLCD
  9779 ;;		_sprintf
  9780 ;;		___ftsub
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           
  9785                           ;psect for function ___ftadd
  9786  141E                     ___ftadd:	
  9787                           
  9788                           ;incstack = 0
  9789                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9790  141E  1283               	bcf	3,5	;RP0=0, select bank0
  9791  141F  1303               	bcf	3,6	;RP1=0, select bank0
  9792  1420  0854               	movf	___ftadd@f1,w
  9793  1421  00DA               	movwf	??___ftadd
  9794  1422  0855               	movf	___ftadd@f1+1,w
  9795  1423  00DB               	movwf	??___ftadd+1
  9796  1424  0856               	movf	___ftadd@f1+2,w
  9797  1425  00DC               	movwf	??___ftadd+2
  9798  1426  1003               	clrc
  9799  1427  0D5B               	rlf	??___ftadd+1,w
  9800  1428  0D5C               	rlf	??___ftadd+2,w
  9801  1429  00DD               	movwf	??___ftadd+3
  9802  142A  085D               	movf	??___ftadd+3,w
  9803  142B  00E0               	movwf	___ftadd@exp1
  9804  142C  0857               	movf	___ftadd@f2,w
  9805  142D  00DA               	movwf	??___ftadd
  9806  142E  0858               	movf	___ftadd@f2+1,w
  9807  142F  00DB               	movwf	??___ftadd+1
  9808  1430  0859               	movf	___ftadd@f2+2,w
  9809  1431  00DC               	movwf	??___ftadd+2
  9810  1432  1003               	clrc
  9811  1433  0D5B               	rlf	??___ftadd+1,w
  9812  1434  0D5C               	rlf	??___ftadd+2,w
  9813  1435  00DD               	movwf	??___ftadd+3
  9814  1436  085D               	movf	??___ftadd+3,w
  9815  1437  00DF               	movwf	___ftadd@exp2
  9816  1438  0860               	movf	___ftadd@exp1,w
  9817  1439  1903               	btfsc	3,2
  9818  143A  2C47               	goto	l2358
  9819  143B  085F               	movf	___ftadd@exp2,w
  9820  143C  0260               	subwf	___ftadd@exp1,w
  9821  143D  1803               	skipnc
  9822  143E  2C4E               	goto	l2362
  9823  143F  0360               	decf	___ftadd@exp1,w
  9824  1440  3AFF               	xorlw	255
  9825  1441  075F               	addwf	___ftadd@exp2,w
  9826  1442  00DA               	movwf	??___ftadd
  9827  1443  3019               	movlw	25
  9828  1444  025A               	subwf	??___ftadd,w
  9829  1445  1C03               	skipc
  9830  1446  2C4E               	goto	l2362
  9831  1447                     l2358:	
  9832  1447  0857               	movf	___ftadd@f2,w
  9833  1448  00D4               	movwf	?___ftadd
  9834  1449  0858               	movf	___ftadd@f2+1,w
  9835  144A  00D5               	movwf	?___ftadd+1
  9836  144B  0859               	movf	___ftadd@f2+2,w
  9837  144C  00D6               	movwf	?___ftadd+2
  9838  144D  0008               	return
  9839  144E                     l2362:	
  9840  144E  085F               	movf	___ftadd@exp2,w
  9841  144F  1903               	btfsc	3,2
  9842  1450  0008               	return
  9843  1451  0860               	movf	___ftadd@exp1,w
  9844  1452  025F               	subwf	___ftadd@exp2,w
  9845  1453  1803               	skipnc
  9846  1454  2C5D               	goto	l2368
  9847  1455  035F               	decf	___ftadd@exp2,w
  9848  1456  3AFF               	xorlw	255
  9849  1457  0760               	addwf	___ftadd@exp1,w
  9850  1458  00DA               	movwf	??___ftadd
  9851  1459  3019               	movlw	25
  9852  145A  025A               	subwf	??___ftadd,w
  9853  145B  1803               	btfsc	3,0
  9854  145C  0008               	return
  9855  145D                     l2368:	
  9856  145D  3006               	movlw	6
  9857  145E  00DA               	movwf	??___ftadd
  9858  145F  085A               	movf	??___ftadd,w
  9859  1460  00DE               	movwf	___ftadd@sign
  9860  1461  1BD6               	btfsc	___ftadd@f1+2,7
  9861  1462  17DE               	bsf	___ftadd@sign,7
  9862  1463  1BD9               	btfsc	___ftadd@f2+2,7
  9863  1464  175E               	bsf	___ftadd@sign,6
  9864  1465  17D5               	bsf	___ftadd@f1+1,7
  9865  1466  30FF               	movlw	255
  9866  1467  05D4               	andwf	___ftadd@f1,f
  9867  1468  30FF               	movlw	255
  9868  1469  05D5               	andwf	___ftadd@f1+1,f
  9869  146A  3000               	movlw	0
  9870  146B  05D6               	andwf	___ftadd@f1+2,f
  9871  146C  17D8               	bsf	___ftadd@f2+1,7
  9872  146D  30FF               	movlw	255
  9873  146E  05D7               	andwf	___ftadd@f2,f
  9874  146F  30FF               	movlw	255
  9875  1470  05D8               	andwf	___ftadd@f2+1,f
  9876  1471  3000               	movlw	0
  9877  1472  05D9               	andwf	___ftadd@f2+2,f
  9878  1473  085F               	movf	___ftadd@exp2,w
  9879  1474  0260               	subwf	___ftadd@exp1,w
  9880  1475  1803               	skipnc
  9881  1476  2C9D               	goto	l2390
  9882  1477                     l2380:	
  9883  1477  3001               	movlw	1
  9884  1478                     u2785:	
  9885  1478  1003               	clrc
  9886  1479  0DD7               	rlf	___ftadd@f2,f
  9887  147A  0DD8               	rlf	___ftadd@f2+1,f
  9888  147B  0DD9               	rlf	___ftadd@f2+2,f
  9889  147C  3EFF               	addlw	-1
  9890  147D  1D03               	skipz
  9891  147E  2C78               	goto	u2785
  9892  147F  3001               	movlw	1
  9893  1480  02DF               	subwf	___ftadd@exp2,f
  9894  1481  085F               	movf	___ftadd@exp2,w
  9895  1482  0660               	xorwf	___ftadd@exp1,w
  9896  1483  1903               	skipnz
  9897  1484  2C98               	goto	l2388
  9898  1485  3001               	movlw	1
  9899  1486  02DE               	subwf	___ftadd@sign,f
  9900  1487  085E               	movf	___ftadd@sign,w
  9901  1488  3907               	andlw	7
  9902  1489  1903               	btfsc	3,2
  9903  148A  2C98               	goto	l2388
  9904  148B  2C77               	goto	l2380
  9905  148C                     l2386:	
  9906  148C  3001               	movlw	1
  9907  148D                     u2815:	
  9908  148D  1003               	clrc
  9909  148E  0CD6               	rrf	___ftadd@f1+2,f
  9910  148F  0CD5               	rrf	___ftadd@f1+1,f
  9911  1490  0CD4               	rrf	___ftadd@f1,f
  9912  1491  3EFF               	addlw	-1
  9913  1492  1D03               	skipz
  9914  1493  2C8D               	goto	u2815
  9915  1494  3001               	movlw	1
  9916  1495  00DA               	movwf	??___ftadd
  9917  1496  085A               	movf	??___ftadd,w
  9918  1497  07E0               	addwf	___ftadd@exp1,f
  9919  1498                     l2388:	
  9920  1498  0860               	movf	___ftadd@exp1,w
  9921  1499  065F               	xorwf	___ftadd@exp2,w
  9922  149A  1903               	btfsc	3,2
  9923  149B  2CC6               	goto	l674
  9924  149C  2C8C               	goto	l2386
  9925  149D                     l2390:	
  9926  149D  0860               	movf	___ftadd@exp1,w
  9927  149E  025F               	subwf	___ftadd@exp2,w
  9928  149F  1803               	skipnc
  9929  14A0  2CC6               	goto	l674
  9930  14A1                     l2392:	
  9931  14A1  3001               	movlw	1
  9932  14A2                     u2845:	
  9933  14A2  1003               	clrc
  9934  14A3  0DD4               	rlf	___ftadd@f1,f
  9935  14A4  0DD5               	rlf	___ftadd@f1+1,f
  9936  14A5  0DD6               	rlf	___ftadd@f1+2,f
  9937  14A6  3EFF               	addlw	-1
  9938  14A7  1D03               	skipz
  9939  14A8  2CA2               	goto	u2845
  9940  14A9  3001               	movlw	1
  9941  14AA  02E0               	subwf	___ftadd@exp1,f
  9942  14AB  085F               	movf	___ftadd@exp2,w
  9943  14AC  0660               	xorwf	___ftadd@exp1,w
  9944  14AD  1903               	skipnz
  9945  14AE  2CC2               	goto	l2400
  9946  14AF  3001               	movlw	1
  9947  14B0  02DE               	subwf	___ftadd@sign,f
  9948  14B1  085E               	movf	___ftadd@sign,w
  9949  14B2  3907               	andlw	7
  9950  14B3  1903               	btfsc	3,2
  9951  14B4  2CC2               	goto	l2400
  9952  14B5  2CA1               	goto	l2392
  9953  14B6                     l2398:	
  9954  14B6  3001               	movlw	1
  9955  14B7                     u2875:	
  9956  14B7  1003               	clrc
  9957  14B8  0CD9               	rrf	___ftadd@f2+2,f
  9958  14B9  0CD8               	rrf	___ftadd@f2+1,f
  9959  14BA  0CD7               	rrf	___ftadd@f2,f
  9960  14BB  3EFF               	addlw	-1
  9961  14BC  1D03               	skipz
  9962  14BD  2CB7               	goto	u2875
  9963  14BE  3001               	movlw	1
  9964  14BF  00DA               	movwf	??___ftadd
  9965  14C0  085A               	movf	??___ftadd,w
  9966  14C1  07DF               	addwf	___ftadd@exp2,f
  9967  14C2                     l2400:	
  9968  14C2  0860               	movf	___ftadd@exp1,w
  9969  14C3  065F               	xorwf	___ftadd@exp2,w
  9970  14C4  1D03               	skipz
  9971  14C5  2CB6               	goto	l2398
  9972  14C6                     l674:	
  9973  14C6  1FDE               	btfss	___ftadd@sign,7
  9974  14C7  2CD8               	goto	l2404
  9975  14C8  30FF               	movlw	255
  9976  14C9  06D4               	xorwf	___ftadd@f1,f
  9977  14CA  30FF               	movlw	255
  9978  14CB  06D5               	xorwf	___ftadd@f1+1,f
  9979  14CC  30FF               	movlw	255
  9980  14CD  06D6               	xorwf	___ftadd@f1+2,f
  9981  14CE  3001               	movlw	1
  9982  14CF  07D4               	addwf	___ftadd@f1,f
  9983  14D0  3000               	movlw	0
  9984  14D1  1803               	skipnc
  9985  14D2  3001               	movlw	1
  9986  14D3  07D5               	addwf	___ftadd@f1+1,f
  9987  14D4  3000               	movlw	0
  9988  14D5  1803               	skipnc
  9989  14D6  3001               	movlw	1
  9990  14D7  07D6               	addwf	___ftadd@f1+2,f
  9991  14D8                     l2404:	
  9992  14D8  1F5E               	btfss	___ftadd@sign,6
  9993  14D9  2CEA               	goto	l2408
  9994  14DA  30FF               	movlw	255
  9995  14DB  06D7               	xorwf	___ftadd@f2,f
  9996  14DC  30FF               	movlw	255
  9997  14DD  06D8               	xorwf	___ftadd@f2+1,f
  9998  14DE  30FF               	movlw	255
  9999  14DF  06D9               	xorwf	___ftadd@f2+2,f
 10000  14E0  3001               	movlw	1
 10001  14E1  07D7               	addwf	___ftadd@f2,f
 10002  14E2  3000               	movlw	0
 10003  14E3  1803               	skipnc
 10004  14E4  3001               	movlw	1
 10005  14E5  07D8               	addwf	___ftadd@f2+1,f
 10006  14E6  3000               	movlw	0
 10007  14E7  1803               	skipnc
 10008  14E8  3001               	movlw	1
 10009  14E9  07D9               	addwf	___ftadd@f2+2,f
 10010  14EA                     l2408:	
 10011  14EA  01DE               	clrf	___ftadd@sign
 10012  14EB  0854               	movf	___ftadd@f1,w
 10013  14EC  07D7               	addwf	___ftadd@f2,f
 10014  14ED  0855               	movf	___ftadd@f1+1,w
 10015  14EE  1103               	clrz
 10016  14EF  1803               	skipnc
 10017  14F0  0A55               	incf	___ftadd@f1+1,w
 10018  14F1  1D03               	btfss	3,2
 10019  14F2  07D8               	addwf	___ftadd@f2+1,f
 10020  14F3  0856               	movf	___ftadd@f1+2,w
 10021  14F4  1103               	clrz
 10022  14F5  1803               	skipnc
 10023  14F6  0A56               	incf	___ftadd@f1+2,w
 10024  14F7  1D03               	btfss	3,2
 10025  14F8  07D9               	addwf	___ftadd@f2+2,f
 10026  14F9  1FD9               	btfss	___ftadd@f2+2,7
 10027  14FA  2D0D               	goto	l2418
 10028  14FB  30FF               	movlw	255
 10029  14FC  06D7               	xorwf	___ftadd@f2,f
 10030  14FD  30FF               	movlw	255
 10031  14FE  06D8               	xorwf	___ftadd@f2+1,f
 10032  14FF  30FF               	movlw	255
 10033  1500  06D9               	xorwf	___ftadd@f2+2,f
 10034  1501  3001               	movlw	1
 10035  1502  07D7               	addwf	___ftadd@f2,f
 10036  1503  3000               	movlw	0
 10037  1504  1803               	skipnc
 10038  1505  3001               	movlw	1
 10039  1506  07D8               	addwf	___ftadd@f2+1,f
 10040  1507  3000               	movlw	0
 10041  1508  1803               	skipnc
 10042  1509  3001               	movlw	1
 10043  150A  07D9               	addwf	___ftadd@f2+2,f
 10044  150B  01DE               	clrf	___ftadd@sign
 10045  150C  0ADE               	incf	___ftadd@sign,f
 10046  150D                     l2418:	
 10047  150D  0857               	movf	___ftadd@f2,w
 10048  150E  00A0               	movwf	___ftpack@arg
 10049  150F  0858               	movf	___ftadd@f2+1,w
 10050  1510  00A1               	movwf	___ftpack@arg+1
 10051  1511  0859               	movf	___ftadd@f2+2,w
 10052  1512  00A2               	movwf	___ftpack@arg+2
 10053  1513  0860               	movf	___ftadd@exp1,w
 10054  1514  00DA               	movwf	??___ftadd
 10055  1515  085A               	movf	??___ftadd,w
 10056  1516  00A3               	movwf	___ftpack@exp
 10057  1517  085E               	movf	___ftadd@sign,w
 10058  1518  00DB               	movwf	??___ftadd+1
 10059  1519  085B               	movf	??___ftadd+1,w
 10060  151A  00A4               	movwf	___ftpack@sign
 10061  151B  160A  158A  2519   	fcall	___ftpack
 10062  151E  1283               	bcf	3,5	;RP0=0, select bank0
 10063  151F  1303               	bcf	3,6	;RP1=0, select bank0
 10064  1520  0820               	movf	?___ftpack,w
 10065  1521  00D4               	movwf	?___ftadd
 10066  1522  0821               	movf	?___ftpack+1,w
 10067  1523  00D5               	movwf	?___ftadd+1
 10068  1524  0822               	movf	?___ftpack+2,w
 10069  1525  00D6               	movwf	?___ftadd+2
 10070  1526  0008               	return
 10071  1527                     __end_of___ftadd:	
 10072                           
 10073                           	psect	text35
 10074  1D19                     __ptext35:	
 10075 ;; *************** function ___ftpack *****************
 10076 ;; Defined at:
 10077 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;  arg             3    0[BANK0 ] unsigned um
 10080 ;;  exp             1    3[BANK0 ] unsigned char 
 10081 ;;  sign            1    4[BANK0 ] unsigned char 
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;		None
 10084 ;; Return value:  Size  Location     Type
 10085 ;;                  3    0[BANK0 ] float 
 10086 ;; Registers used:
 10087 ;;		wreg, status,2, status,0
 10088 ;; Tracked objects:
 10089 ;;		On entry : 0/0
 10090 ;;		On exit  : 0/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10093 ;;      Params:         0       5       0       0       0
 10094 ;;      Locals:         0       0       0       0       0
 10095 ;;      Temps:          0       3       0       0       0
 10096 ;;      Totals:         0       8       0       0       0
 10097 ;;Total ram usage:        8 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:    2
 10100 ;; This function calls:
 10101 ;;		Nothing
 10102 ;; This function is called by:
 10103 ;;		___ftadd
 10104 ;;		___ftdiv
 10105 ;;		___ftmul
 10106 ;;		___lbtoft
 10107 ;;		___lltoft
 10108 ;;		___lwtoft
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function ___ftpack
 10114  1D19                     ___ftpack:	
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10118  1D19  1283               	bcf	3,5	;RP0=0, select bank0
 10119  1D1A  1303               	bcf	3,6	;RP1=0, select bank0
 10120  1D1B  0823               	movf	___ftpack@exp,w
 10121  1D1C  1903               	btfsc	3,2
 10122  1D1D  2D23               	goto	l2212
 10123  1D1E  0822               	movf	___ftpack@arg+2,w
 10124  1D1F  0421               	iorwf	___ftpack@arg+1,w
 10125  1D20  0420               	iorwf	___ftpack@arg,w
 10126  1D21  1D03               	skipz
 10127  1D22  2D36               	goto	l2218
 10128  1D23                     l2212:	
 10129  1D23  3000               	movlw	0
 10130  1D24  00A0               	movwf	?___ftpack
 10131  1D25  3000               	movlw	0
 10132  1D26  00A1               	movwf	?___ftpack+1
 10133  1D27  3000               	movlw	0
 10134  1D28  00A2               	movwf	?___ftpack+2
 10135  1D29  0008               	return
 10136  1D2A                     l2216:	
 10137  1D2A  3001               	movlw	1
 10138  1D2B  00A5               	movwf	??___ftpack
 10139  1D2C  0825               	movf	??___ftpack,w
 10140  1D2D  07A3               	addwf	___ftpack@exp,f
 10141  1D2E  3001               	movlw	1
 10142  1D2F                     u2345:	
 10143  1D2F  1003               	clrc
 10144  1D30  0CA2               	rrf	___ftpack@arg+2,f
 10145  1D31  0CA1               	rrf	___ftpack@arg+1,f
 10146  1D32  0CA0               	rrf	___ftpack@arg,f
 10147  1D33  3EFF               	addlw	-1
 10148  1D34  1D03               	skipz
 10149  1D35  2D2F               	goto	u2345
 10150  1D36                     l2218:	
 10151  1D36  30FE               	movlw	254
 10152  1D37  0522               	andwf	___ftpack@arg+2,w
 10153  1D38  1903               	btfsc	3,2
 10154  1D39  2D51               	goto	l643
 10155  1D3A  2D2A               	goto	l2216
 10156  1D3B                     l2220:	
 10157  1D3B  3001               	movlw	1
 10158  1D3C  00A5               	movwf	??___ftpack
 10159  1D3D  0825               	movf	??___ftpack,w
 10160  1D3E  07A3               	addwf	___ftpack@exp,f
 10161  1D3F  3001               	movlw	1
 10162  1D40  07A0               	addwf	___ftpack@arg,f
 10163  1D41  3000               	movlw	0
 10164  1D42  1803               	skipnc
 10165  1D43  3001               	movlw	1
 10166  1D44  07A1               	addwf	___ftpack@arg+1,f
 10167  1D45  3000               	movlw	0
 10168  1D46  1803               	skipnc
 10169  1D47  3001               	movlw	1
 10170  1D48  07A2               	addwf	___ftpack@arg+2,f
 10171  1D49  3001               	movlw	1
 10172  1D4A                     u2365:	
 10173  1D4A  1003               	clrc
 10174  1D4B  0CA2               	rrf	___ftpack@arg+2,f
 10175  1D4C  0CA1               	rrf	___ftpack@arg+1,f
 10176  1D4D  0CA0               	rrf	___ftpack@arg,f
 10177  1D4E  3EFF               	addlw	-1
 10178  1D4F  1D03               	skipz
 10179  1D50  2D4A               	goto	u2365
 10180  1D51                     l643:	
 10181  1D51  30FF               	movlw	255
 10182  1D52  0522               	andwf	___ftpack@arg+2,w
 10183  1D53  1903               	btfsc	3,2
 10184  1D54  2D64               	goto	l2228
 10185  1D55  2D3B               	goto	l2220
 10186  1D56                     l2230:	
 10187  1D56  3002               	movlw	2
 10188  1D57  0223               	subwf	___ftpack@exp,w
 10189  1D58  1C03               	btfss	3,0
 10190  1D59  2D66               	goto	l650
 10191  1D5A  3001               	movlw	1
 10192  1D5B  02A3               	subwf	___ftpack@exp,f
 10193  1D5C  3001               	movlw	1
 10194  1D5D                     u2385:	
 10195  1D5D  1003               	clrc
 10196  1D5E  0DA0               	rlf	___ftpack@arg,f
 10197  1D5F  0DA1               	rlf	___ftpack@arg+1,f
 10198  1D60  0DA2               	rlf	___ftpack@arg+2,f
 10199  1D61  3EFF               	addlw	-1
 10200  1D62  1D03               	skipz
 10201  1D63  2D5D               	goto	u2385
 10202  1D64                     l2228:	
 10203  1D64  1FA1               	btfss	___ftpack@arg+1,7
 10204  1D65  2D56               	goto	l2230
 10205  1D66                     l650:	
 10206  1D66  1823               	btfsc	___ftpack@exp,0
 10207  1D67  2D6E               	goto	l651
 10208  1D68  30FF               	movlw	255
 10209  1D69  05A0               	andwf	___ftpack@arg,f
 10210  1D6A  307F               	movlw	127
 10211  1D6B  05A1               	andwf	___ftpack@arg+1,f
 10212  1D6C  30FF               	movlw	255
 10213  1D6D  05A2               	andwf	___ftpack@arg+2,f
 10214  1D6E                     l651:	
 10215  1D6E  1003               	clrc
 10216  1D6F  0CA3               	rrf	___ftpack@exp,f
 10217  1D70  0823               	movf	___ftpack@exp,w
 10218  1D71  00A5               	movwf	??___ftpack
 10219  1D72  01A6               	clrf	??___ftpack+1
 10220  1D73  01A7               	clrf	??___ftpack+2
 10221  1D74  3010               	movlw	16
 10222  1D75                     u2425:	
 10223  1D75  1003               	clrc
 10224  1D76  0DA5               	rlf	??___ftpack,f
 10225  1D77  0DA6               	rlf	??___ftpack+1,f
 10226  1D78  0DA7               	rlf	??___ftpack+2,f
 10227  1D79  3EFF               	addlw	-1
 10228  1D7A  1D03               	skipz
 10229  1D7B  2D75               	goto	u2425
 10230  1D7C  0825               	movf	??___ftpack,w
 10231  1D7D  04A0               	iorwf	___ftpack@arg,f
 10232  1D7E  0826               	movf	??___ftpack+1,w
 10233  1D7F  04A1               	iorwf	___ftpack@arg+1,f
 10234  1D80  0827               	movf	??___ftpack+2,w
 10235  1D81  04A2               	iorwf	___ftpack@arg+2,f
 10236  1D82  0824               	movf	___ftpack@sign,w
 10237  1D83  1903               	btfsc	3,2
 10238  1D84  0008               	return
 10239  1D85  17A2               	bsf	___ftpack@arg+2,7
 10240  1D86  0008               	return
 10241  1D87                     __end_of___ftpack:	
 10242                           
 10243                           	psect	text36
 10244  18B1                     __ptext36:	
 10245 ;; *************** function ___ftneg *****************
 10246 ;; Defined at:
 10247 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;  f1              3    0[BANK0 ] float 
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;		None
 10252 ;; Return value:  Size  Location     Type
 10253 ;;                  3    0[BANK0 ] float 
 10254 ;; Registers used:
 10255 ;;		wreg
 10256 ;; Tracked objects:
 10257 ;;		On entry : 0/0
 10258 ;;		On exit  : 0/0
 10259 ;;		Unchanged: 0/0
 10260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10261 ;;      Params:         0       3       0       0       0
 10262 ;;      Locals:         0       0       0       0       0
 10263 ;;      Temps:          0       0       0       0       0
 10264 ;;      Totals:         0       3       0       0       0
 10265 ;;Total ram usage:        3 bytes
 10266 ;; Hardware stack levels used:    1
 10267 ;; Hardware stack levels required when called:    2
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		_displayLCD
 10272 ;;		_sprintf
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           
 10277                           ;psect for function ___ftneg
 10278  18B1                     ___ftneg:	
 10279                           
 10280                           ;incstack = 0
 10281                           ; Regs used in ___ftneg: [wreg]
 10282  18B1  1283               	bcf	3,5	;RP0=0, select bank0
 10283  18B2  1303               	bcf	3,6	;RP1=0, select bank0
 10284  18B3  0822               	movf	___ftneg@f1+2,w
 10285  18B4  0421               	iorwf	___ftneg@f1+1,w
 10286  18B5  0420               	iorwf	___ftneg@f1,w
 10287  18B6  1903               	skipnz
 10288  18B7  0008               	return
 10289  18B8  3080               	movlw	128
 10290  18B9  06A2               	xorwf	___ftneg@f1+2,f
 10291  18BA  0008               	return
 10292  18BB                     __end_of___ftneg:	
 10293                           
 10294                           	psect	text37
 10295  1CBA                     __ptext37:	
 10296 ;; *************** function ___ftge *****************
 10297 ;; Defined at:
 10298 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  ff1             3    0[BANK0 ] float 
 10301 ;;  ff2             3    3[BANK0 ] float 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;		None
 10304 ;; Return value:  Size  Location     Type
 10305 ;;		None               void
 10306 ;; Registers used:
 10307 ;;		wreg, status,2, status,0
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10313 ;;      Params:         0       6       0       0       0
 10314 ;;      Locals:         0       0       0       0       0
 10315 ;;      Temps:          0       6       0       0       0
 10316 ;;      Totals:         0      12       0       0       0
 10317 ;;Total ram usage:       12 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    2
 10320 ;; This function calls:
 10321 ;;		Nothing
 10322 ;; This function is called by:
 10323 ;;		_sprintf
 10324 ;;		_checkCurrent
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function ___ftge
 10330  1CBA                     ___ftge:	
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10334  1CBA  1283               	bcf	3,5	;RP0=0, select bank0
 10335  1CBB  1303               	bcf	3,6	;RP1=0, select bank0
 10336  1CBC  1FA2               	btfss	___ftge@ff1+2,7
 10337  1CBD  2CE3               	goto	l2752
 10338  1CBE  3000               	movlw	0
 10339  1CBF  00A6               	movwf	??___ftge
 10340  1CC0  3000               	movlw	0
 10341  1CC1  00A7               	movwf	??___ftge+1
 10342  1CC2  3080               	movlw	128
 10343  1CC3  00A8               	movwf	??___ftge+2
 10344  1CC4  0920               	comf	___ftge@ff1,w
 10345  1CC5  00A9               	movwf	??___ftge+3
 10346  1CC6  0921               	comf	___ftge@ff1+1,w
 10347  1CC7  00AA               	movwf	??___ftge+4
 10348  1CC8  0922               	comf	___ftge@ff1+2,w
 10349  1CC9  00AB               	movwf	??___ftge+5
 10350  1CCA  0AA9               	incf	??___ftge+3,f
 10351  1CCB  1903               	skipnz
 10352  1CCC  0AAA               	incf	??___ftge+4,f
 10353  1CCD  1903               	skipnz
 10354  1CCE  0AAB               	incf	??___ftge+5,f
 10355  1CCF  0829               	movf	??___ftge+3,w
 10356  1CD0  07A6               	addwf	??___ftge,f
 10357  1CD1  082A               	movf	??___ftge+4,w
 10358  1CD2  1803               	skipnc
 10359  1CD3  0F2A               	incfsz	??___ftge+4,w
 10360  1CD4  2CD6               	goto	u3571
 10361  1CD5  2CD7               	goto	u3572
 10362  1CD6                     u3571:	
 10363  1CD6  07A7               	addwf	??___ftge+1,f
 10364  1CD7                     u3572:	
 10365  1CD7  082B               	movf	??___ftge+5,w
 10366  1CD8  1803               	skipnc
 10367  1CD9  0F2B               	incfsz	??___ftge+5,w
 10368  1CDA  2CDC               	goto	u3573
 10369  1CDB  2CDD               	goto	u3574
 10370  1CDC                     u3573:	
 10371  1CDC  07A8               	addwf	??___ftge+2,f
 10372  1CDD                     u3574:	
 10373  1CDD  0826               	movf	??___ftge,w
 10374  1CDE  00A0               	movwf	___ftge@ff1
 10375  1CDF  0827               	movf	??___ftge+1,w
 10376  1CE0  00A1               	movwf	___ftge@ff1+1
 10377  1CE1  0828               	movf	??___ftge+2,w
 10378  1CE2  00A2               	movwf	___ftge@ff1+2
 10379  1CE3                     l2752:	
 10380  1CE3  1FA5               	btfss	___ftge@ff2+2,7
 10381  1CE4  2D0A               	goto	l2756
 10382  1CE5  3000               	movlw	0
 10383  1CE6  00A6               	movwf	??___ftge
 10384  1CE7  3000               	movlw	0
 10385  1CE8  00A7               	movwf	??___ftge+1
 10386  1CE9  3080               	movlw	128
 10387  1CEA  00A8               	movwf	??___ftge+2
 10388  1CEB  0923               	comf	___ftge@ff2,w
 10389  1CEC  00A9               	movwf	??___ftge+3
 10390  1CED  0924               	comf	___ftge@ff2+1,w
 10391  1CEE  00AA               	movwf	??___ftge+4
 10392  1CEF  0925               	comf	___ftge@ff2+2,w
 10393  1CF0  00AB               	movwf	??___ftge+5
 10394  1CF1  0AA9               	incf	??___ftge+3,f
 10395  1CF2  1903               	skipnz
 10396  1CF3  0AAA               	incf	??___ftge+4,f
 10397  1CF4  1903               	skipnz
 10398  1CF5  0AAB               	incf	??___ftge+5,f
 10399  1CF6  0829               	movf	??___ftge+3,w
 10400  1CF7  07A6               	addwf	??___ftge,f
 10401  1CF8  082A               	movf	??___ftge+4,w
 10402  1CF9  1803               	skipnc
 10403  1CFA  0F2A               	incfsz	??___ftge+4,w
 10404  1CFB  2CFD               	goto	u3591
 10405  1CFC  2CFE               	goto	u3592
 10406  1CFD                     u3591:	
 10407  1CFD  07A7               	addwf	??___ftge+1,f
 10408  1CFE                     u3592:	
 10409  1CFE  082B               	movf	??___ftge+5,w
 10410  1CFF  1803               	skipnc
 10411  1D00  0F2B               	incfsz	??___ftge+5,w
 10412  1D01  2D03               	goto	u3593
 10413  1D02  2D04               	goto	u3594
 10414  1D03                     u3593:	
 10415  1D03  07A8               	addwf	??___ftge+2,f
 10416  1D04                     u3594:	
 10417  1D04  0826               	movf	??___ftge,w
 10418  1D05  00A3               	movwf	___ftge@ff2
 10419  1D06  0827               	movf	??___ftge+1,w
 10420  1D07  00A4               	movwf	___ftge@ff2+1
 10421  1D08  0828               	movf	??___ftge+2,w
 10422  1D09  00A5               	movwf	___ftge@ff2+2
 10423  1D0A                     l2756:	
 10424  1D0A  3080               	movlw	128
 10425  1D0B  06A2               	xorwf	___ftge@ff1+2,f
 10426  1D0C  3080               	movlw	128
 10427  1D0D  06A5               	xorwf	___ftge@ff2+2,f
 10428  1D0E  0825               	movf	___ftge@ff2+2,w
 10429  1D0F  0222               	subwf	___ftge@ff1+2,w
 10430  1D10  1D03               	skipz
 10431  1D11  0008               	return
 10432  1D12  0824               	movf	___ftge@ff2+1,w
 10433  1D13  0221               	subwf	___ftge@ff1+1,w
 10434  1D14  1D03               	skipz
 10435  1D15  0008               	return
 10436  1D16  0823               	movf	___ftge@ff2,w
 10437  1D17  0220               	subwf	___ftge@ff1,w
 10438  1D18  0008               	return
 10439  1D19                     __end_of___ftge:	
 10440                           
 10441                           	psect	text38
 10442  1995                     __ptext38:	
 10443 ;; *************** function _LCDWriteString *****************
 10444 ;; Defined at:
 10445 ;;		line 160 in file "lcd.h"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;  a               1    wreg     PTR unsigned char 
 10448 ;;		 -> btmStr(16), topStr(16), 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  a               1    8[BANK0 ] PTR unsigned char 
 10451 ;;		 -> btmStr(16), topStr(16), 
 10452 ;;  i               2    6[BANK0 ] int 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;		None               void
 10455 ;; Registers used:
 10456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10462 ;;      Params:         0       0       0       0       0
 10463 ;;      Locals:         0       3       0       0       0
 10464 ;;      Temps:          0       1       0       0       0
 10465 ;;      Totals:         0       4       0       0       0
 10466 ;;Total ram usage:        4 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    4
 10469 ;; This function calls:
 10470 ;;		_LCDWriteChar
 10471 ;; This function is called by:
 10472 ;;		_displayLCD
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _LCDWriteString
 10478  1995                     _LCDWriteString:	
 10479                           
 10480                           ;incstack = 0
 10481                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10482                           ;LCDWriteString@a stored from wreg
 10483  1995  1283               	bcf	3,5	;RP0=0, select bank0
 10484  1996  1303               	bcf	3,6	;RP1=0, select bank0
 10485  1997  00A8               	movwf	LCDWriteString@a
 10486                           
 10487                           ;lcd.h: 162: for(int i=0;a[i]!='\0';i++)
 10488  1998  01A6               	clrf	LCDWriteString@i
 10489  1999  01A7               	clrf	LCDWriteString@i+1
 10490  199A                     l2962:	
 10491  199A  0826               	movf	LCDWriteString@i,w
 10492  199B  0728               	addwf	LCDWriteString@a,w
 10493  199C  00A5               	movwf	??_LCDWriteString
 10494  199D  0825               	movf	??_LCDWriteString,w
 10495  199E  0084               	movwf	4
 10496  199F  1783               	bsf	3,7	;select IRP bank2
 10497  19A0  0800               	movf	0,w
 10498  19A1  1903               	btfsc	3,2
 10499  19A2  0008               	return
 10500                           
 10501                           ;lcd.h: 163: {
 10502                           ;lcd.h: 164: LCDWriteChar(a[i]);
 10503  19A3  0826               	movf	LCDWriteString@i,w
 10504  19A4  0728               	addwf	LCDWriteString@a,w
 10505  19A5  00A5               	movwf	??_LCDWriteString
 10506  19A6  0825               	movf	??_LCDWriteString,w
 10507  19A7  0084               	movwf	4
 10508  19A8  1783               	bsf	3,7	;select IRP bank2
 10509  19A9  0800               	movf	0,w
 10510  19AA  160A  158A  2203  160A  158A  	fcall	_LCDWriteChar
 10511  19AF  3001               	movlw	1
 10512  19B0  1283               	bcf	3,5	;RP0=0, select bank0
 10513  19B1  1303               	bcf	3,6	;RP1=0, select bank0
 10514  19B2  07A6               	addwf	LCDWriteString@i,f
 10515  19B3  1803               	skipnc
 10516  19B4  0AA7               	incf	LCDWriteString@i+1,f
 10517  19B5  3000               	movlw	0
 10518  19B6  07A7               	addwf	LCDWriteString@i+1,f
 10519  19B7  299A               	goto	l2962
 10520  19B8                     __end_of_LCDWriteString:	
 10521                           
 10522                           	psect	text39
 10523  1A03                     __ptext39:	
 10524 ;; *************** function _LCDWriteChar *****************
 10525 ;; Defined at:
 10526 ;;		line 128 in file "lcd.h"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;  a               1    wreg     unsigned char 
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;  a               1    4[BANK0 ] unsigned char 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;		None               void
 10533 ;; Registers used:
 10534 ;;		wreg, status,2, status,0, pclath, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10540 ;;      Params:         0       0       0       0       0
 10541 ;;      Locals:         0       1       0       0       0
 10542 ;;      Temps:          0       2       0       0       0
 10543 ;;      Totals:         0       3       0       0       0
 10544 ;;Total ram usage:        3 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    3
 10547 ;; This function calls:
 10548 ;;		_LCDSetBits
 10549 ;;		_pulse
 10550 ;; This function is called by:
 10551 ;;		_LCDWriteString
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           
 10556                           ;psect for function _LCDWriteChar
 10557  1A03                     _LCDWriteChar:	
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
 10561                           ;LCDWriteChar@a stored from wreg
 10562  1A03  1283               	bcf	3,5	;RP0=0, select bank0
 10563  1A04  1303               	bcf	3,6	;RP1=0, select bank0
 10564  1A05  00A4               	movwf	LCDWriteChar@a
 10565                           
 10566                           ;lcd.h: 130: LCDSetBits(a);
 10567  1A06  0824               	movf	LCDWriteChar@a,w
 10568  1A07  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
 10569                           
 10570                           ;lcd.h: 131: RB0 = 1;
 10571  1A0C  1283               	bcf	3,5	;RP0=0, select bank0
 10572  1A0D  1303               	bcf	3,6	;RP1=0, select bank0
 10573  1A0E  1406               	bsf	6,0	;volatile
 10574                           
 10575                           ;lcd.h: 133: pulse();
 10576  1A0F  160A  158A  20CA  160A  158A  	fcall	_pulse
 10577                           
 10578                           ;lcd.h: 134: a = a<<4;
 10579  1A14  1283               	bcf	3,5	;RP0=0, select bank0
 10580  1A15  1303               	bcf	3,6	;RP1=0, select bank0
 10581  1A16  0824               	movf	LCDWriteChar@a,w
 10582  1A17  00A2               	movwf	??_LCDWriteChar
 10583  1A18  3003               	movlw	3
 10584  1A19                     u3085:	
 10585  1A19  1003               	clrc
 10586  1A1A  0DA2               	rlf	??_LCDWriteChar,f
 10587  1A1B  3EFF               	addlw	-1
 10588  1A1C  1D03               	skipz
 10589  1A1D  2A19               	goto	u3085
 10590  1A1E  1003               	clrc
 10591  1A1F  0D22               	rlf	??_LCDWriteChar,w
 10592  1A20  00A3               	movwf	??_LCDWriteChar+1
 10593  1A21  0823               	movf	??_LCDWriteChar+1,w
 10594  1A22  00A4               	movwf	LCDWriteChar@a
 10595                           
 10596                           ;lcd.h: 135: LCDSetBits(a);
 10597  1A23  0824               	movf	LCDWriteChar@a,w
 10598  1A24  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
 10599                           
 10600                           ;lcd.h: 136: pulse();
 10601  1A29  160A  158A  20CA   	fcall	_pulse
 10602  1A2C  0008               	return
 10603  1A2D                     __end_of_LCDWriteChar:	
 10604                           
 10605                           	psect	text40
 10606  1AF6                     __ptext40:	
 10607 ;; *************** function _LCDSetCursor *****************
 10608 ;; Defined at:
 10609 ;;		line 143 in file "lcd.h"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;  a               1    wreg     unsigned char 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  a               1    5[BANK0 ] unsigned char 
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, pclath, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10623 ;;      Params:         0       0       0       0       0
 10624 ;;      Locals:         0       1       0       0       0
 10625 ;;      Temps:          0       2       0       0       0
 10626 ;;      Totals:         0       3       0       0       0
 10627 ;;Total ram usage:        3 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    4
 10630 ;; This function calls:
 10631 ;;		_LCD4bitCmd
 10632 ;; This function is called by:
 10633 ;;		_displayLCD
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _LCDSetCursor
 10639  1AF6                     _LCDSetCursor:	
 10640                           
 10641                           ;incstack = 0
 10642                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
 10643                           ;LCDSetCursor@a stored from wreg
 10644  1AF6  1283               	bcf	3,5	;RP0=0, select bank0
 10645  1AF7  1303               	bcf	3,6	;RP1=0, select bank0
 10646  1AF8  00A5               	movwf	LCDSetCursor@a
 10647                           
 10648                           ;lcd.h: 145: if (a & 16)
 10649  1AF9  1E25               	btfss	LCDSetCursor@a,4
 10650  1AFA  2B15               	goto	l2950
 10651                           
 10652                           ;lcd.h: 146: {
 10653                           ;lcd.h: 147: LCD4bitCmd(0xC0);
 10654  1AFB  30C0               	movlw	192
 10655  1AFC  160A  158A  20EA  160A  158A  	fcall	_LCD4bitCmd
 10656                           
 10657                           ;lcd.h: 148: a = a << 4;
 10658  1B01  1283               	bcf	3,5	;RP0=0, select bank0
 10659  1B02  1303               	bcf	3,6	;RP1=0, select bank0
 10660  1B03  0825               	movf	LCDSetCursor@a,w
 10661  1B04  00A3               	movwf	??_LCDSetCursor
 10662  1B05  3003               	movlw	3
 10663  1B06                     u3965:	
 10664  1B06  1003               	clrc
 10665  1B07  0DA3               	rlf	??_LCDSetCursor,f
 10666  1B08  3EFF               	addlw	-1
 10667  1B09  1D03               	skipz
 10668  1B0A  2B06               	goto	u3965
 10669  1B0B  1003               	clrc
 10670  1B0C  0D23               	rlf	??_LCDSetCursor,w
 10671  1B0D  00A4               	movwf	??_LCDSetCursor+1
 10672  1B0E  0824               	movf	??_LCDSetCursor+1,w
 10673  1B0F  00A5               	movwf	LCDSetCursor@a
 10674                           
 10675                           ;lcd.h: 149: LCD4bitCmd(a);
 10676  1B10  0825               	movf	LCDSetCursor@a,w
 10677  1B11  160A  158A  20EA   	fcall	_LCD4bitCmd
 10678                           
 10679                           ;lcd.h: 150: }
 10680  1B14  0008               	return
 10681  1B15                     l2950:	
 10682                           
 10683                           ;lcd.h: 152: else
 10684                           ;lcd.h: 153: {
 10685                           ;lcd.h: 154: LCD4bitCmd(0x80);
 10686  1B15  3080               	movlw	128
 10687  1B16  160A  158A  20EA  160A  158A  	fcall	_LCD4bitCmd
 10688                           
 10689                           ;lcd.h: 155: a = a << 4;
 10690  1B1B  1283               	bcf	3,5	;RP0=0, select bank0
 10691  1B1C  1303               	bcf	3,6	;RP1=0, select bank0
 10692  1B1D  0825               	movf	LCDSetCursor@a,w
 10693  1B1E  00A3               	movwf	??_LCDSetCursor
 10694  1B1F  3003               	movlw	3
 10695  1B20                     u3975:	
 10696  1B20  1003               	clrc
 10697  1B21  0DA3               	rlf	??_LCDSetCursor,f
 10698  1B22  3EFF               	addlw	-1
 10699  1B23  1D03               	skipz
 10700  1B24  2B20               	goto	u3975
 10701  1B25  1003               	clrc
 10702  1B26  0D23               	rlf	??_LCDSetCursor,w
 10703  1B27  00A4               	movwf	??_LCDSetCursor+1
 10704  1B28  0824               	movf	??_LCDSetCursor+1,w
 10705  1B29  00A5               	movwf	LCDSetCursor@a
 10706                           
 10707                           ;lcd.h: 156: LCD4bitCmd(a);
 10708  1B2A  0825               	movf	LCDSetCursor@a,w
 10709  1B2B  160A  158A  20EA   	fcall	_LCD4bitCmd
 10710  1B2E  0008               	return
 10711  1B2F                     __end_of_LCDSetCursor:	
 10712                           
 10713                           	psect	text41
 10714  18EA                     __ptext41:	
 10715 ;; *************** function _LCD4bitCmd *****************
 10716 ;; Defined at:
 10717 ;;		line 120 in file "lcd.h"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;  a               1    wreg     unsigned char 
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  a               1    2[BANK0 ] unsigned char 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;		None               void
 10724 ;; Registers used:
 10725 ;;		wreg, status,2, status,0, pclath, cstack
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10731 ;;      Params:         0       0       0       0       0
 10732 ;;      Locals:         0       1       0       0       0
 10733 ;;      Temps:          0       0       0       0       0
 10734 ;;      Totals:         0       1       0       0       0
 10735 ;;Total ram usage:        1 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    3
 10738 ;; This function calls:
 10739 ;;		_LCDSetBits
 10740 ;;		_pulse
 10741 ;; This function is called by:
 10742 ;;		_LCDSetCursor
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _LCD4bitCmd
 10748  18EA                     _LCD4bitCmd:	
 10749                           
 10750                           ;incstack = 0
 10751                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
 10752                           ;LCD4bitCmd@a stored from wreg
 10753  18EA  1283               	bcf	3,5	;RP0=0, select bank0
 10754  18EB  1303               	bcf	3,6	;RP1=0, select bank0
 10755  18EC  00A2               	movwf	LCD4bitCmd@a
 10756                           
 10757                           ;lcd.h: 122: LCDSetBits(a);
 10758  18ED  0822               	movf	LCD4bitCmd@a,w
 10759  18EE  160A  158A  210D  160A  158A  	fcall	_LCDSetBits
 10760                           
 10761                           ;lcd.h: 123: RB0 = 0;
 10762  18F3  1283               	bcf	3,5	;RP0=0, select bank0
 10763  18F4  1303               	bcf	3,6	;RP1=0, select bank0
 10764  18F5  1006               	bcf	6,0	;volatile
 10765                           
 10766                           ;lcd.h: 124: RD7 = 0;
 10767  18F6  1388               	bcf	8,7	;volatile
 10768                           
 10769                           ;lcd.h: 125: pulse();
 10770  18F7  160A  158A  20CA   	fcall	_pulse
 10771  18FA  0008               	return
 10772  18FB                     __end_of_LCD4bitCmd:	
 10773                           
 10774                           	psect	text42
 10775  18CA                     __ptext42:	
 10776 ;; *************** function _pulse *****************
 10777 ;; Defined at:
 10778 ;;		line 99 in file "lcd.h"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;		None
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;		None
 10783 ;; Return value:  Size  Location     Type
 10784 ;;		None               void
 10785 ;; Registers used:
 10786 ;;		wreg
 10787 ;; Tracked objects:
 10788 ;;		On entry : 0/0
 10789 ;;		On exit  : 0/0
 10790 ;;		Unchanged: 0/0
 10791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10792 ;;      Params:         0       0       0       0       0
 10793 ;;      Locals:         0       0       0       0       0
 10794 ;;      Temps:          0       2       0       0       0
 10795 ;;      Totals:         0       2       0       0       0
 10796 ;;Total ram usage:        2 bytes
 10797 ;; Hardware stack levels used:    1
 10798 ;; Hardware stack levels required when called:    2
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_initLCD
 10803 ;;		_LCDcmd
 10804 ;;		_LCD4bitCmd
 10805 ;;		_LCDWriteChar
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           
 10810                           ;psect for function _pulse
 10811  18CA                     _pulse:	
 10812                           
 10813                           ;lcd.h: 101: RB1 = 1;
 10814                           
 10815                           ;incstack = 0
 10816                           ; Regs used in _pulse: [wreg]
 10817  18CA  1283               	bcf	3,5	;RP0=0, select bank0
 10818  18CB  1303               	bcf	3,6	;RP1=0, select bank0
 10819  18CC  1486               	bsf	6,1	;volatile
 10820                           
 10821                           ;lcd.h: 102: _delay((unsigned long)((1)*(8000000/4000.0)));
 10822  18CD  3003               	movlw	3
 10823  18CE  00A1               	movwf	??_pulse+1
 10824  18CF  3097               	movlw	151
 10825  18D0  00A0               	movwf	??_pulse
 10826  18D1                     u4757:	
 10827  18D1  0BA0               	decfsz	??_pulse,f
 10828  18D2  28D1               	goto	u4757
 10829  18D3  0BA1               	decfsz	??_pulse+1,f
 10830  18D4  28D1               	goto	u4757
 10831  18D5  28D6               	nop2
 10832                           
 10833                           ;lcd.h: 103: RB1 = 0;
 10834  18D6  1283               	bcf	3,5	;RP0=0, select bank0
 10835  18D7  1303               	bcf	3,6	;RP1=0, select bank0
 10836  18D8  1086               	bcf	6,1	;volatile
 10837  18D9  0008               	return
 10838  18DA                     __end_of_pulse:	
 10839                           
 10840                           	psect	text43
 10841  190D                     __ptext43:	
 10842 ;; *************** function _LCDSetBits *****************
 10843 ;; Defined at:
 10844 ;;		line 76 in file "lcd.h"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  a               1    wreg     unsigned char 
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;  a               1    0[BANK0 ] unsigned char 
 10849 ;; Return value:  Size  Location     Type
 10850 ;;		None               void
 10851 ;; Registers used:
 10852 ;;		wreg
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10858 ;;      Params:         0       0       0       0       0
 10859 ;;      Locals:         0       1       0       0       0
 10860 ;;      Temps:          0       0       0       0       0
 10861 ;;      Totals:         0       1       0       0       0
 10862 ;;Total ram usage:        1 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    2
 10865 ;; This function calls:
 10866 ;;		Nothing
 10867 ;; This function is called by:
 10868 ;;		_initLCD
 10869 ;;		_LCDcmd
 10870 ;;		_LCD4bitCmd
 10871 ;;		_LCDWriteChar
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _LCDSetBits
 10877  190D                     _LCDSetBits:	
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _LCDSetBits: [wreg]
 10881                           ;LCDSetBits@a stored from wreg
 10882  190D  1283               	bcf	3,5	;RP0=0, select bank0
 10883  190E  1303               	bcf	3,6	;RP1=0, select bank0
 10884  190F  00A0               	movwf	LCDSetBits@a
 10885                           
 10886                           ;lcd.h: 78: if(a & 16)
 10887  1910  1E20               	btfss	LCDSetBits@a,4
 10888  1911  2914               	goto	l122
 10889                           
 10890                           ;lcd.h: 79: RB2 = 1;
 10891  1912  1506               	bsf	6,2	;volatile
 10892  1913  2915               	goto	l123
 10893  1914                     l122:	
 10894                           
 10895                           ;lcd.h: 80: else
 10896                           ;lcd.h: 81: RB2 = 0;
 10897  1914  1106               	bcf	6,2	;volatile
 10898  1915                     l123:	
 10899                           
 10900                           ;lcd.h: 83: if(a & 32)
 10901  1915  1EA0               	btfss	LCDSetBits@a,5
 10902  1916  2919               	goto	l124
 10903                           
 10904                           ;lcd.h: 84: RB3 = 1;
 10905  1917  1586               	bsf	6,3	;volatile
 10906  1918  291A               	goto	l125
 10907  1919                     l124:	
 10908                           
 10909                           ;lcd.h: 85: else
 10910                           ;lcd.h: 86: RB3 = 0;
 10911  1919  1186               	bcf	6,3	;volatile
 10912  191A                     l125:	
 10913                           
 10914                           ;lcd.h: 88: if(a & 64)
 10915  191A  1F20               	btfss	LCDSetBits@a,6
 10916  191B  291E               	goto	l126
 10917                           
 10918                           ;lcd.h: 89: RB4 = 1;
 10919  191C  1606               	bsf	6,4	;volatile
 10920  191D  291F               	goto	l127
 10921  191E                     l126:	
 10922                           
 10923                           ;lcd.h: 90: else
 10924                           ;lcd.h: 91: RB4 = 0;
 10925  191E  1206               	bcf	6,4	;volatile
 10926  191F                     l127:	
 10927                           
 10928                           ;lcd.h: 93: if(a & 128)
 10929  191F  1FA0               	btfss	LCDSetBits@a,7
 10930  1920  2923               	goto	l128
 10931                           
 10932                           ;lcd.h: 94: RB5 = 1;
 10933  1921  1686               	bsf	6,5	;volatile
 10934  1922  0008               	return
 10935  1923                     l128:	
 10936                           
 10937                           ;lcd.h: 95: else
 10938                           ;lcd.h: 96: RB5 = 0;
 10939  1923  1286               	bcf	6,5	;volatile
 10940  1924  0008               	return
 10941  1925                     __end_of_LCDSetBits:	
 10942                           
 10943                           	psect	text44
 10944  193D                     __ptext44:	
 10945 ;; *************** function _currentGainInit *****************
 10946 ;; Defined at:
 10947 ;;		line 290 in file "PIC16F917 Battery Management.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  gain            1    wreg     unsigned char 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  gain            1    0[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10961 ;;      Params:         0       0       0       0       0
 10962 ;;      Locals:         0       1       0       0       0
 10963 ;;      Temps:          0       0       0       0       0
 10964 ;;      Totals:         0       1       0       0       0
 10965 ;;Total ram usage:        1 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    2
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_main
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _currentGainInit
 10977  193D                     _currentGainInit:	
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in _currentGainInit: [wreg+status,2+status,0]
 10981                           ;currentGainInit@gain stored from wreg
 10982  193D  1283               	bcf	3,5	;RP0=0, select bank0
 10983  193E  1303               	bcf	3,6	;RP1=0, select bank0
 10984  193F  00A0               	movwf	currentGainInit@gain
 10985                           
 10986                           ;PIC16F917 Battery Management.c: 292: if ( gain >= 100 )
 10987  1940  3064               	movlw	100
 10988  1941  0220               	subwf	currentGainInit@gain,w
 10989  1942  1C03               	skipc
 10990  1943  294D               	goto	l260
 10991                           
 10992                           ;PIC16F917 Battery Management.c: 293: {
 10993                           ;PIC16F917 Battery Management.c: 294: RA6 = 1;
 10994  1944  1705               	bsf	5,6	;volatile
 10995                           
 10996                           ;PIC16F917 Battery Management.c: 296: if ( gain == 100 )
 10997  1945  3064               	movlw	100
 10998  1946  0620               	xorwf	currentGainInit@gain,w
 10999  1947  1D03               	btfss	3,2
 11000  1948  294B               	goto	l261
 11001                           
 11002                           ;PIC16F917 Battery Management.c: 297: {
 11003                           ;PIC16F917 Battery Management.c: 298: RA7 = 0;
 11004  1949  1385               	bcf	5,7	;volatile
 11005                           
 11006                           ;PIC16F917 Battery Management.c: 300: }
 11007                           
 11008                           ;PIC16F917 Battery Management.c: 299: return;
 11009  194A  0008               	return
 11010  194B                     l261:	
 11011                           
 11012                           ;PIC16F917 Battery Management.c: 301: else
 11013                           ;PIC16F917 Battery Management.c: 302: {
 11014                           ;PIC16F917 Battery Management.c: 303: RA7 = 1;
 11015  194B  1785               	bsf	5,7	;volatile
 11016                           
 11017                           ;PIC16F917 Battery Management.c: 305: }
 11018                           ;PIC16F917 Battery Management.c: 307: }
 11019                           
 11020                           ;PIC16F917 Battery Management.c: 304: return;
 11021  194C  0008               	return
 11022  194D                     l260:	
 11023                           
 11024                           ;PIC16F917 Battery Management.c: 309: else
 11025                           ;PIC16F917 Battery Management.c: 310: {
 11026                           ;PIC16F917 Battery Management.c: 311: RA6 = 0;
 11027  194D  1305               	bcf	5,6	;volatile
 11028                           
 11029                           ;PIC16F917 Battery Management.c: 313: if ( gain == 25 )
 11030  194E  3019               	movlw	25
 11031  194F  0620               	xorwf	currentGainInit@gain,w
 11032  1950  1D03               	btfss	3,2
 11033  1951  2954               	goto	l265
 11034                           
 11035                           ;PIC16F917 Battery Management.c: 314: {
 11036                           ;PIC16F917 Battery Management.c: 315: RA7 = 0;
 11037  1952  1385               	bcf	5,7	;volatile
 11038                           
 11039                           ;PIC16F917 Battery Management.c: 317: }
 11040                           
 11041                           ;PIC16F917 Battery Management.c: 316: return;
 11042  1953  0008               	return
 11043  1954                     l265:	
 11044                           
 11045                           ;PIC16F917 Battery Management.c: 318: else
 11046                           ;PIC16F917 Battery Management.c: 319: {
 11047                           ;PIC16F917 Battery Management.c: 320: RA7 = 1;
 11048  1954  1785               	bsf	5,7	;volatile
 11049                           
 11050                           ;PIC16F917 Battery Management.c: 321: return;
 11051  1955  0008               	return
 11052  1956                     __end_of_currentGainInit:	
 11053                           
 11054                           	psect	text45
 11055  18FB                     __ptext45:	
 11056 ;; *************** function _isr *****************
 11057 ;; Defined at:
 11058 ;;		line 255 in file "setup.h"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;		None
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;		None
 11063 ;; Return value:  Size  Location     Type
 11064 ;;		None               void
 11065 ;; Registers used:
 11066 ;;		wreg, status,2, status,0, pclath, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11072 ;;      Params:         0       0       0       0       0
 11073 ;;      Locals:         0       0       0       0       0
 11074 ;;      Temps:          4       0       0       0       0
 11075 ;;      Totals:         4       0       0       0       0
 11076 ;;Total ram usage:        4 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    1
 11079 ;; This function calls:
 11080 ;;		_isrTimer0
 11081 ;; This function is called by:
 11082 ;;		Interrupt level 1
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           
 11087                           ;psect for function _isr
 11088  18FB                     _isr:	
 11089                           
 11090                           ;setup.h: 257: isrTimer0();
 11091  18FB  160A  158A  21DB  160A  158A  	fcall	_isrTimer0
 11092  1900  0877               	movf	??_isr+3,w
 11093  1901  1283               	bcf	3,5	;RP0=0, select bank0
 11094  1902  1303               	bcf	3,6	;RP1=0, select bank0
 11095  1903  00FF               	movwf	127
 11096  1904  0876               	movf	??_isr+2,w
 11097  1905  008A               	movwf	10
 11098  1906  0875               	movf	??_isr+1,w
 11099  1907  0084               	movwf	4
 11100  1908  0E74               	swapf	??_isr^(0+-128),w
 11101  1909  0083               	movwf	3
 11102  190A  0EFE               	swapf	126,f
 11103  190B  0E7E               	swapf	126,w
 11104  190C  0009               	retfie
 11105  190D                     __end_of_isr:	
 11106                           
 11107                           	psect	intentry
 11108  0004                     __pintentry:	
 11109                           ;incstack = 0
 11110                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
 11111                           
 11112  0004                     interrupt_function:	
 11113  007E                     saved_w	set	btemp
 11114  0004  00FE               	movwf	btemp
 11115  0005  0E03               	swapf	3,w
 11116  0006  00F4               	movwf	??_isr
 11117  0007  0804               	movf	4,w
 11118  0008  00F5               	movwf	??_isr+1
 11119  0009  080A               	movf	10,w
 11120  000A  00F6               	movwf	??_isr+2
 11121  000B  1283               	bcf	3,5	;RP0=0, select bank0
 11122  000C  1303               	bcf	3,6	;RP1=0, select bank0
 11123  000D  087F               	movf	btemp+1,w
 11124  000E  00F7               	movwf	??_isr+3
 11125  000F  160A  158A  28FB   	ljmp	_isr
 11126                           
 11127                           	psect	text46
 11128  19DB                     __ptext46:	
 11129 ;; *************** function _isrTimer0 *****************
 11130 ;; Defined at:
 11131 ;;		line 64 in file "timer0.h"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;		None
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;		None
 11136 ;; Return value:  Size  Location     Type
 11137 ;;		None               void
 11138 ;; Registers used:
 11139 ;;		wreg
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11145 ;;      Params:         0       0       0       0       0
 11146 ;;      Locals:         0       0       0       0       0
 11147 ;;      Temps:          4       0       0       0       0
 11148 ;;      Totals:         4       0       0       0       0
 11149 ;;Total ram usage:        4 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_isr
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           
 11159                           ;psect for function _isrTimer0
 11160  19DB                     _isrTimer0:	
 11161                           
 11162                           ;timer0.h: 66: if (INTCONbits.T0IF == 1 && INTCONbits.T0IE == 1)
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _isrTimer0: [wreg]
 11166  19DB  1D0B               	btfss	11,2	;volatile
 11167  19DC  0008               	return
 11168  19DD  1E8B               	btfss	11,5	;volatile
 11169  19DE  0008               	return
 11170                           
 11171                           ;timer0.h: 67: {
 11172                           ;timer0.h: 70: time = time + 255;
 11173  19DF  30FF               	movlw	255
 11174  19E0  00F0               	movwf	??_isrTimer0
 11175  19E1  3000               	movlw	0
 11176  19E2  00F1               	movwf	??_isrTimer0+1
 11177  19E3  3000               	movlw	0
 11178  19E4  00F2               	movwf	??_isrTimer0+2
 11179  19E5  3000               	movlw	0
 11180  19E6  00F3               	movwf	??_isrTimer0+3
 11181  19E7  0878               	movf	_time,w
 11182  19E8  07F0               	addwf	??_isrTimer0,f
 11183  19E9  0879               	movf	_time+1,w
 11184  19EA  1803               	skipnc
 11185  19EB  0F79               	incfsz	_time+1,w
 11186  19EC  29EE               	goto	u217_20
 11187  19ED  29EF               	goto	u217_21
 11188  19EE                     u217_20:	
 11189  19EE  07F1               	addwf	??_isrTimer0+1,f
 11190  19EF                     u217_21:	
 11191  19EF  087A               	movf	_time+2,w
 11192  19F0  1803               	skipnc
 11193  19F1  0F7A               	incfsz	_time+2,w
 11194  19F2  29F4               	goto	u217_22
 11195  19F3  29F5               	goto	u217_23
 11196  19F4                     u217_22:	
 11197  19F4  07F2               	addwf	??_isrTimer0+2,f
 11198  19F5                     u217_23:	
 11199  19F5  087B               	movf	_time+3,w
 11200  19F6  1803               	skipnc
 11201  19F7  0A7B               	incf	_time+3,w
 11202  19F8  07F3               	addwf	??_isrTimer0+3,f
 11203  19F9  0873               	movf	??_isrTimer0+3,w
 11204  19FA  00FB               	movwf	_time+3
 11205  19FB  0872               	movf	??_isrTimer0+2,w
 11206  19FC  00FA               	movwf	_time+2
 11207  19FD  0871               	movf	??_isrTimer0+1,w
 11208  19FE  00F9               	movwf	_time+1
 11209  19FF  0870               	movf	??_isrTimer0,w
 11210  1A00  00F8               	movwf	_time
 11211                           
 11212                           ;timer0.h: 72: INTCONbits.T0IF = 0;
 11213  1A01  110B               	bcf	11,2	;volatile
 11214  1A02  0008               	return
 11215  1A03                     __end_of_isrTimer0:	
 11216  007E                     btemp	set	126	;btemp
 11217  007E                     wtemp	set	126
 11218  007E                     wtemp0	set	126
 11219  0080                     wtemp1	set	128
 11220  0082                     wtemp2	set	130
 11221  0084                     wtemp3	set	132
 11222  0086                     wtemp4	set	134
 11223  0088                     wtemp5	set	136
 11224  007F                     wtemp6	set	127
 11225  007E                     ttemp	set	126
 11226  007E                     ttemp0	set	126
 11227  0081                     ttemp1	set	129
 11228  0084                     ttemp2	set	132
 11229  0087                     ttemp3	set	135
 11230  007F                     ttemp4	set	127
 11231  007E                     ltemp	set	126
 11232  007E                     ltemp0	set	126
 11233  0082                     ltemp1	set	130
 11234  0086                     ltemp2	set	134
 11235  0080                     ltemp3	set	128


Data Sizes:
    Strings     18
    Constant    138
    Data        7
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     80      80
    BANK1            80     42      76
    BANK3            96      0      32
    BANK2            80      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> btmStr(BANK3[16]), topStr(BANK3[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCDWriteString@a	PTR unsigned char  size(1) Largest target is 16
		 -> btmStr(BANK3[16]), topStr(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrTimer0

Critical Paths under _main in BANK0

    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___lwtoft->___lwdiv
    ___ftdiv->___ftmul
    _initController->_initLCD
    _handlePB->_stopWatch
    _stopWatch->___fttol
    _initLCD->_LCDcmd
    _LCDcmd->_pulse
    _displayLCD->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _LCDWriteString->_LCDWriteChar
    _LCDWriteChar->_pulse
    _LCDSetCursor->_LCD4bitCmd
    _LCD4bitCmd->_pulse

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_displayLCD
    _displayLCD->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  111782
                                             40 BANK1      2     2      0
                    _currentGainInit
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      4     4      0   12940
                                             52 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        7     7      0   15180
                                             52 BANK0      7     7      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2170
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  22    22      0   23699
                                             61 BANK0      7     7      0
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                        9     5      4   13009
                                             52 BANK0      9     5      4
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2      92
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2746
                                              8 BANK0      4     1      3
                           ___ftpack
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2940
                                             36 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     243
                            _initADC
                            _initLCD
                          _timeSetup
 ---------------------------------------------------------------------------------
 (2) _timeSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             3     3      0    9095
                                              0 BANK1      3     3      0
                            _initLCD
                          _stopWatch
 ---------------------------------------------------------------------------------
 (2) _stopWatch                                           21    17      4    8852
                                             59 BANK0     21    17      4
                            ___ftmul
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     243
                                              5 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                          13    11      2   50559
                                             77 BANK0      2     0      2
                                             29 BANK1     11    11      0
                       _LCDSetCursor
                     _LCDWriteString
                            ___ftadd
                            ___ftneg
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             42    36      6   45529
                                             71 BANK0      6     0      6
                                              0 BANK1     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3    9879
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              19    16      3    9681
                                             36 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    5802
                                             20 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     560
                                             16 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1716
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2409
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     671
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     546
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     572
                                             45 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lltoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4079
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3884
                                             52 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     429
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     904
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       4     4      0     305
                                              5 BANK0      4     4      0
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     222
                                              3 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     110
                                              2 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _currentGainInit                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              4 COMMON     4     4      0
                          _isrTimer0
 ---------------------------------------------------------------------------------
 (7) _isrTimer0                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _currentGainInit
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
     ___ftneg
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwdiv (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___lwdiv (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
   _handlePB
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _stopWatch
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
       ___lltoft
         ___ftpack
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _timeSetup
   _sampleBatteryCells
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _sampleVoltage
       ___ftdiv
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___lwdiv
       ___lwtoft
         ___ftpack
         ___lwdiv (ARG)
       _analogRead
   _sampleCurrent
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lbtoft
       ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
     _analogRead

 _isr (ROOT)
   _isrTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      20       8       33.3%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2A      4C       6       95.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C9      12        0.0%
ABS                  0      0      C9      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jul 05 21:54:28 2015

                ?_LCDSetBits 0070                            pc 0002               ___bmul@product 0032  
                __CFG_CP$OFF 0000                 ___awdiv@sign 002D                           fsr 0004  
        ___wmul@multiplicand 0022                 ___ftadd@exp1 0060                 ___ftadd@exp2 005F  
               ___ftadd@sign 005E                          l122 1914                          l123 1915  
                        l124 1919                          l125 191A                          l126 191E  
                        l127 191F                          l128 1923                          l260 194D  
                        l261 194B                          l254 0604                          l327 08E0  
                        l272 1C77                          l265 1954                          l185 1B46  
                        l354 0C68                          l700 1046                          l710 10CB  
                        l374 0F70                          l631 164E                          l623 1605  
                        l465 19C4                          l650 1D66                          l651 1D6E  
                        l643 1D51                          l751 1E85                          l674 14C6  
                        _RB0 0030                          _RB1 0031                          _RC0 0038  
                        _RB2 0032                          _RC1 0039                          _RB3 0033  
                        _RD0 0040                          _RC2 003A                          _RB4 0034  
                        _RA6 002E                          _RD1 0041                          _RC3 003B  
                        _RB5 0035                          _RA7 002F                          _RD2 0042  
                        _RD4 0044                          _RD5 0045                          _RD6 0046  
                        _RD7 0047                 __CFG_CPD$OFF 0000                          _isr 18FB  
                        fsr0 0004                          indf 0000                 ___awmod@sign 0026  
              ?_LCDSetCursor 0070                 __CFG_IESO$ON 0000                  _sprintf$919 00A6  
               ___ftdiv@cntr 004E                 ___ftdiv@sign 0053                         l3010 1D99  
                       l2220 1D3B                         l2212 1D23                         l2230 1D56  
                       l2310 1C59                         l2302 1C46                         l3110 0B0D  
                       l3102 0ACF                         l2216 1D2A                         l2400 14C2  
                       l3016 1DBA                         l2218 1D36                         l2306 1C51  
                       l2322 1B74                         l3210 0F02                         l3114 0B2E  
                       l3042 0891                         l2228 1D64                         l2404 14D8  
                       l2340 1B9D                         l3220 0F56                         l3204 0EFC  
                       l3140 0C53                         l3124 0B94                         l3060 0910  
                       l3052 08E7                         l3044 08DA                         l3028 0876  
                       l2334 1B81                         l2326 1B7B                         l2262 100B  
                       l3134 0C17                         l3070 0969                         l3054 0900  
                       l2408 14EA                         l2336 1B8F                         l2344 1BA8  
                       l3216 0F3E                         l3152 0D0C                         l3128 0C11  
                       l3048 08E2                         l2418 150D                         l2362 144E  
                       l2258 1005                         l2450 12E9                         l2434 129A  
                       l3234 0F87                         l2380 1477                         l2284 1C1A  
                       l2348 1BB0                         l2428 1284                         l2532 17CE  
                       l2524 1740                         l3172 0D5A                         l3164 0D3B  
                       l3236 0852                         l3412 05E8                         l3404 1CAE  
                       l3324 111E                         l2390 149D                         l2358 1447  
                       l2294 1C22                         l2278 1C0F                         l2462 1311  
                       l2446 12D9                         l3158 0D1F                         l3094 0A62  
                       l3086 09EB                         l3238 0FFB                         l3502 0715  
                       l3422 0632                         l3318 10F7                         l2392 14A1  
                       l2368 145D                         l2616 1087                         l2608 1067  
                       l2296 1C30                         l3192 0ED5                         l2712 1F60  
                       l3344 11CB                         l2386 148C                         l2810 1E6D  
                       l2634 10C0                         l2626 10A3                         l2458 1301  
                       l2554 0472                         l3186 0EC4                         l3098 0A89  
                       l3194 0EDA                         l3338 11AC                         l2388 1498  
                       l2652 1568                         l2636 10CE                         l2628 10B3  
                       l2572 05C8                         l2548 0400                         l3428 0689  
                       l3436 070E                         l2740 1FDA                         l2732 1FBB  
                       l2398 14B6                         l2822 1E96                         l2662 15AF  
                       l2646 1549                         l2566 0556                         l2558 0491  
                       l3438 0723                         l2718 1F76                         l2902 0846  
                       l3462 1A95                         l2752 1CE3                         l2816 1E7A  
                       l2808 1E5D                         l2832 07AA                         l2680 1636  
                       l2584 18E8                         l2818 1E88                         l2842 07E2  
                       l2834 07BA                         l2594 102E                         l3394 1C93  
                       l2756 1D0A                         l2780 197D                         l2950 1B15  
                       l2790 1E2B                         l2846 07EF                         l2862 1BED  
                       l2694 19BC                         l2686 1643                         l2678 1626  
                       l2856 1BBF                         l2688 1651                         l2962 199A  
                       l2858 1BCF                         l2866 1BFA                         l2874 1A5E  
                       l2890 0817                         l2876 1A70                         l2892 0825  
                       l2982 1369                         l2992 140D                         l2994 1415  
                       l2978 134B                         l2898 083B                         ?_isr 0070  
                       STR_1 1890                         STR_2 1890                         u3005 12F2  
                       u4000 13AE                         u4001 13AF                         u4002 13B4  
                       u4003 13B5                         u3045 1312                         u3215 1069  
                       u3055 131A                         u4015 1D97                         u2425 1D75  
                       u2345 1D2F                         u3305 10C2                         u3225 107A  
                       u4105 0981                         u4025 1DB8                         u3235 1088  
                       u3075 1A44                __CFG_DEBUG$ON 0000                         u3085 1A19  
                       u2365 1D4A                         u2535 1C25                         u4215 0C1A  
                       u2385 1D5D                         u3425 1645                         u3345 15B1  
                       u4305 0DC8                         u4225 0C49                         u4145 0A94  
                       u3505 1F88                         u3355 15E0                         u3275 10A4  
                       u2555 1C31                         u2635 1B84                         u4315 0E6E  
                       u4155 0ADA                         u3515 1F9A                         u2565 1C3D  
                       u4405 0F4D                         u3525 1FBC                         u2815 148D  
                       u3455 19C5                         u2575 1C47                         u2655 1B95  
                       u4415 0F67                         u4255 0C72                         u3535 1FCD  
                       u3705 1E7C                         u3465 19CC                         u2665 1B9E  
                       u4185 0B0B                         u3545 1FDB                         u4505 111C  
                       u3571 1CD6                         u3395 1627                         u4435 0FA1  
                       u4275 0D28                         u4515 11AA                         u3572 1CD7  
                       u3573 1CDC                         u2845 14A2                         u3645 1E32  
                       u4285 0D35                         u4525 11C9                         u3574 1CDD  
                       u3591 1CFD                         u3815 1BC3                         u4375 0F05  
                       u4607 10DF                         u3592 1CFE                         u3593 1D03  
                       u2785 1478                         u3745 07AE                         u4385 0F34  
                       u4553 1C91                         u4617 0061                         u3594 1D04  
                       u2875 14B7                         u3675 1E5E                         u3835 1BDD  
                       u2955 12A6                         u4707 1EF3                         u3915 0826  
                       u4627 01CD                         u3765 07BC                         u3845 1BEE  
                       u2965 12B8                         u4717 1F0F                         u3925 0832  
                       u4637 1B3E                         u3775 07D1                         u4727 1F20  
                       u4647 1C68                         u3935 083C                         u4495 10F5  
                       u3785 07E3                         u3865 1A63                         u4737 1F31  
                       u4657 1CA3                         u2995 12EA                         u4747 1F42  
                       u4667 1EB1                         u4757 18D1                         u3965 1B06  
                       u4677 1EC4                         u3990 139C                         u3975 1B20  
                       u4687 1ED3                         u3991 139D                         u3895 081A  
                       u3992 13A2                         u4697 1EE3                         u3993 13A3  
                       _TMR0 0001                         _main 1A87                 ___ftpack@arg 0020  
               ___ftpack@exp 0023                         _time 0078                         btemp 007E  
                       ltemp 007E                         start 0012                         ttemp 007E  
                       wtemp 007E                  LCDSetBits@a 0020            ___bmul@multiplier 0033  
              __CFG_MCLRE$ON 0000                 ___ftmul@cntr 0042                 ___ftmul@sign 0043  
               ___fttol@exp1 005A                 ___fttol@lval 0056                        ??_isr 0074  
              ?_LCDWriteChar 0070          __size_of_LCD4bitCmd 0011                        ?_main 0070  
            __end_of___awdiv 1C5E              __end_of___ftadd 1527                __CFG_WDTE$OFF 0000  
            __end_of___awmod 1BB5              __end_of___ftdiv 2000              __end_of___ftneg 18BB  
                      _ANSEL 0091              __end_of___lldiv 07F8              __end_of___ftmul 133F  
            ___awdiv@divisor 0027              __end_of___llmod 1C03              __end_of___ftsub 1995  
            __end_of___fttol 1E9F              __end_of___lwdiv 084B              ___awdiv@counter 002C  
            __end_of_cellRDB 1890                        _PORTA 0005                        _PORTB 0006  
                      _PORTC 0007                        _PORTD 0008                        _PORTE 0009  
             ??_LCDSetCursor 0023                        _TRISA 0085                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TRISE 0089  
               ___lltoft@exp 002D               __CFG_FCMEN$OFF 0000              __end_of_initADC 18CA  
            __end_of_initLCD 1F48              __end_of_dpowers 182E                        _scale 0334  
            __end_of_isdigit 18EA              __end_of_refVolt 1882                ___ftpack@sign 0024  
                      _pulse 18CA          __size_of_LCDSetBits 0018               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
            __end_of_sprintf 1000        __end_of_sampleCurrent 126C            ??_sampleReference 0054  
            __initialization 0015        __end_of_sampleVoltage 1E11                 __end_of_main 1ABE  
             ??_LCDWriteChar 0022                       ??_main 00C8                ___fttol@sign1 0055  
       __size_of__tdiv_to_l_ 00C3       _sampleBatteryCells$914 0061                       _ADCON0 001F  
                     _ADCON1 009F             ___llmod@dividend 0032                       ?_scale 0044  
                     _ADRESH 001E                       _ADRESL 009E             ___awdiv@dividend 0029  
                     ?_pulse 0070             __end_of___ftpack 1D87             __end_of___lbtoft 1974  
                     _LCDCON 0107             __end_of___lltoft 1A87                       u217_20 19EE  
                     u217_21 19EF                       u217_22 19F4                       _LCDcmd 1A2D  
                     u217_23 19F5             __end_of_cell1RDT 1884             __end_of_cell2RDT 1886  
           __end_of_cell3RDT 1888             __end_of_cell4RDT 188A             __end_of___lwtoft 193D  
           __end_of_cell5RDT 188C             __end_of_cell6RDT 188E              _currentGainInit 193D  
             __CFG_PWRTE$OFF 0000             __end_of_handlePB 1CBA               _LCDWriteString 1995  
           __end_of__powers_ 187C                       ___bmul 1001                       ___ftge 1CBA  
                     ___wmul 19B8                    ??___awdiv 002B                    ??___ftadd 005A  
                  ??___awmod 0024                    ??___ftdiv 004A                    ??___ftneg 0023  
                  ??___lldiv 0028                    ??___ftmul 003A                    ??___llmod 0036  
                  ??___ftsub 0067                    ??___fttol 0051                    ??___lwdiv 0024  
                     _btmStr 0190                       _fround 165A             ___awdiv@quotient 002E  
            ___awmod@divisor 0020              ___awmod@counter 0025                       _topStr 01A0  
                  ??_initADC 0020        ___ftmul@f3_as_product 003F                    ??_initLCD 0025  
               __pdataCOMMON 007C                    ??_isdigit 0020      __size_of_initController 0038  
                     saved_w 007E            sampleCurrent@temp 0059                 ??_LCD4bitCmd 0022  
                  ??_sprintf 00A0      __end_of__initialization 0055                   ___ftadd@f1 0054  
                 ___ftadd@f2 0057                   ___ftge@ff1 0020                   ___ftge@ff2 0023  
     __end_of_LCDWriteString 19B8                   ___ftdiv@f1 0047                   ___ftdiv@f2 0044  
                 ___ftdiv@f3 004F                   ___ftneg@f1 0020          ___bmul@multiplicand 0030  
                 ___lbtoft@c 002F         __end_of_LCDSetCursor 1B2F                LCDSetCursor@a 0025  
                 ___ftmul@f1 0034                   ___ftmul@f2 0037                   ___ftsub@f1 0064  
                 ___ftsub@f2 0061                   ___fttol@f1 004D               __pcstackCOMMON 0070  
               __pidataBANK1 18AB                 ??_LCDSetBits 0020                   ___lltoft@c 0028  
              __end_of_scale 05E7                __end_of_pulse 18DA   __end_of_sampleBatteryCells 0334  
         __end_of_LCD4bitCmd 18FB                   ___lwtoft@c 0028                   __div_to_l_ 1527  
             _OPTION_REGbits 0081              __div_to_l_@exp1 0033      __end_of_currentGainInit 1956  
            __div_to_l_@cntr 0032                      ??_scale 0047              __div_to_l_@quot 002E  
                    ??_pulse 0020         __end_of_LCDWriteChar 1A2D                   __pbssBANK1 00CA  
                 __pbssBANK3 0190                      ?_LCDcmd 0070           __end_of_LCDSetBits 1925  
        currentGainInit@gain 0020                      LCDcmd@a 0024                   _analogRead 1B2F  
            ?_LCDWriteString 0070                __div_to_l_@f1 0020                __div_to_l_@f2 0023  
         __size_of_isrTimer0 0028                   __pmaintext 1A87                      ?___bmul 0030  
                    ?___ftge 0020                      ?___wmul 0020                   __pintentry 0004  
                    _CCP1CON 0017                      _CCP2CON 001D                      ?_fround 0044  
                  ?___ftpack 0020                    ?___lbtoft 0028                    ?___lltoft 0028  
                  ?___lwtoft 0028               displayLCD@disp 006D           __size_of_timeSetup 000C  
                  ?_handlePB 0070                   _displayLCD 05E7              _sampleReference 10D7  
                 __stringtab 1800           __size_of_stopWatch 00DF              __size_of_LCDcmd 002B  
          __end_of__npowers_ 1855            __end_of_convConst 187F              __size_of___bmul 0013  
            __size_of___ftge 005F                      ___awdiv 1C03                      ___ftadd 141E  
                    ___awmod 1B68                      ___ftdiv 1F48                      ___ftneg 18B1  
                    ___lldiv 0798              __size_of___wmul 0023                      ___ftmul 126C  
                    ___llmod 1BB5                      ___ftsub 1974                      ___fttol 1E11  
                    ___lwdiv 080D                   _fround$916 0050                   _fround$917 004D  
                    _cellRDB 188E                   ??___ftpack 0025                   ??___lbtoft 002B  
            __size_of_fround 01A6                   ??___lltoft 002C                      __ptext1 10D7  
                    __ptext2 119B                      __ptext3 1956                      __ptext4 0059  
                    __ptext5 1D87                      __ptext6 1B2F                      __ptext7 1925  
                    __ptext8 080D                      __ptext9 1F48                   ??___lwtoft 002B  
                    _initADC 18BB                      _initLCD 1E9F                  ?__div_to_l_ 0020  
                    _dpowers 1806               _initController 1ABE             displayLCD@valueL 00C3  
                    _current 00E0             displayLCD@valueU 00C0                      _isdigit 18DA  
               __size_of_isr 0012                      _refVolt 187F             ___awmod@dividend 0022  
          __end_of_isrTimer0 1A03                   ??_handlePB 00A0                      _supVolt 00E9  
                    _sprintf 084B                      clrloop0 07F9             ?_currentGainInit 0070  
       end_of_initialization 0055            _sampleCurrent$915 0054        __size_of_LCDSetCursor 0039  
              LCDWriteChar@a 0024            __end_of_timeSetup 080D                  ?_analogRead 0020  
            ___lldiv@divisor 0020              ___lldiv@counter 002D               __tdiv_to_l_@f1 0020  
             __tdiv_to_l_@f2 0023                ??__tdiv_to_l_ 0026            __end_of_stopWatch 141E  
     __end_of_initController 1AF6       __size_of_sampleCurrent 00D1      __end_of_sampleReference 119B  
      __size_of_LCDWriteChar 002A                 _LCDSetCursor 1AF6                  ?_displayLCD 006D  
     __size_of_sampleVoltage 008A                  ___ftdiv@exp 0052               __end_of_LCDcmd 1A58  
        __size_of__div_to_l_ 0133                  ___ftmul@exp 003E               __end_of___bmul 1014  
             __end_of___ftge 1D19                 _LCDWriteChar 1A03               __end_of___wmul 19DB  
              __pidataCOMMON 0003              ?_initController 0070               __end_of_fround 1800  
        __size_of_analogRead 0039          start_initialization 0015          __end_of__tdiv_to_l_ 10D7  
                __end_of_isr 190D           _sampleBatteryCells 0059             ??_LCDWriteString 0025  
                   ??_LCDcmd 0022              ___llmod@divisor 002E          ?_sampleBatteryCells 0070  
            ___llmod@counter 0037                _sampleCurrent 119B                     ??___bmul 0031  
                   ??___ftge 0026                     ??___wmul 0024                _sampleVoltage 1D87  
        __size_of_displayLCD 01B1                  __pdataBANK1 00E6                     ??_fround 0047  
              sprintf@tmpval 00B2         ??_sampleBatteryCells 005D                   fround@prec 0053  
          __size_of___ftpack 006E            __size_of___lbtoft 001E            __size_of___lltoft 002F  
           ?_sampleReference 0070                  __pbssCOMMON 0078                    ___latbits 0002  
          __size_of___lwtoft 0018                __pcstackBANK0 0020                __pcstackBANK1 00A0  
          __size_of_handlePB 005C                  sprintf@flag 00AA                  sprintf@fval 00B9  
                sprintf@prec 00B7               ?_sampleCurrent 0070             ___lwdiv@dividend 0022  
           sampleReference@i 0056               ?_sampleVoltage 0054                     ?___awdiv 0027  
                   ?___ftadd 0054                     ?___awmod 0020                     ?___ftdiv 0044  
                   ?___ftneg 0020                     ?___lldiv 0020                     ?___ftmul 0034  
                   ?___llmod 002E                     ?___ftsub 0061                    __npowers_ 182E  
                   ?___fttol 004D                     ?___lwdiv 0020                stopWatch@mode 006B  
              stopWatch@temp 006C                    _convConst 187C                    __pstrings 1800  
                __tdiv_to_l_ 1014                     ?_initADC 0070                 ??__div_to_l_ 0026  
                   ?_initLCD 0070                     ?_isdigit 0070                    _scale$918 0049  
           ___lwdiv@quotient 0025                     ?_sprintf 0067               __size_of_scale 02B3  
          sampleVoltage@chan 0058               __size_of_pulse 0010            sampleVoltage@temp 005B  
            displayLCD@itemL 00C7              displayLCD@itemU 00C6                    _isrTimer0 19DB  
          interrupt_function 0004               ___wmul@product 0024                 ??_analogRead 0022  
                  clear_ram0 07F8           __end_of__div_to_l_ 165A                    _timeSetup 0801  
                 _ADCON0bits 001F                  __stringbase 1805            ___wmul@multiplier 0020  
                  _stopWatch 133F           __end_of_analogRead 1B68                 ??_displayLCD 00BD  
         stopWatch@startTime 00DC                   ?_isrTimer0 0070              ??_sampleCurrent 0054  
   __size_of_currentGainInit 0019              ??_sampleVoltage 0058                   ?_timeSetup 0070  
           ??_initController 0028                   _CMCON0bits 009C           __end_of_displayLCD 0798  
           __size_of___awdiv 005B             __size_of___ftadd 0109             __size_of___awmod 004D  
           __size_of___ftdiv 00B8             __size_of___ftneg 000A             __size_of___lldiv 0060  
           __size_of___ftmul 00D3             __size_of___llmod 004E             __size_of___ftsub 0021  
           __size_of___fttol 008E             __size_of___lwdiv 003E                     ___ftpack 1D19  
                   ___lbtoft 1956           __end_of__stringtab 1806                     ___lltoft 1A58  
                _isdigit$676 0020                     _cell1RDT 1882                     _cell2RDT 1884  
                   _cell3RDT 1886                     _cell4RDT 1888                     _cell5RDT 188A  
                   ___lwtoft 1925                     _cell6RDT 188C                  _currentGain 007C  
                 sprintf@exp 00B0                   sprintf@val 00AC             __size_of_initADC 000F  
           __size_of_initLCD 00A9                   ?_stopWatch 005B                     _cellVolt 00CA  
           __size_of_isdigit 0010              ___lwdiv@divisor 0020                     _handlePB 1C5E  
            ___lwdiv@counter 0027                     __ptext10 1ABE                     __ptext11 0801  
                   __ptext20 18DA                     __ptext12 18BB                     __ptext21 165A  
                   __ptext13 1C5E                     __ptext30 1BB5                     __ptext22 126C  
                   __ptext14 133F                     __ptext31 0798                     __ptext23 1001  
                   __ptext15 1E9F                     __ptext40 1AF6                     __ptext32 1E11  
                   __ptext24 1B68                     __ptext16 1A2D                     __ptext41 18EA  
                   __ptext33 1974                     __ptext25 1C03                     __ptext17 05E7  
                   __ptext42 18CA                     __ptext34 141E                     __ptext26 1014  
                   __ptext18 084B                     __ptext43 190D                     __ptext35 1D19  
                   __ptext27 1527                     __ptext19 0334                     __ptext44 193D  
                   __ptext36 18B1                     __ptext28 19B8                     __ptext45 18FB  
                   __ptext37 1CBA                     __ptext29 1A58                     __ptext46 19DB  
                   __ptext38 1995                     __ptext39 1A03                     __powers_ 1855  
                 _LCD4bitCmd 18EA             __size_of_sprintf 07B5               _LCDDisplayMode 00E5  
              __size_of_main 0037                     _refValue 00E3              LCDWriteString@a 0028  
            LCDWriteString@i 0026                   _LCDSetBits 190D                     _shuntRes 00E6  
                 _INTCONbits 000B               analogRead@chan 0024                     isdigit@c 0021  
             sampleCurrent@i 0057                     scale@scl 004C                  ??_isrTimer0 0070  
                   intlevel1 0000                    sprintf@ap 00A9             __tdiv_to_l_@exp1 002F  
           __tdiv_to_l_@cntr 002E                    sprintf@sp 00B6             __tdiv_to_l_@quot 002A  
           ___lldiv@dividend 0024                   _LVDCONbits 0109                  LCD4bitCmd@a 0022  
                  stringcode 1800                   _OSCCONbits 008F                  ??_timeSetup 0020  
          ??_currentGainInit 0020                 ?__tdiv_to_l_ 0020                     sprintf@c 00BC  
                   sprintf@f 0067  __size_of_sampleBatteryCells 02DB             ___lldiv@quotient 0029  
                ??_stopWatch 005F               sampleVoltage@i 0059                     stringdir 1800  
                   stringtab 1800          analogRead@returnVal 0025                  ?_LCD4bitCmd 0070  
         __CFG_FOSC$INTOSCIO 0000     __size_of_sampleReference 00C4      __size_of_LCDWriteString 0023  
