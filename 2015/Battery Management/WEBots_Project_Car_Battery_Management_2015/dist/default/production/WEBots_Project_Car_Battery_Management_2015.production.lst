

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jul 12 14:36:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011B                     	;# 
   138  011C                     	;# 
   139  011D                     	;# 
   140  011E                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143                           
   144                           	psect	idataCOMMON
   145  07FC                     __pidataCOMMON:	
   146                           
   147                           ;initializer for _supVolt
   148  07FC  3466               	retlw	102
   149  07FD  3486               	retlw	134
   150  07FE  3440               	retlw	64
   151                           
   152                           ;initializer for _currentGain
   153  07FF  34C8               	retlw	200
   154                           
   155                           	psect	idataBANK1
   156  1354                     __pidataBANK1:	
   157                           
   158                           ;initializer for _shuntRes
   159  1354  34D7               	retlw	215
   160  1355  3423               	retlw	35
   161  1356  343C               	retlw	60
   162                           
   163                           	psect	strings
   164  1000                     __pstrings:	
   165  1000                     stringtab:	
   166  1000                     __stringtab:	
   167                           
   168                           ;	String table - string pointers are 1 byte each
   169  1000  1BFF               	btfsc	btemp+1,7
   170  1001  280A               	ljmp	stringcode
   171  1002  1383               	bcf	3,7
   172  1003  187F               	btfsc	btemp+1,0
   173  1004  1783               	bsf	3,7
   174  1005  0800               	movf	0,w
   175  1006  0A84               	incf	4,f
   176  1007  1903               	skipnz
   177  1008  0AFF               	incf	btemp+1,f
   178  1009  0008               	return
   179  100A                     stringcode:	
   180  100A                     stringdir:	
   181  100A  3010               	movlw	high stringdir
   182  100B  008A               	movwf	10
   183  100C  0804               	movf	4,w
   184  100D  0A84               	incf	4,f
   185  100E  0782               	addwf	2,f
   186  100F                     __stringbase:	
   187  100F  3400               	retlw	0
   188  1010                     __end_of__stringtab:	
   189  1010                     _cellVoltL:	
   190  1010  34CD               	retlw	205
   191  1011  344C               	retlw	76
   192  1012  3440               	retlw	64
   193  1013                     __end_of_cellVoltL:	
   194  1013                     _convConst:	
   195  1013  3412               	retlw	18
   196  1014  3403               	retlw	3
   197  1015  343E               	retlw	62
   198  1016                     __end_of_convConst:	
   199  1016                     _refVolt:	
   200  1016  3462               	retlw	98
   201  1017  3490               	retlw	144
   202  1018  343F               	retlw	63
   203  1019                     __end_of_refVolt:	
   204  1019                     _sampleNum:	
   205  1019  340A               	retlw	10
   206  101A                     __end_of_sampleNum:	
   207  101A                     _cell1RR:	
   208  101A  34CD               	retlw	205
   209  101B  347C               	retlw	124
   210  101C  343F               	retlw	63
   211  101D                     __end_of_cell1RR:	
   212  101D                     _cell2RR:	
   213  101D  3472               	retlw	114
   214  101E  3407               	retlw	7
   215  101F  3440               	retlw	64
   216  1020                     __end_of_cell2RR:	
   217  1020                     _cell3RR:	
   218  1020  34AF               	retlw	175
   219  1021  3490               	retlw	144
   220  1022  3440               	retlw	64
   221  1023                     __end_of_cell3RR:	
   222  1023                     _cell4RR:	
   223  1023  3462               	retlw	98
   224  1024  34D4               	retlw	212
   225  1025  3440               	retlw	64
   226  1026                     __end_of_cell4RR:	
   227  1026                     _cell5RR:	
   228  1026  3481               	retlw	129
   229  1027  3410               	retlw	16
   230  1028  3441               	retlw	65
   231  1029                     __end_of_cell5RR:	
   232  1029                     _cell6RR:	
   233  1029  341F               	retlw	31
   234  102A  3432               	retlw	50
   235  102B  3441               	retlw	65
   236  102C                     __end_of_cell6RR:	
   237  001F                     _ADCON0	set	31
   238  001F                     _ADCON0bits	set	31
   239  001E                     _ADRESH	set	30
   240  0017                     _CCP1CON	set	23
   241  001D                     _CCP2CON	set	29
   242  000B                     _INTCONbits	set	11
   243  0005                     _PORTA	set	5
   244  0006                     _PORTB	set	6
   245  0007                     _PORTC	set	7
   246  0008                     _PORTD	set	8
   247  0009                     _PORTE	set	9
   248  0001                     _TMR0	set	1
   249  002E                     _RA6	set	46
   250  002F                     _RA7	set	47
   251  0030                     _RB0	set	48
   252  0031                     _RB1	set	49
   253  0032                     _RB2	set	50
   254  0033                     _RB3	set	51
   255  0034                     _RB4	set	52
   256  0035                     _RB5	set	53
   257  0038                     _RC0	set	56
   258  0039                     _RC1	set	57
   259  003A                     _RC2	set	58
   260  003B                     _RC3	set	59
   261  0040                     _RD0	set	64
   262  0041                     _RD1	set	65
   263  0042                     _RD2	set	66
   264  0044                     _RD4	set	68
   265  0045                     _RD5	set	69
   266  0047                     _RD7	set	71
   267  009F                     _ADCON1	set	159
   268  009E                     _ADRESL	set	158
   269  0091                     _ANSEL	set	145
   270  009C                     _CMCON0bits	set	156
   271  0081                     _OPTION_REGbits	set	129
   272  008F                     _OSCCONbits	set	143
   273  0085                     _TRISA	set	133
   274  0086                     _TRISB	set	134
   275  0087                     _TRISC	set	135
   276  0088                     _TRISD	set	136
   277  0089                     _TRISE	set	137
   278  0107                     _LCDCON	set	263
   279  0109                     _LVDCONbits	set	265
   280  102C                     STR_4:	
   281  102C  3420               	retlw	32	;' '
   282  102D  3441               	retlw	65	;'A'
   283  102E  3420               	retlw	32	;' '
   284  102F  3420               	retlw	32	;' '
   285  1030  3420               	retlw	32	;' '
   286  1031  3420               	retlw	32	;' '
   287  1032  3420               	retlw	32	;' '
   288  1033  3420               	retlw	32	;' '
   289  1034  3420               	retlw	32	;' '
   290  1035  3400               	retlw	0
   291  1036                     STR_8:	
   292  1036  3420               	retlw	32	;' '
   293  1037  3456               	retlw	86	;'V'
   294  1038  3420               	retlw	32	;' '
   295  1039  3420               	retlw	32	;' '
   296  103A  3420               	retlw	32	;' '
   297  103B  3420               	retlw	32	;' '
   298  103C  3420               	retlw	32	;' '
   299  103D  3420               	retlw	32	;' '
   300  103E  3420               	retlw	32	;' '
   301  103F  3400               	retlw	0
   302  1040                     STR_2:	
   303  1040  3420               	retlw	32	;' '
   304  1041  3456               	retlw	86	;'V'
   305  1042  3420               	retlw	32	;' '
   306  1043  3420               	retlw	32	;' '
   307  1044  3420               	retlw	32	;' '
   308  1045  3420               	retlw	32	;' '
   309  1046  3420               	retlw	32	;' '
   310  1047  3420               	retlw	32	;' '
   311  1048  3400               	retlw	0
   312  1049                     STR_1:	
   313  1049  3456               	retlw	86	;'V'
   314  104A  346F               	retlw	111	;'o'
   315  104B  346C               	retlw	108	;'l'
   316  104C  3474               	retlw	116	;'t'
   317  104D  3461               	retlw	97	;'a'
   318  104E  3467               	retlw	103	;'g'
   319  104F  3465               	retlw	101	;'e'
   320  1050  343A               	retlw	58	;':'
   321  1051  3400               	retlw	0
   322  1052                     STR_3:	
   323  1052  3443               	retlw	67	;'C'
   324  1053  3475               	retlw	117	;'u'
   325  1054  3472               	retlw	114	;'r'
   326  1055  3472               	retlw	114	;'r'
   327  1056  3465               	retlw	101	;'e'
   328  1057  346E               	retlw	110	;'n'
   329  1058  3474               	retlw	116	;'t'
   330  1059  343A               	retlw	58	;':'
   331  105A  3400               	retlw	0
   332  105B                     STR_5:	
   333  105B  3443               	retlw	67	;'C'
   334  105C  3465               	retlw	101	;'e'
   335  105D  346C               	retlw	108	;'l'
   336  105E  346C               	retlw	108	;'l'
   337  105F  3420               	retlw	32	;' '
   338  1060  3431               	retlw	49	;'1'
   339  1061  343A               	retlw	58	;':'
   340  1062  3400               	retlw	0
   341  1063                     STR_7:	
   342  1063  3443               	retlw	67	;'C'
   343  1064  3465               	retlw	101	;'e'
   344  1065  346C               	retlw	108	;'l'
   345  1066  346C               	retlw	108	;'l'
   346  1067  3420               	retlw	32	;' '
   347  1068  3432               	retlw	50	;'2'
   348  1069  343A               	retlw	58	;':'
   349  106A  3400               	retlw	0
   350  106B                     STR_9:	
   351  106B  3443               	retlw	67	;'C'
   352  106C  3465               	retlw	101	;'e'
   353  106D  346C               	retlw	108	;'l'
   354  106E  346C               	retlw	108	;'l'
   355  106F  3420               	retlw	32	;' '
   356  1070  3433               	retlw	51	;'3'
   357  1071  343A               	retlw	58	;':'
   358  1072  3400               	retlw	0
   359  1073                     STR_11:	
   360  1073  3443               	retlw	67	;'C'
   361  1074  3465               	retlw	101	;'e'
   362  1075  346C               	retlw	108	;'l'
   363  1076  346C               	retlw	108	;'l'
   364  1077  3420               	retlw	32	;' '
   365  1078  3434               	retlw	52	;'4'
   366  1079  343A               	retlw	58	;':'
   367  107A  3400               	retlw	0
   368  107B                     STR_13:	
   369  107B  3443               	retlw	67	;'C'
   370  107C  3465               	retlw	101	;'e'
   371  107D  346C               	retlw	108	;'l'
   372  107E  346C               	retlw	108	;'l'
   373  107F  3420               	retlw	32	;' '
   374  1080  3435               	retlw	53	;'5'
   375  1081  343A               	retlw	58	;':'
   376  1082  3400               	retlw	0
   377  1083                     STR_15:	
   378  1083  3443               	retlw	67	;'C'
   379  1084  3465               	retlw	101	;'e'
   380  1085  346C               	retlw	108	;'l'
   381  1086  346C               	retlw	108	;'l'
   382  1087  3420               	retlw	32	;' '
   383  1088  3436               	retlw	54	;'6'
   384  1089  343A               	retlw	58	;':'
   385  108A  3400               	retlw	0
   386  1036                     
   387                           ; #config settings
   388  0000                     
   389                           	psect	cinit
   390  0015                     start_initialization:	
   391  0015                     __initialization:	
   392                           
   393                           ; Clear objects allocated to COMMON
   394  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   395  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   396                           
   397                           ; Clear objects allocated to BANK1
   398  0017  1383               	bcf	3,7	;select IRP bank0
   399  0018  30CD               	movlw	low __pbssBANK1
   400  0019  0084               	movwf	4
   401  001A  30EB               	movlw	low (__pbssBANK1+30)
   402  001B  160A  118A  2357  120A  118A  	fcall	clear_ram0
   403                           
   404                           ; Clear objects allocated to BANK3
   405  0020  1783               	bsf	3,7	;select IRP bank2
   406  0021  3090               	movlw	low __pbssBANK3
   407  0022  0084               	movwf	4
   408  0023  30C0               	movlw	low (__pbssBANK3+48)
   409  0024  160A  118A  2357  120A  118A  	fcall	clear_ram0
   410                           
   411                           ; Initialize objects allocated to BANK1
   412  0029  1683               	bsf	3,5	;RP0=1, select bank1
   413  002A  1303               	bcf	3,6	;RP1=0, select bank1
   414  002B  160A  118A  2354  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   415  0030  00EB               	movwf	__pdataBANK1& (0+127)
   416  0031  160A  118A  2355  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   417  0036  00EC               	movwf	(__pdataBANK1+1)& (0+127)
   418  0037  160A  118A  2356  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   419  003C  00ED               	movwf	(__pdataBANK1+2)& (0+127)
   420                           
   421                           ; Initialize objects allocated to COMMON
   422  003D  120A  118A  27FC  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   423  0042  00F8               	movwf	__pdataCOMMON& (0+127)
   424  0043  120A  118A  27FD  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   425  0048  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   426  0049  120A  118A  27FE  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   427  004E  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
   428  004F  120A  118A  27FF   	fcall	__pidataCOMMON+3	;fetch initializer
   429  0052  00FB               	movwf	(__pdataCOMMON+3)& (0+127)
   430  0053                     end_of_initialization:	
   431                           ;End of C runtime variable initialization code
   432                           
   433  0053                     __end_of__initialization:	
   434  0053  0183               	clrf	3
   435  0054  160A  118A  2CAE   	ljmp	_main	;jump to C main() function
   436                           
   437                           	psect	bssCOMMON
   438  007C                     __pbssCOMMON:	
   439  007C                     _refValue:	
   440  007C                     	ds	2
   441                           
   442                           	psect	dataCOMMON
   443  0078                     __pdataCOMMON:	
   444  0078                     _supVolt:	
   445  0078                     	ds	3
   446  007B                     _currentGain:	
   447  007B                     	ds	1
   448                           
   449                           	psect	bssBANK1
   450  00CD                     __pbssBANK1:	
   451  00CD                     _cellVolt:	
   452  00CD                     	ds	18
   453  00DF                     _time:	
   454  00DF                     	ds	4
   455  00E3                     stopWatch@startTime:	
   456  00E3                     	ds	4
   457  00E7                     _current:	
   458  00E7                     	ds	3
   459  00EA                     _LCDDisplayMode:	
   460  00EA                     	ds	1
   461                           
   462                           	psect	dataBANK1
   463  00EB                     __pdataBANK1:	
   464  00EB                     _shuntRes:	
   465  00EB                     	ds	3
   466                           
   467                           	psect	bssBANK3
   468  0190                     __pbssBANK3:	
   469  0190                     _btmStr:	
   470  0190                     	ds	16
   471  01A0                     _topStr:	
   472  01A0                     	ds	16
   473  01B0                     displayLCD@F2781:	
   474  01B0                     	ds	8
   475  01B8                     displayLCD@F2783:	
   476  01B8                     	ds	8
   477                           
   478                           	psect	clrtext
   479  1357                     clear_ram0:	
   480                           ;	Called with FSR containing the base address, and
   481                           ;	W with the last address+1
   482                           
   483  1357  0064               	clrwdt	;clear the watchdog before getting into this loop
   484  1358                     clrloop0:	
   485  1358  0180               	clrf	0	;clear RAM location pointed to by FSR
   486  1359  0A84               	incf	4,f	;increment pointer
   487  135A  0604               	xorwf	4,w	;XOR with final address
   488  135B  1903               	btfsc	3,2	;have we reached the end yet?
   489  135C  3400               	retlw	0	;all done for this memory range, return
   490  135D  0604               	xorwf	4,w	;XOR again to restore value
   491  135E  2B58               	goto	clrloop0	;do the next byte
   492                           
   493                           	psect	cstackBANK1
   494  00A0                     __pcstackBANK1:	
   495  00A0                     ??_floatToASCII:	
   496  00A0                     ??_stopWatch:	
   497                           ; 0 bytes @ 0x0
   498                           
   499                           
   500                           ; 0 bytes @ 0x0
   501  00A0                     	ds	5
   502  00A5                     floatToASCII@j_342:	
   503                           
   504                           ; 1 bytes @ 0x5
   505  00A5                     	ds	1
   506  00A6                     floatToASCII@leading:	
   507                           
   508                           ; 1 bytes @ 0x6
   509  00A6                     	ds	1
   510  00A7                     floatToASCII@decPoint:	
   511                           
   512                           ; 1 bytes @ 0x7
   513  00A7                     	ds	1
   514  00A8                     floatToASCII@j:	
   515                           
   516                           ; 2 bytes @ 0x8
   517  00A8                     	ds	2
   518  00AA                     floatToASCII@k:	
   519                           
   520                           ; 1 bytes @ 0xA
   521  00AA                     	ds	1
   522  00AB                     floatToASCII@prevSum:	
   523                           
   524                           ; 4 bytes @ 0xB
   525  00AB                     	ds	1
   526  00AC                     stopWatch@mode:	
   527                           
   528                           ; 1 bytes @ 0xC
   529  00AC                     	ds	1
   530  00AD                     stopWatch@temp:	
   531                           
   532                           ; 4 bytes @ 0xD
   533  00AD                     	ds	2
   534  00AF                     floatToASCII@scaler:	
   535                           
   536                           ; 4 bytes @ 0xF
   537  00AF                     	ds	2
   538  00B1                     ??_handlePB:	
   539                           
   540                           ; 0 bytes @ 0x11
   541  00B1                     	ds	2
   542  00B3                     floatToASCII@i:	
   543                           
   544                           ; 1 bytes @ 0x13
   545  00B3                     	ds	1
   546  00B4                     floatToASCII@returnVal:	
   547                           
   548                           ; 1 bytes @ 0x14
   549  00B4                     	ds	1
   550  00B5                     ?_displayLCD:	
   551  00B5                     displayLCD@disp:	
   552                           ; 0 bytes @ 0x15
   553                           
   554                           
   555                           ; 2 bytes @ 0x15
   556  00B5                     	ds	2
   557  00B7                     ??_displayLCD:	
   558                           
   559                           ; 0 bytes @ 0x17
   560  00B7                     	ds	4
   561  00BB                     displayLCD@temp1:	
   562                           
   563                           ; 8 bytes @ 0x1B
   564  00BB                     	ds	8
   565  00C3                     displayLCD@temp2:	
   566                           
   567                           ; 8 bytes @ 0x23
   568  00C3                     	ds	8
   569  00CB                     ??_main:	
   570                           
   571                           ; 0 bytes @ 0x2B
   572  00CB                     	ds	2
   573                           
   574                           	psect	cstackCOMMON
   575  0070                     __pcstackCOMMON:	
   576  0070                     ?_LCDSetBits:	
   577  0070                     ?_pulse:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0070                     ?_LCDcmd:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0070                     ?_currentGainInit:	
   584                           ; 0 bytes @ 0x0
   585                           
   586  0070                     ?_sampleReference:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0070                     ?_sampleCurrent:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_sampleBatteryCells:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0070                     ?_handlePB:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0070                     ?_initLCD:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0070                     ?_LCD4bitCmd:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0070                     ?_LCDWriteChar:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0070                     ?_LCDSetCursor:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_timeSetup:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0070                     ?_isrTimer0:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ??_isrTimer0:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0070                     ?_initADC:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_initController:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?_isr:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_main:	
   629                           ; 0 bytes @ 0x0
   630                           
   631                           
   632                           ; 0 bytes @ 0x0
   633  0070                     	ds	4
   634  0074                     ??_isr:	
   635                           
   636                           ; 0 bytes @ 0x4
   637  0074                     	ds	4
   638                           
   639                           	psect	cstackBANK0
   640  0020                     __pcstackBANK0:	
   641  0020                     ??_LCDSetBits:	
   642  0020                     ??_pulse:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0020                     ??_currentGainInit:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0020                     ??_timeSetup:	
   649                           ; 0 bytes @ 0x0
   650                           
   651  0020                     ??_initADC:	
   652                           ; 0 bytes @ 0x0
   653                           
   654  0020                     ?_analogRead:	
   655                           ; 0 bytes @ 0x0
   656                           
   657  0020                     ?___lwdiv:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0020                     ?___ftpack:	
   661                           ; 2 bytes @ 0x0
   662                           
   663  0020                     ?___lmul:	
   664                           ; 3 bytes @ 0x0
   665                           
   666  0020                     ?___lldiv:	
   667                           ; 4 bytes @ 0x0
   668                           
   669  0020                     LCDSetBits@a:	
   670                           ; 4 bytes @ 0x0
   671                           
   672  0020                     currentGainInit@gain:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0020                     ___lwdiv@divisor:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0020                     ___ftpack@arg:	
   679                           ; 2 bytes @ 0x0
   680                           
   681  0020                     ___lmul@multiplier:	
   682                           ; 3 bytes @ 0x0
   683                           
   684  0020                     ___lldiv@divisor:	
   685                           ; 4 bytes @ 0x0
   686                           
   687                           
   688                           ; 4 bytes @ 0x0
   689  0020                     	ds	2
   690  0022                     ??_LCDcmd:	
   691  0022                     ??_LCD4bitCmd:	
   692                           ; 0 bytes @ 0x2
   693                           
   694  0022                     ??_LCDWriteChar:	
   695                           ; 0 bytes @ 0x2
   696                           
   697  0022                     ??_analogRead:	
   698                           ; 0 bytes @ 0x2
   699                           
   700  0022                     LCD4bitCmd@a:	
   701                           ; 0 bytes @ 0x2
   702                           
   703  0022                     ___lwdiv@dividend:	
   704                           ; 1 bytes @ 0x2
   705                           
   706                           
   707                           ; 2 bytes @ 0x2
   708  0022                     	ds	1
   709  0023                     ??_LCDSetCursor:	
   710  0023                     ___ftpack@exp:	
   711                           ; 0 bytes @ 0x3
   712                           
   713                           
   714                           ; 1 bytes @ 0x3
   715  0023                     	ds	1
   716  0024                     ??___lwdiv:	
   717  0024                     LCDcmd@a:	
   718                           ; 0 bytes @ 0x4
   719                           
   720  0024                     LCDWriteChar@a:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  0024                     analogRead@chan:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0024                     ___ftpack@sign:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0024                     ___lmul@multiplicand:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0024                     ___lldiv@dividend:	
   733                           ; 4 bytes @ 0x4
   734                           
   735                           
   736                           ; 4 bytes @ 0x4
   737  0024                     	ds	1
   738  0025                     ??___ftpack:	
   739  0025                     ??_initLCD:	
   740                           ; 0 bytes @ 0x5
   741                           
   742  0025                     ?_LCDWriteString:	
   743                           ; 0 bytes @ 0x5
   744                           
   745  0025                     LCDSetCursor@a:	
   746                           ; 0 bytes @ 0x5
   747                           
   748  0025                     LCDWriteString@a:	
   749                           ; 1 bytes @ 0x5
   750                           
   751  0025                     analogRead@returnVal:	
   752                           ; 2 bytes @ 0x5
   753                           
   754  0025                     ___lwdiv@quotient:	
   755                           ; 2 bytes @ 0x5
   756                           
   757                           
   758                           ; 2 bytes @ 0x5
   759  0025                     	ds	2
   760  0027                     ??_LCDWriteString:	
   761  0027                     ___lwdiv@counter:	
   762                           ; 0 bytes @ 0x7
   763                           
   764                           
   765                           ; 1 bytes @ 0x7
   766  0027                     	ds	1
   767  0028                     ??_initController:	
   768  0028                     ??___lmul:	
   769                           ; 0 bytes @ 0x8
   770                           
   771  0028                     ??___lldiv:	
   772                           ; 0 bytes @ 0x8
   773                           
   774  0028                     ?___lbtoft:	
   775                           ; 0 bytes @ 0x8
   776                           
   777  0028                     ?___lltoft:	
   778                           ; 3 bytes @ 0x8
   779                           
   780  0028                     ?___lwtoft:	
   781                           ; 3 bytes @ 0x8
   782                           
   783  0028                     ___lwtoft@c:	
   784                           ; 3 bytes @ 0x8
   785                           
   786  0028                     ___lltoft@c:	
   787                           ; 2 bytes @ 0x8
   788                           
   789                           
   790                           ; 4 bytes @ 0x8
   791  0028                     	ds	1
   792  0029                     ___lmul@product:	
   793  0029                     ___lldiv@quotient:	
   794                           ; 4 bytes @ 0x9
   795                           
   796                           
   797                           ; 4 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     LCDWriteString@i:	
   800                           
   801                           ; 2 bytes @ 0xA
   802  002A                     	ds	1
   803  002B                     ??___lbtoft:	
   804  002B                     ??___lwtoft:	
   805                           ; 0 bytes @ 0xB
   806                           
   807                           
   808                           ; 0 bytes @ 0xB
   809  002B                     	ds	1
   810  002C                     ??___lltoft:	
   811                           
   812                           ; 0 bytes @ 0xC
   813  002C                     	ds	1
   814  002D                     ___lldiv@counter:	
   815  002D                     ___lltoft@exp:	
   816                           ; 1 bytes @ 0xD
   817                           
   818                           
   819                           ; 1 bytes @ 0xD
   820  002D                     	ds	1
   821  002E                     ?___ftneg:	
   822  002E                     ___ftneg@f1:	
   823                           ; 3 bytes @ 0xE
   824                           
   825                           
   826                           ; 3 bytes @ 0xE
   827  002E                     	ds	1
   828  002F                     ___lbtoft@c:	
   829                           
   830                           ; 1 bytes @ 0xF
   831  002F                     	ds	2
   832  0031                     ??___ftneg:	
   833  0031                     ?___ftadd:	
   834                           ; 0 bytes @ 0x11
   835                           
   836  0031                     ___ftadd@f1:	
   837                           ; 3 bytes @ 0x11
   838                           
   839                           
   840                           ; 3 bytes @ 0x11
   841  0031                     	ds	3
   842  0034                     ___ftadd@f2:	
   843                           
   844                           ; 3 bytes @ 0x14
   845  0034                     	ds	3
   846  0037                     ??___ftadd:	
   847                           
   848                           ; 0 bytes @ 0x17
   849  0037                     	ds	4
   850  003B                     ___ftadd@sign:	
   851                           
   852                           ; 1 bytes @ 0x1B
   853  003B                     	ds	1
   854  003C                     ___ftadd@exp2:	
   855                           
   856                           ; 1 bytes @ 0x1C
   857  003C                     	ds	1
   858  003D                     ___ftadd@exp1:	
   859                           
   860                           ; 1 bytes @ 0x1D
   861  003D                     	ds	1
   862  003E                     ?___ftmul:	
   863  003E                     ___ftmul@f1:	
   864                           ; 3 bytes @ 0x1E
   865                           
   866                           
   867                           ; 3 bytes @ 0x1E
   868  003E                     	ds	3
   869  0041                     ___ftmul@f2:	
   870                           
   871                           ; 3 bytes @ 0x21
   872  0041                     	ds	3
   873  0044                     ??___ftmul:	
   874                           
   875                           ; 0 bytes @ 0x24
   876  0044                     	ds	4
   877  0048                     ___ftmul@exp:	
   878                           
   879                           ; 1 bytes @ 0x28
   880  0048                     	ds	1
   881  0049                     ___ftmul@f3_as_product:	
   882                           
   883                           ; 3 bytes @ 0x29
   884  0049                     	ds	3
   885  004C                     ___ftmul@cntr:	
   886                           
   887                           ; 1 bytes @ 0x2C
   888  004C                     	ds	1
   889  004D                     ___ftmul@sign:	
   890                           
   891                           ; 1 bytes @ 0x2D
   892  004D                     	ds	1
   893  004E                     ?___ftdiv:	
   894  004E                     ___ftdiv@f2:	
   895                           ; 3 bytes @ 0x2E
   896                           
   897                           
   898                           ; 3 bytes @ 0x2E
   899  004E                     	ds	3
   900  0051                     ___ftdiv@f1:	
   901                           
   902                           ; 3 bytes @ 0x31
   903  0051                     	ds	3
   904  0054                     ??___ftdiv:	
   905                           
   906                           ; 0 bytes @ 0x34
   907  0054                     	ds	4
   908  0058                     ___ftdiv@cntr:	
   909                           
   910                           ; 1 bytes @ 0x38
   911  0058                     	ds	1
   912  0059                     ___ftdiv@f3:	
   913                           
   914                           ; 3 bytes @ 0x39
   915  0059                     	ds	3
   916  005C                     ___ftdiv@exp:	
   917                           
   918                           ; 1 bytes @ 0x3C
   919  005C                     	ds	1
   920  005D                     ___ftdiv@sign:	
   921                           
   922                           ; 1 bytes @ 0x3D
   923  005D                     	ds	1
   924  005E                     ??_sampleReference:	
   925  005E                     ??_sampleCurrent:	
   926                           ; 0 bytes @ 0x3E
   927                           
   928  005E                     ?_sampleVoltage:	
   929                           ; 0 bytes @ 0x3E
   930                           
   931  005E                     ?___fttol:	
   932                           ; 3 bytes @ 0x3E
   933                           
   934  005E                     ___fttol@f1:	
   935                           ; 4 bytes @ 0x3E
   936                           
   937                           
   938                           ; 3 bytes @ 0x3E
   939  005E                     	ds	2
   940  0060                     sampleReference@i:	
   941  0060                     _sampleCurrent$891:	
   942                           ; 2 bytes @ 0x40
   943                           
   944                           
   945                           ; 3 bytes @ 0x40
   946  0060                     	ds	1
   947  0061                     ??_sampleVoltage:	
   948                           
   949                           ; 0 bytes @ 0x41
   950  0061                     	ds	1
   951  0062                     ??___fttol:	
   952                           
   953                           ; 0 bytes @ 0x42
   954  0062                     	ds	1
   955  0063                     sampleVoltage@chan:	
   956  0063                     sampleCurrent@i:	
   957                           ; 1 bytes @ 0x43
   958                           
   959                           
   960                           ; 2 bytes @ 0x43
   961  0063                     	ds	1
   962  0064                     sampleVoltage@i:	
   963                           
   964                           ; 2 bytes @ 0x44
   965  0064                     	ds	1
   966  0065                     sampleCurrent@temp:	
   967                           
   968                           ; 2 bytes @ 0x45
   969  0065                     	ds	1
   970  0066                     ___fttol@sign1:	
   971  0066                     sampleVoltage@temp:	
   972                           ; 1 bytes @ 0x46
   973                           
   974                           
   975                           ; 2 bytes @ 0x46
   976  0066                     	ds	1
   977  0067                     ___fttol@lval:	
   978                           
   979                           ; 4 bytes @ 0x47
   980  0067                     	ds	1
   981  0068                     ??_sampleBatteryCells:	
   982                           
   983                           ; 0 bytes @ 0x48
   984  0068                     	ds	2
   985  006A                     _sampleBatteryCells$889:	
   986                           
   987                           ; 3 bytes @ 0x4A
   988  006A                     	ds	1
   989  006B                     ___fttol@exp1:	
   990                           
   991                           ; 1 bytes @ 0x4B
   992  006B                     	ds	1
   993  006C                     ?_floatToASCII:	
   994  006C                     ?_stopWatch:	
   995                           ; 0 bytes @ 0x4C
   996                           
   997  006C                     floatToASCII@num:	
   998                           ; 4 bytes @ 0x4C
   999                           
  1000                           
  1001                           ; 3 bytes @ 0x4C
  1002  006C                     	ds	1
  1003  006D                     _sampleBatteryCells$890:	
  1004                           
  1005                           ; 3 bytes @ 0x4D
  1006  006D                     	ds	2
  1007  006F                     floatToASCII@precision:	
  1008                           
  1009                           ; 1 bytes @ 0x4F
  1010  006F                     	ds	1
  1011                           
  1012                           	psect	maintext
  1013  14AE                     __pmaintext:	
  1014 ;;
  1015 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1016 ;;
  1017 ;; *************** function _main *****************
  1018 ;; Defined at:
  1019 ;;		line 64 in file "PIC16F917 Battery Management.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : B00/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0
  1035 ;;      Temps:          0       0       2       0       0
  1036 ;;      Totals:         0       0       2       0       0
  1037 ;;Total ram usage:        2 bytes
  1038 ;; Hardware stack levels required when called:    6
  1039 ;; This function calls:
  1040 ;;		_currentGainInit
  1041 ;;		_displayLCD
  1042 ;;		_handlePB
  1043 ;;		_initController
  1044 ;;		_sampleBatteryCells
  1045 ;;		_sampleCurrent
  1046 ;;		_sampleReference
  1047 ;; This function is called by:
  1048 ;;		Startup code after reset
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _main
  1054  14AE                     _main:	
  1055                           
  1056                           ;PIC16F917 Battery Management.c: 66: initController();
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1060  14AE  160A  118A  24DF  160A  118A  	fcall	_initController
  1061                           
  1062                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
  1063  14B3  1283               	bcf	3,5	;RP0=0, select bank0
  1064  14B4  1303               	bcf	3,6	;RP1=0, select bank0
  1065  14B5  1608               	bsf	8,4	;volatile
  1066                           
  1067                           ;PIC16F917 Battery Management.c: 72: currentGainInit(200);
  1068  14B6  30C8               	movlw	200
  1069  14B7  160A  118A  23C9  160A  118A  	fcall	_currentGainInit
  1070  14BC                     l2631:	
  1071                           ;PIC16F917 Battery Management.c: 75: while(1)
  1072                           
  1073                           
  1074                           ;PIC16F917 Battery Management.c: 76: {
  1075                           ;PIC16F917 Battery Management.c: 77: sampleReference();
  1076  14BC  120A  158A  2152  160A  118A  	fcall	_sampleReference
  1077                           
  1078                           ;PIC16F917 Battery Management.c: 78: sampleCurrent();
  1079  14C1  120A  118A  2710  160A  118A  	fcall	_sampleCurrent
  1080                           
  1081                           ;PIC16F917 Battery Management.c: 79: sampleBatteryCells();
  1082  14C6  120A  118A  2057  160A  118A  	fcall	_sampleBatteryCells
  1083                           
  1084                           ;PIC16F917 Battery Management.c: 81: handlePB();
  1085  14CB  160A  118A  2648  160A  118A  	fcall	_handlePB
  1086                           
  1087                           ;PIC16F917 Battery Management.c: 83: displayLCD(LCDDisplayMode);
  1088  14D0  1683               	bsf	3,5	;RP0=1, select bank1
  1089  14D1  1303               	bcf	3,6	;RP1=0, select bank1
  1090  14D2  086A               	movf	_LCDDisplayMode^(0+128),w
  1091  14D3  00CB               	movwf	??_main^(0+128)
  1092  14D4  01CC               	clrf	(??_main^(0+128)+1)
  1093  14D5  084B               	movf	??_main^(0+128),w
  1094  14D6  00B5               	movwf	displayLCD@disp^(0+128)
  1095  14D7  084C               	movf	(??_main+1)^(0+128),w
  1096  14D8  00B6               	movwf	(displayLCD@disp+1)^(0+128)
  1097  14D9  120A  158A  259F  160A  118A  	fcall	_displayLCD
  1098  14DE  2CBC               	goto	l2631
  1099  14DF                     __end_of_main:	
  1100                           
  1101                           	psect	text1
  1102  0952                     __ptext1:	
  1103 ;; *************** function _sampleReference *****************
  1104 ;; Defined at:
  1105 ;;		line 120 in file "PIC16F917 Battery Management.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  i               2   64[BANK0 ] int 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;		None               void
  1112 ;; Registers used:
  1113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1119 ;;      Params:         0       0       0       0       0
  1120 ;;      Locals:         0       2       0       0       0
  1121 ;;      Temps:          0       2       0       0       0
  1122 ;;      Totals:         0       4       0       0       0
  1123 ;;Total ram usage:        4 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    4
  1126 ;; This function calls:
  1127 ;;		___ftdiv
  1128 ;;		___ftmul
  1129 ;;		___lwdiv
  1130 ;;		___lwtoft
  1131 ;;		_analogRead
  1132 ;; This function is called by:
  1133 ;;		_main
  1134 ;;		_checkCurrent
  1135 ;;		_systemCheck
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           
  1140                           ;psect for function _sampleReference
  1141  0952                     _sampleReference:	
  1142                           
  1143                           ;PIC16F917 Battery Management.c: 123: RD1 = 1;
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1147  0952  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0953  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0954  1488               	bsf	8,1	;volatile
  1150                           
  1151                           ;PIC16F917 Battery Management.c: 125: RC2 = 1;
  1152  0955  1507               	bsf	7,2	;volatile
  1153                           
  1154                           ;PIC16F917 Battery Management.c: 127: _delay((unsigned long)((2)*(8000000/4000.0)));
  1155  0956  3006               	movlw	6
  1156  0957  00DF               	movwf	??_sampleReference+1
  1157  0958  3030               	movlw	48
  1158  0959  00DE               	movwf	??_sampleReference
  1159  095A                     u2947:	
  1160  095A  0BDE               	decfsz	??_sampleReference,f
  1161  095B  295A               	goto	u2947
  1162  095C  0BDF               	decfsz	??_sampleReference+1,f
  1163  095D  295A               	goto	u2947
  1164  095E  0000               	nop
  1165                           
  1166                           ;PIC16F917 Battery Management.c: 129: analogRead(REFV);
  1167  095F  3002               	movlw	2
  1168  0960  160A  118A  254F  120A  158A  	fcall	_analogRead
  1169                           
  1170                           ;PIC16F917 Battery Management.c: 131: refValue = 0;
  1171  0965  01FC               	clrf	_refValue
  1172  0966  01FD               	clrf	_refValue+1
  1173                           
  1174                           ;PIC16F917 Battery Management.c: 133: for ( int i = 0; i <= sampleNum; i++)
  1175  0967  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0968  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0969  01E0               	clrf	sampleReference@i
  1178  096A  01E1               	clrf	sampleReference@i+1
  1179  096B  300A               	movlw	low (_sampleNum-__stringbase)
  1180  096C  0084               	movwf	4
  1181  096D  160A  118A  200A  120A  158A  	fcall	stringdir
  1182  0972  00DE               	movwf	??_sampleReference
  1183  0973  0861               	movf	sampleReference@i+1,w
  1184  0974  3A80               	xorlw	128
  1185  0975  3C80               	sublw	128
  1186  0976  1D03               	skipz
  1187  0977  297A               	goto	u2705
  1188  0978  0860               	movf	sampleReference@i,w
  1189  0979  025E               	subwf	??_sampleReference,w
  1190  097A                     u2705:	
  1191  097A  1C03               	btfss	3,0
  1192  097B  29A1               	goto	l2411
  1193  097C                     l2405:	
  1194                           
  1195                           ;PIC16F917 Battery Management.c: 134: {
  1196                           ;PIC16F917 Battery Management.c: 135: refValue += analogRead(REFV);
  1197  097C  3002               	movlw	2
  1198  097D  160A  118A  254F  120A  158A  	fcall	_analogRead
  1199  0982  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0983  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0984  0820               	movf	?_analogRead,w
  1202  0985  07FC               	addwf	_refValue,f
  1203  0986  1803               	skipnc
  1204  0987  0AFD               	incf	_refValue+1,f
  1205  0988  0821               	movf	?_analogRead+1,w
  1206  0989  07FD               	addwf	_refValue+1,f
  1207  098A  3001               	movlw	1
  1208  098B  07E0               	addwf	sampleReference@i,f
  1209  098C  1803               	skipnc
  1210  098D  0AE1               	incf	sampleReference@i+1,f
  1211  098E  3000               	movlw	0
  1212  098F  07E1               	addwf	sampleReference@i+1,f
  1213  0990  300A               	movlw	low (_sampleNum-__stringbase)
  1214  0991  0084               	movwf	4
  1215  0992  160A  118A  200A  120A  158A  	fcall	stringdir
  1216  0997  00DE               	movwf	??_sampleReference
  1217  0998  0861               	movf	sampleReference@i+1,w
  1218  0999  3A80               	xorlw	128
  1219  099A  3C80               	sublw	128
  1220  099B  1D03               	skipz
  1221  099C  299F               	goto	u2715
  1222  099D  0860               	movf	sampleReference@i,w
  1223  099E  025E               	subwf	??_sampleReference,w
  1224  099F                     u2715:	
  1225  099F  1803               	skipnc
  1226  09A0  297C               	goto	l2405
  1227  09A1                     l2411:	
  1228                           
  1229                           ;PIC16F917 Battery Management.c: 136: }
  1230                           ;PIC16F917 Battery Management.c: 138: refValue = refValue / sampleNum;
  1231  09A1  300A               	movlw	low (_sampleNum-__stringbase)
  1232  09A2  0084               	movwf	4
  1233  09A3  160A  118A  200A  120A  158A  	fcall	stringdir
  1234  09A8  1283               	bcf	3,5	;RP0=0, select bank0
  1235  09A9  1303               	bcf	3,6	;RP1=0, select bank0
  1236  09AA  00DE               	movwf	??_sampleReference
  1237  09AB  01DF               	clrf	??_sampleReference+1
  1238  09AC  085E               	movf	??_sampleReference,w
  1239  09AD  00A0               	movwf	___lwdiv@divisor
  1240  09AE  085F               	movf	??_sampleReference+1,w
  1241  09AF  00A1               	movwf	___lwdiv@divisor+1
  1242  09B0  087D               	movf	_refValue+1,w
  1243  09B1  00A3               	movwf	___lwdiv@dividend+1
  1244  09B2  087C               	movf	_refValue,w
  1245  09B3  00A2               	movwf	___lwdiv@dividend
  1246  09B4  160A  118A  2588  120A  158A  	fcall	___lwdiv
  1247  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  1248  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  1249  09BB  0821               	movf	?___lwdiv+1,w
  1250  09BC  00FD               	movwf	_refValue+1
  1251  09BD  0820               	movf	?___lwdiv,w
  1252  09BE  00FC               	movwf	_refValue
  1253                           
  1254                           ;PIC16F917 Battery Management.c: 141: RD1 = 0;
  1255  09BF  1088               	bcf	8,1	;volatile
  1256                           
  1257                           ;PIC16F917 Battery Management.c: 143: RC2 = 0;
  1258  09C0  1107               	bcf	7,2	;volatile
  1259                           
  1260                           ;PIC16F917 Battery Management.c: 145: supVolt = (refVolt * 1023)/refValue;
  1261  09C1  087D               	movf	_refValue+1,w
  1262  09C2  00A9               	movwf	___lwtoft@c+1
  1263  09C3  087C               	movf	_refValue,w
  1264  09C4  00A8               	movwf	___lwtoft@c
  1265  09C5  160A  118A  23B1  120A  158A  	fcall	___lwtoft
  1266  09CA  1283               	bcf	3,5	;RP0=0, select bank0
  1267  09CB  1303               	bcf	3,6	;RP1=0, select bank0
  1268  09CC  0828               	movf	?___lwtoft,w
  1269  09CD  00CE               	movwf	___ftdiv@f2
  1270  09CE  0829               	movf	?___lwtoft+1,w
  1271  09CF  00CF               	movwf	___ftdiv@f2+1
  1272  09D0  082A               	movf	?___lwtoft+2,w
  1273  09D1  00D0               	movwf	___ftdiv@f2+2
  1274  09D2  30C0               	movlw	192
  1275  09D3  00BE               	movwf	___ftmul@f1
  1276  09D4  307F               	movlw	127
  1277  09D5  00BF               	movwf	___ftmul@f1+1
  1278  09D6  3044               	movlw	68
  1279  09D7  00C0               	movwf	___ftmul@f1+2
  1280  09D8  3007               	movlw	low (_refVolt-__stringbase)
  1281  09D9  0084               	movwf	4
  1282  09DA  160A  118A  200A  120A  158A  	fcall	stringdir
  1283  09DF  00C1               	movwf	___ftmul@f2
  1284  09E0  160A  118A  200A  120A  158A  	fcall	stringdir
  1285  09E5  00C2               	movwf	___ftmul@f2+1
  1286  09E6  160A  118A  200A  120A  158A  	fcall	stringdir
  1287  09EB  00C3               	movwf	___ftmul@f2+2
  1288  09EC  120A  158A  22BD  120A  158A  	fcall	___ftmul
  1289  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  1290  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  1291  09F3  083E               	movf	?___ftmul,w
  1292  09F4  00D1               	movwf	___ftdiv@f1
  1293  09F5  083F               	movf	?___ftmul+1,w
  1294  09F6  00D2               	movwf	___ftdiv@f1+1
  1295  09F7  0840               	movf	?___ftmul+2,w
  1296  09F8  00D3               	movwf	___ftdiv@f1+2
  1297  09F9  120A  158A  2205   	fcall	___ftdiv
  1298  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  1299  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  1300  09FE  084E               	movf	?___ftdiv,w
  1301  09FF  00F8               	movwf	_supVolt
  1302  0A00  084F               	movf	?___ftdiv+1,w
  1303  0A01  00F9               	movwf	_supVolt+1
  1304  0A02  0850               	movf	?___ftdiv+2,w
  1305  0A03  00FA               	movwf	_supVolt+2
  1306  0A04  0008               	return
  1307  0A05                     __end_of_sampleReference:	
  1308                           
  1309                           	psect	text2
  1310  0710                     __ptext2:	
  1311 ;; *************** function _sampleCurrent *****************
  1312 ;; Defined at:
  1313 ;;		line 165 in file "PIC16F917 Battery Management.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  i               2   67[BANK0 ] int 
  1318 ;;  temp            2   69[BANK0 ] unsigned int 
  1319 ;; Return value:  Size  Location     Type
  1320 ;;		None               void
  1321 ;; Registers used:
  1322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         0       0       0       0       0
  1329 ;;      Locals:         0       7       0       0       0
  1330 ;;      Temps:          0       2       0       0       0
  1331 ;;      Totals:         0       9       0       0       0
  1332 ;;Total ram usage:        9 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    4
  1335 ;; This function calls:
  1336 ;;		___ftdiv
  1337 ;;		___ftmul
  1338 ;;		___lbtoft
  1339 ;;		___lwdiv
  1340 ;;		___lwtoft
  1341 ;;		_analogRead
  1342 ;; This function is called by:
  1343 ;;		_main
  1344 ;;		_checkCurrent
  1345 ;;		_systemCheck
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _sampleCurrent
  1351  0710                     _sampleCurrent:	
  1352                           
  1353                           ;PIC16F917 Battery Management.c: 167: uint16_t temp = 0;
  1354                           
  1355                           ;incstack = 0
  1356                           ; Regs used in _sampleCurrent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1357  0710  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0711  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0712  01E5               	clrf	sampleCurrent@temp
  1360  0713  01E6               	clrf	sampleCurrent@temp+1
  1361                           
  1362                           ;PIC16F917 Battery Management.c: 169: for ( int i = 0; i <= sampleNum; i++)
  1363  0714  01E3               	clrf	sampleCurrent@i
  1364  0715  01E4               	clrf	sampleCurrent@i+1
  1365  0716  300A               	movlw	low (_sampleNum-__stringbase)
  1366  0717  0084               	movwf	4
  1367  0718  160A  118A  200A  120A  118A  	fcall	stringdir
  1368  071D  00DE               	movwf	??_sampleCurrent
  1369  071E  0864               	movf	sampleCurrent@i+1,w
  1370  071F  3A80               	xorlw	128
  1371  0720  3C80               	sublw	128
  1372  0721  1D03               	skipz
  1373  0722  2F25               	goto	u2725
  1374  0723  0863               	movf	sampleCurrent@i,w
  1375  0724  025E               	subwf	??_sampleCurrent,w
  1376  0725                     u2725:	
  1377  0725  1C03               	btfss	3,0
  1378  0726  2F4C               	goto	l2429
  1379  0727                     l2423:	
  1380                           
  1381                           ;PIC16F917 Battery Management.c: 170: {
  1382                           ;PIC16F917 Battery Management.c: 171: temp += analogRead(CURRENT);
  1383  0727  3007               	movlw	7
  1384  0728  160A  118A  254F  120A  118A  	fcall	_analogRead
  1385  072D  1283               	bcf	3,5	;RP0=0, select bank0
  1386  072E  1303               	bcf	3,6	;RP1=0, select bank0
  1387  072F  0820               	movf	?_analogRead,w
  1388  0730  07E5               	addwf	sampleCurrent@temp,f
  1389  0731  1803               	skipnc
  1390  0732  0AE6               	incf	sampleCurrent@temp+1,f
  1391  0733  0821               	movf	?_analogRead+1,w
  1392  0734  07E6               	addwf	sampleCurrent@temp+1,f
  1393  0735  3001               	movlw	1
  1394  0736  07E3               	addwf	sampleCurrent@i,f
  1395  0737  1803               	skipnc
  1396  0738  0AE4               	incf	sampleCurrent@i+1,f
  1397  0739  3000               	movlw	0
  1398  073A  07E4               	addwf	sampleCurrent@i+1,f
  1399  073B  300A               	movlw	low (_sampleNum-__stringbase)
  1400  073C  0084               	movwf	4
  1401  073D  160A  118A  200A  120A  118A  	fcall	stringdir
  1402  0742  00DE               	movwf	??_sampleCurrent
  1403  0743  0864               	movf	sampleCurrent@i+1,w
  1404  0744  3A80               	xorlw	128
  1405  0745  3C80               	sublw	128
  1406  0746  1D03               	skipz
  1407  0747  2F4A               	goto	u2735
  1408  0748  0863               	movf	sampleCurrent@i,w
  1409  0749  025E               	subwf	??_sampleCurrent,w
  1410  074A                     u2735:	
  1411  074A  1803               	skipnc
  1412  074B  2F27               	goto	l2423
  1413  074C                     l2429:	
  1414                           
  1415                           ;PIC16F917 Battery Management.c: 172: }
  1416                           ;PIC16F917 Battery Management.c: 174: temp = temp / sampleNum;
  1417  074C  300A               	movlw	low (_sampleNum-__stringbase)
  1418  074D  0084               	movwf	4
  1419  074E  160A  118A  200A  120A  118A  	fcall	stringdir
  1420  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1421  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1422  0755  00DE               	movwf	??_sampleCurrent
  1423  0756  01DF               	clrf	??_sampleCurrent+1
  1424  0757  085E               	movf	??_sampleCurrent,w
  1425  0758  00A0               	movwf	___lwdiv@divisor
  1426  0759  085F               	movf	??_sampleCurrent+1,w
  1427  075A  00A1               	movwf	___lwdiv@divisor+1
  1428  075B  0866               	movf	sampleCurrent@temp+1,w
  1429  075C  00A3               	movwf	___lwdiv@dividend+1
  1430  075D  0865               	movf	sampleCurrent@temp,w
  1431  075E  00A2               	movwf	___lwdiv@dividend
  1432  075F  160A  118A  2588  120A  118A  	fcall	___lwdiv
  1433  0764  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0765  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0766  0821               	movf	?___lwdiv+1,w
  1436  0767  00E6               	movwf	sampleCurrent@temp+1
  1437  0768  0820               	movf	?___lwdiv,w
  1438  0769  00E5               	movwf	sampleCurrent@temp
  1439                           
  1440                           ;PIC16F917 Battery Management.c: 179: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1441  076A  30C0               	movlw	192
  1442  076B  00CE               	movwf	___ftdiv@f2
  1443  076C  307F               	movlw	127
  1444  076D  00CF               	movwf	___ftdiv@f2+1
  1445  076E  3044               	movlw	68
  1446  076F  00D0               	movwf	___ftdiv@f2+2
  1447  0770  0878               	movf	_supVolt,w
  1448  0771  00BE               	movwf	___ftmul@f1
  1449  0772  0879               	movf	_supVolt+1,w
  1450  0773  00BF               	movwf	___ftmul@f1+1
  1451  0774  087A               	movf	_supVolt+2,w
  1452  0775  00C0               	movwf	___ftmul@f1+2
  1453  0776  0866               	movf	sampleCurrent@temp+1,w
  1454  0777  00A9               	movwf	___lwtoft@c+1
  1455  0778  0865               	movf	sampleCurrent@temp,w
  1456  0779  00A8               	movwf	___lwtoft@c
  1457  077A  160A  118A  23B1  120A  118A  	fcall	___lwtoft
  1458  077F  1283               	bcf	3,5	;RP0=0, select bank0
  1459  0780  1303               	bcf	3,6	;RP1=0, select bank0
  1460  0781  0828               	movf	?___lwtoft,w
  1461  0782  00C1               	movwf	___ftmul@f2
  1462  0783  0829               	movf	?___lwtoft+1,w
  1463  0784  00C2               	movwf	___ftmul@f2+1
  1464  0785  082A               	movf	?___lwtoft+2,w
  1465  0786  00C3               	movwf	___ftmul@f2+2
  1466  0787  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1467  078C  1283               	bcf	3,5	;RP0=0, select bank0
  1468  078D  1303               	bcf	3,6	;RP1=0, select bank0
  1469  078E  083E               	movf	?___ftmul,w
  1470  078F  00D1               	movwf	___ftdiv@f1
  1471  0790  083F               	movf	?___ftmul+1,w
  1472  0791  00D2               	movwf	___ftdiv@f1+1
  1473  0792  0840               	movf	?___ftmul+2,w
  1474  0793  00D3               	movwf	___ftdiv@f1+2
  1475  0794  120A  158A  2205  120A  118A  	fcall	___ftdiv
  1476  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1477  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1478  079B  084E               	movf	?___ftdiv,w
  1479  079C  00E0               	movwf	_sampleCurrent$891
  1480  079D  084F               	movf	?___ftdiv+1,w
  1481  079E  00E1               	movwf	_sampleCurrent$891+1
  1482  079F  0850               	movf	?___ftdiv+2,w
  1483  07A0  00E2               	movwf	_sampleCurrent$891+2
  1484                           
  1485                           ;PIC16F917 Battery Management.c: 179: current = ((temp * supVolt)/1023) / (shuntRes * cu
      +                          rrentGain);
  1486  07A1  1683               	bsf	3,5	;RP0=1, select bank1
  1487  07A2  1303               	bcf	3,6	;RP1=0, select bank1
  1488  07A3  086B               	movf	_shuntRes^(0+128),w
  1489  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1490  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1491  07A6  00BE               	movwf	___ftmul@f1
  1492  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  1493  07A8  1303               	bcf	3,6	;RP1=0, select bank1
  1494  07A9  086C               	movf	(_shuntRes+1)^(0+128),w
  1495  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  1496  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  1497  07AC  00BF               	movwf	___ftmul@f1+1
  1498  07AD  1683               	bsf	3,5	;RP0=1, select bank1
  1499  07AE  1303               	bcf	3,6	;RP1=0, select bank1
  1500  07AF  086D               	movf	(_shuntRes+2)^(0+128),w
  1501  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  1502  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  1503  07B2  00C0               	movwf	___ftmul@f1+2
  1504  07B3  087B               	movf	_currentGain,w
  1505  07B4  160A  118A  23E2  120A  118A  	fcall	___lbtoft
  1506  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1507  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  1508  07BB  0828               	movf	?___lbtoft,w
  1509  07BC  00C1               	movwf	___ftmul@f2
  1510  07BD  0829               	movf	?___lbtoft+1,w
  1511  07BE  00C2               	movwf	___ftmul@f2+1
  1512  07BF  082A               	movf	?___lbtoft+2,w
  1513  07C0  00C3               	movwf	___ftmul@f2+2
  1514  07C1  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1515  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1516  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  1517  07C8  083E               	movf	?___ftmul,w
  1518  07C9  00CE               	movwf	___ftdiv@f2
  1519  07CA  083F               	movf	?___ftmul+1,w
  1520  07CB  00CF               	movwf	___ftdiv@f2+1
  1521  07CC  0840               	movf	?___ftmul+2,w
  1522  07CD  00D0               	movwf	___ftdiv@f2+2
  1523  07CE  0860               	movf	_sampleCurrent$891,w
  1524  07CF  00D1               	movwf	___ftdiv@f1
  1525  07D0  0861               	movf	_sampleCurrent$891+1,w
  1526  07D1  00D2               	movwf	___ftdiv@f1+1
  1527  07D2  0862               	movf	_sampleCurrent$891+2,w
  1528  07D3  00D3               	movwf	___ftdiv@f1+2
  1529  07D4  120A  158A  2205   	fcall	___ftdiv
  1530  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  1531  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  1532  07D9  084E               	movf	?___ftdiv,w
  1533  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  1534  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  1535  07DC  00E7               	movwf	_current^(0+128)
  1536  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  1537  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  1538  07DF  084F               	movf	?___ftdiv+1,w
  1539  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  1540  07E1  1303               	bcf	3,6	;RP1=0, select bank1
  1541  07E2  00E8               	movwf	(_current+1)^(0+128)
  1542  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  1543  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  1544  07E5  0850               	movf	?___ftdiv+2,w
  1545  07E6  1683               	bsf	3,5	;RP0=1, select bank1
  1546  07E7  1303               	bcf	3,6	;RP1=0, select bank1
  1547  07E8  00E9               	movwf	(_current+2)^(0+128)
  1548  07E9  0008               	return
  1549  07EA                     __end_of_sampleCurrent:	
  1550                           
  1551                           	psect	text3
  1552  13E2                     __ptext3:	
  1553 ;; *************** function ___lbtoft *****************
  1554 ;; Defined at:
  1555 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  c               1    wreg     unsigned char 
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;  c               1   15[BANK0 ] unsigned char 
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  3    8[BANK0 ] float 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2, status,0, pclath, cstack
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1569 ;;      Params:         0       3       0       0       0
  1570 ;;      Locals:         0       1       0       0       0
  1571 ;;      Temps:          0       4       0       0       0
  1572 ;;      Totals:         0       8       0       0       0
  1573 ;;Total ram usage:        8 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    3
  1576 ;; This function calls:
  1577 ;;		___ftpack
  1578 ;; This function is called by:
  1579 ;;		_sampleCurrent
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           
  1584                           ;psect for function ___lbtoft
  1585  13E2                     ___lbtoft:	
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1589                           ;___lbtoft@c stored from wreg
  1590  13E2  1283               	bcf	3,5	;RP0=0, select bank0
  1591  13E3  1303               	bcf	3,6	;RP1=0, select bank0
  1592  13E4  00AF               	movwf	___lbtoft@c
  1593  13E5  082F               	movf	___lbtoft@c,w
  1594  13E6  00AB               	movwf	??___lbtoft
  1595  13E7  01AC               	clrf	??___lbtoft+1
  1596  13E8  01AD               	clrf	??___lbtoft+2
  1597  13E9  082B               	movf	??___lbtoft,w
  1598  13EA  00A0               	movwf	___ftpack@arg
  1599  13EB  082C               	movf	??___lbtoft+1,w
  1600  13EC  00A1               	movwf	___ftpack@arg+1
  1601  13ED  082D               	movf	??___lbtoft+2,w
  1602  13EE  00A2               	movwf	___ftpack@arg+2
  1603  13EF  308E               	movlw	142
  1604  13F0  00AE               	movwf	??___lbtoft+3
  1605  13F1  082E               	movf	??___lbtoft+3,w
  1606  13F2  00A3               	movwf	___ftpack@exp
  1607  13F3  01A4               	clrf	___ftpack@sign
  1608  13F4  160A  118A  2704   	fcall	___ftpack
  1609  13F7  1283               	bcf	3,5	;RP0=0, select bank0
  1610  13F8  1303               	bcf	3,6	;RP1=0, select bank0
  1611  13F9  0820               	movf	?___ftpack,w
  1612  13FA  00A8               	movwf	?___lbtoft
  1613  13FB  0821               	movf	?___ftpack+1,w
  1614  13FC  00A9               	movwf	?___lbtoft+1
  1615  13FD  0822               	movf	?___ftpack+2,w
  1616  13FE  00AA               	movwf	?___lbtoft+2
  1617  13FF  0008               	return
  1618  1400                     __end_of___lbtoft:	
  1619                           
  1620                           	psect	text4
  1621  0057                     __ptext4:	
  1622 ;; *************** function _sampleBatteryCells *****************
  1623 ;; Defined at:
  1624 ;;		line 89 in file "PIC16F917 Battery Management.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;		None               void
  1631 ;; Registers used:
  1632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1638 ;;      Params:         0       0       0       0       0
  1639 ;;      Locals:         0       6       0       0       0
  1640 ;;      Temps:          0       2       0       0       0
  1641 ;;      Totals:         0       8       0       0       0
  1642 ;;Total ram usage:        8 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    5
  1645 ;; This function calls:
  1646 ;;		___ftadd
  1647 ;;		___ftmul
  1648 ;;		_sampleVoltage
  1649 ;; This function is called by:
  1650 ;;		_main
  1651 ;;		_systemCheck
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _sampleBatteryCells
  1657  0057                     _sampleBatteryCells:	
  1658                           
  1659                           ;PIC16F917 Battery Management.c: 92: RC2 = 1;
  1660                           
  1661                           ;incstack = 0
  1662                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1663  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1665  0059  1507               	bsf	7,2	;volatile
  1666                           
  1667                           ;PIC16F917 Battery Management.c: 95: RD0 = 1;
  1668  005A  1408               	bsf	8,0	;volatile
  1669                           
  1670                           ;PIC16F917 Battery Management.c: 97: _delay((unsigned long)((5)*(8000000/4000.0)));
  1671  005B  300D               	movlw	13
  1672  005C  00E9               	movwf	??_sampleBatteryCells+1
  1673  005D  30FB               	movlw	251
  1674  005E  00E8               	movwf	??_sampleBatteryCells
  1675  005F                     u2957:	
  1676  005F  0BE8               	decfsz	??_sampleBatteryCells,f
  1677  0060  285F               	goto	u2957
  1678  0061  0BE9               	decfsz	??_sampleBatteryCells+1,f
  1679  0062  285F               	goto	u2957
  1680  0063  2864               	nop2
  1681                           
  1682                           ;PIC16F917 Battery Management.c: 101: cellVolt[0] = 0.1 * ( cell1RR + 1 ) * sampleVoltag
      +                          e(CELL1) + 0.9 * cellVolt[0];
  1683  0064  3000               	movlw	0
  1684  0065  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  1685  006A  1283               	bcf	3,5	;RP0=0, select bank0
  1686  006B  1303               	bcf	3,6	;RP1=0, select bank0
  1687  006C  085E               	movf	?_sampleVoltage,w
  1688  006D  00EA               	movwf	_sampleBatteryCells$889
  1689  006E  085F               	movf	?_sampleVoltage+1,w
  1690  006F  00EB               	movwf	_sampleBatteryCells$889+1
  1691  0070  0860               	movf	?_sampleVoltage+2,w
  1692  0071  00EC               	movwf	_sampleBatteryCells$889+2
  1693                           
  1694                           ;PIC16F917 Battery Management.c: 101: cellVolt[0] = 0.1 * ( cell1RR + 1 ) * sampleVoltag
      +                          e(CELL1) + 0.9 * cellVolt[0];
  1695  0072  086A               	movf	_sampleBatteryCells$889,w
  1696  0073  00BE               	movwf	___ftmul@f1
  1697  0074  086B               	movf	_sampleBatteryCells$889+1,w
  1698  0075  00BF               	movwf	___ftmul@f1+1
  1699  0076  086C               	movf	_sampleBatteryCells$889+2,w
  1700  0077  00C0               	movwf	___ftmul@f1+2
  1701  0078  3000               	movlw	0
  1702  0079  00B1               	movwf	___ftadd@f1
  1703  007A  3080               	movlw	128
  1704  007B  00B2               	movwf	___ftadd@f1+1
  1705  007C  303F               	movlw	63
  1706  007D  00B3               	movwf	___ftadd@f1+2
  1707  007E  300B               	movlw	low (_cell1RR-__stringbase)
  1708  007F  0084               	movwf	4
  1709  0080  160A  118A  200A  120A  118A  	fcall	stringdir
  1710  0085  00B4               	movwf	___ftadd@f2
  1711  0086  160A  118A  200A  120A  118A  	fcall	stringdir
  1712  008B  00B5               	movwf	___ftadd@f2+1
  1713  008C  160A  118A  200A  120A  118A  	fcall	stringdir
  1714  0091  00B6               	movwf	___ftadd@f2+2
  1715  0092  120A  158A  2496  120A  118A  	fcall	___ftadd
  1716  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0099  0831               	movf	?___ftadd,w
  1719  009A  00C1               	movwf	___ftmul@f2
  1720  009B  0832               	movf	?___ftadd+1,w
  1721  009C  00C2               	movwf	___ftmul@f2+1
  1722  009D  0833               	movf	?___ftadd+2,w
  1723  009E  00C3               	movwf	___ftmul@f2+2
  1724  009F  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1725  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1726  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1727  00A6  083E               	movf	?___ftmul,w
  1728  00A7  00ED               	movwf	_sampleBatteryCells$890
  1729  00A8  083F               	movf	?___ftmul+1,w
  1730  00A9  00EE               	movwf	_sampleBatteryCells$890+1
  1731  00AA  0840               	movf	?___ftmul+2,w
  1732  00AB  00EF               	movwf	_sampleBatteryCells$890+2
  1733                           
  1734                           ;PIC16F917 Battery Management.c: 101: cellVolt[0] = 0.1 * ( cell1RR + 1 ) * sampleVoltag
      +                          e(CELL1) + 0.9 * cellVolt[0];
  1735  00AC  3066               	movlw	102
  1736  00AD  00BE               	movwf	___ftmul@f1
  1737  00AE  3066               	movlw	102
  1738  00AF  00BF               	movwf	___ftmul@f1+1
  1739  00B0  303F               	movlw	63
  1740  00B1  00C0               	movwf	___ftmul@f1+2
  1741  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1742  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  1743  00B4  084D               	movf	_cellVolt^(0+128),w
  1744  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1745  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1746  00B7  00C1               	movwf	___ftmul@f2
  1747  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1748  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  1749  00BA  084E               	movf	(_cellVolt+1)^(0+128),w
  1750  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1751  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1752  00BD  00C2               	movwf	___ftmul@f2+1
  1753  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1754  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1755  00C0  084F               	movf	(_cellVolt+2)^(0+128),w
  1756  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1757  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1758  00C3  00C3               	movwf	___ftmul@f2+2
  1759  00C4  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1760  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1761  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1762  00CB  083E               	movf	?___ftmul,w
  1763  00CC  00B1               	movwf	___ftadd@f1
  1764  00CD  083F               	movf	?___ftmul+1,w
  1765  00CE  00B2               	movwf	___ftadd@f1+1
  1766  00CF  0840               	movf	?___ftmul+2,w
  1767  00D0  00B3               	movwf	___ftadd@f1+2
  1768  00D1  30CD               	movlw	205
  1769  00D2  00BE               	movwf	___ftmul@f1
  1770  00D3  30CC               	movlw	204
  1771  00D4  00BF               	movwf	___ftmul@f1+1
  1772  00D5  303D               	movlw	61
  1773  00D6  00C0               	movwf	___ftmul@f1+2
  1774  00D7  086D               	movf	_sampleBatteryCells$890,w
  1775  00D8  00C1               	movwf	___ftmul@f2
  1776  00D9  086E               	movf	_sampleBatteryCells$890+1,w
  1777  00DA  00C2               	movwf	___ftmul@f2+1
  1778  00DB  086F               	movf	_sampleBatteryCells$890+2,w
  1779  00DC  00C3               	movwf	___ftmul@f2+2
  1780  00DD  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1781  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1782  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1783  00E4  083E               	movf	?___ftmul,w
  1784  00E5  00B4               	movwf	___ftadd@f2
  1785  00E6  083F               	movf	?___ftmul+1,w
  1786  00E7  00B5               	movwf	___ftadd@f2+1
  1787  00E8  0840               	movf	?___ftmul+2,w
  1788  00E9  00B6               	movwf	___ftadd@f2+2
  1789  00EA  120A  158A  2496  120A  118A  	fcall	___ftadd
  1790  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1791  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1792  00F1  0831               	movf	?___ftadd,w
  1793  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1794  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1795  00F4  00CD               	movwf	_cellVolt^(0+128)
  1796  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1797  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1798  00F7  0832               	movf	?___ftadd+1,w
  1799  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1800  00F9  1303               	bcf	3,6	;RP1=0, select bank1
  1801  00FA  00CE               	movwf	(_cellVolt+1)^(0+128)
  1802  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1803  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1804  00FD  0833               	movf	?___ftadd+2,w
  1805  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1806  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  1807  0100  00CF               	movwf	(_cellVolt+2)^(0+128)
  1808                           
  1809                           ;PIC16F917 Battery Management.c: 102: cellVolt[1] = 0.1 * ( cell2RR + 1 ) * sampleVoltag
      +                          e(CELL2) + 0.9 * cellVolt[1];
  1810  0101  3001               	movlw	1
  1811  0102  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  1812  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0109  085E               	movf	?_sampleVoltage,w
  1815  010A  00EA               	movwf	_sampleBatteryCells$889
  1816  010B  085F               	movf	?_sampleVoltage+1,w
  1817  010C  00EB               	movwf	_sampleBatteryCells$889+1
  1818  010D  0860               	movf	?_sampleVoltage+2,w
  1819  010E  00EC               	movwf	_sampleBatteryCells$889+2
  1820                           
  1821                           ;PIC16F917 Battery Management.c: 102: cellVolt[1] = 0.1 * ( cell2RR + 1 ) * sampleVoltag
      +                          e(CELL2) + 0.9 * cellVolt[1];
  1822  010F  086A               	movf	_sampleBatteryCells$889,w
  1823  0110  00BE               	movwf	___ftmul@f1
  1824  0111  086B               	movf	_sampleBatteryCells$889+1,w
  1825  0112  00BF               	movwf	___ftmul@f1+1
  1826  0113  086C               	movf	_sampleBatteryCells$889+2,w
  1827  0114  00C0               	movwf	___ftmul@f1+2
  1828  0115  3000               	movlw	0
  1829  0116  00B1               	movwf	___ftadd@f1
  1830  0117  3080               	movlw	128
  1831  0118  00B2               	movwf	___ftadd@f1+1
  1832  0119  303F               	movlw	63
  1833  011A  00B3               	movwf	___ftadd@f1+2
  1834  011B  300E               	movlw	low (_cell2RR-__stringbase)
  1835  011C  0084               	movwf	4
  1836  011D  160A  118A  200A  120A  118A  	fcall	stringdir
  1837  0122  00B4               	movwf	___ftadd@f2
  1838  0123  160A  118A  200A  120A  118A  	fcall	stringdir
  1839  0128  00B5               	movwf	___ftadd@f2+1
  1840  0129  160A  118A  200A  120A  118A  	fcall	stringdir
  1841  012E  00B6               	movwf	___ftadd@f2+2
  1842  012F  120A  158A  2496  120A  118A  	fcall	___ftadd
  1843  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0136  0831               	movf	?___ftadd,w
  1846  0137  00C1               	movwf	___ftmul@f2
  1847  0138  0832               	movf	?___ftadd+1,w
  1848  0139  00C2               	movwf	___ftmul@f2+1
  1849  013A  0833               	movf	?___ftadd+2,w
  1850  013B  00C3               	movwf	___ftmul@f2+2
  1851  013C  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1852  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0143  083E               	movf	?___ftmul,w
  1855  0144  00ED               	movwf	_sampleBatteryCells$890
  1856  0145  083F               	movf	?___ftmul+1,w
  1857  0146  00EE               	movwf	_sampleBatteryCells$890+1
  1858  0147  0840               	movf	?___ftmul+2,w
  1859  0148  00EF               	movwf	_sampleBatteryCells$890+2
  1860                           
  1861                           ;PIC16F917 Battery Management.c: 102: cellVolt[1] = 0.1 * ( cell2RR + 1 ) * sampleVoltag
      +                          e(CELL2) + 0.9 * cellVolt[1];
  1862  0149  3066               	movlw	102
  1863  014A  00BE               	movwf	___ftmul@f1
  1864  014B  3066               	movlw	102
  1865  014C  00BF               	movwf	___ftmul@f1+1
  1866  014D  303F               	movlw	63
  1867  014E  00C0               	movwf	___ftmul@f1+2
  1868  014F  3003               	movlw	3
  1869  0150  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  1870  0151  0084               	movwf	4
  1871  0152  1383               	bcf	3,7	;select IRP bank1
  1872  0153  0800               	movf	0,w
  1873  0154  00C1               	movwf	___ftmul@f2
  1874  0155  0A84               	incf	4,f
  1875  0156  0800               	movf	0,w
  1876  0157  00C2               	movwf	___ftmul@f2+1
  1877  0158  0A84               	incf	4,f
  1878  0159  0800               	movf	0,w
  1879  015A  00C3               	movwf	___ftmul@f2+2
  1880  015B  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1881  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0162  083E               	movf	?___ftmul,w
  1884  0163  00B1               	movwf	___ftadd@f1
  1885  0164  083F               	movf	?___ftmul+1,w
  1886  0165  00B2               	movwf	___ftadd@f1+1
  1887  0166  0840               	movf	?___ftmul+2,w
  1888  0167  00B3               	movwf	___ftadd@f1+2
  1889  0168  30CD               	movlw	205
  1890  0169  00BE               	movwf	___ftmul@f1
  1891  016A  30CC               	movlw	204
  1892  016B  00BF               	movwf	___ftmul@f1+1
  1893  016C  303D               	movlw	61
  1894  016D  00C0               	movwf	___ftmul@f1+2
  1895  016E  086D               	movf	_sampleBatteryCells$890,w
  1896  016F  00C1               	movwf	___ftmul@f2
  1897  0170  086E               	movf	_sampleBatteryCells$890+1,w
  1898  0171  00C2               	movwf	___ftmul@f2+1
  1899  0172  086F               	movf	_sampleBatteryCells$890+2,w
  1900  0173  00C3               	movwf	___ftmul@f2+2
  1901  0174  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1902  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1903  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1904  017B  083E               	movf	?___ftmul,w
  1905  017C  00B4               	movwf	___ftadd@f2
  1906  017D  083F               	movf	?___ftmul+1,w
  1907  017E  00B5               	movwf	___ftadd@f2+1
  1908  017F  0840               	movf	?___ftmul+2,w
  1909  0180  00B6               	movwf	___ftadd@f2+2
  1910  0181  120A  158A  2496  120A  118A  	fcall	___ftadd
  1911  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0188  0831               	movf	?___ftadd,w
  1914  0189  1683               	bsf	3,5	;RP0=1, select bank1
  1915  018A  1303               	bcf	3,6	;RP1=0, select bank1
  1916  018B  00D0               	movwf	(_cellVolt^(0+128)+3)
  1917  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1918  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1919  018E  0832               	movf	?___ftadd+1,w
  1920  018F  1683               	bsf	3,5	;RP0=1, select bank1
  1921  0190  1303               	bcf	3,6	;RP1=0, select bank1
  1922  0191  00D1               	movwf	((_cellVolt+1)^(0+128)+3)
  1923  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1924  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1925  0194  0833               	movf	?___ftadd+2,w
  1926  0195  1683               	bsf	3,5	;RP0=1, select bank1
  1927  0196  1303               	bcf	3,6	;RP1=0, select bank1
  1928  0197  00D2               	movwf	((_cellVolt+2)^(0+128)+3)
  1929                           
  1930                           ;PIC16F917 Battery Management.c: 103: cellVolt[2] = 0.1 * ( cell3RR + 1 ) * sampleVoltag
      +                          e(CELL3) + 0.9 * cellVolt[2];
  1931  0198  3005               	movlw	5
  1932  0199  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  1933  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1934  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1935  01A0  085E               	movf	?_sampleVoltage,w
  1936  01A1  00EA               	movwf	_sampleBatteryCells$889
  1937  01A2  085F               	movf	?_sampleVoltage+1,w
  1938  01A3  00EB               	movwf	_sampleBatteryCells$889+1
  1939  01A4  0860               	movf	?_sampleVoltage+2,w
  1940  01A5  00EC               	movwf	_sampleBatteryCells$889+2
  1941                           
  1942                           ;PIC16F917 Battery Management.c: 103: cellVolt[2] = 0.1 * ( cell3RR + 1 ) * sampleVoltag
      +                          e(CELL3) + 0.9 * cellVolt[2];
  1943  01A6  086A               	movf	_sampleBatteryCells$889,w
  1944  01A7  00BE               	movwf	___ftmul@f1
  1945  01A8  086B               	movf	_sampleBatteryCells$889+1,w
  1946  01A9  00BF               	movwf	___ftmul@f1+1
  1947  01AA  086C               	movf	_sampleBatteryCells$889+2,w
  1948  01AB  00C0               	movwf	___ftmul@f1+2
  1949  01AC  3000               	movlw	0
  1950  01AD  00B1               	movwf	___ftadd@f1
  1951  01AE  3080               	movlw	128
  1952  01AF  00B2               	movwf	___ftadd@f1+1
  1953  01B0  303F               	movlw	63
  1954  01B1  00B3               	movwf	___ftadd@f1+2
  1955  01B2  3011               	movlw	low (_cell3RR-__stringbase)
  1956  01B3  0084               	movwf	4
  1957  01B4  160A  118A  200A  120A  118A  	fcall	stringdir
  1958  01B9  00B4               	movwf	___ftadd@f2
  1959  01BA  160A  118A  200A  120A  118A  	fcall	stringdir
  1960  01BF  00B5               	movwf	___ftadd@f2+1
  1961  01C0  160A  118A  200A  120A  118A  	fcall	stringdir
  1962  01C5  00B6               	movwf	___ftadd@f2+2
  1963  01C6  120A  158A  2496  120A  118A  	fcall	___ftadd
  1964  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1965  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1966  01CD  0831               	movf	?___ftadd,w
  1967  01CE  00C1               	movwf	___ftmul@f2
  1968  01CF  0832               	movf	?___ftadd+1,w
  1969  01D0  00C2               	movwf	___ftmul@f2+1
  1970  01D1  0833               	movf	?___ftadd+2,w
  1971  01D2  00C3               	movwf	___ftmul@f2+2
  1972  01D3  120A  158A  22BD  120A  118A  	fcall	___ftmul
  1973  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1974  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1975  01DA  083E               	movf	?___ftmul,w
  1976  01DB  00ED               	movwf	_sampleBatteryCells$890
  1977  01DC  083F               	movf	?___ftmul+1,w
  1978  01DD  00EE               	movwf	_sampleBatteryCells$890+1
  1979  01DE  0840               	movf	?___ftmul+2,w
  1980  01DF  00EF               	movwf	_sampleBatteryCells$890+2
  1981                           
  1982                           ;PIC16F917 Battery Management.c: 103: cellVolt[2] = 0.1 * ( cell3RR + 1 ) * sampleVoltag
      +                          e(CELL3) + 0.9 * cellVolt[2];
  1983  01E0  3066               	movlw	102
  1984  01E1  00BE               	movwf	___ftmul@f1
  1985  01E2  3066               	movlw	102
  1986  01E3  00BF               	movwf	___ftmul@f1+1
  1987  01E4  303F               	movlw	63
  1988  01E5  00C0               	movwf	___ftmul@f1+2
  1989  01E6  3006               	movlw	6
  1990  01E7  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  1991  01E8  0084               	movwf	4
  1992  01E9  1383               	bcf	3,7	;select IRP bank1
  1993  01EA  0800               	movf	0,w
  1994  01EB  00C1               	movwf	___ftmul@f2
  1995  01EC  0A84               	incf	4,f
  1996  01ED  0800               	movf	0,w
  1997  01EE  00C2               	movwf	___ftmul@f2+1
  1998  01EF  0A84               	incf	4,f
  1999  01F0  0800               	movf	0,w
  2000  01F1  00C3               	movwf	___ftmul@f2+2
  2001  01F2  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2002  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2003  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2004  01F9  083E               	movf	?___ftmul,w
  2005  01FA  00B1               	movwf	___ftadd@f1
  2006  01FB  083F               	movf	?___ftmul+1,w
  2007  01FC  00B2               	movwf	___ftadd@f1+1
  2008  01FD  0840               	movf	?___ftmul+2,w
  2009  01FE  00B3               	movwf	___ftadd@f1+2
  2010  01FF  30CD               	movlw	205
  2011  0200  00BE               	movwf	___ftmul@f1
  2012  0201  30CC               	movlw	204
  2013  0202  00BF               	movwf	___ftmul@f1+1
  2014  0203  303D               	movlw	61
  2015  0204  00C0               	movwf	___ftmul@f1+2
  2016  0205  086D               	movf	_sampleBatteryCells$890,w
  2017  0206  00C1               	movwf	___ftmul@f2
  2018  0207  086E               	movf	_sampleBatteryCells$890+1,w
  2019  0208  00C2               	movwf	___ftmul@f2+1
  2020  0209  086F               	movf	_sampleBatteryCells$890+2,w
  2021  020A  00C3               	movwf	___ftmul@f2+2
  2022  020B  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2023  0210  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0211  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0212  083E               	movf	?___ftmul,w
  2026  0213  00B4               	movwf	___ftadd@f2
  2027  0214  083F               	movf	?___ftmul+1,w
  2028  0215  00B5               	movwf	___ftadd@f2+1
  2029  0216  0840               	movf	?___ftmul+2,w
  2030  0217  00B6               	movwf	___ftadd@f2+2
  2031  0218  120A  158A  2496  120A  118A  	fcall	___ftadd
  2032  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2033  021E  1303               	bcf	3,6	;RP1=0, select bank0
  2034  021F  0831               	movf	?___ftadd,w
  2035  0220  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0221  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0222  00D3               	movwf	(_cellVolt^(0+128)+6)
  2038  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2040  0225  0832               	movf	?___ftadd+1,w
  2041  0226  1683               	bsf	3,5	;RP0=1, select bank1
  2042  0227  1303               	bcf	3,6	;RP1=0, select bank1
  2043  0228  00D4               	movwf	((_cellVolt+1)^(0+128)+6)
  2044  0229  1283               	bcf	3,5	;RP0=0, select bank0
  2045  022A  1303               	bcf	3,6	;RP1=0, select bank0
  2046  022B  0833               	movf	?___ftadd+2,w
  2047  022C  1683               	bsf	3,5	;RP0=1, select bank1
  2048  022D  1303               	bcf	3,6	;RP1=0, select bank1
  2049  022E  00D5               	movwf	((_cellVolt+2)^(0+128)+6)
  2050                           
  2051                           ;PIC16F917 Battery Management.c: 105: RD0 = 0;
  2052  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0231  1008               	bcf	8,0	;volatile
  2055                           
  2056                           ;PIC16F917 Battery Management.c: 106: RC3 = 1;
  2057  0232  1587               	bsf	7,3	;volatile
  2058                           
  2059                           ;PIC16F917 Battery Management.c: 108: _delay((unsigned long)((5)*(8000000/4000.0)));
  2060  0233  300D               	movlw	13
  2061  0234  00E9               	movwf	??_sampleBatteryCells+1
  2062  0235  30FB               	movlw	251
  2063  0236  00E8               	movwf	??_sampleBatteryCells
  2064  0237                     u2967:	
  2065  0237  0BE8               	decfsz	??_sampleBatteryCells,f
  2066  0238  2A37               	goto	u2967
  2067  0239  0BE9               	decfsz	??_sampleBatteryCells+1,f
  2068  023A  2A37               	goto	u2967
  2069  023B  2A3C               	nop2
  2070                           
  2071                           ;PIC16F917 Battery Management.c: 110: cellVolt[3] = 0.1 * ( cell4RR + 1 ) * sampleVoltag
      +                          e(CELL4) + 0.9 * cellVolt[3];
  2072  023C  3006               	movlw	6
  2073  023D  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  2074  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0243  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0244  085E               	movf	?_sampleVoltage,w
  2077  0245  00EA               	movwf	_sampleBatteryCells$889
  2078  0246  085F               	movf	?_sampleVoltage+1,w
  2079  0247  00EB               	movwf	_sampleBatteryCells$889+1
  2080  0248  0860               	movf	?_sampleVoltage+2,w
  2081  0249  00EC               	movwf	_sampleBatteryCells$889+2
  2082                           
  2083                           ;PIC16F917 Battery Management.c: 110: cellVolt[3] = 0.1 * ( cell4RR + 1 ) * sampleVoltag
      +                          e(CELL4) + 0.9 * cellVolt[3];
  2084  024A  086A               	movf	_sampleBatteryCells$889,w
  2085  024B  00BE               	movwf	___ftmul@f1
  2086  024C  086B               	movf	_sampleBatteryCells$889+1,w
  2087  024D  00BF               	movwf	___ftmul@f1+1
  2088  024E  086C               	movf	_sampleBatteryCells$889+2,w
  2089  024F  00C0               	movwf	___ftmul@f1+2
  2090  0250  3000               	movlw	0
  2091  0251  00B1               	movwf	___ftadd@f1
  2092  0252  3080               	movlw	128
  2093  0253  00B2               	movwf	___ftadd@f1+1
  2094  0254  303F               	movlw	63
  2095  0255  00B3               	movwf	___ftadd@f1+2
  2096  0256  3014               	movlw	low (_cell4RR-__stringbase)
  2097  0257  0084               	movwf	4
  2098  0258  160A  118A  200A  120A  118A  	fcall	stringdir
  2099  025D  00B4               	movwf	___ftadd@f2
  2100  025E  160A  118A  200A  120A  118A  	fcall	stringdir
  2101  0263  00B5               	movwf	___ftadd@f2+1
  2102  0264  160A  118A  200A  120A  118A  	fcall	stringdir
  2103  0269  00B6               	movwf	___ftadd@f2+2
  2104  026A  120A  158A  2496  120A  118A  	fcall	___ftadd
  2105  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0271  0831               	movf	?___ftadd,w
  2108  0272  00C1               	movwf	___ftmul@f2
  2109  0273  0832               	movf	?___ftadd+1,w
  2110  0274  00C2               	movwf	___ftmul@f2+1
  2111  0275  0833               	movf	?___ftadd+2,w
  2112  0276  00C3               	movwf	___ftmul@f2+2
  2113  0277  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2114  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2115  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2116  027E  083E               	movf	?___ftmul,w
  2117  027F  00ED               	movwf	_sampleBatteryCells$890
  2118  0280  083F               	movf	?___ftmul+1,w
  2119  0281  00EE               	movwf	_sampleBatteryCells$890+1
  2120  0282  0840               	movf	?___ftmul+2,w
  2121  0283  00EF               	movwf	_sampleBatteryCells$890+2
  2122                           
  2123                           ;PIC16F917 Battery Management.c: 110: cellVolt[3] = 0.1 * ( cell4RR + 1 ) * sampleVoltag
      +                          e(CELL4) + 0.9 * cellVolt[3];
  2124  0284  3066               	movlw	102
  2125  0285  00BE               	movwf	___ftmul@f1
  2126  0286  3066               	movlw	102
  2127  0287  00BF               	movwf	___ftmul@f1+1
  2128  0288  303F               	movlw	63
  2129  0289  00C0               	movwf	___ftmul@f1+2
  2130  028A  3009               	movlw	9
  2131  028B  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  2132  028C  0084               	movwf	4
  2133  028D  1383               	bcf	3,7	;select IRP bank1
  2134  028E  0800               	movf	0,w
  2135  028F  00C1               	movwf	___ftmul@f2
  2136  0290  0A84               	incf	4,f
  2137  0291  0800               	movf	0,w
  2138  0292  00C2               	movwf	___ftmul@f2+1
  2139  0293  0A84               	incf	4,f
  2140  0294  0800               	movf	0,w
  2141  0295  00C3               	movwf	___ftmul@f2+2
  2142  0296  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2143  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2144  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2145  029D  083E               	movf	?___ftmul,w
  2146  029E  00B1               	movwf	___ftadd@f1
  2147  029F  083F               	movf	?___ftmul+1,w
  2148  02A0  00B2               	movwf	___ftadd@f1+1
  2149  02A1  0840               	movf	?___ftmul+2,w
  2150  02A2  00B3               	movwf	___ftadd@f1+2
  2151  02A3  30CD               	movlw	205
  2152  02A4  00BE               	movwf	___ftmul@f1
  2153  02A5  30CC               	movlw	204
  2154  02A6  00BF               	movwf	___ftmul@f1+1
  2155  02A7  303D               	movlw	61
  2156  02A8  00C0               	movwf	___ftmul@f1+2
  2157  02A9  086D               	movf	_sampleBatteryCells$890,w
  2158  02AA  00C1               	movwf	___ftmul@f2
  2159  02AB  086E               	movf	_sampleBatteryCells$890+1,w
  2160  02AC  00C2               	movwf	___ftmul@f2+1
  2161  02AD  086F               	movf	_sampleBatteryCells$890+2,w
  2162  02AE  00C3               	movwf	___ftmul@f2+2
  2163  02AF  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2164  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2165  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2166  02B6  083E               	movf	?___ftmul,w
  2167  02B7  00B4               	movwf	___ftadd@f2
  2168  02B8  083F               	movf	?___ftmul+1,w
  2169  02B9  00B5               	movwf	___ftadd@f2+1
  2170  02BA  0840               	movf	?___ftmul+2,w
  2171  02BB  00B6               	movwf	___ftadd@f2+2
  2172  02BC  120A  158A  2496  120A  118A  	fcall	___ftadd
  2173  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  2174  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  2175  02C3  0831               	movf	?___ftadd,w
  2176  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2177  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  2178  02C6  00D6               	movwf	(_cellVolt^(0+128)+9)
  2179  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2180  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2181  02C9  0832               	movf	?___ftadd+1,w
  2182  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2183  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  2184  02CC  00D7               	movwf	((_cellVolt+1)^(0+128)+9)
  2185  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2186  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2187  02CF  0833               	movf	?___ftadd+2,w
  2188  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2189  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2190  02D2  00D8               	movwf	((_cellVolt+2)^(0+128)+9)
  2191                           
  2192                           ;PIC16F917 Battery Management.c: 111: cellVolt[4] = 0.1 * ( cell5RR + 1 ) * sampleVoltag
      +                          e(CELL5) + 0.9 * cellVolt[4];
  2193  02D3  3003               	movlw	3
  2194  02D4  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  2195  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2196  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2197  02DB  085E               	movf	?_sampleVoltage,w
  2198  02DC  00EA               	movwf	_sampleBatteryCells$889
  2199  02DD  085F               	movf	?_sampleVoltage+1,w
  2200  02DE  00EB               	movwf	_sampleBatteryCells$889+1
  2201  02DF  0860               	movf	?_sampleVoltage+2,w
  2202  02E0  00EC               	movwf	_sampleBatteryCells$889+2
  2203                           
  2204                           ;PIC16F917 Battery Management.c: 111: cellVolt[4] = 0.1 * ( cell5RR + 1 ) * sampleVoltag
      +                          e(CELL5) + 0.9 * cellVolt[4];
  2205  02E1  086A               	movf	_sampleBatteryCells$889,w
  2206  02E2  00BE               	movwf	___ftmul@f1
  2207  02E3  086B               	movf	_sampleBatteryCells$889+1,w
  2208  02E4  00BF               	movwf	___ftmul@f1+1
  2209  02E5  086C               	movf	_sampleBatteryCells$889+2,w
  2210  02E6  00C0               	movwf	___ftmul@f1+2
  2211  02E7  3000               	movlw	0
  2212  02E8  00B1               	movwf	___ftadd@f1
  2213  02E9  3080               	movlw	128
  2214  02EA  00B2               	movwf	___ftadd@f1+1
  2215  02EB  303F               	movlw	63
  2216  02EC  00B3               	movwf	___ftadd@f1+2
  2217  02ED  3017               	movlw	low (_cell5RR-__stringbase)
  2218  02EE  0084               	movwf	4
  2219  02EF  160A  118A  200A  120A  118A  	fcall	stringdir
  2220  02F4  00B4               	movwf	___ftadd@f2
  2221  02F5  160A  118A  200A  120A  118A  	fcall	stringdir
  2222  02FA  00B5               	movwf	___ftadd@f2+1
  2223  02FB  160A  118A  200A  120A  118A  	fcall	stringdir
  2224  0300  00B6               	movwf	___ftadd@f2+2
  2225  0301  120A  158A  2496  120A  118A  	fcall	___ftadd
  2226  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2227  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0308  0831               	movf	?___ftadd,w
  2229  0309  00C1               	movwf	___ftmul@f2
  2230  030A  0832               	movf	?___ftadd+1,w
  2231  030B  00C2               	movwf	___ftmul@f2+1
  2232  030C  0833               	movf	?___ftadd+2,w
  2233  030D  00C3               	movwf	___ftmul@f2+2
  2234  030E  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2235  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0315  083E               	movf	?___ftmul,w
  2238  0316  00ED               	movwf	_sampleBatteryCells$890
  2239  0317  083F               	movf	?___ftmul+1,w
  2240  0318  00EE               	movwf	_sampleBatteryCells$890+1
  2241  0319  0840               	movf	?___ftmul+2,w
  2242  031A  00EF               	movwf	_sampleBatteryCells$890+2
  2243                           
  2244                           ;PIC16F917 Battery Management.c: 111: cellVolt[4] = 0.1 * ( cell5RR + 1 ) * sampleVoltag
      +                          e(CELL5) + 0.9 * cellVolt[4];
  2245  031B  3066               	movlw	102
  2246  031C  00BE               	movwf	___ftmul@f1
  2247  031D  3066               	movlw	102
  2248  031E  00BF               	movwf	___ftmul@f1+1
  2249  031F  303F               	movlw	63
  2250  0320  00C0               	movwf	___ftmul@f1+2
  2251  0321  300C               	movlw	12
  2252  0322  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  2253  0323  0084               	movwf	4
  2254  0324  1383               	bcf	3,7	;select IRP bank1
  2255  0325  0800               	movf	0,w
  2256  0326  00C1               	movwf	___ftmul@f2
  2257  0327  0A84               	incf	4,f
  2258  0328  0800               	movf	0,w
  2259  0329  00C2               	movwf	___ftmul@f2+1
  2260  032A  0A84               	incf	4,f
  2261  032B  0800               	movf	0,w
  2262  032C  00C3               	movwf	___ftmul@f2+2
  2263  032D  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2264  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2265  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0334  083E               	movf	?___ftmul,w
  2267  0335  00B1               	movwf	___ftadd@f1
  2268  0336  083F               	movf	?___ftmul+1,w
  2269  0337  00B2               	movwf	___ftadd@f1+1
  2270  0338  0840               	movf	?___ftmul+2,w
  2271  0339  00B3               	movwf	___ftadd@f1+2
  2272  033A  30CD               	movlw	205
  2273  033B  00BE               	movwf	___ftmul@f1
  2274  033C  30CC               	movlw	204
  2275  033D  00BF               	movwf	___ftmul@f1+1
  2276  033E  303D               	movlw	61
  2277  033F  00C0               	movwf	___ftmul@f1+2
  2278  0340  086D               	movf	_sampleBatteryCells$890,w
  2279  0341  00C1               	movwf	___ftmul@f2
  2280  0342  086E               	movf	_sampleBatteryCells$890+1,w
  2281  0343  00C2               	movwf	___ftmul@f2+1
  2282  0344  086F               	movf	_sampleBatteryCells$890+2,w
  2283  0345  00C3               	movwf	___ftmul@f2+2
  2284  0346  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2285  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2286  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2287  034D  083E               	movf	?___ftmul,w
  2288  034E  00B4               	movwf	___ftadd@f2
  2289  034F  083F               	movf	?___ftmul+1,w
  2290  0350  00B5               	movwf	___ftadd@f2+1
  2291  0351  0840               	movf	?___ftmul+2,w
  2292  0352  00B6               	movwf	___ftadd@f2+2
  2293  0353  120A  158A  2496  120A  118A  	fcall	___ftadd
  2294  0358  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0359  1303               	bcf	3,6	;RP1=0, select bank0
  2296  035A  0831               	movf	?___ftadd,w
  2297  035B  1683               	bsf	3,5	;RP0=1, select bank1
  2298  035C  1303               	bcf	3,6	;RP1=0, select bank1
  2299  035D  00D9               	movwf	(_cellVolt^(0+128)+12)
  2300  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2301  035F  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0360  0832               	movf	?___ftadd+1,w
  2303  0361  1683               	bsf	3,5	;RP0=1, select bank1
  2304  0362  1303               	bcf	3,6	;RP1=0, select bank1
  2305  0363  00DA               	movwf	((_cellVolt+1)^(0+128)+12)
  2306  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0366  0833               	movf	?___ftadd+2,w
  2309  0367  1683               	bsf	3,5	;RP0=1, select bank1
  2310  0368  1303               	bcf	3,6	;RP1=0, select bank1
  2311  0369  00DB               	movwf	((_cellVolt+2)^(0+128)+12)
  2312                           
  2313                           ;PIC16F917 Battery Management.c: 112: cellVolt[5] = 0.1 * ( cell6RR + 1 ) * sampleVoltag
      +                          e(CELL6) + 0.9 * cellVolt[5];
  2314  036A  3004               	movlw	4
  2315  036B  120A  158A  200E  120A  118A  	fcall	_sampleVoltage
  2316  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0372  085E               	movf	?_sampleVoltage,w
  2319  0373  00EA               	movwf	_sampleBatteryCells$889
  2320  0374  085F               	movf	?_sampleVoltage+1,w
  2321  0375  00EB               	movwf	_sampleBatteryCells$889+1
  2322  0376  0860               	movf	?_sampleVoltage+2,w
  2323  0377  00EC               	movwf	_sampleBatteryCells$889+2
  2324                           
  2325                           ;PIC16F917 Battery Management.c: 112: cellVolt[5] = 0.1 * ( cell6RR + 1 ) * sampleVoltag
      +                          e(CELL6) + 0.9 * cellVolt[5];
  2326  0378  086A               	movf	_sampleBatteryCells$889,w
  2327  0379  00BE               	movwf	___ftmul@f1
  2328  037A  086B               	movf	_sampleBatteryCells$889+1,w
  2329  037B  00BF               	movwf	___ftmul@f1+1
  2330  037C  086C               	movf	_sampleBatteryCells$889+2,w
  2331  037D  00C0               	movwf	___ftmul@f1+2
  2332  037E  3000               	movlw	0
  2333  037F  00B1               	movwf	___ftadd@f1
  2334  0380  3080               	movlw	128
  2335  0381  00B2               	movwf	___ftadd@f1+1
  2336  0382  303F               	movlw	63
  2337  0383  00B3               	movwf	___ftadd@f1+2
  2338  0384  301A               	movlw	low (_cell6RR-__stringbase)
  2339  0385  0084               	movwf	4
  2340  0386  160A  118A  200A  120A  118A  	fcall	stringdir
  2341  038B  00B4               	movwf	___ftadd@f2
  2342  038C  160A  118A  200A  120A  118A  	fcall	stringdir
  2343  0391  00B5               	movwf	___ftadd@f2+1
  2344  0392  160A  118A  200A  120A  118A  	fcall	stringdir
  2345  0397  00B6               	movwf	___ftadd@f2+2
  2346  0398  120A  158A  2496  120A  118A  	fcall	___ftadd
  2347  039D  1283               	bcf	3,5	;RP0=0, select bank0
  2348  039E  1303               	bcf	3,6	;RP1=0, select bank0
  2349  039F  0831               	movf	?___ftadd,w
  2350  03A0  00C1               	movwf	___ftmul@f2
  2351  03A1  0832               	movf	?___ftadd+1,w
  2352  03A2  00C2               	movwf	___ftmul@f2+1
  2353  03A3  0833               	movf	?___ftadd+2,w
  2354  03A4  00C3               	movwf	___ftmul@f2+2
  2355  03A5  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2356  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2357  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2358  03AC  083E               	movf	?___ftmul,w
  2359  03AD  00ED               	movwf	_sampleBatteryCells$890
  2360  03AE  083F               	movf	?___ftmul+1,w
  2361  03AF  00EE               	movwf	_sampleBatteryCells$890+1
  2362  03B0  0840               	movf	?___ftmul+2,w
  2363  03B1  00EF               	movwf	_sampleBatteryCells$890+2
  2364                           
  2365                           ;PIC16F917 Battery Management.c: 112: cellVolt[5] = 0.1 * ( cell6RR + 1 ) * sampleVoltag
      +                          e(CELL6) + 0.9 * cellVolt[5];
  2366  03B2  3066               	movlw	102
  2367  03B3  00BE               	movwf	___ftmul@f1
  2368  03B4  3066               	movlw	102
  2369  03B5  00BF               	movwf	___ftmul@f1+1
  2370  03B6  303F               	movlw	63
  2371  03B7  00C0               	movwf	___ftmul@f1+2
  2372  03B8  300F               	movlw	15
  2373  03B9  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  2374  03BA  0084               	movwf	4
  2375  03BB  1383               	bcf	3,7	;select IRP bank1
  2376  03BC  0800               	movf	0,w
  2377  03BD  00C1               	movwf	___ftmul@f2
  2378  03BE  0A84               	incf	4,f
  2379  03BF  0800               	movf	0,w
  2380  03C0  00C2               	movwf	___ftmul@f2+1
  2381  03C1  0A84               	incf	4,f
  2382  03C2  0800               	movf	0,w
  2383  03C3  00C3               	movwf	___ftmul@f2+2
  2384  03C4  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2385  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2386  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2387  03CB  083E               	movf	?___ftmul,w
  2388  03CC  00B1               	movwf	___ftadd@f1
  2389  03CD  083F               	movf	?___ftmul+1,w
  2390  03CE  00B2               	movwf	___ftadd@f1+1
  2391  03CF  0840               	movf	?___ftmul+2,w
  2392  03D0  00B3               	movwf	___ftadd@f1+2
  2393  03D1  30CD               	movlw	205
  2394  03D2  00BE               	movwf	___ftmul@f1
  2395  03D3  30CC               	movlw	204
  2396  03D4  00BF               	movwf	___ftmul@f1+1
  2397  03D5  303D               	movlw	61
  2398  03D6  00C0               	movwf	___ftmul@f1+2
  2399  03D7  086D               	movf	_sampleBatteryCells$890,w
  2400  03D8  00C1               	movwf	___ftmul@f2
  2401  03D9  086E               	movf	_sampleBatteryCells$890+1,w
  2402  03DA  00C2               	movwf	___ftmul@f2+1
  2403  03DB  086F               	movf	_sampleBatteryCells$890+2,w
  2404  03DC  00C3               	movwf	___ftmul@f2+2
  2405  03DD  120A  158A  22BD  120A  118A  	fcall	___ftmul
  2406  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2407  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2408  03E4  083E               	movf	?___ftmul,w
  2409  03E5  00B4               	movwf	___ftadd@f2
  2410  03E6  083F               	movf	?___ftmul+1,w
  2411  03E7  00B5               	movwf	___ftadd@f2+1
  2412  03E8  0840               	movf	?___ftmul+2,w
  2413  03E9  00B6               	movwf	___ftadd@f2+2
  2414  03EA  120A  158A  2496   	fcall	___ftadd
  2415  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2416  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2417  03EF  0831               	movf	?___ftadd,w
  2418  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2419  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2420  03F2  00DC               	movwf	(_cellVolt^(0+128)+15)
  2421  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2422  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2423  03F5  0832               	movf	?___ftadd+1,w
  2424  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  2425  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  2426  03F8  00DD               	movwf	((_cellVolt+1)^(0+128)+15)
  2427  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2428  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2429  03FB  0833               	movf	?___ftadd+2,w
  2430  03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2431  03FD  1303               	bcf	3,6	;RP1=0, select bank1
  2432  03FE  00DE               	movwf	((_cellVolt+2)^(0+128)+15)
  2433                           
  2434                           ;PIC16F917 Battery Management.c: 114: RC3 = 0;
  2435  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0401  1187               	bcf	7,3	;volatile
  2438                           
  2439                           ;PIC16F917 Battery Management.c: 116: RC2 = 0;
  2440  0402  1107               	bcf	7,2	;volatile
  2441  0403  0008               	return
  2442  0404                     __end_of_sampleBatteryCells:	
  2443                           
  2444                           	psect	text5
  2445  080E                     __ptext5:	
  2446 ;; *************** function _sampleVoltage *****************
  2447 ;; Defined at:
  2448 ;;		line 148 in file "PIC16F917 Battery Management.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  chan            1    wreg     enum E2721
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  chan            1   67[BANK0 ] enum E2721
  2453 ;;  i               2   68[BANK0 ] int 
  2454 ;;  temp            2   70[BANK0 ] unsigned int 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  3   62[BANK0 ] float 
  2457 ;; Registers used:
  2458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2464 ;;      Params:         0       3       0       0       0
  2465 ;;      Locals:         0       5       0       0       0
  2466 ;;      Temps:          0       2       0       0       0
  2467 ;;      Totals:         0      10       0       0       0
  2468 ;;Total ram usage:       10 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    4
  2471 ;; This function calls:
  2472 ;;		___ftdiv
  2473 ;;		___ftmul
  2474 ;;		___lwdiv
  2475 ;;		___lwtoft
  2476 ;;		_analogRead
  2477 ;; This function is called by:
  2478 ;;		_sampleBatteryCells
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           
  2483                           ;psect for function _sampleVoltage
  2484  080E                     _sampleVoltage:	
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _sampleVoltage: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2488                           ;sampleVoltage@chan stored from wreg
  2489  080E  1283               	bcf	3,5	;RP0=0, select bank0
  2490  080F  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0810  00E3               	movwf	sampleVoltage@chan
  2492                           
  2493                           ;PIC16F917 Battery Management.c: 150: uint16_t temp = 0;
  2494  0811  01E6               	clrf	sampleVoltage@temp
  2495  0812  01E7               	clrf	sampleVoltage@temp+1
  2496                           
  2497                           ;PIC16F917 Battery Management.c: 152: analogRead(chan);
  2498  0813  0863               	movf	sampleVoltage@chan,w
  2499  0814  160A  118A  254F  120A  158A  	fcall	_analogRead
  2500                           
  2501                           ;PIC16F917 Battery Management.c: 154: for ( int i = 0; i <= sampleNum; i++)
  2502  0819  1283               	bcf	3,5	;RP0=0, select bank0
  2503  081A  1303               	bcf	3,6	;RP1=0, select bank0
  2504  081B  01E4               	clrf	sampleVoltage@i
  2505  081C  01E5               	clrf	sampleVoltage@i+1
  2506  081D  300A               	movlw	low (_sampleNum-__stringbase)
  2507  081E  0084               	movwf	4
  2508  081F  160A  118A  200A  120A  158A  	fcall	stringdir
  2509  0824  00E1               	movwf	??_sampleVoltage
  2510  0825  0865               	movf	sampleVoltage@i+1,w
  2511  0826  3A80               	xorlw	128
  2512  0827  3C80               	sublw	128
  2513  0828  1D03               	skipz
  2514  0829  282C               	goto	u2625
  2515  082A  0864               	movf	sampleVoltage@i,w
  2516  082B  0261               	subwf	??_sampleVoltage,w
  2517  082C                     u2625:	
  2518  082C  1C03               	btfss	3,0
  2519  082D  2855               	goto	l2315
  2520  082E                     l2309:	
  2521                           
  2522                           ;PIC16F917 Battery Management.c: 155: {
  2523                           ;PIC16F917 Battery Management.c: 156: temp += analogRead(chan);
  2524  082E  1283               	bcf	3,5	;RP0=0, select bank0
  2525  082F  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0830  0863               	movf	sampleVoltage@chan,w
  2527  0831  160A  118A  254F  120A  158A  	fcall	_analogRead
  2528  0836  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0837  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0838  0820               	movf	?_analogRead,w
  2531  0839  07E6               	addwf	sampleVoltage@temp,f
  2532  083A  1803               	skipnc
  2533  083B  0AE7               	incf	sampleVoltage@temp+1,f
  2534  083C  0821               	movf	?_analogRead+1,w
  2535  083D  07E7               	addwf	sampleVoltage@temp+1,f
  2536  083E  3001               	movlw	1
  2537  083F  07E4               	addwf	sampleVoltage@i,f
  2538  0840  1803               	skipnc
  2539  0841  0AE5               	incf	sampleVoltage@i+1,f
  2540  0842  3000               	movlw	0
  2541  0843  07E5               	addwf	sampleVoltage@i+1,f
  2542  0844  300A               	movlw	low (_sampleNum-__stringbase)
  2543  0845  0084               	movwf	4
  2544  0846  160A  118A  200A  120A  158A  	fcall	stringdir
  2545  084B  00E1               	movwf	??_sampleVoltage
  2546  084C  0865               	movf	sampleVoltage@i+1,w
  2547  084D  3A80               	xorlw	128
  2548  084E  3C80               	sublw	128
  2549  084F  1D03               	skipz
  2550  0850  2853               	goto	u2635
  2551  0851  0864               	movf	sampleVoltage@i,w
  2552  0852  0261               	subwf	??_sampleVoltage,w
  2553  0853                     u2635:	
  2554  0853  1803               	skipnc
  2555  0854  282E               	goto	l2309
  2556  0855                     l2315:	
  2557                           
  2558                           ;PIC16F917 Battery Management.c: 157: }
  2559                           ;PIC16F917 Battery Management.c: 159: temp = temp / sampleNum;
  2560  0855  300A               	movlw	low (_sampleNum-__stringbase)
  2561  0856  0084               	movwf	4
  2562  0857  160A  118A  200A  120A  158A  	fcall	stringdir
  2563  085C  1283               	bcf	3,5	;RP0=0, select bank0
  2564  085D  1303               	bcf	3,6	;RP1=0, select bank0
  2565  085E  00E1               	movwf	??_sampleVoltage
  2566  085F  01E2               	clrf	??_sampleVoltage+1
  2567  0860  0861               	movf	??_sampleVoltage,w
  2568  0861  00A0               	movwf	___lwdiv@divisor
  2569  0862  0862               	movf	??_sampleVoltage+1,w
  2570  0863  00A1               	movwf	___lwdiv@divisor+1
  2571  0864  0867               	movf	sampleVoltage@temp+1,w
  2572  0865  00A3               	movwf	___lwdiv@dividend+1
  2573  0866  0866               	movf	sampleVoltage@temp,w
  2574  0867  00A2               	movwf	___lwdiv@dividend
  2575  0868  160A  118A  2588  120A  158A  	fcall	___lwdiv
  2576  086D  1283               	bcf	3,5	;RP0=0, select bank0
  2577  086E  1303               	bcf	3,6	;RP1=0, select bank0
  2578  086F  0821               	movf	?___lwdiv+1,w
  2579  0870  00E7               	movwf	sampleVoltage@temp+1
  2580  0871  0820               	movf	?___lwdiv,w
  2581  0872  00E6               	movwf	sampleVoltage@temp
  2582                           
  2583                           ;PIC16F917 Battery Management.c: 162: return (temp * supVolt)/1023;
  2584  0873  30C0               	movlw	192
  2585  0874  00CE               	movwf	___ftdiv@f2
  2586  0875  307F               	movlw	127
  2587  0876  00CF               	movwf	___ftdiv@f2+1
  2588  0877  3044               	movlw	68
  2589  0878  00D0               	movwf	___ftdiv@f2+2
  2590  0879  0878               	movf	_supVolt,w
  2591  087A  00BE               	movwf	___ftmul@f1
  2592  087B  0879               	movf	_supVolt+1,w
  2593  087C  00BF               	movwf	___ftmul@f1+1
  2594  087D  087A               	movf	_supVolt+2,w
  2595  087E  00C0               	movwf	___ftmul@f1+2
  2596  087F  0867               	movf	sampleVoltage@temp+1,w
  2597  0880  00A9               	movwf	___lwtoft@c+1
  2598  0881  0866               	movf	sampleVoltage@temp,w
  2599  0882  00A8               	movwf	___lwtoft@c
  2600  0883  160A  118A  23B1  120A  158A  	fcall	___lwtoft
  2601  0888  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0889  1303               	bcf	3,6	;RP1=0, select bank0
  2603  088A  0828               	movf	?___lwtoft,w
  2604  088B  00C1               	movwf	___ftmul@f2
  2605  088C  0829               	movf	?___lwtoft+1,w
  2606  088D  00C2               	movwf	___ftmul@f2+1
  2607  088E  082A               	movf	?___lwtoft+2,w
  2608  088F  00C3               	movwf	___ftmul@f2+2
  2609  0890  120A  158A  22BD  120A  158A  	fcall	___ftmul
  2610  0895  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0896  1303               	bcf	3,6	;RP1=0, select bank0
  2612  0897  083E               	movf	?___ftmul,w
  2613  0898  00D1               	movwf	___ftdiv@f1
  2614  0899  083F               	movf	?___ftmul+1,w
  2615  089A  00D2               	movwf	___ftdiv@f1+1
  2616  089B  0840               	movf	?___ftmul+2,w
  2617  089C  00D3               	movwf	___ftdiv@f1+2
  2618  089D  120A  158A  2205   	fcall	___ftdiv
  2619  08A0  1283               	bcf	3,5	;RP0=0, select bank0
  2620  08A1  1303               	bcf	3,6	;RP1=0, select bank0
  2621  08A2  084E               	movf	?___ftdiv,w
  2622  08A3  00DE               	movwf	?_sampleVoltage
  2623  08A4  084F               	movf	?___ftdiv+1,w
  2624  08A5  00DF               	movwf	?_sampleVoltage+1
  2625  08A6  0850               	movf	?___ftdiv+2,w
  2626  08A7  00E0               	movwf	?_sampleVoltage+2
  2627  08A8  0008               	return
  2628  08A9                     __end_of_sampleVoltage:	
  2629                           
  2630                           	psect	text6
  2631  154F                     __ptext6:	
  2632 ;; *************** function _analogRead *****************
  2633 ;; Defined at:
  2634 ;;		line 73 in file "adc.h"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  chan            1    wreg     unsigned char 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  chan            1    4[BANK0 ] unsigned char 
  2639 ;;  returnVal       2    5[BANK0 ] unsigned int 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  2    0[BANK0 ] unsigned int 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2649 ;;      Params:         0       2       0       0       0
  2650 ;;      Locals:         0       3       0       0       0
  2651 ;;      Temps:          0       2       0       0       0
  2652 ;;      Totals:         0       7       0       0       0
  2653 ;;Total ram usage:        7 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    2
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_sampleReference
  2660 ;;		_sampleVoltage
  2661 ;;		_sampleCurrent
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           
  2666                           ;psect for function _analogRead
  2667  154F                     _analogRead:	
  2668                           
  2669                           ;incstack = 0
  2670                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2671                           ;analogRead@chan stored from wreg
  2672  154F  1283               	bcf	3,5	;RP0=0, select bank0
  2673  1550  1303               	bcf	3,6	;RP1=0, select bank0
  2674  1551  00A4               	movwf	analogRead@chan
  2675                           
  2676                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2677  1552  0824               	movf	analogRead@chan,w
  2678  1553  00A2               	movwf	??_analogRead
  2679  1554  0DA2               	rlf	??_analogRead,f
  2680  1555  0DA2               	rlf	??_analogRead,f
  2681  1556  081F               	movf	31,w	;volatile
  2682  1557  0622               	xorwf	??_analogRead,w
  2683  1558  39E3               	andlw	-29
  2684  1559  0622               	xorwf	??_analogRead,w
  2685  155A  009F               	movwf	31	;volatile
  2686                           
  2687                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2688  155B  141F               	bsf	31,0	;volatile
  2689                           
  2690                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2691  155C  3006               	movlw	6
  2692  155D  00A2               	movwf	??_analogRead
  2693  155E                     u2977:	
  2694  155E  0BA2               	decfsz	??_analogRead,f
  2695  155F  2D5E               	goto	u2977
  2696  1560  0000               	nop
  2697                           
  2698                           ;adc.h: 81: ADCON0bits.GO = 1;
  2699  1561  1283               	bcf	3,5	;RP0=0, select bank0
  2700  1562  1303               	bcf	3,6	;RP1=0, select bank0
  2701  1563  149F               	bsf	31,1	;volatile
  2702                           
  2703                           ;adc.h: 83: unsigned int returnVal = 0;
  2704  1564  01A5               	clrf	analogRead@returnVal
  2705  1565  01A6               	clrf	analogRead@returnVal+1
  2706  1566                     l223:	
  2707                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2708                           
  2709  1566  189F               	btfsc	31,1	;volatile
  2710  1567  2D66               	goto	l223
  2711                           
  2712                           ;adc.h: 89: returnVal = ADRESH;
  2713  1568  081E               	movf	30,w	;volatile
  2714  1569  00A2               	movwf	??_analogRead
  2715  156A  01A3               	clrf	??_analogRead+1
  2716  156B  0822               	movf	??_analogRead,w
  2717  156C  00A5               	movwf	analogRead@returnVal
  2718  156D  0823               	movf	??_analogRead+1,w
  2719  156E  00A6               	movwf	analogRead@returnVal+1
  2720                           
  2721                           ;adc.h: 90: returnVal = returnVal << 8;
  2722  156F  0825               	movf	analogRead@returnVal,w
  2723  1570  00A3               	movwf	??_analogRead+1
  2724  1571  01A2               	clrf	??_analogRead
  2725  1572  0822               	movf	??_analogRead,w
  2726  1573  00A5               	movwf	analogRead@returnVal
  2727  1574  0823               	movf	??_analogRead+1,w
  2728  1575  00A6               	movwf	analogRead@returnVal+1
  2729                           
  2730                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2731  1576  0825               	movf	analogRead@returnVal,w
  2732  1577  1683               	bsf	3,5	;RP0=1, select bank1
  2733  1578  1303               	bcf	3,6	;RP1=0, select bank1
  2734  1579  041E               	iorwf	30,w	;volatile
  2735  157A  1283               	bcf	3,5	;RP0=0, select bank0
  2736  157B  1303               	bcf	3,6	;RP1=0, select bank0
  2737  157C  00A2               	movwf	??_analogRead
  2738  157D  0826               	movf	analogRead@returnVal+1,w
  2739  157E  00A3               	movwf	??_analogRead+1
  2740  157F  0822               	movf	??_analogRead,w
  2741  1580  00A5               	movwf	analogRead@returnVal
  2742  1581  0823               	movf	??_analogRead+1,w
  2743  1582  00A6               	movwf	analogRead@returnVal+1
  2744                           
  2745                           ;adc.h: 93: return returnVal;
  2746  1583  0826               	movf	analogRead@returnVal+1,w
  2747  1584  00A1               	movwf	?_analogRead+1
  2748  1585  0825               	movf	analogRead@returnVal,w
  2749  1586  00A0               	movwf	?_analogRead
  2750  1587  0008               	return
  2751  1588                     __end_of_analogRead:	
  2752                           
  2753                           	psect	text7
  2754  13B1                     __ptext7:	
  2755 ;; *************** function ___lwtoft *****************
  2756 ;; Defined at:
  2757 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  c               2    8[BANK0 ] unsigned int 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  3    8[BANK0 ] float 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0, pclath, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2771 ;;      Params:         0       3       0       0       0
  2772 ;;      Locals:         0       0       0       0       0
  2773 ;;      Temps:          0       1       0       0       0
  2774 ;;      Totals:         0       4       0       0       0
  2775 ;;Total ram usage:        4 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    3
  2778 ;; This function calls:
  2779 ;;		___ftpack
  2780 ;; This function is called by:
  2781 ;;		_sampleReference
  2782 ;;		_sampleVoltage
  2783 ;;		_sampleCurrent
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function ___lwtoft
  2789  13B1                     ___lwtoft:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2793  13B1  1283               	bcf	3,5	;RP0=0, select bank0
  2794  13B2  1303               	bcf	3,6	;RP1=0, select bank0
  2795  13B3  0828               	movf	___lwtoft@c,w
  2796  13B4  00A0               	movwf	___ftpack@arg
  2797  13B5  0829               	movf	___lwtoft@c+1,w
  2798  13B6  00A1               	movwf	___ftpack@arg+1
  2799  13B7  01A2               	clrf	___ftpack@arg+2
  2800  13B8  308E               	movlw	142
  2801  13B9  00AB               	movwf	??___lwtoft
  2802  13BA  082B               	movf	??___lwtoft,w
  2803  13BB  00A3               	movwf	___ftpack@exp
  2804  13BC  01A4               	clrf	___ftpack@sign
  2805  13BD  160A  118A  2704   	fcall	___ftpack
  2806  13C0  1283               	bcf	3,5	;RP0=0, select bank0
  2807  13C1  1303               	bcf	3,6	;RP1=0, select bank0
  2808  13C2  0820               	movf	?___ftpack,w
  2809  13C3  00A8               	movwf	?___lwtoft
  2810  13C4  0821               	movf	?___ftpack+1,w
  2811  13C5  00A9               	movwf	?___lwtoft+1
  2812  13C6  0822               	movf	?___ftpack+2,w
  2813  13C7  00AA               	movwf	?___lwtoft+2
  2814  13C8  0008               	return
  2815  13C9                     __end_of___lwtoft:	
  2816                           
  2817                           	psect	text8
  2818  1588                     __ptext8:	
  2819 ;; *************** function ___lwdiv *****************
  2820 ;; Defined at:
  2821 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;  divisor         2    0[BANK0 ] unsigned int 
  2824 ;;  dividend        2    2[BANK0 ] unsigned int 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  quotient        2    5[BANK0 ] unsigned int 
  2827 ;;  counter         1    7[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  2    0[BANK0 ] unsigned int 
  2830 ;; Registers used:
  2831 ;;		wreg, status,2, status,0
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2837 ;;      Params:         0       4       0       0       0
  2838 ;;      Locals:         0       3       0       0       0
  2839 ;;      Temps:          0       1       0       0       0
  2840 ;;      Totals:         0       8       0       0       0
  2841 ;;Total ram usage:        8 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    2
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_sampleReference
  2848 ;;		_sampleVoltage
  2849 ;;		_sampleCurrent
  2850 ;;		_uint16ToASCII
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           
  2855                           ;psect for function ___lwdiv
  2856  1588                     ___lwdiv:	
  2857                           
  2858                           ;incstack = 0
  2859                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2860  1588  1283               	bcf	3,5	;RP0=0, select bank0
  2861  1589  1303               	bcf	3,6	;RP1=0, select bank0
  2862  158A  01A5               	clrf	___lwdiv@quotient
  2863  158B  01A6               	clrf	___lwdiv@quotient+1
  2864  158C  0820               	movf	___lwdiv@divisor,w
  2865  158D  0421               	iorwf	___lwdiv@divisor+1,w
  2866  158E  1903               	btfsc	3,2
  2867  158F  2DC1               	goto	l2129
  2868  1590  01A7               	clrf	___lwdiv@counter
  2869  1591  0AA7               	incf	___lwdiv@counter,f
  2870  1592                     l2117:	
  2871  1592  1BA1               	btfsc	___lwdiv@divisor+1,7
  2872  1593  2DA0               	goto	l2119
  2873  1594  3001               	movlw	1
  2874  1595                     u2395:	
  2875  1595  1003               	clrc
  2876  1596  0DA0               	rlf	___lwdiv@divisor,f
  2877  1597  0DA1               	rlf	___lwdiv@divisor+1,f
  2878  1598  3EFF               	addlw	-1
  2879  1599  1D03               	skipz
  2880  159A  2D95               	goto	u2395
  2881  159B  3001               	movlw	1
  2882  159C  00A4               	movwf	??___lwdiv
  2883  159D  0824               	movf	??___lwdiv,w
  2884  159E  07A7               	addwf	___lwdiv@counter,f
  2885  159F  2D92               	goto	l2117
  2886  15A0                     l2119:	
  2887  15A0  3001               	movlw	1
  2888  15A1                     u2415:	
  2889  15A1  1003               	clrc
  2890  15A2  0DA5               	rlf	___lwdiv@quotient,f
  2891  15A3  0DA6               	rlf	___lwdiv@quotient+1,f
  2892  15A4  3EFF               	addlw	-1
  2893  15A5  1D03               	skipz
  2894  15A6  2DA1               	goto	u2415
  2895  15A7  0821               	movf	___lwdiv@divisor+1,w
  2896  15A8  0223               	subwf	___lwdiv@dividend+1,w
  2897  15A9  1D03               	skipz
  2898  15AA  2DAD               	goto	u2425
  2899  15AB  0820               	movf	___lwdiv@divisor,w
  2900  15AC  0222               	subwf	___lwdiv@dividend,w
  2901  15AD                     u2425:	
  2902  15AD  1C03               	skipc
  2903  15AE  2DB6               	goto	l2125
  2904  15AF  0820               	movf	___lwdiv@divisor,w
  2905  15B0  02A2               	subwf	___lwdiv@dividend,f
  2906  15B1  0821               	movf	___lwdiv@divisor+1,w
  2907  15B2  1C03               	skipc
  2908  15B3  03A3               	decf	___lwdiv@dividend+1,f
  2909  15B4  02A3               	subwf	___lwdiv@dividend+1,f
  2910  15B5  1425               	bsf	___lwdiv@quotient,0
  2911  15B6                     l2125:	
  2912  15B6  3001               	movlw	1
  2913  15B7                     u2435:	
  2914  15B7  1003               	clrc
  2915  15B8  0CA1               	rrf	___lwdiv@divisor+1,f
  2916  15B9  0CA0               	rrf	___lwdiv@divisor,f
  2917  15BA  3EFF               	addlw	-1
  2918  15BB  1D03               	skipz
  2919  15BC  2DB7               	goto	u2435
  2920  15BD  3001               	movlw	1
  2921  15BE  02A7               	subwf	___lwdiv@counter,f
  2922  15BF  1D03               	btfss	3,2
  2923  15C0  2DA0               	goto	l2119
  2924  15C1                     l2129:	
  2925  15C1  0826               	movf	___lwdiv@quotient+1,w
  2926  15C2  00A1               	movwf	?___lwdiv+1
  2927  15C3  0825               	movf	___lwdiv@quotient,w
  2928  15C4  00A0               	movwf	?___lwdiv
  2929  15C5  0008               	return
  2930  15C6                     __end_of___lwdiv:	
  2931                           
  2932                           	psect	text9
  2933  14DF                     __ptext9:	
  2934 ;; *************** function _initController *****************
  2935 ;; Defined at:
  2936 ;;		line 214 in file "setup.h"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;		None               void
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0, pclath, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2950 ;;      Params:         0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0
  2953 ;;      Totals:         0       0       0       0       0
  2954 ;;Total ram usage:        0 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    5
  2957 ;; This function calls:
  2958 ;;		_initADC
  2959 ;;		_initLCD
  2960 ;;		_timeSetup
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _initController
  2968  14DF                     _initController:	
  2969                           
  2970                           ;setup.h: 217: OSCCONbits.IRCF = 0b111;
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  2974  14DF  3070               	movlw	112
  2975  14E0  1683               	bsf	3,5	;RP0=1, select bank1
  2976  14E1  1303               	bcf	3,6	;RP1=0, select bank1
  2977  14E2  048F               	iorwf	15,f	;volatile
  2978                           
  2979                           ;setup.h: 218: OSCCONbits.SCS = 0;
  2980  14E3  100F               	bcf	15,0	;volatile
  2981                           
  2982                           ;setup.h: 221: TRISA = 0b00111111;
  2983  14E4  303F               	movlw	63
  2984  14E5  0085               	movwf	5	;volatile
  2985                           
  2986                           ;setup.h: 222: TRISB = 0b00000000;
  2987  14E6  0186               	clrf	6	;volatile
  2988                           
  2989                           ;setup.h: 223: TRISC = 0b00000000;
  2990  14E7  0187               	clrf	7	;volatile
  2991                           
  2992                           ;setup.h: 224: TRISD = 0b01100000;
  2993  14E8  3060               	movlw	96
  2994  14E9  0088               	movwf	8	;volatile
  2995                           
  2996                           ;setup.h: 225: TRISE = 0b00000111;
  2997  14EA  3007               	movlw	7
  2998  14EB  0089               	movwf	9	;volatile
  2999                           
  3000                           ;setup.h: 227: ANSEL = 0xFF;
  3001  14EC  30FF               	movlw	255
  3002  14ED  0091               	movwf	17	;volatile
  3003                           
  3004                           ;setup.h: 229: PORTA = 0;
  3005  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  3006  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  3007  14F0  0185               	clrf	5	;volatile
  3008                           
  3009                           ;setup.h: 230: PORTB = 0;
  3010  14F1  0186               	clrf	6	;volatile
  3011                           
  3012                           ;setup.h: 231: PORTC = 0;
  3013  14F2  0187               	clrf	7	;volatile
  3014                           
  3015                           ;setup.h: 232: PORTD = 0;
  3016  14F3  0188               	clrf	8	;volatile
  3017                           
  3018                           ;setup.h: 233: PORTE = 0;
  3019  14F4  0189               	clrf	9	;volatile
  3020                           
  3021                           ;setup.h: 235: CMCON0bits.CM = 0b111;
  3022  14F5  3007               	movlw	7
  3023  14F6  1683               	bsf	3,5	;RP0=1, select bank1
  3024  14F7  1303               	bcf	3,6	;RP1=0, select bank1
  3025  14F8  049C               	iorwf	28,f	;volatile
  3026                           
  3027                           ;setup.h: 236: LCDCON = 0;
  3028  14F9  1283               	bcf	3,5	;RP0=0, select bank2
  3029  14FA  1703               	bsf	3,6	;RP1=1, select bank2
  3030  14FB  0187               	clrf	7	;volatile
  3031                           
  3032                           ;setup.h: 237: LVDCONbits.LVDEN = 0;
  3033  14FC  1209               	bcf	9,4	;volatile
  3034                           
  3035                           ;setup.h: 238: CCP1CON = 0;
  3036  14FD  1283               	bcf	3,5	;RP0=0, select bank0
  3037  14FE  1303               	bcf	3,6	;RP1=0, select bank0
  3038  14FF  0197               	clrf	23	;volatile
  3039                           
  3040                           ;setup.h: 239: CCP2CON = 0;
  3041  1500  019D               	clrf	29	;volatile
  3042                           
  3043                           ;setup.h: 240: OPTION_REGbits.nRBPU = 1;
  3044  1501  1683               	bsf	3,5	;RP0=1, select bank1
  3045  1502  1303               	bcf	3,6	;RP1=0, select bank1
  3046  1503  1781               	bsf	1,7	;volatile
  3047                           
  3048                           ;setup.h: 242: RD2 = 0;
  3049  1504  1283               	bcf	3,5	;RP0=0, select bank0
  3050  1505  1303               	bcf	3,6	;RP1=0, select bank0
  3051  1506  1108               	bcf	8,2	;volatile
  3052                           
  3053                           ;setup.h: 247: RC0 = 1;
  3054  1507  1407               	bsf	7,0	;volatile
  3055                           
  3056                           ;setup.h: 250: initADC();
  3057  1508  160A  118A  2369  160A  118A  	fcall	_initADC
  3058                           
  3059                           ;setup.h: 252: timeSetup();
  3060  150D  120A  158A  2002  160A  118A  	fcall	_timeSetup
  3061                           
  3062                           ;setup.h: 254: initLCD();
  3063  1512  120A  158A  20A9   	fcall	_initLCD
  3064  1515  0008               	return
  3065  1516                     __end_of_initController:	
  3066                           
  3067                           	psect	text10
  3068  0802                     __ptext10:	
  3069 ;; *************** function _timeSetup *****************
  3070 ;; Defined at:
  3071 ;;		line 49 in file "timer0.h"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;		None               void
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3085 ;;      Params:         0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0
  3088 ;;      Totals:         0       0       0       0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_initController
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _timeSetup
  3101  0802                     _timeSetup:	
  3102                           
  3103                           ;timer0.h: 51: OPTION_REGbits.T0CS = 0;
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _timeSetup: [wreg+status,2+status,0]
  3107  0802  1683               	bsf	3,5	;RP0=1, select bank1
  3108  0803  1303               	bcf	3,6	;RP1=0, select bank1
  3109  0804  1281               	bcf	1,5	;volatile
  3110                           
  3111                           ;timer0.h: 52: OPTION_REGbits.T0SE = 1;
  3112  0805  1601               	bsf	1,4	;volatile
  3113                           
  3114                           ;timer0.h: 53: OPTION_REGbits.PSA = 0 ;
  3115  0806  1181               	bcf	1,3	;volatile
  3116                           
  3117                           ;timer0.h: 54: OPTION_REGbits.PS = 0b111;
  3118  0807  3007               	movlw	7
  3119  0808  0481               	iorwf	1,f	;volatile
  3120                           
  3121                           ;timer0.h: 57: INTCONbits.T0IE = 1;
  3122  0809  168B               	bsf	11,5	;volatile
  3123                           
  3124                           ;timer0.h: 58: INTCONbits.T0IF = 0;
  3125  080A  110B               	bcf	11,2	;volatile
  3126                           
  3127                           ;timer0.h: 59: INTCONbits.PEIE = 1;
  3128  080B  170B               	bsf	11,6	;volatile
  3129                           
  3130                           ;timer0.h: 60: INTCONbits.GIE = 1;
  3131  080C  178B               	bsf	11,7	;volatile
  3132  080D  0008               	return
  3133  080E                     __end_of_timeSetup:	
  3134                           
  3135                           	psect	text11
  3136  1369                     __ptext11:	
  3137 ;; *************** function _initADC *****************
  3138 ;; Defined at:
  3139 ;;		line 56 in file "adc.h"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, status,2
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       0       0       0
  3154 ;;      Locals:         0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         0       0       0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    2
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_initController
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _initADC
  3169  1369                     _initADC:	
  3170                           
  3171                           ;adc.h: 58: ADCON0 = 0b10000001;
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _initADC: [wreg+status,2]
  3175  1369  3081               	movlw	129
  3176  136A  1283               	bcf	3,5	;RP0=0, select bank0
  3177  136B  1303               	bcf	3,6	;RP1=0, select bank0
  3178  136C  009F               	movwf	31	;volatile
  3179                           
  3180                           ;adc.h: 65: ADCON1 = 0b01110000;
  3181  136D  3070               	movlw	112
  3182  136E  1683               	bsf	3,5	;RP0=1, select bank1
  3183  136F  1303               	bcf	3,6	;RP1=0, select bank1
  3184  1370  009F               	movwf	31	;volatile
  3185                           
  3186                           ;adc.h: 68: ADRESH = 0x00;
  3187  1371  1283               	bcf	3,5	;RP0=0, select bank0
  3188  1372  1303               	bcf	3,6	;RP1=0, select bank0
  3189  1373  019E               	clrf	30	;volatile
  3190                           
  3191                           ;adc.h: 69: ADRESL = 0x00;
  3192  1374  1683               	bsf	3,5	;RP0=1, select bank1
  3193  1375  1303               	bcf	3,6	;RP1=0, select bank1
  3194  1376  019E               	clrf	30	;volatile
  3195  1377  0008               	return
  3196  1378                     __end_of_initADC:	
  3197                           
  3198                           	psect	text12
  3199  1648                     __ptext12:	
  3200 ;; *************** function _handlePB *****************
  3201 ;; Defined at:
  3202 ;;		line 312 in file "PIC16F917 Battery Management.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;		None               void
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0
  3218 ;;      Temps:          0       0       3       0       0
  3219 ;;      Totals:         0       0       3       0       0
  3220 ;;Total ram usage:        3 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    5
  3223 ;; This function calls:
  3224 ;;		_initLCD
  3225 ;;		_stopWatch
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _handlePB
  3233  1648                     _handlePB:	
  3234                           
  3235                           ;PIC16F917 Battery Management.c: 314: if( RD5 == 1 )
  3236                           
  3237                           ;incstack = 0
  3238                           ; Regs used in _handlePB: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3239  1648  1283               	bcf	3,5	;RP0=0, select bank0
  3240  1649  1303               	bcf	3,6	;RP1=0, select bank0
  3241  164A  1A88               	btfsc	8,5	;volatile
  3242  164B  0008               	return
  3243                           
  3244                           ;PIC16F917 Battery Management.c: 317: _delay((unsigned long)((50)*(8000000/4000.0)));
  3245                           
  3246                           ;PIC16F917 Battery Management.c: 315: return;
  3247  164C  3082               	movlw	130
  3248  164D  1683               	bsf	3,5	;RP0=1, select bank1
  3249  164E  1303               	bcf	3,6	;RP1=0, select bank1
  3250  164F  00B2               	movwf	(??_handlePB^(0+128)+1)
  3251  1650  30DD               	movlw	221
  3252  1651  00B1               	movwf	??_handlePB^(0+128)
  3253  1652                     u2987:	
  3254  1652  0BB1               	decfsz	??_handlePB^(0+128),f
  3255  1653  2E52               	goto	u2987
  3256  1654  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  3257  1655  2E52               	goto	u2987
  3258  1656  2E57               	nop2
  3259                           
  3260                           ;PIC16F917 Battery Management.c: 319: if( RD5 == 1 )
  3261  1657  1283               	bcf	3,5	;RP0=0, select bank0
  3262  1658  1303               	bcf	3,6	;RP1=0, select bank0
  3263  1659  1A88               	btfsc	8,5	;volatile
  3264  165A  0008               	return
  3265                           
  3266                           ;PIC16F917 Battery Management.c: 322: stopWatch(0);
  3267                           
  3268                           ;PIC16F917 Battery Management.c: 320: return;
  3269  165B  3000               	movlw	0
  3270  165C  120A  158A  2390  160A  118A  	fcall	_stopWatch
  3271  1661                     l316:	
  3272                           ;PIC16F917 Battery Management.c: 323: while( RD5 == 0 )
  3273                           
  3274  1661  1283               	bcf	3,5	;RP0=0, select bank0
  3275  1662  1303               	bcf	3,6	;RP1=0, select bank0
  3276  1663  1A88               	btfsc	8,5	;volatile
  3277  1664  2E98               	goto	l2509
  3278                           
  3279                           ;PIC16F917 Battery Management.c: 324: {
  3280                           ;PIC16F917 Battery Management.c: 325: if(stopWatch(1) >= 1000)
  3281  1665  3001               	movlw	1
  3282  1666  120A  158A  2390  160A  118A  	fcall	_stopWatch
  3283  166B  1283               	bcf	3,5	;RP0=0, select bank0
  3284  166C  1303               	bcf	3,6	;RP1=0, select bank0
  3285  166D  086F               	movf	?_stopWatch+3,w
  3286  166E  1D03               	btfss	3,2
  3287  166F  2E7D               	goto	l2499
  3288  1670  086E               	movf	?_stopWatch+2,w
  3289  1671  1D03               	btfss	3,2
  3290  1672  2E7D               	goto	l2499
  3291  1673  3003               	movlw	3
  3292  1674  026D               	subwf	?_stopWatch+1,w
  3293  1675  1D03               	skipz
  3294  1676  2E7B               	goto	u2763
  3295  1677  30E8               	movlw	232
  3296  1678  026C               	subwf	?_stopWatch,w
  3297  1679  1D03               	skipz
  3298  167A  2E7B               	goto	u2763
  3299  167B                     u2763:	
  3300  167B  1C03               	btfss	3,0
  3301  167C  2E61               	goto	l316
  3302  167D                     l2499:	
  3303                           
  3304                           ;PIC16F917 Battery Management.c: 326: {
  3305                           ;PIC16F917 Battery Management.c: 327: initLCD();
  3306  167D  120A  158A  20A9  160A  118A  	fcall	_initLCD
  3307                           
  3308                           ;PIC16F917 Battery Management.c: 329: RC1 = 1;
  3309  1682  1283               	bcf	3,5	;RP0=0, select bank0
  3310  1683  1303               	bcf	3,6	;RP1=0, select bank0
  3311  1684  1487               	bsf	7,1	;volatile
  3312                           
  3313                           ;PIC16F917 Battery Management.c: 330: _delay((unsigned long)((100)*(8000000/4000.0)));
  3314  1685  3002               	movlw	2
  3315  1686  1683               	bsf	3,5	;RP0=1, select bank1
  3316  1687  1303               	bcf	3,6	;RP1=0, select bank1
  3317  1688  00B3               	movwf	(??_handlePB^(0+128)+2)
  3318  1689  3004               	movlw	4
  3319  168A  00B2               	movwf	(??_handlePB^(0+128)+1)
  3320  168B  30BA               	movlw	186
  3321  168C  00B1               	movwf	??_handlePB^(0+128)
  3322  168D                     u2997:	
  3323  168D  0BB1               	decfsz	??_handlePB^(0+128),f
  3324  168E  2E8D               	goto	u2997
  3325  168F  0BB2               	decfsz	(??_handlePB^(0+128)+1),f
  3326  1690  2E8D               	goto	u2997
  3327  1691  0BB3               	decfsz	(??_handlePB^(0+128)+2),f
  3328  1692  2E8D               	goto	u2997
  3329  1693  0000               	nop
  3330                           
  3331                           ;PIC16F917 Battery Management.c: 331: RC1 = 0;
  3332  1694  1283               	bcf	3,5	;RP0=0, select bank0
  3333  1695  1303               	bcf	3,6	;RP1=0, select bank0
  3334  1696  1087               	bcf	7,1	;volatile
  3335                           
  3336                           ;PIC16F917 Battery Management.c: 332: return;
  3337  1697  0008               	return
  3338  1698                     l2509:	
  3339                           
  3340                           ;PIC16F917 Battery Management.c: 333: }
  3341                           ;PIC16F917 Battery Management.c: 334: }
  3342                           ;PIC16F917 Battery Management.c: 336: LCDDisplayMode++;
  3343  1698  3001               	movlw	1
  3344  1699  1683               	bsf	3,5	;RP0=1, select bank1
  3345  169A  1303               	bcf	3,6	;RP1=0, select bank1
  3346  169B  00B1               	movwf	??_handlePB^(0+128)
  3347  169C  0831               	movf	??_handlePB^(0+128),w
  3348  169D  07EA               	addwf	_LCDDisplayMode^(0+128),f
  3349                           
  3350                           ;PIC16F917 Battery Management.c: 338: if (LCDDisplayMode > 3)
  3351  169E  3004               	movlw	4
  3352  169F  026A               	subwf	_LCDDisplayMode^(0+128),w
  3353  16A0  1C03               	skipc
  3354  16A1  0008               	return
  3355                           
  3356                           ;PIC16F917 Battery Management.c: 339: LCDDisplayMode = 0;
  3357  16A2  01EA               	clrf	_LCDDisplayMode^(0+128)
  3358  16A3  0008               	return
  3359  16A4                     __end_of_handlePB:	
  3360                           
  3361                           	psect	text13
  3362  0B90                     __ptext13:	
  3363 ;; *************** function _stopWatch *****************
  3364 ;; Defined at:
  3365 ;;		line 81 in file "timer0.h"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  mode            1    wreg     unsigned char 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  mode            1   12[BANK1 ] unsigned char 
  3370 ;;  temp            4   13[BANK1 ] unsigned long 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  4   76[BANK0 ] unsigned long 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3380 ;;      Params:         0       4       0       0       0
  3381 ;;      Locals:         0       0       5       0       0
  3382 ;;      Temps:          0       0      12       0       0
  3383 ;;      Totals:         0       4      17       0       0
  3384 ;;Total ram usage:       21 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    4
  3387 ;; This function calls:
  3388 ;;		___ftmul
  3389 ;;		___fttol
  3390 ;;		___lltoft
  3391 ;; This function is called by:
  3392 ;;		_handlePB
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           
  3397                           ;psect for function _stopWatch
  3398  0B90                     _stopWatch:	
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _stopWatch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3402                           ;stopWatch@mode stored from wreg
  3403  0B90  1683               	bsf	3,5	;RP0=1, select bank1
  3404  0B91  1303               	bcf	3,6	;RP1=0, select bank1
  3405  0B92  00AC               	movwf	stopWatch@mode^(0+128)
  3406                           
  3407                           ;timer0.h: 83: static unsigned long startTime = 0;
  3408                           ;timer0.h: 85: unsigned long temp = 0;
  3409  0B93  3000               	movlw	0
  3410  0B94  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3411  0B95  3000               	movlw	0
  3412  0B96  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3413  0B97  3000               	movlw	0
  3414  0B98  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3415  0B99  3000               	movlw	0
  3416  0B9A  00AD               	movwf	stopWatch@temp^(0+128)
  3417                           
  3418                           ;timer0.h: 87: switch (mode)
  3419  0B9B  2C82               	goto	l2287
  3420  0B9C                     l2273:	
  3421                           ;timer0.h: 88: {
  3422                           ;timer0.h: 89: case(0):
  3423                           
  3424                           
  3425                           ;timer0.h: 90: {
  3426                           ;timer0.h: 91: startTime = time + TMR0;
  3427  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  3429  0B9E  0801               	movf	1,w	;volatile
  3430  0B9F  1683               	bsf	3,5	;RP0=1, select bank1
  3431  0BA0  1303               	bcf	3,6	;RP1=0, select bank1
  3432  0BA1  075F               	addwf	_time^(0+128),w
  3433  0BA2  00E3               	movwf	stopWatch@startTime^(0+128)
  3434  0BA3  0860               	movf	(_time+1)^(0+128),w
  3435  0BA4  1803               	skipnc
  3436  0BA5  0F60               	incfsz	(_time+1)^(0+128),w
  3437  0BA6  1003               	clrc
  3438  0BA7  00E4               	movwf	(stopWatch@startTime^(0+128)+1)
  3439  0BA8  0861               	movf	(_time+2)^(0+128),w
  3440  0BA9  1803               	skipnc
  3441  0BAA  0F61               	incfsz	(_time+2)^(0+128),w
  3442  0BAB  1003               	clrc
  3443  0BAC  00E5               	movwf	(stopWatch@startTime^(0+128)+2)
  3444  0BAD  0862               	movf	(_time+3)^(0+128),w
  3445  0BAE  1803               	skipnc
  3446  0BAF  0A62               	incf	(_time+3)^(0+128),w
  3447  0BB0  00E6               	movwf	(stopWatch@startTime^(0+128)+3)
  3448                           
  3449                           ;timer0.h: 93: return 1;
  3450  0BB1  3000               	movlw	0
  3451  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0BB4  00EF               	movwf	?_stopWatch+3
  3454  0BB5  3000               	movlw	0
  3455  0BB6  00EE               	movwf	?_stopWatch+2
  3456  0BB7  3000               	movlw	0
  3457  0BB8  00ED               	movwf	?_stopWatch+1
  3458  0BB9  3001               	movlw	1
  3459  0BBA  00EC               	movwf	?_stopWatch
  3460  0BBB  0008               	return
  3461  0BBC                     l2277:	
  3462                           ;timer0.h: 94: }
  3463                           ;timer0.h: 96: case (1):
  3464                           
  3465                           
  3466                           ;timer0.h: 97: {
  3467                           ;timer0.h: 98: temp = time + TMR0 - startTime;
  3468  0BBC  1683               	bsf	3,5	;RP0=1, select bank1
  3469  0BBD  1303               	bcf	3,6	;RP1=0, select bank1
  3470  0BBE  085F               	movf	_time^(0+128),w
  3471  0BBF  00A0               	movwf	??_stopWatch^(0+128)
  3472  0BC0  0860               	movf	(_time+1)^(0+128),w
  3473  0BC1  00A1               	movwf	(??_stopWatch^(0+128)+1)
  3474  0BC2  0861               	movf	(_time+2)^(0+128),w
  3475  0BC3  00A2               	movwf	(??_stopWatch^(0+128)+2)
  3476  0BC4  0862               	movf	(_time+3)^(0+128),w
  3477  0BC5  00A3               	movwf	(??_stopWatch^(0+128)+3)
  3478  0BC6  0963               	comf	stopWatch@startTime^(0+128),w
  3479  0BC7  00A4               	movwf	(??_stopWatch+4)^(0+128)
  3480  0BC8  0964               	comf	(stopWatch@startTime+1)^(0+128),w
  3481  0BC9  00A5               	movwf	((??_stopWatch+4)^(0+128)+1)
  3482  0BCA  0965               	comf	(stopWatch@startTime+2)^(0+128),w
  3483  0BCB  00A6               	movwf	((??_stopWatch+4)^(0+128)+2)
  3484  0BCC  0966               	comf	(stopWatch@startTime+3)^(0+128),w
  3485  0BCD  00A7               	movwf	((??_stopWatch+4)^(0+128)+3)
  3486  0BCE  0AA4               	incf	(??_stopWatch+4)^(0+128),f
  3487  0BCF  1903               	skipnz
  3488  0BD0  0AA5               	incf	((??_stopWatch+4)^(0+128)+1),f
  3489  0BD1  1903               	skipnz
  3490  0BD2  0AA6               	incf	((??_stopWatch+4)^(0+128)+2),f
  3491  0BD3  1903               	skipnz
  3492  0BD4  0AA7               	incf	((??_stopWatch+4)^(0+128)+3),f
  3493  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  3495  0BD7  0801               	movf	1,w	;volatile
  3496  0BD8  1683               	bsf	3,5	;RP0=1, select bank1
  3497  0BD9  1303               	bcf	3,6	;RP1=0, select bank1
  3498  0BDA  00A8               	movwf	(??_stopWatch+8)^(0+128)
  3499  0BDB  01A9               	clrf	((??_stopWatch+8)^(0+128)+1)
  3500  0BDC  01AA               	clrf	((??_stopWatch+8)^(0+128)+2)
  3501  0BDD  01AB               	clrf	((??_stopWatch+8)^(0+128)+3)
  3502  0BDE  0828               	movf	(??_stopWatch+8)^(0+128),w
  3503  0BDF  07A4               	addwf	(??_stopWatch+4)^(0+128),f
  3504  0BE0  0829               	movf	(??_stopWatch+9)^(0+128),w
  3505  0BE1  1803               	skipnc
  3506  0BE2  0F29               	incfsz	(??_stopWatch+9)^(0+128),w
  3507  0BE3  2BE5               	goto	u2600
  3508  0BE4  2BE6               	goto	u2601
  3509  0BE5                     u2600:	
  3510  0BE5  07A5               	addwf	((??_stopWatch+4)^(0+128)+1),f
  3511  0BE6                     u2601:	
  3512  0BE6  082A               	movf	(??_stopWatch+10)^(0+128),w
  3513  0BE7  1803               	skipnc
  3514  0BE8  0F2A               	incfsz	(??_stopWatch+10)^(0+128),w
  3515  0BE9  2BEB               	goto	u2602
  3516  0BEA  2BEC               	goto	u2603
  3517  0BEB                     u2602:	
  3518  0BEB  07A6               	addwf	((??_stopWatch+4)^(0+128)+2),f
  3519  0BEC                     u2603:	
  3520  0BEC  082B               	movf	(??_stopWatch+11)^(0+128),w
  3521  0BED  1803               	skipnc
  3522  0BEE  0A2B               	incf	(??_stopWatch+11)^(0+128),w
  3523  0BEF  07A7               	addwf	((??_stopWatch+4)^(0+128)+3),f
  3524  0BF0  0824               	movf	(??_stopWatch+4)^(0+128),w
  3525  0BF1  07A0               	addwf	??_stopWatch^(0+128),f
  3526  0BF2  0825               	movf	(??_stopWatch+5)^(0+128),w
  3527  0BF3  1803               	skipnc
  3528  0BF4  0F25               	incfsz	(??_stopWatch+5)^(0+128),w
  3529  0BF5  2BF7               	goto	u2610
  3530  0BF6  2BF8               	goto	u2611
  3531  0BF7                     u2610:	
  3532  0BF7  07A1               	addwf	(??_stopWatch^(0+128)+1),f
  3533  0BF8                     u2611:	
  3534  0BF8  0826               	movf	(??_stopWatch+6)^(0+128),w
  3535  0BF9  1803               	skipnc
  3536  0BFA  0F26               	incfsz	(??_stopWatch+6)^(0+128),w
  3537  0BFB  2BFD               	goto	u2612
  3538  0BFC  2BFE               	goto	u2613
  3539  0BFD                     u2612:	
  3540  0BFD  07A2               	addwf	(??_stopWatch^(0+128)+2),f
  3541  0BFE                     u2613:	
  3542  0BFE  0827               	movf	(??_stopWatch+7)^(0+128),w
  3543  0BFF  1803               	skipnc
  3544  0C00  0A27               	incf	(??_stopWatch+7)^(0+128),w
  3545  0C01  07A3               	addwf	(??_stopWatch^(0+128)+3),f
  3546  0C02  0823               	movf	(??_stopWatch+3)^(0+128),w
  3547  0C03  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3548  0C04  0822               	movf	(??_stopWatch+2)^(0+128),w
  3549  0C05  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3550  0C06  0821               	movf	(??_stopWatch+1)^(0+128),w
  3551  0C07  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3552  0C08  0820               	movf	??_stopWatch^(0+128),w
  3553  0C09  00AD               	movwf	stopWatch@temp^(0+128)
  3554                           
  3555                           ;timer0.h: 100: temp = convConst * temp;
  3556  0C0A  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3557  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0C0D  00AB               	movwf	___lltoft@c+3
  3560  0C0E  1683               	bsf	3,5	;RP0=1, select bank1
  3561  0C0F  1303               	bcf	3,6	;RP1=0, select bank1
  3562  0C10  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3563  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0C13  00AA               	movwf	___lltoft@c+2
  3566  0C14  1683               	bsf	3,5	;RP0=1, select bank1
  3567  0C15  1303               	bcf	3,6	;RP1=0, select bank1
  3568  0C16  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3569  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  3570  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  3571  0C19  00A9               	movwf	___lltoft@c+1
  3572  0C1A  1683               	bsf	3,5	;RP0=1, select bank1
  3573  0C1B  1303               	bcf	3,6	;RP1=0, select bank1
  3574  0C1C  082D               	movf	stopWatch@temp^(0+128),w
  3575  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0C1E  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0C1F  00A8               	movwf	___lltoft@c
  3578  0C20  160A  118A  247F  120A  158A  	fcall	___lltoft
  3579  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0C27  0828               	movf	?___lltoft,w
  3582  0C28  00C1               	movwf	___ftmul@f2
  3583  0C29  0829               	movf	?___lltoft+1,w
  3584  0C2A  00C2               	movwf	___ftmul@f2+1
  3585  0C2B  082A               	movf	?___lltoft+2,w
  3586  0C2C  00C3               	movwf	___ftmul@f2+2
  3587  0C2D  3004               	movlw	low (_convConst-__stringbase)
  3588  0C2E  0084               	movwf	4
  3589  0C2F  160A  118A  200A  120A  158A  	fcall	stringdir
  3590  0C34  00BE               	movwf	___ftmul@f1
  3591  0C35  160A  118A  200A  120A  158A  	fcall	stringdir
  3592  0C3A  00BF               	movwf	___ftmul@f1+1
  3593  0C3B  160A  118A  200A  120A  158A  	fcall	stringdir
  3594  0C40  00C0               	movwf	___ftmul@f1+2
  3595  0C41  120A  158A  22BD  120A  158A  	fcall	___ftmul
  3596  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0C48  083E               	movf	?___ftmul,w
  3599  0C49  00DE               	movwf	___fttol@f1
  3600  0C4A  083F               	movf	?___ftmul+1,w
  3601  0C4B  00DF               	movwf	___fttol@f1+1
  3602  0C4C  0840               	movf	?___ftmul+2,w
  3603  0C4D  00E0               	movwf	___fttol@f1+2
  3604  0C4E  160A  118A  2772  120A  158A  	fcall	___fttol
  3605  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  3607  0C55  0861               	movf	?___fttol+3,w
  3608  0C56  1683               	bsf	3,5	;RP0=1, select bank1
  3609  0C57  1303               	bcf	3,6	;RP1=0, select bank1
  3610  0C58  00B0               	movwf	(stopWatch@temp+3)^(0+128)
  3611  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  3612  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  3613  0C5B  0860               	movf	?___fttol+2,w
  3614  0C5C  1683               	bsf	3,5	;RP0=1, select bank1
  3615  0C5D  1303               	bcf	3,6	;RP1=0, select bank1
  3616  0C5E  00AF               	movwf	(stopWatch@temp+2)^(0+128)
  3617  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  3618  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  3619  0C61  085F               	movf	?___fttol+1,w
  3620  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  3621  0C63  1303               	bcf	3,6	;RP1=0, select bank1
  3622  0C64  00AE               	movwf	(stopWatch@temp+1)^(0+128)
  3623  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  3624  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  3625  0C67  085E               	movf	?___fttol,w
  3626  0C68  1683               	bsf	3,5	;RP0=1, select bank1
  3627  0C69  1303               	bcf	3,6	;RP1=0, select bank1
  3628  0C6A  00AD               	movwf	stopWatch@temp^(0+128)
  3629                           
  3630                           ;timer0.h: 102: return temp;
  3631  0C6B  0830               	movf	(stopWatch@temp+3)^(0+128),w
  3632  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  3633  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0C6E  00EF               	movwf	?_stopWatch+3
  3635  0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  3636  0C70  1303               	bcf	3,6	;RP1=0, select bank1
  3637  0C71  082F               	movf	(stopWatch@temp+2)^(0+128),w
  3638  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0C74  00EE               	movwf	?_stopWatch+2
  3641  0C75  1683               	bsf	3,5	;RP0=1, select bank1
  3642  0C76  1303               	bcf	3,6	;RP1=0, select bank1
  3643  0C77  082E               	movf	(stopWatch@temp+1)^(0+128),w
  3644  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0C7A  00ED               	movwf	?_stopWatch+1
  3647  0C7B  1683               	bsf	3,5	;RP0=1, select bank1
  3648  0C7C  1303               	bcf	3,6	;RP1=0, select bank1
  3649  0C7D  082D               	movf	stopWatch@temp^(0+128),w
  3650  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  3651  0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  3652  0C80  00EC               	movwf	?_stopWatch
  3653  0C81  0008               	return
  3654  0C82                     l2287:	
  3655                           ;timer0.h: 103: }
  3656                           ;timer0.h: 104: }
  3657                           
  3658  0C82  1683               	bsf	3,5	;RP0=1, select bank1
  3659  0C83  1303               	bcf	3,6	;RP1=0, select bank1
  3660  0C84  082C               	movf	stopWatch@mode^(0+128),w
  3661                           
  3662                           ; Switch size 1, requested type "space"
  3663                           ; Number of cases is 2, Range of values is 0 to 1
  3664                           ; switch strategies available:
  3665                           ; Name         Instructions Cycles
  3666                           ; simple_byte            7     4 (average)
  3667                           ; direct_byte           14     8 (fixed)
  3668                           ; jumptable            260     6 (fixed)
  3669                           ;	Chosen strategy is simple_byte
  3670  0C85  3A00               	xorlw	0	; case 0
  3671  0C86  1903               	skipnz
  3672  0C87  2B9C               	goto	l2273
  3673  0C88  3A01               	xorlw	1	; case 1
  3674  0C89  1903               	skipnz
  3675  0C8A  2BBC               	goto	l2277
  3676  0C8B  2C8C               	goto	l2289
  3677  0C8C                     l2289:	
  3678                           
  3679                           ;timer0.h: 106: return 0;
  3680  0C8C  3000               	movlw	0
  3681  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0C8E  00EF               	movwf	?_stopWatch+3
  3683  0C8F  3000               	movlw	0
  3684  0C90  00EE               	movwf	?_stopWatch+2
  3685  0C91  3000               	movlw	0
  3686  0C92  00ED               	movwf	?_stopWatch+1
  3687  0C93  3000               	movlw	0
  3688  0C94  00EC               	movwf	?_stopWatch
  3689  0C95  0008               	return
  3690  0C96                     __end_of_stopWatch:	
  3691                           
  3692                           	psect	text14
  3693  08A9                     __ptext14:	
  3694 ;; *************** function _initLCD *****************
  3695 ;; Defined at:
  3696 ;;		line 52 in file "lcd.h"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;		None
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0, pclath, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3710 ;;      Params:         0       0       0       0       0
  3711 ;;      Locals:         0       0       0       0       0
  3712 ;;      Temps:          0       3       0       0       0
  3713 ;;      Totals:         0       3       0       0       0
  3714 ;;Total ram usage:        3 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    4
  3717 ;; This function calls:
  3718 ;;		_LCDSetBits
  3719 ;;		_LCDcmd
  3720 ;;		_pulse
  3721 ;; This function is called by:
  3722 ;;		_initController
  3723 ;;		_handlePB
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _initLCD
  3729  08A9                     _initLCD:	
  3730                           
  3731                           ;lcd.h: 54: RB0 = 0;
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3735  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  3736  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  3737  08AB  1006               	bcf	6,0	;volatile
  3738                           
  3739                           ;lcd.h: 55: RD7 = 0;
  3740  08AC  1388               	bcf	8,7	;volatile
  3741                           
  3742                           ;lcd.h: 56: LCDSetBits(0x00);
  3743  08AD  3000               	movlw	0
  3744  08AE  160A  118A  2399  120A  158A  	fcall	_LCDSetBits
  3745                           
  3746                           ;lcd.h: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  3747  08B3  3002               	movlw	2
  3748  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  3749  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  3750  08B6  00A7               	movwf	??_initLCD+2
  3751  08B7  3004               	movlw	4
  3752  08B8  00A6               	movwf	??_initLCD+1
  3753  08B9  30BA               	movlw	186
  3754  08BA  00A5               	movwf	??_initLCD
  3755  08BB                     u3007:	
  3756  08BB  0BA5               	decfsz	??_initLCD,f
  3757  08BC  28BB               	goto	u3007
  3758  08BD  0BA6               	decfsz	??_initLCD+1,f
  3759  08BE  28BB               	goto	u3007
  3760  08BF  0BA7               	decfsz	??_initLCD+2,f
  3761  08C0  28BB               	goto	u3007
  3762  08C1  0000               	nop
  3763                           
  3764                           ;lcd.h: 58: LCDSetBits(0x30);
  3765  08C2  3030               	movlw	48
  3766  08C3  160A  118A  2399  120A  158A  	fcall	_LCDSetBits
  3767                           
  3768                           ;lcd.h: 59: _delay((unsigned long)((30)*(8000000/4000.0)));
  3769  08C8  304E               	movlw	78
  3770  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  3771  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  3772  08CB  00A6               	movwf	??_initLCD+1
  3773  08CC  30EB               	movlw	235
  3774  08CD  00A5               	movwf	??_initLCD
  3775  08CE                     u3017:	
  3776  08CE  0BA5               	decfsz	??_initLCD,f
  3777  08CF  28CE               	goto	u3017
  3778  08D0  0BA6               	decfsz	??_initLCD+1,f
  3779  08D1  28CE               	goto	u3017
  3780                           
  3781                           ;lcd.h: 60: pulse();
  3782  08D2  160A  118A  2378  120A  158A  	fcall	_pulse
  3783                           
  3784                           ;lcd.h: 61: _delay((unsigned long)((10)*(8000000/4000.0)));
  3785  08D7  301A               	movlw	26
  3786  08D8  1283               	bcf	3,5	;RP0=0, select bank0
  3787  08D9  1303               	bcf	3,6	;RP1=0, select bank0
  3788  08DA  00A6               	movwf	??_initLCD+1
  3789  08DB  30F8               	movlw	248
  3790  08DC  00A5               	movwf	??_initLCD
  3791  08DD                     u3027:	
  3792  08DD  0BA5               	decfsz	??_initLCD,f
  3793  08DE  28DD               	goto	u3027
  3794  08DF  0BA6               	decfsz	??_initLCD+1,f
  3795  08E0  28DD               	goto	u3027
  3796  08E1  0000               	nop
  3797                           
  3798                           ;lcd.h: 62: pulse();
  3799  08E2  160A  118A  2378  120A  158A  	fcall	_pulse
  3800                           
  3801                           ;lcd.h: 63: _delay((unsigned long)((10)*(8000000/4000.0)));
  3802  08E7  301A               	movlw	26
  3803  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  3804  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  3805  08EA  00A6               	movwf	??_initLCD+1
  3806  08EB  30F8               	movlw	248
  3807  08EC  00A5               	movwf	??_initLCD
  3808  08ED                     u3037:	
  3809  08ED  0BA5               	decfsz	??_initLCD,f
  3810  08EE  28ED               	goto	u3037
  3811  08EF  0BA6               	decfsz	??_initLCD+1,f
  3812  08F0  28ED               	goto	u3037
  3813  08F1  0000               	nop
  3814                           
  3815                           ;lcd.h: 64: pulse();
  3816  08F2  160A  118A  2378  120A  158A  	fcall	_pulse
  3817                           
  3818                           ;lcd.h: 65: _delay((unsigned long)((10)*(8000000/4000.0)));
  3819  08F7  301A               	movlw	26
  3820  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  3821  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  3822  08FA  00A6               	movwf	??_initLCD+1
  3823  08FB  30F8               	movlw	248
  3824  08FC  00A5               	movwf	??_initLCD
  3825  08FD                     u3047:	
  3826  08FD  0BA5               	decfsz	??_initLCD,f
  3827  08FE  28FD               	goto	u3047
  3828  08FF  0BA6               	decfsz	??_initLCD+1,f
  3829  0900  28FD               	goto	u3047
  3830  0901  0000               	nop
  3831                           
  3832                           ;lcd.h: 66: LCDSetBits(0x20);
  3833  0902  3020               	movlw	32
  3834  0903  160A  118A  2399  120A  158A  	fcall	_LCDSetBits
  3835                           
  3836                           ;lcd.h: 67: pulse();
  3837  0908  160A  118A  2378  120A  158A  	fcall	_pulse
  3838                           
  3839                           ;lcd.h: 69: LCDcmd(0x28);
  3840  090D  3028               	movlw	40
  3841  090E  160A  118A  2454  120A  158A  	fcall	_LCDcmd
  3842                           
  3843                           ;lcd.h: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  3844  0913  301A               	movlw	26
  3845  0914  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0915  1303               	bcf	3,6	;RP1=0, select bank0
  3847  0916  00A6               	movwf	??_initLCD+1
  3848  0917  30F8               	movlw	248
  3849  0918  00A5               	movwf	??_initLCD
  3850  0919                     u3057:	
  3851  0919  0BA5               	decfsz	??_initLCD,f
  3852  091A  2919               	goto	u3057
  3853  091B  0BA6               	decfsz	??_initLCD+1,f
  3854  091C  2919               	goto	u3057
  3855  091D  0000               	nop
  3856                           
  3857                           ;lcd.h: 71: LCDcmd(0x10);
  3858  091E  3010               	movlw	16
  3859  091F  160A  118A  2454  120A  158A  	fcall	_LCDcmd
  3860                           
  3861                           ;lcd.h: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  3862  0924  301A               	movlw	26
  3863  0925  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0926  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0927  00A6               	movwf	??_initLCD+1
  3866  0928  30F8               	movlw	248
  3867  0929  00A5               	movwf	??_initLCD
  3868  092A                     u3067:	
  3869  092A  0BA5               	decfsz	??_initLCD,f
  3870  092B  292A               	goto	u3067
  3871  092C  0BA6               	decfsz	??_initLCD+1,f
  3872  092D  292A               	goto	u3067
  3873  092E  0000               	nop
  3874                           
  3875                           ;lcd.h: 73: LCDcmd(0x0F);
  3876  092F  300F               	movlw	15
  3877  0930  160A  118A  2454  120A  158A  	fcall	_LCDcmd
  3878                           
  3879                           ;lcd.h: 74: _delay((unsigned long)((10)*(8000000/4000.0)));
  3880  0935  301A               	movlw	26
  3881  0936  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0937  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0938  00A6               	movwf	??_initLCD+1
  3884  0939  30F8               	movlw	248
  3885  093A  00A5               	movwf	??_initLCD
  3886  093B                     u3077:	
  3887  093B  0BA5               	decfsz	??_initLCD,f
  3888  093C  293B               	goto	u3077
  3889  093D  0BA6               	decfsz	??_initLCD+1,f
  3890  093E  293B               	goto	u3077
  3891  093F  0000               	nop
  3892                           
  3893                           ;lcd.h: 75: LCDcmd(0x06);
  3894  0940  3006               	movlw	6
  3895  0941  160A  118A  2454  120A  158A  	fcall	_LCDcmd
  3896                           
  3897                           ;lcd.h: 76: _delay((unsigned long)((10)*(8000000/4000.0)));
  3898  0946  301A               	movlw	26
  3899  0947  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0948  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0949  00A6               	movwf	??_initLCD+1
  3902  094A  30F8               	movlw	248
  3903  094B  00A5               	movwf	??_initLCD
  3904  094C                     u3087:	
  3905  094C  0BA5               	decfsz	??_initLCD,f
  3906  094D  294C               	goto	u3087
  3907  094E  0BA6               	decfsz	??_initLCD+1,f
  3908  094F  294C               	goto	u3087
  3909  0950  0000               	nop
  3910  0951  0008               	return
  3911  0952                     __end_of_initLCD:	
  3912                           
  3913                           	psect	text15
  3914  1454                     __ptext15:	
  3915 ;; *************** function _LCDcmd *****************
  3916 ;; Defined at:
  3917 ;;		line 111 in file "lcd.h"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  a               1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  a               1    4[BANK0 ] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;		None               void
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, pclath, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3931 ;;      Params:         0       0       0       0       0
  3932 ;;      Locals:         0       1       0       0       0
  3933 ;;      Temps:          0       2       0       0       0
  3934 ;;      Totals:         0       3       0       0       0
  3935 ;;Total ram usage:        3 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    3
  3938 ;; This function calls:
  3939 ;;		_LCDSetBits
  3940 ;;		_pulse
  3941 ;; This function is called by:
  3942 ;;		_initLCD
  3943 ;;		_clearLCD
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           
  3948                           ;psect for function _LCDcmd
  3949  1454                     _LCDcmd:	
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  3953                           ;LCDcmd@a stored from wreg
  3954  1454  1283               	bcf	3,5	;RP0=0, select bank0
  3955  1455  1303               	bcf	3,6	;RP1=0, select bank0
  3956  1456  00A4               	movwf	LCDcmd@a
  3957                           
  3958                           ;lcd.h: 113: LCDSetBits(a);
  3959  1457  0824               	movf	LCDcmd@a,w
  3960  1458  160A  118A  2399  160A  118A  	fcall	_LCDSetBits
  3961                           
  3962                           ;lcd.h: 114: RB0 = 0;
  3963  145D  1283               	bcf	3,5	;RP0=0, select bank0
  3964  145E  1303               	bcf	3,6	;RP1=0, select bank0
  3965  145F  1006               	bcf	6,0	;volatile
  3966                           
  3967                           ;lcd.h: 115: RD7 = 0;
  3968  1460  1388               	bcf	8,7	;volatile
  3969                           
  3970                           ;lcd.h: 116: pulse();
  3971  1461  160A  118A  2378  160A  118A  	fcall	_pulse
  3972                           
  3973                           ;lcd.h: 117: a = a<<4;
  3974  1466  1283               	bcf	3,5	;RP0=0, select bank0
  3975  1467  1303               	bcf	3,6	;RP1=0, select bank0
  3976  1468  0824               	movf	LCDcmd@a,w
  3977  1469  00A2               	movwf	??_LCDcmd
  3978  146A  3003               	movlw	3
  3979  146B                     u1645:	
  3980  146B  1003               	clrc
  3981  146C  0DA2               	rlf	??_LCDcmd,f
  3982  146D  3EFF               	addlw	-1
  3983  146E  1D03               	skipz
  3984  146F  2C6B               	goto	u1645
  3985  1470  1003               	clrc
  3986  1471  0D22               	rlf	??_LCDcmd,w
  3987  1472  00A3               	movwf	??_LCDcmd+1
  3988  1473  0823               	movf	??_LCDcmd+1,w
  3989  1474  00A4               	movwf	LCDcmd@a
  3990                           
  3991                           ;lcd.h: 118: LCDSetBits(a);
  3992  1475  0824               	movf	LCDcmd@a,w
  3993  1476  160A  118A  2399  160A  118A  	fcall	_LCDSetBits
  3994                           
  3995                           ;lcd.h: 119: pulse();
  3996  147B  160A  118A  2378   	fcall	_pulse
  3997  147E  0008               	return
  3998  147F                     __end_of_LCDcmd:	
  3999                           
  4000                           	psect	text16
  4001  0D9F                     __ptext16:	
  4002 ;; *************** function _displayLCD *****************
  4003 ;; Defined at:
  4004 ;;		line 184 in file "PIC16F917 Battery Management.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  disp            2   21[BANK1 ] int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  temp2           8   35[BANK1 ] unsigned char [8]
  4009 ;;  temp1           8   27[BANK1 ] unsigned char [8]
  4010 ;; Return value:  Size  Location     Type
  4011 ;;		None               void
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4019 ;;      Params:         0       0       2       0       0
  4020 ;;      Locals:         0       0      16       0       0
  4021 ;;      Temps:          0       0       4       0       0
  4022 ;;      Totals:         0       0      22       0       0
  4023 ;;Total ram usage:       22 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    5
  4026 ;; This function calls:
  4027 ;;		_LCDSetCursor
  4028 ;;		_LCDWriteString
  4029 ;;		_floatToASCII
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _displayLCD
  4037  0D9F                     _displayLCD:	
  4038                           
  4039                           ;PIC16F917 Battery Management.c: 186: char temp1[8] = {0,0,0,0,0,0,0,0};
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4043  0D9F  30BB               	movlw	displayLCD@temp1& (0+255)
  4044  0DA0  0084               	movwf	4
  4045  0DA1  30B0               	movlw	low displayLCD@F2781
  4046  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  4047  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  4048  0DA4  00B7               	movwf	??_displayLCD^(0+128)
  4049  0DA5  0804               	movf	4,w
  4050  0DA6  00B8               	movwf	(??_displayLCD^(0+128)+1)
  4051  0DA7  3008               	movlw	8
  4052  0DA8  00B9               	movwf	(??_displayLCD^(0+128)+2)
  4053  0DA9                     u2790:	
  4054  0DA9  0837               	movf	??_displayLCD^(0+128),w
  4055  0DAA  0084               	movwf	4
  4056  0DAB  1783               	bsf	3,7	;select IRP bank3
  4057  0DAC  0800               	movf	0,w
  4058  0DAD  00BA               	movwf	(??_displayLCD^(0+128)+3)
  4059  0DAE  0AB7               	incf	??_displayLCD^(0+128),f
  4060  0DAF  0838               	movf	(??_displayLCD^(0+128)+1),w
  4061  0DB0  0084               	movwf	4
  4062  0DB1  1383               	bcf	3,7	;select IRP bank1
  4063  0DB2  083A               	movf	(??_displayLCD^(0+128)+3),w
  4064  0DB3  0080               	movwf	0
  4065  0DB4  0AB8               	incf	(??_displayLCD^(0+128)+1),f
  4066  0DB5  0BB9               	decfsz	(??_displayLCD^(0+128)+2),f
  4067  0DB6  2DA9               	goto	u2790
  4068                           
  4069                           ;PIC16F917 Battery Management.c: 187: char temp2[8] = {0,0,0,0,0,0,0,0};
  4070  0DB7  30C3               	movlw	displayLCD@temp2& (0+255)
  4071  0DB8  0084               	movwf	4
  4072  0DB9  30B8               	movlw	low displayLCD@F2783
  4073  0DBA  00B7               	movwf	??_displayLCD^(0+128)
  4074  0DBB  0804               	movf	4,w
  4075  0DBC  00B8               	movwf	(??_displayLCD^(0+128)+1)
  4076  0DBD  3008               	movlw	8
  4077  0DBE  00B9               	movwf	(??_displayLCD^(0+128)+2)
  4078  0DBF                     u2800:	
  4079  0DBF  0837               	movf	??_displayLCD^(0+128),w
  4080  0DC0  0084               	movwf	4
  4081  0DC1  1783               	bsf	3,7	;select IRP bank3
  4082  0DC2  0800               	movf	0,w
  4083  0DC3  00BA               	movwf	(??_displayLCD^(0+128)+3)
  4084  0DC4  0AB7               	incf	??_displayLCD^(0+128),f
  4085  0DC5  0838               	movf	(??_displayLCD^(0+128)+1),w
  4086  0DC6  0084               	movwf	4
  4087  0DC7  1383               	bcf	3,7	;select IRP bank1
  4088  0DC8  083A               	movf	(??_displayLCD^(0+128)+3),w
  4089  0DC9  0080               	movwf	0
  4090  0DCA  0AB8               	incf	(??_displayLCD^(0+128)+1),f
  4091  0DCB  0BB9               	decfsz	(??_displayLCD^(0+128)+2),f
  4092  0DCC  2DBF               	goto	u2800
  4093                           
  4094                           ;PIC16F917 Battery Management.c: 189: switch( disp )
  4095  0DCD  2FEA               	goto	l2575
  4096  0DCE                     l2517:	
  4097                           ;PIC16F917 Battery Management.c: 190: {
  4098                           ;PIC16F917 Battery Management.c: 193: case 0:
  4099                           
  4100                           
  4101                           ;PIC16F917 Battery Management.c: 194: {
  4102                           ;PIC16F917 Battery Management.c: 195: floatToASCII( temp1, cellVolt[5], 2);
  4103  0DCE  300F               	movlw	15
  4104  0DCF  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4105  0DD0  0084               	movwf	4
  4106  0DD1  1383               	bcf	3,7	;select IRP bank1
  4107  0DD2  0800               	movf	0,w
  4108  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  4109  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  4110  0DD5  00EC               	movwf	floatToASCII@num
  4111  0DD6  0A84               	incf	4,f
  4112  0DD7  0800               	movf	0,w
  4113  0DD8  00ED               	movwf	floatToASCII@num+1
  4114  0DD9  0A84               	incf	4,f
  4115  0DDA  0800               	movf	0,w
  4116  0DDB  00EE               	movwf	floatToASCII@num+2
  4117  0DDC  3002               	movlw	2
  4118  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
  4119  0DDE  1303               	bcf	3,6	;RP1=0, select bank1
  4120  0DDF  00B7               	movwf	??_displayLCD^(0+128)
  4121  0DE0  0837               	movf	??_displayLCD^(0+128),w
  4122  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  4124  0DE3  00EF               	movwf	floatToASCII@precision
  4125  0DE4  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4126  0DE5  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4127                           
  4128                           ;PIC16F917 Battery Management.c: 196: LCDSetCursor(0x00);
  4129  0DEA  3000               	movlw	0
  4130  0DEB  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4131                           
  4132                           ;PIC16F917 Battery Management.c: 197: LCDWriteString("Voltage:");
  4133  0DF0  303A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4134  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  4135  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  4136  0DF3  00A5               	movwf	LCDWriteString@a
  4137  0DF4  3080               	movlw	128
  4138  0DF5  00A6               	movwf	LCDWriteString@a+1
  4139  0DF6  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4140                           
  4141                           ;PIC16F917 Battery Management.c: 198: LCDWriteString(temp1);
  4142  0DFB  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4143  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  4144  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  4145  0DFE  00A5               	movwf	LCDWriteString@a
  4146  0DFF  3000               	movlw	0
  4147  0E00  00A6               	movwf	LCDWriteString@a+1
  4148  0E01  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4149                           
  4150                           ;PIC16F917 Battery Management.c: 199: LCDWriteString(" V      ");
  4151  0E06  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4152  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  4153  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  4154  0E09  00A5               	movwf	LCDWriteString@a
  4155  0E0A  3080               	movlw	128
  4156  0E0B  00A6               	movwf	LCDWriteString@a+1
  4157  0E0C  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4158                           
  4159                           ;PIC16F917 Battery Management.c: 201: floatToASCII( temp2, current, 2);
  4160  0E11  1683               	bsf	3,5	;RP0=1, select bank1
  4161  0E12  1303               	bcf	3,6	;RP1=0, select bank1
  4162  0E13  0867               	movf	_current^(0+128),w
  4163  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  4164  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  4165  0E16  00EC               	movwf	floatToASCII@num
  4166  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  4167  0E18  1303               	bcf	3,6	;RP1=0, select bank1
  4168  0E19  0868               	movf	(_current+1)^(0+128),w
  4169  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0E1C  00ED               	movwf	floatToASCII@num+1
  4172  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  4173  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  4174  0E1F  0869               	movf	(_current+2)^(0+128),w
  4175  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0E22  00EE               	movwf	floatToASCII@num+2
  4178  0E23  3002               	movlw	2
  4179  0E24  1683               	bsf	3,5	;RP0=1, select bank1
  4180  0E25  1303               	bcf	3,6	;RP1=0, select bank1
  4181  0E26  00B7               	movwf	??_displayLCD^(0+128)
  4182  0E27  0837               	movf	??_displayLCD^(0+128),w
  4183  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  4184  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  4185  0E2A  00EF               	movwf	floatToASCII@precision
  4186  0E2B  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4187  0E2C  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4188                           
  4189                           ;PIC16F917 Battery Management.c: 202: LCDSetCursor(0x10);
  4190  0E31  3010               	movlw	16
  4191  0E32  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4192                           
  4193                           ;PIC16F917 Battery Management.c: 203: LCDWriteString("Current:");
  4194  0E37  3043               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  4195  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0E3A  00A5               	movwf	LCDWriteString@a
  4198  0E3B  3080               	movlw	128
  4199  0E3C  00A6               	movwf	LCDWriteString@a+1
  4200  0E3D  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4201                           
  4202                           ;PIC16F917 Battery Management.c: 204: LCDWriteString(temp2);
  4203  0E42  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4204  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0E45  00A5               	movwf	LCDWriteString@a
  4207  0E46  3000               	movlw	0
  4208  0E47  00A6               	movwf	LCDWriteString@a+1
  4209  0E48  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4210                           
  4211                           ;PIC16F917 Battery Management.c: 205: LCDWriteString(" A       ");
  4212  0E4D  301D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4213  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  4214  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  4215  0E50  00A5               	movwf	LCDWriteString@a
  4216  0E51  3080               	movlw	128
  4217  0E52  00A6               	movwf	LCDWriteString@a+1
  4218  0E53  160A  118A  25C6   	fcall	_LCDWriteString
  4219                           
  4220                           ;PIC16F917 Battery Management.c: 207: break;
  4221  0E56  0008               	return
  4222  0E57                     l2531:	
  4223                           ;PIC16F917 Battery Management.c: 208: }
  4224                           ;PIC16F917 Battery Management.c: 211: case 1:
  4225                           
  4226                           
  4227                           ;PIC16F917 Battery Management.c: 212: {
  4228                           ;PIC16F917 Battery Management.c: 214: floatToASCII( temp1, cellVolt[0], 2);
  4229  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  4230  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  4231  0E59  084D               	movf	_cellVolt^(0+128),w
  4232  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  4233  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0E5C  00EC               	movwf	floatToASCII@num
  4235  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  4236  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  4237  0E5F  084E               	movf	(_cellVolt+1)^(0+128),w
  4238  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4239  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4240  0E62  00ED               	movwf	floatToASCII@num+1
  4241  0E63  1683               	bsf	3,5	;RP0=1, select bank1
  4242  0E64  1303               	bcf	3,6	;RP1=0, select bank1
  4243  0E65  084F               	movf	(_cellVolt+2)^(0+128),w
  4244  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  4245  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  4246  0E68  00EE               	movwf	floatToASCII@num+2
  4247  0E69  3002               	movlw	2
  4248  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  4249  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  4250  0E6C  00B7               	movwf	??_displayLCD^(0+128)
  4251  0E6D  0837               	movf	??_displayLCD^(0+128),w
  4252  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0E70  00EF               	movwf	floatToASCII@precision
  4255  0E71  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4256  0E72  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4257                           
  4258                           ;PIC16F917 Battery Management.c: 215: LCDSetCursor(0x00);
  4259  0E77  3000               	movlw	0
  4260  0E78  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4261                           
  4262                           ;PIC16F917 Battery Management.c: 216: LCDWriteString("Cell 1:");
  4263  0E7D  304C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  4264  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  4265  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  4266  0E80  00A5               	movwf	LCDWriteString@a
  4267  0E81  3080               	movlw	128
  4268  0E82  00A6               	movwf	LCDWriteString@a+1
  4269  0E83  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4270                           
  4271                           ;PIC16F917 Battery Management.c: 217: LCDWriteString(temp1);
  4272  0E88  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4273  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  4274  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  4275  0E8B  00A5               	movwf	LCDWriteString@a
  4276  0E8C  3000               	movlw	0
  4277  0E8D  00A6               	movwf	LCDWriteString@a+1
  4278  0E8E  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4279                           
  4280                           ;PIC16F917 Battery Management.c: 218: LCDWriteString(" V      ");
  4281  0E93  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4282  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  4283  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  4284  0E96  00A5               	movwf	LCDWriteString@a
  4285  0E97  3080               	movlw	128
  4286  0E98  00A6               	movwf	LCDWriteString@a+1
  4287  0E99  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4288                           
  4289                           ;PIC16F917 Battery Management.c: 221: floatToASCII( temp2, cellVolt[1], 2);
  4290  0E9E  3003               	movlw	3
  4291  0E9F  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4292  0EA0  0084               	movwf	4
  4293  0EA1  1383               	bcf	3,7	;select IRP bank1
  4294  0EA2  0800               	movf	0,w
  4295  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  4296  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  4297  0EA5  00EC               	movwf	floatToASCII@num
  4298  0EA6  0A84               	incf	4,f
  4299  0EA7  0800               	movf	0,w
  4300  0EA8  00ED               	movwf	floatToASCII@num+1
  4301  0EA9  0A84               	incf	4,f
  4302  0EAA  0800               	movf	0,w
  4303  0EAB  00EE               	movwf	floatToASCII@num+2
  4304  0EAC  3002               	movlw	2
  4305  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
  4306  0EAE  1303               	bcf	3,6	;RP1=0, select bank1
  4307  0EAF  00B7               	movwf	??_displayLCD^(0+128)
  4308  0EB0  0837               	movf	??_displayLCD^(0+128),w
  4309  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  4310  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  4311  0EB3  00EF               	movwf	floatToASCII@precision
  4312  0EB4  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4313  0EB5  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4314                           
  4315                           ;PIC16F917 Battery Management.c: 222: LCDSetCursor(0x10);
  4316  0EBA  3010               	movlw	16
  4317  0EBB  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4318                           
  4319                           ;PIC16F917 Battery Management.c: 223: LCDWriteString("Cell 2:");
  4320  0EC0  3054               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  4321  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  4322  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  4323  0EC3  00A5               	movwf	LCDWriteString@a
  4324  0EC4  3080               	movlw	128
  4325  0EC5  00A6               	movwf	LCDWriteString@a+1
  4326  0EC6  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4327                           
  4328                           ;PIC16F917 Battery Management.c: 224: LCDWriteString(temp2);
  4329  0ECB  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4330  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  4331  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  4332  0ECE  00A5               	movwf	LCDWriteString@a
  4333  0ECF  3000               	movlw	0
  4334  0ED0  00A6               	movwf	LCDWriteString@a+1
  4335  0ED1  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4336                           
  4337                           ;PIC16F917 Battery Management.c: 225: LCDWriteString(" V       ");
  4338  0ED6  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4339  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0ED9  00A5               	movwf	LCDWriteString@a
  4342  0EDA  3080               	movlw	128
  4343  0EDB  00A6               	movwf	LCDWriteString@a+1
  4344  0EDC  160A  118A  25C6   	fcall	_LCDWriteString
  4345                           
  4346                           ;PIC16F917 Battery Management.c: 227: break;
  4347  0EDF  0008               	return
  4348  0EE0                     l2545:	
  4349                           ;PIC16F917 Battery Management.c: 228: }
  4350                           ;PIC16F917 Battery Management.c: 231: case 2:
  4351                           
  4352                           
  4353                           ;PIC16F917 Battery Management.c: 232: {
  4354                           ;PIC16F917 Battery Management.c: 234: floatToASCII( temp1, cellVolt[2], 2);
  4355  0EE0  3006               	movlw	6
  4356  0EE1  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4357  0EE2  0084               	movwf	4
  4358  0EE3  1383               	bcf	3,7	;select IRP bank1
  4359  0EE4  0800               	movf	0,w
  4360  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0EE7  00EC               	movwf	floatToASCII@num
  4363  0EE8  0A84               	incf	4,f
  4364  0EE9  0800               	movf	0,w
  4365  0EEA  00ED               	movwf	floatToASCII@num+1
  4366  0EEB  0A84               	incf	4,f
  4367  0EEC  0800               	movf	0,w
  4368  0EED  00EE               	movwf	floatToASCII@num+2
  4369  0EEE  3002               	movlw	2
  4370  0EEF  1683               	bsf	3,5	;RP0=1, select bank1
  4371  0EF0  1303               	bcf	3,6	;RP1=0, select bank1
  4372  0EF1  00B7               	movwf	??_displayLCD^(0+128)
  4373  0EF2  0837               	movf	??_displayLCD^(0+128),w
  4374  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  4375  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  4376  0EF5  00EF               	movwf	floatToASCII@precision
  4377  0EF6  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4378  0EF7  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4379                           
  4380                           ;PIC16F917 Battery Management.c: 235: LCDSetCursor(0x00);
  4381  0EFC  3000               	movlw	0
  4382  0EFD  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4383                           
  4384                           ;PIC16F917 Battery Management.c: 236: LCDWriteString("Cell 3:");
  4385  0F02  305C               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  4386  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0F05  00A5               	movwf	LCDWriteString@a
  4389  0F06  3080               	movlw	128
  4390  0F07  00A6               	movwf	LCDWriteString@a+1
  4391  0F08  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4392                           
  4393                           ;PIC16F917 Battery Management.c: 237: LCDWriteString(temp1);
  4394  0F0D  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4395  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4396  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4397  0F10  00A5               	movwf	LCDWriteString@a
  4398  0F11  3000               	movlw	0
  4399  0F12  00A6               	movwf	LCDWriteString@a+1
  4400  0F13  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4401                           
  4402                           ;PIC16F917 Battery Management.c: 238: LCDWriteString(" V      ");
  4403  0F18  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4404  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0F1B  00A5               	movwf	LCDWriteString@a
  4407  0F1C  3080               	movlw	128
  4408  0F1D  00A6               	movwf	LCDWriteString@a+1
  4409  0F1E  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4410                           
  4411                           ;PIC16F917 Battery Management.c: 241: floatToASCII( temp2, cellVolt[3], 2);
  4412  0F23  3009               	movlw	9
  4413  0F24  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4414  0F25  0084               	movwf	4
  4415  0F26  1383               	bcf	3,7	;select IRP bank1
  4416  0F27  0800               	movf	0,w
  4417  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4418  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4419  0F2A  00EC               	movwf	floatToASCII@num
  4420  0F2B  0A84               	incf	4,f
  4421  0F2C  0800               	movf	0,w
  4422  0F2D  00ED               	movwf	floatToASCII@num+1
  4423  0F2E  0A84               	incf	4,f
  4424  0F2F  0800               	movf	0,w
  4425  0F30  00EE               	movwf	floatToASCII@num+2
  4426  0F31  3002               	movlw	2
  4427  0F32  1683               	bsf	3,5	;RP0=1, select bank1
  4428  0F33  1303               	bcf	3,6	;RP1=0, select bank1
  4429  0F34  00B7               	movwf	??_displayLCD^(0+128)
  4430  0F35  0837               	movf	??_displayLCD^(0+128),w
  4431  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  4433  0F38  00EF               	movwf	floatToASCII@precision
  4434  0F39  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4435  0F3A  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4436                           
  4437                           ;PIC16F917 Battery Management.c: 242: LCDSetCursor(0x10);
  4438  0F3F  3010               	movlw	16
  4439  0F40  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4440                           
  4441                           ;PIC16F917 Battery Management.c: 243: LCDWriteString("Cell 4:");
  4442  0F45  3064               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4443  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  4444  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  4445  0F48  00A5               	movwf	LCDWriteString@a
  4446  0F49  3080               	movlw	128
  4447  0F4A  00A6               	movwf	LCDWriteString@a+1
  4448  0F4B  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4449                           
  4450                           ;PIC16F917 Battery Management.c: 244: LCDWriteString(temp2);
  4451  0F50  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4452  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0F53  00A5               	movwf	LCDWriteString@a
  4455  0F54  3000               	movlw	0
  4456  0F55  00A6               	movwf	LCDWriteString@a+1
  4457  0F56  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4458                           
  4459                           ;PIC16F917 Battery Management.c: 245: LCDWriteString(" V       ");
  4460  0F5B  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4461  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0F5E  00A5               	movwf	LCDWriteString@a
  4464  0F5F  3080               	movlw	128
  4465  0F60  00A6               	movwf	LCDWriteString@a+1
  4466  0F61  160A  118A  25C6   	fcall	_LCDWriteString
  4467                           
  4468                           ;PIC16F917 Battery Management.c: 247: break;
  4469  0F64  0008               	return
  4470  0F65                     l2559:	
  4471                           ;PIC16F917 Battery Management.c: 248: }
  4472                           ;PIC16F917 Battery Management.c: 251: case 3:
  4473                           
  4474                           
  4475                           ;PIC16F917 Battery Management.c: 252: {
  4476                           ;PIC16F917 Battery Management.c: 254: floatToASCII( temp1, cellVolt[4], 2);
  4477  0F65  300C               	movlw	12
  4478  0F66  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4479  0F67  0084               	movwf	4
  4480  0F68  1383               	bcf	3,7	;select IRP bank1
  4481  0F69  0800               	movf	0,w
  4482  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0F6C  00EC               	movwf	floatToASCII@num
  4485  0F6D  0A84               	incf	4,f
  4486  0F6E  0800               	movf	0,w
  4487  0F6F  00ED               	movwf	floatToASCII@num+1
  4488  0F70  0A84               	incf	4,f
  4489  0F71  0800               	movf	0,w
  4490  0F72  00EE               	movwf	floatToASCII@num+2
  4491  0F73  3002               	movlw	2
  4492  0F74  1683               	bsf	3,5	;RP0=1, select bank1
  4493  0F75  1303               	bcf	3,6	;RP1=0, select bank1
  4494  0F76  00B7               	movwf	??_displayLCD^(0+128)
  4495  0F77  0837               	movf	??_displayLCD^(0+128),w
  4496  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4497  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4498  0F7A  00EF               	movwf	floatToASCII@precision
  4499  0F7B  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4500  0F7C  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4501                           
  4502                           ;PIC16F917 Battery Management.c: 255: LCDSetCursor(0x00);
  4503  0F81  3000               	movlw	0
  4504  0F82  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4505                           
  4506                           ;PIC16F917 Battery Management.c: 256: LCDWriteString("Cell 5:");
  4507  0F87  306C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  4508  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  4509  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  4510  0F8A  00A5               	movwf	LCDWriteString@a
  4511  0F8B  3080               	movlw	128
  4512  0F8C  00A6               	movwf	LCDWriteString@a+1
  4513  0F8D  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4514                           
  4515                           ;PIC16F917 Battery Management.c: 257: LCDWriteString(temp1);
  4516  0F92  30BB               	movlw	(low (displayLCD@temp1| 0))& (0+255)
  4517  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4518  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4519  0F95  00A5               	movwf	LCDWriteString@a
  4520  0F96  3000               	movlw	0
  4521  0F97  00A6               	movwf	LCDWriteString@a+1
  4522  0F98  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4523                           
  4524                           ;PIC16F917 Battery Management.c: 258: LCDWriteString(" V      ");
  4525  0F9D  3031               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4526  0F9E  1283               	bcf	3,5	;RP0=0, select bank0
  4527  0F9F  1303               	bcf	3,6	;RP1=0, select bank0
  4528  0FA0  00A5               	movwf	LCDWriteString@a
  4529  0FA1  3080               	movlw	128
  4530  0FA2  00A6               	movwf	LCDWriteString@a+1
  4531  0FA3  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4532                           
  4533                           ;PIC16F917 Battery Management.c: 261: floatToASCII( temp2, cellVolt[5], 2);
  4534  0FA8  300F               	movlw	15
  4535  0FA9  3ECD               	addlw	(low (_cellVolt| 0))& (0+255)
  4536  0FAA  0084               	movwf	4
  4537  0FAB  1383               	bcf	3,7	;select IRP bank1
  4538  0FAC  0800               	movf	0,w
  4539  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  4540  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  4541  0FAF  00EC               	movwf	floatToASCII@num
  4542  0FB0  0A84               	incf	4,f
  4543  0FB1  0800               	movf	0,w
  4544  0FB2  00ED               	movwf	floatToASCII@num+1
  4545  0FB3  0A84               	incf	4,f
  4546  0FB4  0800               	movf	0,w
  4547  0FB5  00EE               	movwf	floatToASCII@num+2
  4548  0FB6  3002               	movlw	2
  4549  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  4550  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  4551  0FB9  00B7               	movwf	??_displayLCD^(0+128)
  4552  0FBA  0837               	movf	??_displayLCD^(0+128),w
  4553  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  4554  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  4555  0FBD  00EF               	movwf	floatToASCII@precision
  4556  0FBE  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4557  0FBF  120A  118A  2404  120A  158A  	fcall	_floatToASCII
  4558                           
  4559                           ;PIC16F917 Battery Management.c: 262: LCDSetCursor(0x10);
  4560  0FC4  3010               	movlw	16
  4561  0FC5  160A  118A  2516  120A  158A  	fcall	_LCDSetCursor
  4562                           
  4563                           ;PIC16F917 Battery Management.c: 263: LCDWriteString("Cell 6:");
  4564  0FCA  3074               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4565  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0FCD  00A5               	movwf	LCDWriteString@a
  4568  0FCE  3080               	movlw	128
  4569  0FCF  00A6               	movwf	LCDWriteString@a+1
  4570  0FD0  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4571                           
  4572                           ;PIC16F917 Battery Management.c: 264: LCDWriteString(temp2);
  4573  0FD5  30C3               	movlw	(low (displayLCD@temp2| 0))& (0+255)
  4574  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  4576  0FD8  00A5               	movwf	LCDWriteString@a
  4577  0FD9  3000               	movlw	0
  4578  0FDA  00A6               	movwf	LCDWriteString@a+1
  4579  0FDB  160A  118A  25C6  120A  158A  	fcall	_LCDWriteString
  4580                           
  4581                           ;PIC16F917 Battery Management.c: 265: LCDWriteString(" V       ");
  4582  0FE0  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4583  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  4584  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  4585  0FE3  00A5               	movwf	LCDWriteString@a
  4586  0FE4  3080               	movlw	128
  4587  0FE5  00A6               	movwf	LCDWriteString@a+1
  4588  0FE6  160A  118A  25C6   	fcall	_LCDWriteString
  4589                           
  4590                           ;PIC16F917 Battery Management.c: 268: }
  4591                           ;PIC16F917 Battery Management.c: 269: }
  4592                           
  4593                           ;PIC16F917 Battery Management.c: 267: break;
  4594  0FE9  0008               	return
  4595  0FEA                     l2575:	
  4596                           
  4597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4598                           ; Switch size 1, requested type "space"
  4599                           ; Number of cases is 1, Range of values is 0 to 0
  4600                           ; switch strategies available:
  4601                           ; Name         Instructions Cycles
  4602                           ; simple_byte            4     3 (average)
  4603                           ; direct_byte           11     8 (fixed)
  4604                           ; jumptable            260     6 (fixed)
  4605                           ;	Chosen strategy is simple_byte
  4606  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  4607  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  4608  0FEC  0836               	movf	(displayLCD@disp+1)^(0+128),w
  4609  0FED  3A00               	xorlw	0	; case 0
  4610  0FEE  1903               	skipnz
  4611  0FEF  2FF1               	goto	l2699
  4612  0FF0  2FFF               	goto	l301
  4613  0FF1                     l2699:	
  4614                           
  4615                           ; Switch size 1, requested type "space"
  4616                           ; Number of cases is 4, Range of values is 0 to 3
  4617                           ; switch strategies available:
  4618                           ; Name         Instructions Cycles
  4619                           ; simple_byte           13     7 (average)
  4620                           ; direct_byte           20     8 (fixed)
  4621                           ; jumptable            260     6 (fixed)
  4622                           ;	Chosen strategy is simple_byte
  4623  0FF1  0835               	movf	displayLCD@disp^(0+128),w
  4624  0FF2  3A00               	xorlw	0	; case 0
  4625  0FF3  1903               	skipnz
  4626  0FF4  2DCE               	goto	l2517
  4627  0FF5  3A01               	xorlw	1	; case 1
  4628  0FF6  1903               	skipnz
  4629  0FF7  2E57               	goto	l2531
  4630  0FF8  3A03               	xorlw	3	; case 2
  4631  0FF9  1903               	skipnz
  4632  0FFA  2EE0               	goto	l2545
  4633  0FFB  3A01               	xorlw	1	; case 3
  4634  0FFC  1903               	skipnz
  4635  0FFD  2F65               	goto	l2559
  4636  0FFE  2FFF               	goto	l301
  4637  0FFF                     l301:	
  4638  0FFF  0008               	return
  4639  1000                     __end_of_displayLCD:	
  4640                           
  4641                           	psect	text17
  4642  0404                     __ptext17:	
  4643 ;; *************** function _floatToASCII *****************
  4644 ;; Defined at:
  4645 ;;		line 274 in file "lcd.h"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  returnVal       1    wreg     PTR unsigned char 
  4648 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  4649 ;;  num             3   76[BANK0 ] float 
  4650 ;;  precision       1   79[BANK0 ] unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  returnVal       1   20[BANK1 ] PTR unsigned char 
  4653 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  4654 ;;  k               1   10[BANK1 ] unsigned char 
  4655 ;;  j               1    5[BANK1 ] unsigned char 
  4656 ;;  j               2    8[BANK1 ] int 
  4657 ;;  scaler          4   15[BANK1 ] unsigned long 
  4658 ;;  prevSum         4   11[BANK1 ] unsigned long 
  4659 ;;  i               1   19[BANK1 ] unsigned char 
  4660 ;;  decPoint        1    7[BANK1 ] unsigned char 
  4661 ;;  leading         1    6[BANK1 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;		None               void
  4664 ;; Registers used:
  4665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4671 ;;      Params:         0       4       0       0       0
  4672 ;;      Locals:         0       0      16       0       0
  4673 ;;      Temps:          0       0       5       0       0
  4674 ;;      Totals:         0       4      21       0       0
  4675 ;;Total ram usage:       25 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    4
  4678 ;; This function calls:
  4679 ;;		___ftadd
  4680 ;;		___ftdiv
  4681 ;;		___ftmul
  4682 ;;		___ftneg
  4683 ;;		___fttol
  4684 ;;		___lldiv
  4685 ;;		___lltoft
  4686 ;;		___lmul
  4687 ;; This function is called by:
  4688 ;;		_displayLCD
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _floatToASCII
  4694  0404                     _floatToASCII:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _floatToASCII: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4698                           ;floatToASCII@returnVal stored from wreg
  4699  0404  1683               	bsf	3,5	;RP0=1, select bank1
  4700  0405  1303               	bcf	3,6	;RP1=0, select bank1
  4701  0406  00B4               	movwf	floatToASCII@returnVal^(0+128)
  4702                           
  4703                           ;lcd.h: 276: uint32_t scaler = 100;
  4704  0407  3000               	movlw	0
  4705  0408  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  4706  0409  3000               	movlw	0
  4707  040A  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  4708  040B  3000               	movlw	0
  4709  040C  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  4710  040D  3064               	movlw	100
  4711  040E  00AF               	movwf	floatToASCII@scaler^(0+128)
  4712                           
  4713                           ;lcd.h: 277: uint32_t prevSum = 0;
  4714  040F  3000               	movlw	0
  4715  0410  00AE               	movwf	(floatToASCII@prevSum+3)^(0+128)
  4716  0411  3000               	movlw	0
  4717  0412  00AD               	movwf	(floatToASCII@prevSum+2)^(0+128)
  4718  0413  3000               	movlw	0
  4719  0414  00AC               	movwf	(floatToASCII@prevSum+1)^(0+128)
  4720  0415  3000               	movlw	0
  4721  0416  00AB               	movwf	floatToASCII@prevSum^(0+128)
  4722                           
  4723                           ;lcd.h: 278: bool leading = 1;
  4724  0417  01A6               	clrf	floatToASCII@leading^(0+128)
  4725  0418  0AA6               	incf	floatToASCII@leading^(0+128),f
  4726                           
  4727                           ;lcd.h: 279: uint8_t i = 0;
  4728  0419  01B3               	clrf	floatToASCII@i^(0+128)
  4729                           
  4730                           ;lcd.h: 280: uint8_t decPoint = 0;
  4731  041A  01A7               	clrf	floatToASCII@decPoint^(0+128)
  4732                           
  4733                           ;lcd.h: 283: for (int j = 0; j <= 6; j++)
  4734  041B  01A8               	clrf	floatToASCII@j^(0+128)
  4735  041C  01A9               	clrf	(floatToASCII@j+1)^(0+128)
  4736  041D  0829               	movf	(floatToASCII@j+1)^(0+128),w
  4737  041E  3A80               	xorlw	128
  4738  041F  00FF               	movwf	127
  4739  0420  3080               	movlw	128
  4740  0421  027F               	subwf	127,w
  4741  0422  1D03               	skipz
  4742  0423  2C26               	goto	u2515
  4743  0424  3007               	movlw	7
  4744  0425  0228               	subwf	floatToASCII@j^(0+128),w
  4745  0426                     u2515:	
  4746  0426  1803               	btfsc	3,0
  4747  0427  2C42               	goto	l2211
  4748  0428                     l2205:	
  4749                           
  4750                           ;lcd.h: 284: {
  4751                           ;lcd.h: 285: returnVal[j] = 0x00;
  4752  0428  1683               	bsf	3,5	;RP0=1, select bank1
  4753  0429  1303               	bcf	3,6	;RP1=0, select bank1
  4754  042A  0828               	movf	floatToASCII@j^(0+128),w
  4755  042B  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4756  042C  00A0               	movwf	??_floatToASCII^(0+128)
  4757  042D  0820               	movf	??_floatToASCII^(0+128),w
  4758  042E  0084               	movwf	4
  4759  042F  1383               	bcf	3,7	;select IRP bank0
  4760  0430  0180               	clrf	0
  4761  0431  3001               	movlw	1
  4762  0432  07A8               	addwf	floatToASCII@j^(0+128),f
  4763  0433  1803               	skipnc
  4764  0434  0AA9               	incf	(floatToASCII@j+1)^(0+128),f
  4765  0435  3000               	movlw	0
  4766  0436  07A9               	addwf	(floatToASCII@j+1)^(0+128),f
  4767  0437  0829               	movf	(floatToASCII@j+1)^(0+128),w
  4768  0438  3A80               	xorlw	128
  4769  0439  00FF               	movwf	127
  4770  043A  3080               	movlw	128
  4771  043B  027F               	subwf	127,w
  4772  043C  1D03               	skipz
  4773  043D  2C40               	goto	u2525
  4774  043E  3007               	movlw	7
  4775  043F  0228               	subwf	floatToASCII@j^(0+128),w
  4776  0440                     u2525:	
  4777  0440  1C03               	skipc
  4778  0441  2C28               	goto	l2205
  4779  0442                     l2211:	
  4780                           ;lcd.h: 286: }
  4781                           ;lcd.h: 289: do
  4782                           
  4783                           
  4784                           ;lcd.h: 290: {
  4785                           ;lcd.h: 295: returnVal[i] = ( num - prevSum ) / scaler;
  4786  0442  1683               	bsf	3,5	;RP0=1, select bank1
  4787  0443  1303               	bcf	3,6	;RP1=0, select bank1
  4788  0444  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  4789  0445  1283               	bcf	3,5	;RP0=0, select bank0
  4790  0446  1303               	bcf	3,6	;RP1=0, select bank0
  4791  0447  00AB               	movwf	___lltoft@c+3
  4792  0448  1683               	bsf	3,5	;RP0=1, select bank1
  4793  0449  1303               	bcf	3,6	;RP1=0, select bank1
  4794  044A  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  4795  044B  1283               	bcf	3,5	;RP0=0, select bank0
  4796  044C  1303               	bcf	3,6	;RP1=0, select bank0
  4797  044D  00AA               	movwf	___lltoft@c+2
  4798  044E  1683               	bsf	3,5	;RP0=1, select bank1
  4799  044F  1303               	bcf	3,6	;RP1=0, select bank1
  4800  0450  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  4801  0451  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0452  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0453  00A9               	movwf	___lltoft@c+1
  4804  0454  1683               	bsf	3,5	;RP0=1, select bank1
  4805  0455  1303               	bcf	3,6	;RP1=0, select bank1
  4806  0456  082B               	movf	floatToASCII@prevSum^(0+128),w
  4807  0457  1283               	bcf	3,5	;RP0=0, select bank0
  4808  0458  1303               	bcf	3,6	;RP1=0, select bank0
  4809  0459  00A8               	movwf	___lltoft@c
  4810  045A  160A  118A  247F  120A  118A  	fcall	___lltoft
  4811  045F  1283               	bcf	3,5	;RP0=0, select bank0
  4812  0460  1303               	bcf	3,6	;RP1=0, select bank0
  4813  0461  0828               	movf	?___lltoft,w
  4814  0462  00AE               	movwf	___ftneg@f1
  4815  0463  0829               	movf	?___lltoft+1,w
  4816  0464  00AF               	movwf	___ftneg@f1+1
  4817  0465  082A               	movf	?___lltoft+2,w
  4818  0466  00B0               	movwf	___ftneg@f1+2
  4819  0467  160A  118A  235F  120A  118A  	fcall	___ftneg
  4820  046C  1283               	bcf	3,5	;RP0=0, select bank0
  4821  046D  1303               	bcf	3,6	;RP1=0, select bank0
  4822  046E  082E               	movf	?___ftneg,w
  4823  046F  00B4               	movwf	___ftadd@f2
  4824  0470  082F               	movf	?___ftneg+1,w
  4825  0471  00B5               	movwf	___ftadd@f2+1
  4826  0472  0830               	movf	?___ftneg+2,w
  4827  0473  00B6               	movwf	___ftadd@f2+2
  4828  0474  086C               	movf	floatToASCII@num,w
  4829  0475  00B1               	movwf	___ftadd@f1
  4830  0476  086D               	movf	floatToASCII@num+1,w
  4831  0477  00B2               	movwf	___ftadd@f1+1
  4832  0478  086E               	movf	floatToASCII@num+2,w
  4833  0479  00B3               	movwf	___ftadd@f1+2
  4834  047A  120A  158A  2496  120A  118A  	fcall	___ftadd
  4835  047F  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0480  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0481  0831               	movf	?___ftadd,w
  4838  0482  00D1               	movwf	___ftdiv@f1
  4839  0483  0832               	movf	?___ftadd+1,w
  4840  0484  00D2               	movwf	___ftdiv@f1+1
  4841  0485  0833               	movf	?___ftadd+2,w
  4842  0486  00D3               	movwf	___ftdiv@f1+2
  4843  0487  1683               	bsf	3,5	;RP0=1, select bank1
  4844  0488  1303               	bcf	3,6	;RP1=0, select bank1
  4845  0489  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4846  048A  1283               	bcf	3,5	;RP0=0, select bank0
  4847  048B  1303               	bcf	3,6	;RP1=0, select bank0
  4848  048C  00AB               	movwf	___lltoft@c+3
  4849  048D  1683               	bsf	3,5	;RP0=1, select bank1
  4850  048E  1303               	bcf	3,6	;RP1=0, select bank1
  4851  048F  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4852  0490  1283               	bcf	3,5	;RP0=0, select bank0
  4853  0491  1303               	bcf	3,6	;RP1=0, select bank0
  4854  0492  00AA               	movwf	___lltoft@c+2
  4855  0493  1683               	bsf	3,5	;RP0=1, select bank1
  4856  0494  1303               	bcf	3,6	;RP1=0, select bank1
  4857  0495  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4858  0496  1283               	bcf	3,5	;RP0=0, select bank0
  4859  0497  1303               	bcf	3,6	;RP1=0, select bank0
  4860  0498  00A9               	movwf	___lltoft@c+1
  4861  0499  1683               	bsf	3,5	;RP0=1, select bank1
  4862  049A  1303               	bcf	3,6	;RP1=0, select bank1
  4863  049B  082F               	movf	floatToASCII@scaler^(0+128),w
  4864  049C  1283               	bcf	3,5	;RP0=0, select bank0
  4865  049D  1303               	bcf	3,6	;RP1=0, select bank0
  4866  049E  00A8               	movwf	___lltoft@c
  4867  049F  160A  118A  247F  120A  118A  	fcall	___lltoft
  4868  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  4869  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  4870  04A6  0828               	movf	?___lltoft,w
  4871  04A7  00CE               	movwf	___ftdiv@f2
  4872  04A8  0829               	movf	?___lltoft+1,w
  4873  04A9  00CF               	movwf	___ftdiv@f2+1
  4874  04AA  082A               	movf	?___lltoft+2,w
  4875  04AB  00D0               	movwf	___ftdiv@f2+2
  4876  04AC  120A  158A  2205  120A  118A  	fcall	___ftdiv
  4877  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  4878  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  4879  04B3  084E               	movf	?___ftdiv,w
  4880  04B4  00DE               	movwf	___fttol@f1
  4881  04B5  084F               	movf	?___ftdiv+1,w
  4882  04B6  00DF               	movwf	___fttol@f1+1
  4883  04B7  0850               	movf	?___ftdiv+2,w
  4884  04B8  00E0               	movwf	___fttol@f1+2
  4885  04B9  160A  118A  2772  120A  118A  	fcall	___fttol
  4886  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  4887  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  4888  04C0  085E               	movf	?___fttol,w
  4889  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  4890  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  4891  04C3  00A0               	movwf	??_floatToASCII^(0+128)
  4892  04C4  0833               	movf	floatToASCII@i^(0+128),w
  4893  04C5  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4894  04C6  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4895  04C7  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4896  04C8  0084               	movwf	4
  4897  04C9  0820               	movf	??_floatToASCII^(0+128),w
  4898  04CA  1383               	bcf	3,7	;select IRP bank0
  4899  04CB  0080               	movwf	0
  4900                           
  4901                           ;lcd.h: 297: prevSum += returnVal[i]*scaler;
  4902  04CC  0833               	movf	floatToASCII@i^(0+128),w
  4903  04CD  0734               	addwf	floatToASCII@returnVal^(0+128),w
  4904  04CE  00A0               	movwf	??_floatToASCII^(0+128)
  4905  04CF  0820               	movf	??_floatToASCII^(0+128),w
  4906  04D0  0084               	movwf	4
  4907  04D1  0800               	movf	0,w
  4908  04D2  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  4909  04D3  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  4910  04D4  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  4911  04D5  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  4912  04D6  0824               	movf	(??_floatToASCII+4)^(0+128),w
  4913  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  4914  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  4915  04D9  00A3               	movwf	___lmul@multiplier+3
  4916  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  4917  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  4918  04DC  0823               	movf	(??_floatToASCII+3)^(0+128),w
  4919  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  4920  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  4921  04DF  00A2               	movwf	___lmul@multiplier+2
  4922  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  4923  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  4924  04E2  0822               	movf	(??_floatToASCII+2)^(0+128),w
  4925  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  4926  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  4927  04E5  00A1               	movwf	___lmul@multiplier+1
  4928  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  4929  04E7  1303               	bcf	3,6	;RP1=0, select bank1
  4930  04E8  0821               	movf	(??_floatToASCII+1)^(0+128),w
  4931  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  4932  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  4933  04EB  00A0               	movwf	___lmul@multiplier
  4934  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  4935  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  4936  04EE  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  4937  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  4938  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  4939  04F1  00A7               	movwf	___lmul@multiplicand+3
  4940  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  4941  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  4942  04F4  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  4943  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  4944  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  4945  04F7  00A6               	movwf	___lmul@multiplicand+2
  4946  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  4947  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  4948  04FA  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  4949  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  4950  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  4951  04FD  00A5               	movwf	___lmul@multiplicand+1
  4952  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  4953  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  4954  0500  082F               	movf	floatToASCII@scaler^(0+128),w
  4955  0501  1283               	bcf	3,5	;RP0=0, select bank0
  4956  0502  1303               	bcf	3,6	;RP1=0, select bank0
  4957  0503  00A4               	movwf	___lmul@multiplicand
  4958  0504  160A  118A  2607  120A  118A  	fcall	___lmul
  4959  0509  1283               	bcf	3,5	;RP0=0, select bank0
  4960  050A  1303               	bcf	3,6	;RP1=0, select bank0
  4961  050B  0820               	movf	?___lmul,w
  4962  050C  1683               	bsf	3,5	;RP0=1, select bank1
  4963  050D  1303               	bcf	3,6	;RP1=0, select bank1
  4964  050E  07AB               	addwf	floatToASCII@prevSum^(0+128),f
  4965  050F  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0510  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0511  0821               	movf	?___lmul+1,w
  4968  0512  1103               	clrz
  4969  0513  1803               	skipnc
  4970  0514  3E01               	addlw	1
  4971  0515  1903               	skipnz
  4972  0516  2D1A               	goto	u2531
  4973  0517  1683               	bsf	3,5	;RP0=1, select bank1
  4974  0518  1303               	bcf	3,6	;RP1=0, select bank1
  4975  0519  07AC               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  4976  051A                     u2531:	
  4977  051A  1283               	bcf	3,5	;RP0=0, select bank0
  4978  051B  1303               	bcf	3,6	;RP1=0, select bank0
  4979  051C  0822               	movf	?___lmul+2,w
  4980  051D  1103               	clrz
  4981  051E  1803               	skipnc
  4982  051F  3E01               	addlw	1
  4983  0520  1903               	skipnz
  4984  0521  2D25               	goto	u2532
  4985  0522  1683               	bsf	3,5	;RP0=1, select bank1
  4986  0523  1303               	bcf	3,6	;RP1=0, select bank1
  4987  0524  07AD               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  4988  0525                     u2532:	
  4989  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4990  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4991  0527  0823               	movf	?___lmul+3,w
  4992  0528  1103               	clrz
  4993  0529  1803               	skipnc
  4994  052A  3E01               	addlw	1
  4995  052B  1903               	skipnz
  4996  052C  2D30               	goto	u2533
  4997  052D  1683               	bsf	3,5	;RP0=1, select bank1
  4998  052E  1303               	bcf	3,6	;RP1=0, select bank1
  4999  052F  07AE               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  5000  0530                     u2533:	
  5001  0530  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0531  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0532  1683               	bsf	3,5	;RP0=1, select bank1
  5004  0533  1303               	bcf	3,6	;RP1=0, select bank1
  5005                           
  5006                           ;lcd.h: 299: scaler = scaler/10;
  5007  0534  3000               	movlw	0
  5008  0535  1283               	bcf	3,5	;RP0=0, select bank0
  5009  0536  1303               	bcf	3,6	;RP1=0, select bank0
  5010  0537  00A3               	movwf	___lldiv@divisor+3
  5011  0538  3000               	movlw	0
  5012  0539  00A2               	movwf	___lldiv@divisor+2
  5013  053A  3000               	movlw	0
  5014  053B  00A1               	movwf	___lldiv@divisor+1
  5015  053C  300A               	movlw	10
  5016  053D  00A0               	movwf	___lldiv@divisor
  5017  053E  1683               	bsf	3,5	;RP0=1, select bank1
  5018  053F  1303               	bcf	3,6	;RP1=0, select bank1
  5019  0540  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  5020  0541  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0542  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0543  00A7               	movwf	___lldiv@dividend+3
  5023  0544  1683               	bsf	3,5	;RP0=1, select bank1
  5024  0545  1303               	bcf	3,6	;RP1=0, select bank1
  5025  0546  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  5026  0547  1283               	bcf	3,5	;RP0=0, select bank0
  5027  0548  1303               	bcf	3,6	;RP1=0, select bank0
  5028  0549  00A6               	movwf	___lldiv@dividend+2
  5029  054A  1683               	bsf	3,5	;RP0=1, select bank1
  5030  054B  1303               	bcf	3,6	;RP1=0, select bank1
  5031  054C  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  5032  054D  1283               	bcf	3,5	;RP0=0, select bank0
  5033  054E  1303               	bcf	3,6	;RP1=0, select bank0
  5034  054F  00A5               	movwf	___lldiv@dividend+1
  5035  0550  1683               	bsf	3,5	;RP0=1, select bank1
  5036  0551  1303               	bcf	3,6	;RP1=0, select bank1
  5037  0552  082F               	movf	floatToASCII@scaler^(0+128),w
  5038  0553  1283               	bcf	3,5	;RP0=0, select bank0
  5039  0554  1303               	bcf	3,6	;RP1=0, select bank0
  5040  0555  00A4               	movwf	___lldiv@dividend
  5041  0556  160A  118A  26A4  120A  118A  	fcall	___lldiv
  5042  055B  1283               	bcf	3,5	;RP0=0, select bank0
  5043  055C  1303               	bcf	3,6	;RP1=0, select bank0
  5044  055D  0823               	movf	?___lldiv+3,w
  5045  055E  1683               	bsf	3,5	;RP0=1, select bank1
  5046  055F  1303               	bcf	3,6	;RP1=0, select bank1
  5047  0560  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  5048  0561  1283               	bcf	3,5	;RP0=0, select bank0
  5049  0562  1303               	bcf	3,6	;RP1=0, select bank0
  5050  0563  0822               	movf	?___lldiv+2,w
  5051  0564  1683               	bsf	3,5	;RP0=1, select bank1
  5052  0565  1303               	bcf	3,6	;RP1=0, select bank1
  5053  0566  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  5054  0567  1283               	bcf	3,5	;RP0=0, select bank0
  5055  0568  1303               	bcf	3,6	;RP1=0, select bank0
  5056  0569  0821               	movf	?___lldiv+1,w
  5057  056A  1683               	bsf	3,5	;RP0=1, select bank1
  5058  056B  1303               	bcf	3,6	;RP1=0, select bank1
  5059  056C  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  5060  056D  1283               	bcf	3,5	;RP0=0, select bank0
  5061  056E  1303               	bcf	3,6	;RP1=0, select bank0
  5062  056F  0820               	movf	?___lldiv,w
  5063  0570  1683               	bsf	3,5	;RP0=1, select bank1
  5064  0571  1303               	bcf	3,6	;RP1=0, select bank1
  5065  0572  00AF               	movwf	floatToASCII@scaler^(0+128)
  5066                           
  5067                           ;lcd.h: 301: if (leading == 1)
  5068  0573  0326               	decf	floatToASCII@leading^(0+128),w
  5069  0574  1D03               	btfss	3,2
  5070  0575  2D85               	goto	l2223
  5071                           
  5072                           ;lcd.h: 302: {
  5073                           ;lcd.h: 303: if ( returnVal[i] != 0 )
  5074  0576  0833               	movf	floatToASCII@i^(0+128),w
  5075  0577  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5076  0578  00A0               	movwf	??_floatToASCII^(0+128)
  5077  0579  0820               	movf	??_floatToASCII^(0+128),w
  5078  057A  0084               	movwf	4
  5079  057B  1383               	bcf	3,7	;select IRP bank0
  5080  057C  0800               	movf	0,w
  5081  057D  1903               	btfsc	3,2
  5082  057E  2D89               	goto	l2225
  5083                           
  5084                           ;lcd.h: 304: {
  5085                           ;lcd.h: 306: i++;
  5086  057F  3001               	movlw	1
  5087  0580  00A0               	movwf	??_floatToASCII^(0+128)
  5088  0581  0820               	movf	??_floatToASCII^(0+128),w
  5089  0582  07B3               	addwf	floatToASCII@i^(0+128),f
  5090                           
  5091                           ;lcd.h: 307: leading = 0;
  5092  0583  01A6               	clrf	floatToASCII@leading^(0+128)
  5093                           
  5094                           ;lcd.h: 308: }
  5095                           ;lcd.h: 309: }
  5096  0584  2D89               	goto	l2225
  5097  0585                     l2223:	
  5098                           
  5099                           ;lcd.h: 310: else
  5100                           ;lcd.h: 311: i++;
  5101  0585  3001               	movlw	1
  5102  0586  00A0               	movwf	??_floatToASCII^(0+128)
  5103  0587  0820               	movf	??_floatToASCII^(0+128),w
  5104  0588  07B3               	addwf	floatToASCII@i^(0+128),f
  5105  0589                     l2225:	
  5106                           
  5107                           ;lcd.h: 313: } while ( scaler > 0 );
  5108  0589  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  5109  058A  0431               	iorwf	(floatToASCII@scaler+2)^(0+128),w
  5110  058B  0430               	iorwf	(floatToASCII@scaler+1)^(0+128),w
  5111  058C  042F               	iorwf	floatToASCII@scaler^(0+128),w
  5112  058D  1D03               	skipz
  5113  058E  2C42               	goto	l2211
  5114                           
  5115                           ;lcd.h: 316: decPoint = i;
  5116  058F  0833               	movf	floatToASCII@i^(0+128),w
  5117  0590  00A0               	movwf	??_floatToASCII^(0+128)
  5118  0591  0820               	movf	??_floatToASCII^(0+128),w
  5119  0592  00A7               	movwf	floatToASCII@decPoint^(0+128)
  5120                           
  5121                           ;lcd.h: 317: i++;
  5122  0593  3001               	movlw	1
  5123  0594  00A0               	movwf	??_floatToASCII^(0+128)
  5124  0595  0820               	movf	??_floatToASCII^(0+128),w
  5125  0596  07B3               	addwf	floatToASCII@i^(0+128),f
  5126                           
  5127                           ;lcd.h: 321: scaler = 10;
  5128  0597  3000               	movlw	0
  5129  0598  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  5130  0599  3000               	movlw	0
  5131  059A  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  5132  059B  3000               	movlw	0
  5133  059C  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  5134  059D  300A               	movlw	10
  5135  059E  00AF               	movwf	floatToASCII@scaler^(0+128)
  5136                           
  5137                           ;lcd.h: 323: for (uint8_t j = i; i - j <= precision ; i++)
  5138  059F  0833               	movf	floatToASCII@i^(0+128),w
  5139  05A0  00A0               	movwf	??_floatToASCII^(0+128)
  5140  05A1  0820               	movf	??_floatToASCII^(0+128),w
  5141  05A2  00A5               	movwf	floatToASCII@j_342^(0+128)
  5142  05A3                     l2245:	
  5143  05A3  0825               	movf	floatToASCII@j_342^(0+128),w
  5144  05A4  00A0               	movwf	??_floatToASCII^(0+128)
  5145  05A5  01A1               	clrf	(??_floatToASCII^(0+128)+1)
  5146  05A6  09A0               	comf	??_floatToASCII^(0+128),f
  5147  05A7  09A1               	comf	(??_floatToASCII^(0+128)+1),f
  5148  05A8  0AA0               	incf	??_floatToASCII^(0+128),f
  5149  05A9  1903               	skipnz
  5150  05AA  0AA1               	incf	(??_floatToASCII^(0+128)+1),f
  5151  05AB  0833               	movf	floatToASCII@i^(0+128),w
  5152  05AC  0720               	addwf	??_floatToASCII^(0+128),w
  5153  05AD  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  5154  05AE  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5155  05AF  1803               	skipnc
  5156  05B0  0A21               	incf	(??_floatToASCII+1)^(0+128),w
  5157  05B1  00A3               	movwf	((??_floatToASCII+2)^(0+128)+1)
  5158  05B2  0823               	movf	(??_floatToASCII+3)^(0+128),w
  5159  05B3  3A80               	xorlw	128
  5160  05B4  3C80               	sublw	128
  5161  05B5  1D03               	skipz
  5162  05B6  2DBB               	goto	u2585
  5163  05B7  0822               	movf	(??_floatToASCII+2)^(0+128),w
  5164  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  5165  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  5166  05BA  026F               	subwf	floatToASCII@precision,w
  5167  05BB                     u2585:	
  5168  05BB  1C03               	btfss	3,0
  5169  05BC  2EE1               	goto	l2247
  5170                           
  5171                           ;lcd.h: 324: {
  5172                           ;lcd.h: 325: prevSum = prevSum * 10;
  5173  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  5174  05BE  1303               	bcf	3,6	;RP1=0, select bank1
  5175  05BF  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  5176  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  5177  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  5178  05C2  00A3               	movwf	___lmul@multiplier+3
  5179  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  5180  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  5181  05C5  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  5182  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  5183  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  5184  05C8  00A2               	movwf	___lmul@multiplier+2
  5185  05C9  1683               	bsf	3,5	;RP0=1, select bank1
  5186  05CA  1303               	bcf	3,6	;RP1=0, select bank1
  5187  05CB  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  5188  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  5189  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  5190  05CE  00A1               	movwf	___lmul@multiplier+1
  5191  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  5192  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  5193  05D1  082B               	movf	floatToASCII@prevSum^(0+128),w
  5194  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  5195  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  5196  05D4  00A0               	movwf	___lmul@multiplier
  5197  05D5  3000               	movlw	0
  5198  05D6  00A7               	movwf	___lmul@multiplicand+3
  5199  05D7  3000               	movlw	0
  5200  05D8  00A6               	movwf	___lmul@multiplicand+2
  5201  05D9  3000               	movlw	0
  5202  05DA  00A5               	movwf	___lmul@multiplicand+1
  5203  05DB  300A               	movlw	10
  5204  05DC  00A4               	movwf	___lmul@multiplicand
  5205  05DD  160A  118A  2607  120A  118A  	fcall	___lmul
  5206  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  5207  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  5208  05E4  0823               	movf	?___lmul+3,w
  5209  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  5210  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  5211  05E7  00AE               	movwf	(floatToASCII@prevSum+3)^(0+128)
  5212  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  5213  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  5214  05EA  0822               	movf	?___lmul+2,w
  5215  05EB  1683               	bsf	3,5	;RP0=1, select bank1
  5216  05EC  1303               	bcf	3,6	;RP1=0, select bank1
  5217  05ED  00AD               	movwf	(floatToASCII@prevSum+2)^(0+128)
  5218  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  5219  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  5220  05F0  0821               	movf	?___lmul+1,w
  5221  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  5222  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  5223  05F3  00AC               	movwf	(floatToASCII@prevSum+1)^(0+128)
  5224  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  5225  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  5226  05F6  0820               	movf	?___lmul,w
  5227  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  5228  05F8  1303               	bcf	3,6	;RP1=0, select bank1
  5229  05F9  00AB               	movwf	floatToASCII@prevSum^(0+128)
  5230                           
  5231                           ;lcd.h: 326: returnVal[i] = (char)( num * scaler - prevSum );
  5232  05FA  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  5233  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  5234  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  5235  05FD  00AB               	movwf	___lltoft@c+3
  5236  05FE  1683               	bsf	3,5	;RP0=1, select bank1
  5237  05FF  1303               	bcf	3,6	;RP1=0, select bank1
  5238  0600  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  5239  0601  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0602  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0603  00AA               	movwf	___lltoft@c+2
  5242  0604  1683               	bsf	3,5	;RP0=1, select bank1
  5243  0605  1303               	bcf	3,6	;RP1=0, select bank1
  5244  0606  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  5245  0607  1283               	bcf	3,5	;RP0=0, select bank0
  5246  0608  1303               	bcf	3,6	;RP1=0, select bank0
  5247  0609  00A9               	movwf	___lltoft@c+1
  5248  060A  1683               	bsf	3,5	;RP0=1, select bank1
  5249  060B  1303               	bcf	3,6	;RP1=0, select bank1
  5250  060C  082F               	movf	floatToASCII@scaler^(0+128),w
  5251  060D  1283               	bcf	3,5	;RP0=0, select bank0
  5252  060E  1303               	bcf	3,6	;RP1=0, select bank0
  5253  060F  00A8               	movwf	___lltoft@c
  5254  0610  160A  118A  247F  120A  118A  	fcall	___lltoft
  5255  0615  1283               	bcf	3,5	;RP0=0, select bank0
  5256  0616  1303               	bcf	3,6	;RP1=0, select bank0
  5257  0617  0828               	movf	?___lltoft,w
  5258  0618  00C1               	movwf	___ftmul@f2
  5259  0619  0829               	movf	?___lltoft+1,w
  5260  061A  00C2               	movwf	___ftmul@f2+1
  5261  061B  082A               	movf	?___lltoft+2,w
  5262  061C  00C3               	movwf	___ftmul@f2+2
  5263  061D  086C               	movf	floatToASCII@num,w
  5264  061E  00BE               	movwf	___ftmul@f1
  5265  061F  086D               	movf	floatToASCII@num+1,w
  5266  0620  00BF               	movwf	___ftmul@f1+1
  5267  0621  086E               	movf	floatToASCII@num+2,w
  5268  0622  00C0               	movwf	___ftmul@f1+2
  5269  0623  120A  158A  22BD  120A  118A  	fcall	___ftmul
  5270  0628  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0629  1303               	bcf	3,6	;RP1=0, select bank0
  5272  062A  083E               	movf	?___ftmul,w
  5273  062B  00B4               	movwf	___ftadd@f2
  5274  062C  083F               	movf	?___ftmul+1,w
  5275  062D  00B5               	movwf	___ftadd@f2+1
  5276  062E  0840               	movf	?___ftmul+2,w
  5277  062F  00B6               	movwf	___ftadd@f2+2
  5278  0630  1683               	bsf	3,5	;RP0=1, select bank1
  5279  0631  1303               	bcf	3,6	;RP1=0, select bank1
  5280  0632  082E               	movf	(floatToASCII@prevSum+3)^(0+128),w
  5281  0633  1283               	bcf	3,5	;RP0=0, select bank0
  5282  0634  1303               	bcf	3,6	;RP1=0, select bank0
  5283  0635  00AB               	movwf	___lltoft@c+3
  5284  0636  1683               	bsf	3,5	;RP0=1, select bank1
  5285  0637  1303               	bcf	3,6	;RP1=0, select bank1
  5286  0638  082D               	movf	(floatToASCII@prevSum+2)^(0+128),w
  5287  0639  1283               	bcf	3,5	;RP0=0, select bank0
  5288  063A  1303               	bcf	3,6	;RP1=0, select bank0
  5289  063B  00AA               	movwf	___lltoft@c+2
  5290  063C  1683               	bsf	3,5	;RP0=1, select bank1
  5291  063D  1303               	bcf	3,6	;RP1=0, select bank1
  5292  063E  082C               	movf	(floatToASCII@prevSum+1)^(0+128),w
  5293  063F  1283               	bcf	3,5	;RP0=0, select bank0
  5294  0640  1303               	bcf	3,6	;RP1=0, select bank0
  5295  0641  00A9               	movwf	___lltoft@c+1
  5296  0642  1683               	bsf	3,5	;RP0=1, select bank1
  5297  0643  1303               	bcf	3,6	;RP1=0, select bank1
  5298  0644  082B               	movf	floatToASCII@prevSum^(0+128),w
  5299  0645  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0646  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0647  00A8               	movwf	___lltoft@c
  5302  0648  160A  118A  247F  120A  118A  	fcall	___lltoft
  5303  064D  1283               	bcf	3,5	;RP0=0, select bank0
  5304  064E  1303               	bcf	3,6	;RP1=0, select bank0
  5305  064F  0828               	movf	?___lltoft,w
  5306  0650  00AE               	movwf	___ftneg@f1
  5307  0651  0829               	movf	?___lltoft+1,w
  5308  0652  00AF               	movwf	___ftneg@f1+1
  5309  0653  082A               	movf	?___lltoft+2,w
  5310  0654  00B0               	movwf	___ftneg@f1+2
  5311  0655  160A  118A  235F  120A  118A  	fcall	___ftneg
  5312  065A  1283               	bcf	3,5	;RP0=0, select bank0
  5313  065B  1303               	bcf	3,6	;RP1=0, select bank0
  5314  065C  082E               	movf	?___ftneg,w
  5315  065D  00B1               	movwf	___ftadd@f1
  5316  065E  082F               	movf	?___ftneg+1,w
  5317  065F  00B2               	movwf	___ftadd@f1+1
  5318  0660  0830               	movf	?___ftneg+2,w
  5319  0661  00B3               	movwf	___ftadd@f1+2
  5320  0662  120A  158A  2496  120A  118A  	fcall	___ftadd
  5321  0667  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0668  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0669  0831               	movf	?___ftadd,w
  5324  066A  00DE               	movwf	___fttol@f1
  5325  066B  0832               	movf	?___ftadd+1,w
  5326  066C  00DF               	movwf	___fttol@f1+1
  5327  066D  0833               	movf	?___ftadd+2,w
  5328  066E  00E0               	movwf	___fttol@f1+2
  5329  066F  160A  118A  2772  120A  118A  	fcall	___fttol
  5330  0674  1283               	bcf	3,5	;RP0=0, select bank0
  5331  0675  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0676  085E               	movf	?___fttol,w
  5333  0677  1683               	bsf	3,5	;RP0=1, select bank1
  5334  0678  1303               	bcf	3,6	;RP1=0, select bank1
  5335  0679  00A0               	movwf	??_floatToASCII^(0+128)
  5336  067A  0833               	movf	floatToASCII@i^(0+128),w
  5337  067B  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5338  067C  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5339  067D  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5340  067E  0084               	movwf	4
  5341  067F  0820               	movf	??_floatToASCII^(0+128),w
  5342  0680  1383               	bcf	3,7	;select IRP bank0
  5343  0681  0080               	movwf	0
  5344                           
  5345                           ;lcd.h: 328: scaler = scaler * 10;
  5346  0682  0832               	movf	(floatToASCII@scaler+3)^(0+128),w
  5347  0683  1283               	bcf	3,5	;RP0=0, select bank0
  5348  0684  1303               	bcf	3,6	;RP1=0, select bank0
  5349  0685  00A3               	movwf	___lmul@multiplier+3
  5350  0686  1683               	bsf	3,5	;RP0=1, select bank1
  5351  0687  1303               	bcf	3,6	;RP1=0, select bank1
  5352  0688  0831               	movf	(floatToASCII@scaler+2)^(0+128),w
  5353  0689  1283               	bcf	3,5	;RP0=0, select bank0
  5354  068A  1303               	bcf	3,6	;RP1=0, select bank0
  5355  068B  00A2               	movwf	___lmul@multiplier+2
  5356  068C  1683               	bsf	3,5	;RP0=1, select bank1
  5357  068D  1303               	bcf	3,6	;RP1=0, select bank1
  5358  068E  0830               	movf	(floatToASCII@scaler+1)^(0+128),w
  5359  068F  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0690  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0691  00A1               	movwf	___lmul@multiplier+1
  5362  0692  1683               	bsf	3,5	;RP0=1, select bank1
  5363  0693  1303               	bcf	3,6	;RP1=0, select bank1
  5364  0694  082F               	movf	floatToASCII@scaler^(0+128),w
  5365  0695  1283               	bcf	3,5	;RP0=0, select bank0
  5366  0696  1303               	bcf	3,6	;RP1=0, select bank0
  5367  0697  00A0               	movwf	___lmul@multiplier
  5368  0698  3000               	movlw	0
  5369  0699  00A7               	movwf	___lmul@multiplicand+3
  5370  069A  3000               	movlw	0
  5371  069B  00A6               	movwf	___lmul@multiplicand+2
  5372  069C  3000               	movlw	0
  5373  069D  00A5               	movwf	___lmul@multiplicand+1
  5374  069E  300A               	movlw	10
  5375  069F  00A4               	movwf	___lmul@multiplicand
  5376  06A0  160A  118A  2607  120A  118A  	fcall	___lmul
  5377  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  5378  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  5379  06A7  0823               	movf	?___lmul+3,w
  5380  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  5381  06A9  1303               	bcf	3,6	;RP1=0, select bank1
  5382  06AA  00B2               	movwf	(floatToASCII@scaler+3)^(0+128)
  5383  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  5384  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  5385  06AD  0822               	movf	?___lmul+2,w
  5386  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  5387  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  5388  06B0  00B1               	movwf	(floatToASCII@scaler+2)^(0+128)
  5389  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  5390  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  5391  06B3  0821               	movf	?___lmul+1,w
  5392  06B4  1683               	bsf	3,5	;RP0=1, select bank1
  5393  06B5  1303               	bcf	3,6	;RP1=0, select bank1
  5394  06B6  00B0               	movwf	(floatToASCII@scaler+1)^(0+128)
  5395  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  5396  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  5397  06B9  0820               	movf	?___lmul,w
  5398  06BA  1683               	bsf	3,5	;RP0=1, select bank1
  5399  06BB  1303               	bcf	3,6	;RP1=0, select bank1
  5400  06BC  00AF               	movwf	floatToASCII@scaler^(0+128)
  5401                           
  5402                           ;lcd.h: 330: prevSum += returnVal[i];
  5403  06BD  0833               	movf	floatToASCII@i^(0+128),w
  5404  06BE  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5405  06BF  00A0               	movwf	??_floatToASCII^(0+128)
  5406  06C0  0820               	movf	??_floatToASCII^(0+128),w
  5407  06C1  0084               	movwf	4
  5408  06C2  1383               	bcf	3,7	;select IRP bank0
  5409  06C3  0800               	movf	0,w
  5410  06C4  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5411  06C5  01A2               	clrf	((??_floatToASCII+1)^(0+128)+1)
  5412  06C6  01A3               	clrf	((??_floatToASCII+1)^(0+128)+2)
  5413  06C7  01A4               	clrf	((??_floatToASCII+1)^(0+128)+3)
  5414  06C8  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5415  06C9  07AB               	addwf	floatToASCII@prevSum^(0+128),f
  5416  06CA  0822               	movf	(??_floatToASCII+2)^(0+128),w
  5417  06CB  1103               	clrz
  5418  06CC  1803               	skipnc
  5419  06CD  3E01               	addlw	1
  5420  06CE  1D03               	btfss	3,2
  5421  06CF  07AC               	addwf	(floatToASCII@prevSum+1)^(0+128),f
  5422  06D0  0823               	movf	(??_floatToASCII+3)^(0+128),w
  5423  06D1  1103               	clrz
  5424  06D2  1803               	skipnc
  5425  06D3  3E01               	addlw	1
  5426  06D4  1D03               	btfss	3,2
  5427  06D5  07AD               	addwf	(floatToASCII@prevSum+2)^(0+128),f
  5428  06D6  0824               	movf	(??_floatToASCII+4)^(0+128),w
  5429  06D7  1103               	clrz
  5430  06D8  1803               	skipnc
  5431  06D9  3E01               	addlw	1
  5432  06DA  1D03               	btfss	3,2
  5433  06DB  07AE               	addwf	(floatToASCII@prevSum+3)^(0+128),f
  5434  06DC  3001               	movlw	1
  5435  06DD  00A0               	movwf	??_floatToASCII^(0+128)
  5436  06DE  0820               	movf	??_floatToASCII^(0+128),w
  5437  06DF  07B3               	addwf	floatToASCII@i^(0+128),f
  5438  06E0  2DA3               	goto	l2245
  5439  06E1                     l2247:	
  5440                           
  5441                           ;lcd.h: 331: }
  5442                           ;lcd.h: 333: i--;
  5443  06E1  3001               	movlw	1
  5444  06E2  1683               	bsf	3,5	;RP0=1, select bank1
  5445  06E3  1303               	bcf	3,6	;RP1=0, select bank1
  5446  06E4  02B3               	subwf	floatToASCII@i^(0+128),f
  5447                           
  5448                           ;lcd.h: 335: for ( uint8_t k = 0; k <= i ; k++ )
  5449  06E5  01AA               	clrf	floatToASCII@k^(0+128)
  5450  06E6                     l2255:	
  5451  06E6  082A               	movf	floatToASCII@k^(0+128),w
  5452  06E7  0233               	subwf	floatToASCII@i^(0+128),w
  5453  06E8  1C03               	btfss	3,0
  5454  06E9  2EFF               	goto	l2257
  5455                           
  5456                           ;lcd.h: 336: {
  5457                           ;lcd.h: 339: returnVal[k] = returnVal[k] | 0x30;
  5458  06EA  082A               	movf	floatToASCII@k^(0+128),w
  5459  06EB  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5460  06EC  00A0               	movwf	??_floatToASCII^(0+128)
  5461  06ED  0820               	movf	??_floatToASCII^(0+128),w
  5462  06EE  0084               	movwf	4
  5463  06EF  1383               	bcf	3,7	;select IRP bank0
  5464  06F0  0800               	movf	0,w
  5465  06F1  3830               	iorlw	48
  5466  06F2  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5467  06F3  082A               	movf	floatToASCII@k^(0+128),w
  5468  06F4  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5469  06F5  00A2               	movwf	(??_floatToASCII+2)^(0+128)
  5470  06F6  0822               	movf	(??_floatToASCII+2)^(0+128),w
  5471  06F7  0084               	movwf	4
  5472  06F8  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5473  06F9  0080               	movwf	0
  5474  06FA  3001               	movlw	1
  5475  06FB  00A0               	movwf	??_floatToASCII^(0+128)
  5476  06FC  0820               	movf	??_floatToASCII^(0+128),w
  5477  06FD  07AA               	addwf	floatToASCII@k^(0+128),f
  5478  06FE  2EE6               	goto	l2255
  5479  06FF                     l2257:	
  5480                           
  5481                           ;lcd.h: 340: }
  5482                           ;lcd.h: 342: returnVal[decPoint] = 0x2E;
  5483  06FF  302E               	movlw	46
  5484  0700  00A0               	movwf	??_floatToASCII^(0+128)
  5485  0701  0827               	movf	floatToASCII@decPoint^(0+128),w
  5486  0702  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5487  0703  00A1               	movwf	(??_floatToASCII+1)^(0+128)
  5488  0704  0821               	movf	(??_floatToASCII+1)^(0+128),w
  5489  0705  0084               	movwf	4
  5490  0706  0820               	movf	??_floatToASCII^(0+128),w
  5491  0707  1383               	bcf	3,7	;select IRP bank0
  5492  0708  0080               	movwf	0
  5493                           
  5494                           ;lcd.h: 345: returnVal[i] = '\0';
  5495  0709  0833               	movf	floatToASCII@i^(0+128),w
  5496  070A  0734               	addwf	floatToASCII@returnVal^(0+128),w
  5497  070B  00A0               	movwf	??_floatToASCII^(0+128)
  5498  070C  0820               	movf	??_floatToASCII^(0+128),w
  5499  070D  0084               	movwf	4
  5500  070E  0180               	clrf	0
  5501  070F  0008               	return
  5502  0710                     __end_of_floatToASCII:	
  5503                           
  5504                           	psect	text18
  5505  1607                     __ptext18:	
  5506 ;; *************** function ___lmul *****************
  5507 ;; Defined at:
  5508 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5511 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  product         4    9[BANK0 ] unsigned long 
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  4    0[BANK0 ] unsigned long 
  5516 ;; Registers used:
  5517 ;;		wreg, status,2, status,0
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5523 ;;      Params:         0       8       0       0       0
  5524 ;;      Locals:         0       4       0       0       0
  5525 ;;      Temps:          0       1       0       0       0
  5526 ;;      Totals:         0      13       0       0       0
  5527 ;;Total ram usage:       13 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    2
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_floatToASCII
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function ___lmul
  5539  1607                     ___lmul:	
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5543  1607  3000               	movlw	0
  5544  1608  1283               	bcf	3,5	;RP0=0, select bank0
  5545  1609  1303               	bcf	3,6	;RP1=0, select bank0
  5546  160A  00AC               	movwf	___lmul@product+3
  5547  160B  3000               	movlw	0
  5548  160C  00AB               	movwf	___lmul@product+2
  5549  160D  3000               	movlw	0
  5550  160E  00AA               	movwf	___lmul@product+1
  5551  160F  3000               	movlw	0
  5552  1610  00A9               	movwf	___lmul@product
  5553  1611                     l1849:	
  5554  1611  1C20               	btfss	___lmul@multiplier,0
  5555  1612  2E27               	goto	l1853
  5556  1613  0824               	movf	___lmul@multiplicand,w
  5557  1614  07A9               	addwf	___lmul@product,f
  5558  1615  0825               	movf	___lmul@multiplicand+1,w
  5559  1616  1103               	clrz
  5560  1617  1803               	skipnc
  5561  1618  3E01               	addlw	1
  5562  1619  1D03               	btfss	3,2
  5563  161A  07AA               	addwf	___lmul@product+1,f
  5564  161B  0826               	movf	___lmul@multiplicand+2,w
  5565  161C  1103               	clrz
  5566  161D  1803               	skipnc
  5567  161E  3E01               	addlw	1
  5568  161F  1D03               	btfss	3,2
  5569  1620  07AB               	addwf	___lmul@product+2,f
  5570  1621  0827               	movf	___lmul@multiplicand+3,w
  5571  1622  1103               	clrz
  5572  1623  1803               	skipnc
  5573  1624  3E01               	addlw	1
  5574  1625  1D03               	btfss	3,2
  5575  1626  07AC               	addwf	___lmul@product+3,f
  5576  1627                     l1853:	
  5577  1627  3001               	movlw	1
  5578  1628  00A8               	movwf	??___lmul
  5579  1629                     u1695:	
  5580  1629  1003               	clrc
  5581  162A  0DA4               	rlf	___lmul@multiplicand,f
  5582  162B  0DA5               	rlf	___lmul@multiplicand+1,f
  5583  162C  0DA6               	rlf	___lmul@multiplicand+2,f
  5584  162D  0DA7               	rlf	___lmul@multiplicand+3,f
  5585  162E  0BA8               	decfsz	??___lmul,f
  5586  162F  2E29               	goto	u1695
  5587  1630  3001               	movlw	1
  5588  1631                     u1705:	
  5589  1631  1003               	clrc
  5590  1632  0CA3               	rrf	___lmul@multiplier+3,f
  5591  1633  0CA2               	rrf	___lmul@multiplier+2,f
  5592  1634  0CA1               	rrf	___lmul@multiplier+1,f
  5593  1635  0CA0               	rrf	___lmul@multiplier,f
  5594  1636  3EFF               	addlw	-1
  5595  1637  1D03               	skipz
  5596  1638  2E31               	goto	u1705
  5597  1639  0823               	movf	___lmul@multiplier+3,w
  5598  163A  0422               	iorwf	___lmul@multiplier+2,w
  5599  163B  0421               	iorwf	___lmul@multiplier+1,w
  5600  163C  0420               	iorwf	___lmul@multiplier,w
  5601  163D  1D03               	skipz
  5602  163E  2E11               	goto	l1849
  5603  163F  082C               	movf	___lmul@product+3,w
  5604  1640  00A3               	movwf	?___lmul+3
  5605  1641  082B               	movf	___lmul@product+2,w
  5606  1642  00A2               	movwf	?___lmul+2
  5607  1643  082A               	movf	___lmul@product+1,w
  5608  1644  00A1               	movwf	?___lmul+1
  5609  1645  0829               	movf	___lmul@product,w
  5610  1646  00A0               	movwf	?___lmul
  5611  1647  0008               	return
  5612  1648                     __end_of___lmul:	
  5613                           
  5614                           	psect	text19
  5615  147F                     __ptext19:	
  5616 ;; *************** function ___lltoft *****************
  5617 ;; Defined at:
  5618 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  c               4    8[BANK0 ] unsigned long 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  exp             1   13[BANK0 ] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  3    8[BANK0 ] float 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, pclath, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5632 ;;      Params:         0       4       0       0       0
  5633 ;;      Locals:         0       1       0       0       0
  5634 ;;      Temps:          0       1       0       0       0
  5635 ;;      Totals:         0       6       0       0       0
  5636 ;;Total ram usage:        6 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    3
  5639 ;; This function calls:
  5640 ;;		___ftpack
  5641 ;; This function is called by:
  5642 ;;		_floatToASCII
  5643 ;;		_stopWatch
  5644 ;;		_currentTime
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function ___lltoft
  5650  147F                     ___lltoft:	
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5654  147F  308E               	movlw	142
  5655  1480  1283               	bcf	3,5	;RP0=0, select bank0
  5656  1481  1303               	bcf	3,6	;RP1=0, select bank0
  5657  1482  00AC               	movwf	??___lltoft
  5658  1483  082C               	movf	??___lltoft,w
  5659  1484  00AD               	movwf	___lltoft@exp
  5660  1485                     l2101:	
  5661  1485  30FF               	movlw	255
  5662  1486  052B               	andwf	___lltoft@c+3,w
  5663  1487  1903               	btfsc	3,2
  5664  1488  2C97               	goto	l2103
  5665  1489  3001               	movlw	1
  5666  148A                     u2365:	
  5667  148A  1003               	clrc
  5668  148B  0CAB               	rrf	___lltoft@c+3,f
  5669  148C  0CAA               	rrf	___lltoft@c+2,f
  5670  148D  0CA9               	rrf	___lltoft@c+1,f
  5671  148E  0CA8               	rrf	___lltoft@c,f
  5672  148F  3EFF               	addlw	-1
  5673  1490  1D03               	skipz
  5674  1491  2C8A               	goto	u2365
  5675  1492  3001               	movlw	1
  5676  1493  00AC               	movwf	??___lltoft
  5677  1494  082C               	movf	??___lltoft,w
  5678  1495  07AD               	addwf	___lltoft@exp,f
  5679  1496  2C85               	goto	l2101
  5680  1497                     l2103:	
  5681  1497  0828               	movf	___lltoft@c,w
  5682  1498  00A0               	movwf	___ftpack@arg
  5683  1499  0829               	movf	___lltoft@c+1,w
  5684  149A  00A1               	movwf	___ftpack@arg+1
  5685  149B  082A               	movf	___lltoft@c+2,w
  5686  149C  00A2               	movwf	___ftpack@arg+2
  5687  149D  082D               	movf	___lltoft@exp,w
  5688  149E  00AC               	movwf	??___lltoft
  5689  149F  082C               	movf	??___lltoft,w
  5690  14A0  00A3               	movwf	___ftpack@exp
  5691  14A1  01A4               	clrf	___ftpack@sign
  5692  14A2  160A  118A  2704   	fcall	___ftpack
  5693  14A5  1283               	bcf	3,5	;RP0=0, select bank0
  5694  14A6  1303               	bcf	3,6	;RP1=0, select bank0
  5695  14A7  0820               	movf	?___ftpack,w
  5696  14A8  00A8               	movwf	?___lltoft
  5697  14A9  0821               	movf	?___ftpack+1,w
  5698  14AA  00A9               	movwf	?___lltoft+1
  5699  14AB  0822               	movf	?___ftpack+2,w
  5700  14AC  00AA               	movwf	?___lltoft+2
  5701  14AD  0008               	return
  5702  14AE                     __end_of___lltoft:	
  5703                           
  5704                           	psect	text20
  5705  16A4                     __ptext20:	
  5706 ;; *************** function ___lldiv *****************
  5707 ;; Defined at:
  5708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  divisor         4    0[BANK0 ] unsigned long 
  5711 ;;  dividend        4    4[BANK0 ] unsigned long 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  quotient        4    9[BANK0 ] unsigned long 
  5714 ;;  counter         1   13[BANK0 ] unsigned char 
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  4    0[BANK0 ] unsigned long 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5724 ;;      Params:         0       8       0       0       0
  5725 ;;      Locals:         0       5       0       0       0
  5726 ;;      Temps:          0       1       0       0       0
  5727 ;;      Totals:         0      14       0       0       0
  5728 ;;Total ram usage:       14 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    2
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_floatToASCII
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function ___lldiv
  5740  16A4                     ___lldiv:	
  5741                           
  5742                           ;incstack = 0
  5743                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5744  16A4  3000               	movlw	0
  5745  16A5  1283               	bcf	3,5	;RP0=0, select bank0
  5746  16A6  1303               	bcf	3,6	;RP1=0, select bank0
  5747  16A7  00AC               	movwf	___lldiv@quotient+3
  5748  16A8  3000               	movlw	0
  5749  16A9  00AB               	movwf	___lldiv@quotient+2
  5750  16AA  3000               	movlw	0
  5751  16AB  00AA               	movwf	___lldiv@quotient+1
  5752  16AC  3000               	movlw	0
  5753  16AD  00A9               	movwf	___lldiv@quotient
  5754  16AE  0823               	movf	___lldiv@divisor+3,w
  5755  16AF  0422               	iorwf	___lldiv@divisor+2,w
  5756  16B0  0421               	iorwf	___lldiv@divisor+1,w
  5757  16B1  0420               	iorwf	___lldiv@divisor,w
  5758  16B2  1903               	skipnz
  5759  16B3  2EFB               	goto	l2093
  5760  16B4  01AD               	clrf	___lldiv@counter
  5761  16B5  0AAD               	incf	___lldiv@counter,f
  5762  16B6                     l2079:	
  5763  16B6  1BA3               	btfsc	___lldiv@divisor+3,7
  5764  16B7  2EC6               	goto	l2081
  5765  16B8  3001               	movlw	1
  5766  16B9  00A8               	movwf	??___lldiv
  5767  16BA                     u2305:	
  5768  16BA  1003               	clrc
  5769  16BB  0DA0               	rlf	___lldiv@divisor,f
  5770  16BC  0DA1               	rlf	___lldiv@divisor+1,f
  5771  16BD  0DA2               	rlf	___lldiv@divisor+2,f
  5772  16BE  0DA3               	rlf	___lldiv@divisor+3,f
  5773  16BF  0BA8               	decfsz	??___lldiv,f
  5774  16C0  2EBA               	goto	u2305
  5775  16C1  3001               	movlw	1
  5776  16C2  00A8               	movwf	??___lldiv
  5777  16C3  0828               	movf	??___lldiv,w
  5778  16C4  07AD               	addwf	___lldiv@counter,f
  5779  16C5  2EB6               	goto	l2079
  5780  16C6                     l2081:	
  5781  16C6  3001               	movlw	1
  5782  16C7  00A8               	movwf	??___lldiv
  5783  16C8                     u2325:	
  5784  16C8  1003               	clrc
  5785  16C9  0DA9               	rlf	___lldiv@quotient,f
  5786  16CA  0DAA               	rlf	___lldiv@quotient+1,f
  5787  16CB  0DAB               	rlf	___lldiv@quotient+2,f
  5788  16CC  0DAC               	rlf	___lldiv@quotient+3,f
  5789  16CD  0BA8               	decfsz	??___lldiv,f
  5790  16CE  2EC8               	goto	u2325
  5791  16CF  0823               	movf	___lldiv@divisor+3,w
  5792  16D0  0227               	subwf	___lldiv@dividend+3,w
  5793  16D1  1D03               	skipz
  5794  16D2  2EDD               	goto	u2335
  5795  16D3  0822               	movf	___lldiv@divisor+2,w
  5796  16D4  0226               	subwf	___lldiv@dividend+2,w
  5797  16D5  1D03               	skipz
  5798  16D6  2EDD               	goto	u2335
  5799  16D7  0821               	movf	___lldiv@divisor+1,w
  5800  16D8  0225               	subwf	___lldiv@dividend+1,w
  5801  16D9  1D03               	skipz
  5802  16DA  2EDD               	goto	u2335
  5803  16DB  0820               	movf	___lldiv@divisor,w
  5804  16DC  0224               	subwf	___lldiv@dividend,w
  5805  16DD                     u2335:	
  5806  16DD  1C03               	skipc
  5807  16DE  2EEE               	goto	l2089
  5808  16DF  0820               	movf	___lldiv@divisor,w
  5809  16E0  02A4               	subwf	___lldiv@dividend,f
  5810  16E1  0821               	movf	___lldiv@divisor+1,w
  5811  16E2  1C03               	skipc
  5812  16E3  0F21               	incfsz	___lldiv@divisor+1,w
  5813  16E4  02A5               	subwf	___lldiv@dividend+1,f
  5814  16E5  0822               	movf	___lldiv@divisor+2,w
  5815  16E6  1C03               	skipc
  5816  16E7  0F22               	incfsz	___lldiv@divisor+2,w
  5817  16E8  02A6               	subwf	___lldiv@dividend+2,f
  5818  16E9  0823               	movf	___lldiv@divisor+3,w
  5819  16EA  1C03               	skipc
  5820  16EB  0F23               	incfsz	___lldiv@divisor+3,w
  5821  16EC  02A7               	subwf	___lldiv@dividend+3,f
  5822  16ED  1429               	bsf	___lldiv@quotient,0
  5823  16EE                     l2089:	
  5824  16EE  3001               	movlw	1
  5825  16EF                     u2345:	
  5826  16EF  1003               	clrc
  5827  16F0  0CA3               	rrf	___lldiv@divisor+3,f
  5828  16F1  0CA2               	rrf	___lldiv@divisor+2,f
  5829  16F2  0CA1               	rrf	___lldiv@divisor+1,f
  5830  16F3  0CA0               	rrf	___lldiv@divisor,f
  5831  16F4  3EFF               	addlw	-1
  5832  16F5  1D03               	skipz
  5833  16F6  2EEF               	goto	u2345
  5834  16F7  3001               	movlw	1
  5835  16F8  02AD               	subwf	___lldiv@counter,f
  5836  16F9  1D03               	btfss	3,2
  5837  16FA  2EC6               	goto	l2081
  5838  16FB                     l2093:	
  5839  16FB  082C               	movf	___lldiv@quotient+3,w
  5840  16FC  00A3               	movwf	?___lldiv+3
  5841  16FD  082B               	movf	___lldiv@quotient+2,w
  5842  16FE  00A2               	movwf	?___lldiv+2
  5843  16FF  082A               	movf	___lldiv@quotient+1,w
  5844  1700  00A1               	movwf	?___lldiv+1
  5845  1701  0829               	movf	___lldiv@quotient,w
  5846  1702  00A0               	movwf	?___lldiv
  5847  1703  0008               	return
  5848  1704                     __end_of___lldiv:	
  5849                           
  5850                           	psect	text21
  5851  1772                     __ptext21:	
  5852 ;; *************** function ___fttol *****************
  5853 ;; Defined at:
  5854 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  f1              3   62[BANK0 ] float 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  lval            4   71[BANK0 ] unsigned long 
  5859 ;;  exp1            1   75[BANK0 ] unsigned char 
  5860 ;;  sign1           1   70[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  4   62[BANK0 ] long 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5870 ;;      Params:         0       4       0       0       0
  5871 ;;      Locals:         0       6       0       0       0
  5872 ;;      Temps:          0       4       0       0       0
  5873 ;;      Totals:         0      14       0       0       0
  5874 ;;Total ram usage:       14 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    2
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_floatToASCII
  5881 ;;		_stopWatch
  5882 ;;		_currentTime
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function ___fttol
  5888  1772                     ___fttol:	
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5892  1772  1283               	bcf	3,5	;RP0=0, select bank0
  5893  1773  1303               	bcf	3,6	;RP1=0, select bank0
  5894  1774  085E               	movf	___fttol@f1,w
  5895  1775  00E2               	movwf	??___fttol
  5896  1776  085F               	movf	___fttol@f1+1,w
  5897  1777  00E3               	movwf	??___fttol+1
  5898  1778  0860               	movf	___fttol@f1+2,w
  5899  1779  00E4               	movwf	??___fttol+2
  5900  177A  1003               	clrc
  5901  177B  0D63               	rlf	??___fttol+1,w
  5902  177C  0D64               	rlf	??___fttol+2,w
  5903  177D  00E5               	movwf	??___fttol+3
  5904  177E  0865               	movf	??___fttol+3,w
  5905  177F  00EB               	movwf	___fttol@exp1
  5906  1780  086B               	movf	___fttol@exp1,w
  5907  1781  1D03               	btfss	3,2
  5908  1782  2F8C               	goto	l2037
  5909  1783  3000               	movlw	0
  5910  1784  00E1               	movwf	?___fttol+3
  5911  1785  3000               	movlw	0
  5912  1786  00E0               	movwf	?___fttol+2
  5913  1787  3000               	movlw	0
  5914  1788  00DF               	movwf	?___fttol+1
  5915  1789  3000               	movlw	0
  5916  178A  00DE               	movwf	?___fttol
  5917  178B  0008               	return
  5918  178C                     l2037:	
  5919  178C  085E               	movf	___fttol@f1,w
  5920  178D  00E2               	movwf	??___fttol
  5921  178E  085F               	movf	___fttol@f1+1,w
  5922  178F  00E3               	movwf	??___fttol+1
  5923  1790  0860               	movf	___fttol@f1+2,w
  5924  1791  00E4               	movwf	??___fttol+2
  5925  1792  3017               	movlw	23
  5926  1793                     u2205:	
  5927  1793  1003               	clrc
  5928  1794  0CE4               	rrf	??___fttol+2,f
  5929  1795  0CE3               	rrf	??___fttol+1,f
  5930  1796  0CE2               	rrf	??___fttol,f
  5931  1797  3EFF               	addlw	-1
  5932  1798  1D03               	skipz
  5933  1799  2F93               	goto	u2205
  5934  179A  0862               	movf	??___fttol,w
  5935  179B  00E5               	movwf	??___fttol+3
  5936  179C  0865               	movf	??___fttol+3,w
  5937  179D  00E6               	movwf	___fttol@sign1
  5938  179E  17DF               	bsf	___fttol@f1+1,7
  5939  179F  30FF               	movlw	255
  5940  17A0  05DE               	andwf	___fttol@f1,f
  5941  17A1  30FF               	movlw	255
  5942  17A2  05DF               	andwf	___fttol@f1+1,f
  5943  17A3  3000               	movlw	0
  5944  17A4  05E0               	andwf	___fttol@f1+2,f
  5945  17A5  085E               	movf	___fttol@f1,w
  5946  17A6  00E7               	movwf	___fttol@lval
  5947  17A7  085F               	movf	___fttol@f1+1,w
  5948  17A8  00E8               	movwf	___fttol@lval+1
  5949  17A9  0860               	movf	___fttol@f1+2,w
  5950  17AA  00E9               	movwf	___fttol@lval+2
  5951  17AB  01EA               	clrf	___fttol@lval+3
  5952  17AC  308E               	movlw	142
  5953  17AD  02EB               	subwf	___fttol@exp1,f
  5954  17AE  1FEB               	btfss	___fttol@exp1,7
  5955  17AF  2FCE               	goto	l2057
  5956  17B0  086B               	movf	___fttol@exp1,w
  5957  17B1  3A80               	xorlw	128
  5958  17B2  3E8F               	addlw	143
  5959  17B3  1803               	skipnc
  5960  17B4  2FBE               	goto	l2055
  5961  17B5  3000               	movlw	0
  5962  17B6  00E1               	movwf	?___fttol+3
  5963  17B7  3000               	movlw	0
  5964  17B8  00E0               	movwf	?___fttol+2
  5965  17B9  3000               	movlw	0
  5966  17BA  00DF               	movwf	?___fttol+1
  5967  17BB  3000               	movlw	0
  5968  17BC  00DE               	movwf	?___fttol
  5969  17BD  0008               	return
  5970  17BE                     l2055:	
  5971  17BE  3001               	movlw	1
  5972  17BF                     u2235:	
  5973  17BF  1003               	clrc
  5974  17C0  0CEA               	rrf	___fttol@lval+3,f
  5975  17C1  0CE9               	rrf	___fttol@lval+2,f
  5976  17C2  0CE8               	rrf	___fttol@lval+1,f
  5977  17C3  0CE7               	rrf	___fttol@lval,f
  5978  17C4  3EFF               	addlw	-1
  5979  17C5  1D03               	skipz
  5980  17C6  2FBF               	goto	u2235
  5981  17C7  3001               	movlw	1
  5982  17C8  00E2               	movwf	??___fttol
  5983  17C9  0862               	movf	??___fttol,w
  5984  17CA  07EB               	addwf	___fttol@exp1,f
  5985  17CB  1903               	btfsc	3,2
  5986  17CC  2FE9               	goto	l2065
  5987  17CD  2FBE               	goto	l2055
  5988  17CE                     l2057:	
  5989  17CE  3018               	movlw	24
  5990  17CF  026B               	subwf	___fttol@exp1,w
  5991  17D0  1C03               	skipc
  5992  17D1  2FE6               	goto	l665
  5993  17D2  3000               	movlw	0
  5994  17D3  00E1               	movwf	?___fttol+3
  5995  17D4  3000               	movlw	0
  5996  17D5  00E0               	movwf	?___fttol+2
  5997  17D6  3000               	movlw	0
  5998  17D7  00DF               	movwf	?___fttol+1
  5999  17D8  3000               	movlw	0
  6000  17D9  00DE               	movwf	?___fttol
  6001  17DA  0008               	return
  6002  17DB                     l2063:	
  6003  17DB  3001               	movlw	1
  6004  17DC  00E2               	movwf	??___fttol
  6005  17DD                     u2265:	
  6006  17DD  1003               	clrc
  6007  17DE  0DE7               	rlf	___fttol@lval,f
  6008  17DF  0DE8               	rlf	___fttol@lval+1,f
  6009  17E0  0DE9               	rlf	___fttol@lval+2,f
  6010  17E1  0DEA               	rlf	___fttol@lval+3,f
  6011  17E2  0BE2               	decfsz	??___fttol,f
  6012  17E3  2FDD               	goto	u2265
  6013  17E4  3001               	movlw	1
  6014  17E5  02EB               	subwf	___fttol@exp1,f
  6015  17E6                     l665:	
  6016  17E6  086B               	movf	___fttol@exp1,w
  6017  17E7  1D03               	btfss	3,2
  6018  17E8  2FDB               	goto	l2063
  6019  17E9                     l2065:	
  6020  17E9  0866               	movf	___fttol@sign1,w
  6021  17EA  1903               	btfsc	3,2
  6022  17EB  2FF7               	goto	l2069
  6023  17EC  09E7               	comf	___fttol@lval,f
  6024  17ED  09E8               	comf	___fttol@lval+1,f
  6025  17EE  09E9               	comf	___fttol@lval+2,f
  6026  17EF  09EA               	comf	___fttol@lval+3,f
  6027  17F0  0AE7               	incf	___fttol@lval,f
  6028  17F1  1903               	skipnz
  6029  17F2  0AE8               	incf	___fttol@lval+1,f
  6030  17F3  1903               	skipnz
  6031  17F4  0AE9               	incf	___fttol@lval+2,f
  6032  17F5  1903               	skipnz
  6033  17F6  0AEA               	incf	___fttol@lval+3,f
  6034  17F7                     l2069:	
  6035  17F7  086A               	movf	___fttol@lval+3,w
  6036  17F8  00E1               	movwf	?___fttol+3
  6037  17F9  0869               	movf	___fttol@lval+2,w
  6038  17FA  00E0               	movwf	?___fttol+2
  6039  17FB  0868               	movf	___fttol@lval+1,w
  6040  17FC  00DF               	movwf	?___fttol+1
  6041  17FD  0867               	movf	___fttol@lval,w
  6042  17FE  00DE               	movwf	?___fttol
  6043  17FF  0008               	return
  6044  1800                     __end_of___fttol:	
  6045                           
  6046                           	psect	text22
  6047  135F                     __ptext22:	
  6048 ;; *************** function ___ftneg *****************
  6049 ;; Defined at:
  6050 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  f1              3   14[BANK0 ] float 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  3   14[BANK0 ] float 
  6057 ;; Registers used:
  6058 ;;		wreg
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6064 ;;      Params:         0       3       0       0       0
  6065 ;;      Locals:         0       0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0
  6067 ;;      Totals:         0       3       0       0       0
  6068 ;;Total ram usage:        3 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    2
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_floatToASCII
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function ___ftneg
  6080  135F                     ___ftneg:	
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in ___ftneg: [wreg]
  6084  135F  1283               	bcf	3,5	;RP0=0, select bank0
  6085  1360  1303               	bcf	3,6	;RP1=0, select bank0
  6086  1361  0830               	movf	___ftneg@f1+2,w
  6087  1362  042F               	iorwf	___ftneg@f1+1,w
  6088  1363  042E               	iorwf	___ftneg@f1,w
  6089  1364  1903               	skipnz
  6090  1365  0008               	return
  6091  1366  3080               	movlw	128
  6092  1367  06B0               	xorwf	___ftneg@f1+2,f
  6093  1368  0008               	return
  6094  1369                     __end_of___ftneg:	
  6095                           
  6096                           	psect	text23
  6097  0ABD                     __ptext23:	
  6098 ;; *************** function ___ftmul *****************
  6099 ;; Defined at:
  6100 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  f1              3   30[BANK0 ] float 
  6103 ;;  f2              3   33[BANK0 ] float 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6106 ;;  sign            1   45[BANK0 ] unsigned char 
  6107 ;;  cntr            1   44[BANK0 ] unsigned char 
  6108 ;;  exp             1   40[BANK0 ] unsigned char 
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  3   30[BANK0 ] float 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2, status,0, pclath, cstack
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6118 ;;      Params:         0       6       0       0       0
  6119 ;;      Locals:         0       6       0       0       0
  6120 ;;      Temps:          0       4       0       0       0
  6121 ;;      Totals:         0      16       0       0       0
  6122 ;;Total ram usage:       16 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    3
  6125 ;; This function calls:
  6126 ;;		___ftpack
  6127 ;; This function is called by:
  6128 ;;		_floatToASCII
  6129 ;;		_stopWatch
  6130 ;;		_sampleBatteryCells
  6131 ;;		_sampleReference
  6132 ;;		_sampleVoltage
  6133 ;;		_sampleCurrent
  6134 ;;		_currentTime
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function ___ftmul
  6140  0ABD                     ___ftmul:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6144  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  6145  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  6146  0ABF  083E               	movf	___ftmul@f1,w
  6147  0AC0  00C4               	movwf	??___ftmul
  6148  0AC1  083F               	movf	___ftmul@f1+1,w
  6149  0AC2  00C5               	movwf	??___ftmul+1
  6150  0AC3  0840               	movf	___ftmul@f1+2,w
  6151  0AC4  00C6               	movwf	??___ftmul+2
  6152  0AC5  1003               	clrc
  6153  0AC6  0D45               	rlf	??___ftmul+1,w
  6154  0AC7  0D46               	rlf	??___ftmul+2,w
  6155  0AC8  00C7               	movwf	??___ftmul+3
  6156  0AC9  0847               	movf	??___ftmul+3,w
  6157  0ACA  00C8               	movwf	___ftmul@exp
  6158  0ACB  0848               	movf	___ftmul@exp,w
  6159  0ACC  1D03               	btfss	3,2
  6160  0ACD  2AD5               	goto	l1979
  6161  0ACE  3000               	movlw	0
  6162  0ACF  00BE               	movwf	?___ftmul
  6163  0AD0  3000               	movlw	0
  6164  0AD1  00BF               	movwf	?___ftmul+1
  6165  0AD2  3000               	movlw	0
  6166  0AD3  00C0               	movwf	?___ftmul+2
  6167  0AD4  0008               	return
  6168  0AD5                     l1979:	
  6169  0AD5  0841               	movf	___ftmul@f2,w
  6170  0AD6  00C4               	movwf	??___ftmul
  6171  0AD7  0842               	movf	___ftmul@f2+1,w
  6172  0AD8  00C5               	movwf	??___ftmul+1
  6173  0AD9  0843               	movf	___ftmul@f2+2,w
  6174  0ADA  00C6               	movwf	??___ftmul+2
  6175  0ADB  1003               	clrc
  6176  0ADC  0D45               	rlf	??___ftmul+1,w
  6177  0ADD  0D46               	rlf	??___ftmul+2,w
  6178  0ADE  00C7               	movwf	??___ftmul+3
  6179  0ADF  0847               	movf	??___ftmul+3,w
  6180  0AE0  00CD               	movwf	___ftmul@sign
  6181  0AE1  084D               	movf	___ftmul@sign,w
  6182  0AE2  1D03               	btfss	3,2
  6183  0AE3  2AEB               	goto	l1985
  6184  0AE4  3000               	movlw	0
  6185  0AE5  00BE               	movwf	?___ftmul
  6186  0AE6  3000               	movlw	0
  6187  0AE7  00BF               	movwf	?___ftmul+1
  6188  0AE8  3000               	movlw	0
  6189  0AE9  00C0               	movwf	?___ftmul+2
  6190  0AEA  0008               	return
  6191  0AEB                     l1985:	
  6192  0AEB  084D               	movf	___ftmul@sign,w
  6193  0AEC  3E7B               	addlw	123
  6194  0AED  00C4               	movwf	??___ftmul
  6195  0AEE  0844               	movf	??___ftmul,w
  6196  0AEF  07C8               	addwf	___ftmul@exp,f
  6197  0AF0  083E               	movf	___ftmul@f1,w
  6198  0AF1  00C4               	movwf	??___ftmul
  6199  0AF2  083F               	movf	___ftmul@f1+1,w
  6200  0AF3  00C5               	movwf	??___ftmul+1
  6201  0AF4  0840               	movf	___ftmul@f1+2,w
  6202  0AF5  00C6               	movwf	??___ftmul+2
  6203  0AF6  3010               	movlw	16
  6204  0AF7                     u2065:	
  6205  0AF7  1003               	clrc
  6206  0AF8  0CC6               	rrf	??___ftmul+2,f
  6207  0AF9  0CC5               	rrf	??___ftmul+1,f
  6208  0AFA  0CC4               	rrf	??___ftmul,f
  6209  0AFB  3EFF               	addlw	-1
  6210  0AFC  1D03               	skipz
  6211  0AFD  2AF7               	goto	u2065
  6212  0AFE  0844               	movf	??___ftmul,w
  6213  0AFF  00C7               	movwf	??___ftmul+3
  6214  0B00  0847               	movf	??___ftmul+3,w
  6215  0B01  00CD               	movwf	___ftmul@sign
  6216  0B02  0841               	movf	___ftmul@f2,w
  6217  0B03  00C4               	movwf	??___ftmul
  6218  0B04  0842               	movf	___ftmul@f2+1,w
  6219  0B05  00C5               	movwf	??___ftmul+1
  6220  0B06  0843               	movf	___ftmul@f2+2,w
  6221  0B07  00C6               	movwf	??___ftmul+2
  6222  0B08  3010               	movlw	16
  6223  0B09                     u2075:	
  6224  0B09  1003               	clrc
  6225  0B0A  0CC6               	rrf	??___ftmul+2,f
  6226  0B0B  0CC5               	rrf	??___ftmul+1,f
  6227  0B0C  0CC4               	rrf	??___ftmul,f
  6228  0B0D  3EFF               	addlw	-1
  6229  0B0E  1D03               	skipz
  6230  0B0F  2B09               	goto	u2075
  6231  0B10  0844               	movf	??___ftmul,w
  6232  0B11  00C7               	movwf	??___ftmul+3
  6233  0B12  0847               	movf	??___ftmul+3,w
  6234  0B13  06CD               	xorwf	___ftmul@sign,f
  6235  0B14  3080               	movlw	128
  6236  0B15  00C4               	movwf	??___ftmul
  6237  0B16  0844               	movf	??___ftmul,w
  6238  0B17  05CD               	andwf	___ftmul@sign,f
  6239  0B18  17BF               	bsf	___ftmul@f1+1,7
  6240  0B19  17C2               	bsf	___ftmul@f2+1,7
  6241  0B1A  30FF               	movlw	255
  6242  0B1B  05C1               	andwf	___ftmul@f2,f
  6243  0B1C  30FF               	movlw	255
  6244  0B1D  05C2               	andwf	___ftmul@f2+1,f
  6245  0B1E  3000               	movlw	0
  6246  0B1F  05C3               	andwf	___ftmul@f2+2,f
  6247  0B20  3000               	movlw	0
  6248  0B21  00C9               	movwf	___ftmul@f3_as_product
  6249  0B22  3000               	movlw	0
  6250  0B23  00CA               	movwf	___ftmul@f3_as_product+1
  6251  0B24  3000               	movlw	0
  6252  0B25  00CB               	movwf	___ftmul@f3_as_product+2
  6253  0B26  3007               	movlw	7
  6254  0B27  00C4               	movwf	??___ftmul
  6255  0B28  0844               	movf	??___ftmul,w
  6256  0B29  00CC               	movwf	___ftmul@cntr
  6257  0B2A                     l1997:	
  6258  0B2A  1C3E               	btfss	___ftmul@f1,0
  6259  0B2B  2B3A               	goto	l2001
  6260  0B2C  0841               	movf	___ftmul@f2,w
  6261  0B2D  07C9               	addwf	___ftmul@f3_as_product,f
  6262  0B2E  0842               	movf	___ftmul@f2+1,w
  6263  0B2F  1103               	clrz
  6264  0B30  1803               	skipnc
  6265  0B31  0A42               	incf	___ftmul@f2+1,w
  6266  0B32  1D03               	btfss	3,2
  6267  0B33  07CA               	addwf	___ftmul@f3_as_product+1,f
  6268  0B34  0843               	movf	___ftmul@f2+2,w
  6269  0B35  1103               	clrz
  6270  0B36  1803               	skipnc
  6271  0B37  0A43               	incf	___ftmul@f2+2,w
  6272  0B38  1D03               	btfss	3,2
  6273  0B39  07CB               	addwf	___ftmul@f3_as_product+2,f
  6274  0B3A                     l2001:	
  6275  0B3A  3001               	movlw	1
  6276  0B3B                     u2105:	
  6277  0B3B  1003               	clrc
  6278  0B3C  0CC0               	rrf	___ftmul@f1+2,f
  6279  0B3D  0CBF               	rrf	___ftmul@f1+1,f
  6280  0B3E  0CBE               	rrf	___ftmul@f1,f
  6281  0B3F  3EFF               	addlw	-1
  6282  0B40  1D03               	skipz
  6283  0B41  2B3B               	goto	u2105
  6284  0B42  3001               	movlw	1
  6285  0B43                     u2115:	
  6286  0B43  1003               	clrc
  6287  0B44  0DC1               	rlf	___ftmul@f2,f
  6288  0B45  0DC2               	rlf	___ftmul@f2+1,f
  6289  0B46  0DC3               	rlf	___ftmul@f2+2,f
  6290  0B47  3EFF               	addlw	-1
  6291  0B48  1D03               	skipz
  6292  0B49  2B43               	goto	u2115
  6293  0B4A  3001               	movlw	1
  6294  0B4B  02CC               	subwf	___ftmul@cntr,f
  6295  0B4C  1D03               	btfss	3,2
  6296  0B4D  2B2A               	goto	l1997
  6297  0B4E  3009               	movlw	9
  6298  0B4F  00C4               	movwf	??___ftmul
  6299  0B50  0844               	movf	??___ftmul,w
  6300  0B51  00CC               	movwf	___ftmul@cntr
  6301  0B52                     l2009:	
  6302  0B52  1C3E               	btfss	___ftmul@f1,0
  6303  0B53  2B62               	goto	l2013
  6304  0B54  0841               	movf	___ftmul@f2,w
  6305  0B55  07C9               	addwf	___ftmul@f3_as_product,f
  6306  0B56  0842               	movf	___ftmul@f2+1,w
  6307  0B57  1103               	clrz
  6308  0B58  1803               	skipnc
  6309  0B59  0A42               	incf	___ftmul@f2+1,w
  6310  0B5A  1D03               	btfss	3,2
  6311  0B5B  07CA               	addwf	___ftmul@f3_as_product+1,f
  6312  0B5C  0843               	movf	___ftmul@f2+2,w
  6313  0B5D  1103               	clrz
  6314  0B5E  1803               	skipnc
  6315  0B5F  0A43               	incf	___ftmul@f2+2,w
  6316  0B60  1D03               	btfss	3,2
  6317  0B61  07CB               	addwf	___ftmul@f3_as_product+2,f
  6318  0B62                     l2013:	
  6319  0B62  3001               	movlw	1
  6320  0B63                     u2155:	
  6321  0B63  1003               	clrc
  6322  0B64  0CC0               	rrf	___ftmul@f1+2,f
  6323  0B65  0CBF               	rrf	___ftmul@f1+1,f
  6324  0B66  0CBE               	rrf	___ftmul@f1,f
  6325  0B67  3EFF               	addlw	-1
  6326  0B68  1D03               	skipz
  6327  0B69  2B63               	goto	u2155
  6328  0B6A  3001               	movlw	1
  6329  0B6B                     u2165:	
  6330  0B6B  1003               	clrc
  6331  0B6C  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6332  0B6D  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6333  0B6E  0CC9               	rrf	___ftmul@f3_as_product,f
  6334  0B6F  3EFF               	addlw	-1
  6335  0B70  1D03               	skipz
  6336  0B71  2B6B               	goto	u2165
  6337  0B72  3001               	movlw	1
  6338  0B73  02CC               	subwf	___ftmul@cntr,f
  6339  0B74  1D03               	btfss	3,2
  6340  0B75  2B52               	goto	l2009
  6341  0B76  0849               	movf	___ftmul@f3_as_product,w
  6342  0B77  00A0               	movwf	___ftpack@arg
  6343  0B78  084A               	movf	___ftmul@f3_as_product+1,w
  6344  0B79  00A1               	movwf	___ftpack@arg+1
  6345  0B7A  084B               	movf	___ftmul@f3_as_product+2,w
  6346  0B7B  00A2               	movwf	___ftpack@arg+2
  6347  0B7C  0848               	movf	___ftmul@exp,w
  6348  0B7D  00C4               	movwf	??___ftmul
  6349  0B7E  0844               	movf	??___ftmul,w
  6350  0B7F  00A3               	movwf	___ftpack@exp
  6351  0B80  084D               	movf	___ftmul@sign,w
  6352  0B81  00C5               	movwf	??___ftmul+1
  6353  0B82  0845               	movf	??___ftmul+1,w
  6354  0B83  00A4               	movwf	___ftpack@sign
  6355  0B84  160A  118A  2704   	fcall	___ftpack
  6356  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  6357  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  6358  0B89  0820               	movf	?___ftpack,w
  6359  0B8A  00BE               	movwf	?___ftmul
  6360  0B8B  0821               	movf	?___ftpack+1,w
  6361  0B8C  00BF               	movwf	?___ftmul+1
  6362  0B8D  0822               	movf	?___ftpack+2,w
  6363  0B8E  00C0               	movwf	?___ftmul+2
  6364  0B8F  0008               	return
  6365  0B90                     __end_of___ftmul:	
  6366                           
  6367                           	psect	text24
  6368  0A05                     __ptext24:	
  6369 ;; *************** function ___ftdiv *****************
  6370 ;; Defined at:
  6371 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  f2              3   46[BANK0 ] float 
  6374 ;;  f1              3   49[BANK0 ] float 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  f3              3   57[BANK0 ] float 
  6377 ;;  sign            1   61[BANK0 ] unsigned char 
  6378 ;;  exp             1   60[BANK0 ] unsigned char 
  6379 ;;  cntr            1   56[BANK0 ] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  3   46[BANK0 ] float 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2, status,0, pclath, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6389 ;;      Params:         0       6       0       0       0
  6390 ;;      Locals:         0       6       0       0       0
  6391 ;;      Temps:          0       4       0       0       0
  6392 ;;      Totals:         0      16       0       0       0
  6393 ;;Total ram usage:       16 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    3
  6396 ;; This function calls:
  6397 ;;		___ftpack
  6398 ;; This function is called by:
  6399 ;;		_floatToASCII
  6400 ;;		_sampleReference
  6401 ;;		_sampleVoltage
  6402 ;;		_sampleCurrent
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function ___ftdiv
  6408  0A05                     ___ftdiv:	
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6412  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  6413  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  6414  0A07  0851               	movf	___ftdiv@f1,w
  6415  0A08  00D4               	movwf	??___ftdiv
  6416  0A09  0852               	movf	___ftdiv@f1+1,w
  6417  0A0A  00D5               	movwf	??___ftdiv+1
  6418  0A0B  0853               	movf	___ftdiv@f1+2,w
  6419  0A0C  00D6               	movwf	??___ftdiv+2
  6420  0A0D  1003               	clrc
  6421  0A0E  0D55               	rlf	??___ftdiv+1,w
  6422  0A0F  0D56               	rlf	??___ftdiv+2,w
  6423  0A10  00D7               	movwf	??___ftdiv+3
  6424  0A11  0857               	movf	??___ftdiv+3,w
  6425  0A12  00DC               	movwf	___ftdiv@exp
  6426  0A13  085C               	movf	___ftdiv@exp,w
  6427  0A14  1D03               	btfss	3,2
  6428  0A15  2A1D               	goto	l1937
  6429  0A16  3000               	movlw	0
  6430  0A17  00CE               	movwf	?___ftdiv
  6431  0A18  3000               	movlw	0
  6432  0A19  00CF               	movwf	?___ftdiv+1
  6433  0A1A  3000               	movlw	0
  6434  0A1B  00D0               	movwf	?___ftdiv+2
  6435  0A1C  0008               	return
  6436  0A1D                     l1937:	
  6437  0A1D  084E               	movf	___ftdiv@f2,w
  6438  0A1E  00D4               	movwf	??___ftdiv
  6439  0A1F  084F               	movf	___ftdiv@f2+1,w
  6440  0A20  00D5               	movwf	??___ftdiv+1
  6441  0A21  0850               	movf	___ftdiv@f2+2,w
  6442  0A22  00D6               	movwf	??___ftdiv+2
  6443  0A23  1003               	clrc
  6444  0A24  0D55               	rlf	??___ftdiv+1,w
  6445  0A25  0D56               	rlf	??___ftdiv+2,w
  6446  0A26  00D7               	movwf	??___ftdiv+3
  6447  0A27  0857               	movf	??___ftdiv+3,w
  6448  0A28  00DD               	movwf	___ftdiv@sign
  6449  0A29  085D               	movf	___ftdiv@sign,w
  6450  0A2A  1D03               	btfss	3,2
  6451  0A2B  2A33               	goto	l1943
  6452  0A2C  3000               	movlw	0
  6453  0A2D  00CE               	movwf	?___ftdiv
  6454  0A2E  3000               	movlw	0
  6455  0A2F  00CF               	movwf	?___ftdiv+1
  6456  0A30  3000               	movlw	0
  6457  0A31  00D0               	movwf	?___ftdiv+2
  6458  0A32  0008               	return
  6459  0A33                     l1943:	
  6460  0A33  3000               	movlw	0
  6461  0A34  00D9               	movwf	___ftdiv@f3
  6462  0A35  3000               	movlw	0
  6463  0A36  00DA               	movwf	___ftdiv@f3+1
  6464  0A37  3000               	movlw	0
  6465  0A38  00DB               	movwf	___ftdiv@f3+2
  6466  0A39  3089               	movlw	137
  6467  0A3A  075D               	addwf	___ftdiv@sign,w
  6468  0A3B  00D4               	movwf	??___ftdiv
  6469  0A3C  0854               	movf	??___ftdiv,w
  6470  0A3D  02DC               	subwf	___ftdiv@exp,f
  6471  0A3E  0851               	movf	___ftdiv@f1,w
  6472  0A3F  00D4               	movwf	??___ftdiv
  6473  0A40  0852               	movf	___ftdiv@f1+1,w
  6474  0A41  00D5               	movwf	??___ftdiv+1
  6475  0A42  0853               	movf	___ftdiv@f1+2,w
  6476  0A43  00D6               	movwf	??___ftdiv+2
  6477  0A44  3010               	movlw	16
  6478  0A45                     u1985:	
  6479  0A45  1003               	clrc
  6480  0A46  0CD6               	rrf	??___ftdiv+2,f
  6481  0A47  0CD5               	rrf	??___ftdiv+1,f
  6482  0A48  0CD4               	rrf	??___ftdiv,f
  6483  0A49  3EFF               	addlw	-1
  6484  0A4A  1D03               	skipz
  6485  0A4B  2A45               	goto	u1985
  6486  0A4C  0854               	movf	??___ftdiv,w
  6487  0A4D  00D7               	movwf	??___ftdiv+3
  6488  0A4E  0857               	movf	??___ftdiv+3,w
  6489  0A4F  00DD               	movwf	___ftdiv@sign
  6490  0A50  084E               	movf	___ftdiv@f2,w
  6491  0A51  00D4               	movwf	??___ftdiv
  6492  0A52  084F               	movf	___ftdiv@f2+1,w
  6493  0A53  00D5               	movwf	??___ftdiv+1
  6494  0A54  0850               	movf	___ftdiv@f2+2,w
  6495  0A55  00D6               	movwf	??___ftdiv+2
  6496  0A56  3010               	movlw	16
  6497  0A57                     u1995:	
  6498  0A57  1003               	clrc
  6499  0A58  0CD6               	rrf	??___ftdiv+2,f
  6500  0A59  0CD5               	rrf	??___ftdiv+1,f
  6501  0A5A  0CD4               	rrf	??___ftdiv,f
  6502  0A5B  3EFF               	addlw	-1
  6503  0A5C  1D03               	skipz
  6504  0A5D  2A57               	goto	u1995
  6505  0A5E  0854               	movf	??___ftdiv,w
  6506  0A5F  00D7               	movwf	??___ftdiv+3
  6507  0A60  0857               	movf	??___ftdiv+3,w
  6508  0A61  06DD               	xorwf	___ftdiv@sign,f
  6509  0A62  3080               	movlw	128
  6510  0A63  00D4               	movwf	??___ftdiv
  6511  0A64  0854               	movf	??___ftdiv,w
  6512  0A65  05DD               	andwf	___ftdiv@sign,f
  6513  0A66  17D2               	bsf	___ftdiv@f1+1,7
  6514  0A67  30FF               	movlw	255
  6515  0A68  05D1               	andwf	___ftdiv@f1,f
  6516  0A69  30FF               	movlw	255
  6517  0A6A  05D2               	andwf	___ftdiv@f1+1,f
  6518  0A6B  3000               	movlw	0
  6519  0A6C  05D3               	andwf	___ftdiv@f1+2,f
  6520  0A6D  17CF               	bsf	___ftdiv@f2+1,7
  6521  0A6E  30FF               	movlw	255
  6522  0A6F  05CE               	andwf	___ftdiv@f2,f
  6523  0A70  30FF               	movlw	255
  6524  0A71  05CF               	andwf	___ftdiv@f2+1,f
  6525  0A72  3000               	movlw	0
  6526  0A73  05D0               	andwf	___ftdiv@f2+2,f
  6527  0A74  3018               	movlw	24
  6528  0A75  00D4               	movwf	??___ftdiv
  6529  0A76  0854               	movf	??___ftdiv,w
  6530  0A77  00D8               	movwf	___ftdiv@cntr
  6531  0A78                     l1957:	
  6532  0A78  3001               	movlw	1
  6533  0A79                     u2005:	
  6534  0A79  1003               	clrc
  6535  0A7A  0DD9               	rlf	___ftdiv@f3,f
  6536  0A7B  0DDA               	rlf	___ftdiv@f3+1,f
  6537  0A7C  0DDB               	rlf	___ftdiv@f3+2,f
  6538  0A7D  3EFF               	addlw	-1
  6539  0A7E  1D03               	skipz
  6540  0A7F  2A79               	goto	u2005
  6541  0A80  0850               	movf	___ftdiv@f2+2,w
  6542  0A81  0253               	subwf	___ftdiv@f1+2,w
  6543  0A82  1D03               	skipz
  6544  0A83  2A8A               	goto	u2015
  6545  0A84  084F               	movf	___ftdiv@f2+1,w
  6546  0A85  0252               	subwf	___ftdiv@f1+1,w
  6547  0A86  1D03               	skipz
  6548  0A87  2A8A               	goto	u2015
  6549  0A88  084E               	movf	___ftdiv@f2,w
  6550  0A89  0251               	subwf	___ftdiv@f1,w
  6551  0A8A                     u2015:	
  6552  0A8A  1C03               	skipc
  6553  0A8B  2A97               	goto	l1965
  6554  0A8C  084E               	movf	___ftdiv@f2,w
  6555  0A8D  02D1               	subwf	___ftdiv@f1,f
  6556  0A8E  084F               	movf	___ftdiv@f2+1,w
  6557  0A8F  1C03               	skipc
  6558  0A90  0F4F               	incfsz	___ftdiv@f2+1,w
  6559  0A91  02D2               	subwf	___ftdiv@f1+1,f
  6560  0A92  0850               	movf	___ftdiv@f2+2,w
  6561  0A93  1C03               	skipc
  6562  0A94  0A50               	incf	___ftdiv@f2+2,w
  6563  0A95  02D3               	subwf	___ftdiv@f1+2,f
  6564  0A96  1459               	bsf	___ftdiv@f3,0
  6565  0A97                     l1965:	
  6566  0A97  3001               	movlw	1
  6567  0A98                     u2025:	
  6568  0A98  1003               	clrc
  6569  0A99  0DD1               	rlf	___ftdiv@f1,f
  6570  0A9A  0DD2               	rlf	___ftdiv@f1+1,f
  6571  0A9B  0DD3               	rlf	___ftdiv@f1+2,f
  6572  0A9C  3EFF               	addlw	-1
  6573  0A9D  1D03               	skipz
  6574  0A9E  2A98               	goto	u2025
  6575  0A9F  3001               	movlw	1
  6576  0AA0  02D8               	subwf	___ftdiv@cntr,f
  6577  0AA1  1D03               	btfss	3,2
  6578  0AA2  2A78               	goto	l1957
  6579  0AA3  0859               	movf	___ftdiv@f3,w
  6580  0AA4  00A0               	movwf	___ftpack@arg
  6581  0AA5  085A               	movf	___ftdiv@f3+1,w
  6582  0AA6  00A1               	movwf	___ftpack@arg+1
  6583  0AA7  085B               	movf	___ftdiv@f3+2,w
  6584  0AA8  00A2               	movwf	___ftpack@arg+2
  6585  0AA9  085C               	movf	___ftdiv@exp,w
  6586  0AAA  00D4               	movwf	??___ftdiv
  6587  0AAB  0854               	movf	??___ftdiv,w
  6588  0AAC  00A3               	movwf	___ftpack@exp
  6589  0AAD  085D               	movf	___ftdiv@sign,w
  6590  0AAE  00D5               	movwf	??___ftdiv+1
  6591  0AAF  0855               	movf	??___ftdiv+1,w
  6592  0AB0  00A4               	movwf	___ftpack@sign
  6593  0AB1  160A  118A  2704   	fcall	___ftpack
  6594  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  6595  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  6596  0AB6  0820               	movf	?___ftpack,w
  6597  0AB7  00CE               	movwf	?___ftdiv
  6598  0AB8  0821               	movf	?___ftpack+1,w
  6599  0AB9  00CF               	movwf	?___ftdiv+1
  6600  0ABA  0822               	movf	?___ftpack+2,w
  6601  0ABB  00D0               	movwf	?___ftdiv+2
  6602  0ABC  0008               	return
  6603  0ABD                     __end_of___ftdiv:	
  6604                           
  6605                           	psect	text25
  6606  0C96                     __ptext25:	
  6607 ;; *************** function ___ftadd *****************
  6608 ;; Defined at:
  6609 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  f1              3   17[BANK0 ] float 
  6612 ;;  f2              3   20[BANK0 ] float 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  exp1            1   29[BANK0 ] unsigned char 
  6615 ;;  exp2            1   28[BANK0 ] unsigned char 
  6616 ;;  sign            1   27[BANK0 ] unsigned char 
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  3   17[BANK0 ] float 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, pclath, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6626 ;;      Params:         0       6       0       0       0
  6627 ;;      Locals:         0       3       0       0       0
  6628 ;;      Temps:          0       4       0       0       0
  6629 ;;      Totals:         0      13       0       0       0
  6630 ;;Total ram usage:       13 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    3
  6633 ;; This function calls:
  6634 ;;		___ftpack
  6635 ;; This function is called by:
  6636 ;;		_floatToASCII
  6637 ;;		_sampleBatteryCells
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function ___ftadd
  6643  0C96                     ___ftadd:	
  6644                           
  6645                           ;incstack = 0
  6646                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6647  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  6648  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  6649  0C98  0831               	movf	___ftadd@f1,w
  6650  0C99  00B7               	movwf	??___ftadd
  6651  0C9A  0832               	movf	___ftadd@f1+1,w
  6652  0C9B  00B8               	movwf	??___ftadd+1
  6653  0C9C  0833               	movf	___ftadd@f1+2,w
  6654  0C9D  00B9               	movwf	??___ftadd+2
  6655  0C9E  1003               	clrc
  6656  0C9F  0D38               	rlf	??___ftadd+1,w
  6657  0CA0  0D39               	rlf	??___ftadd+2,w
  6658  0CA1  00BA               	movwf	??___ftadd+3
  6659  0CA2  083A               	movf	??___ftadd+3,w
  6660  0CA3  00BD               	movwf	___ftadd@exp1
  6661  0CA4  0834               	movf	___ftadd@f2,w
  6662  0CA5  00B7               	movwf	??___ftadd
  6663  0CA6  0835               	movf	___ftadd@f2+1,w
  6664  0CA7  00B8               	movwf	??___ftadd+1
  6665  0CA8  0836               	movf	___ftadd@f2+2,w
  6666  0CA9  00B9               	movwf	??___ftadd+2
  6667  0CAA  1003               	clrc
  6668  0CAB  0D38               	rlf	??___ftadd+1,w
  6669  0CAC  0D39               	rlf	??___ftadd+2,w
  6670  0CAD  00BA               	movwf	??___ftadd+3
  6671  0CAE  083A               	movf	??___ftadd+3,w
  6672  0CAF  00BC               	movwf	___ftadd@exp2
  6673  0CB0  083D               	movf	___ftadd@exp1,w
  6674  0CB1  1903               	btfsc	3,2
  6675  0CB2  2CBF               	goto	l1867
  6676  0CB3  083C               	movf	___ftadd@exp2,w
  6677  0CB4  023D               	subwf	___ftadd@exp1,w
  6678  0CB5  1803               	skipnc
  6679  0CB6  2CC6               	goto	l1871
  6680  0CB7  033D               	decf	___ftadd@exp1,w
  6681  0CB8  3AFF               	xorlw	255
  6682  0CB9  073C               	addwf	___ftadd@exp2,w
  6683  0CBA  00B7               	movwf	??___ftadd
  6684  0CBB  3019               	movlw	25
  6685  0CBC  0237               	subwf	??___ftadd,w
  6686  0CBD  1C03               	skipc
  6687  0CBE  2CC6               	goto	l1871
  6688  0CBF                     l1867:	
  6689  0CBF  0834               	movf	___ftadd@f2,w
  6690  0CC0  00B1               	movwf	?___ftadd
  6691  0CC1  0835               	movf	___ftadd@f2+1,w
  6692  0CC2  00B2               	movwf	?___ftadd+1
  6693  0CC3  0836               	movf	___ftadd@f2+2,w
  6694  0CC4  00B3               	movwf	?___ftadd+2
  6695  0CC5  0008               	return
  6696  0CC6                     l1871:	
  6697  0CC6  083C               	movf	___ftadd@exp2,w
  6698  0CC7  1903               	btfsc	3,2
  6699  0CC8  0008               	return
  6700  0CC9  083D               	movf	___ftadd@exp1,w
  6701  0CCA  023C               	subwf	___ftadd@exp2,w
  6702  0CCB  1803               	skipnc
  6703  0CCC  2CD5               	goto	l1877
  6704  0CCD  033C               	decf	___ftadd@exp2,w
  6705  0CCE  3AFF               	xorlw	255
  6706  0CCF  073D               	addwf	___ftadd@exp1,w
  6707  0CD0  00B7               	movwf	??___ftadd
  6708  0CD1  3019               	movlw	25
  6709  0CD2  0237               	subwf	??___ftadd,w
  6710  0CD3  1803               	btfsc	3,0
  6711  0CD4  0008               	return
  6712  0CD5                     l1877:	
  6713  0CD5  3006               	movlw	6
  6714  0CD6  00B7               	movwf	??___ftadd
  6715  0CD7  0837               	movf	??___ftadd,w
  6716  0CD8  00BB               	movwf	___ftadd@sign
  6717  0CD9  1BB3               	btfsc	___ftadd@f1+2,7
  6718  0CDA  17BB               	bsf	___ftadd@sign,7
  6719  0CDB  1BB6               	btfsc	___ftadd@f2+2,7
  6720  0CDC  173B               	bsf	___ftadd@sign,6
  6721  0CDD  17B2               	bsf	___ftadd@f1+1,7
  6722  0CDE  30FF               	movlw	255
  6723  0CDF  05B1               	andwf	___ftadd@f1,f
  6724  0CE0  30FF               	movlw	255
  6725  0CE1  05B2               	andwf	___ftadd@f1+1,f
  6726  0CE2  3000               	movlw	0
  6727  0CE3  05B3               	andwf	___ftadd@f1+2,f
  6728  0CE4  17B5               	bsf	___ftadd@f2+1,7
  6729  0CE5  30FF               	movlw	255
  6730  0CE6  05B4               	andwf	___ftadd@f2,f
  6731  0CE7  30FF               	movlw	255
  6732  0CE8  05B5               	andwf	___ftadd@f2+1,f
  6733  0CE9  3000               	movlw	0
  6734  0CEA  05B6               	andwf	___ftadd@f2+2,f
  6735  0CEB  083C               	movf	___ftadd@exp2,w
  6736  0CEC  023D               	subwf	___ftadd@exp1,w
  6737  0CED  1803               	skipnc
  6738  0CEE  2D15               	goto	l1899
  6739  0CEF                     l1889:	
  6740  0CEF  3001               	movlw	1
  6741  0CF0                     u1815:	
  6742  0CF0  1003               	clrc
  6743  0CF1  0DB4               	rlf	___ftadd@f2,f
  6744  0CF2  0DB5               	rlf	___ftadd@f2+1,f
  6745  0CF3  0DB6               	rlf	___ftadd@f2+2,f
  6746  0CF4  3EFF               	addlw	-1
  6747  0CF5  1D03               	skipz
  6748  0CF6  2CF0               	goto	u1815
  6749  0CF7  3001               	movlw	1
  6750  0CF8  02BC               	subwf	___ftadd@exp2,f
  6751  0CF9  083C               	movf	___ftadd@exp2,w
  6752  0CFA  063D               	xorwf	___ftadd@exp1,w
  6753  0CFB  1903               	skipnz
  6754  0CFC  2D10               	goto	l1897
  6755  0CFD  3001               	movlw	1
  6756  0CFE  02BB               	subwf	___ftadd@sign,f
  6757  0CFF  083B               	movf	___ftadd@sign,w
  6758  0D00  3907               	andlw	7
  6759  0D01  1903               	btfsc	3,2
  6760  0D02  2D10               	goto	l1897
  6761  0D03  2CEF               	goto	l1889
  6762  0D04                     l1895:	
  6763  0D04  3001               	movlw	1
  6764  0D05                     u1845:	
  6765  0D05  1003               	clrc
  6766  0D06  0CB3               	rrf	___ftadd@f1+2,f
  6767  0D07  0CB2               	rrf	___ftadd@f1+1,f
  6768  0D08  0CB1               	rrf	___ftadd@f1,f
  6769  0D09  3EFF               	addlw	-1
  6770  0D0A  1D03               	skipz
  6771  0D0B  2D05               	goto	u1845
  6772  0D0C  3001               	movlw	1
  6773  0D0D  00B7               	movwf	??___ftadd
  6774  0D0E  0837               	movf	??___ftadd,w
  6775  0D0F  07BD               	addwf	___ftadd@exp1,f
  6776  0D10                     l1897:	
  6777  0D10  083D               	movf	___ftadd@exp1,w
  6778  0D11  063C               	xorwf	___ftadd@exp2,w
  6779  0D12  1903               	btfsc	3,2
  6780  0D13  2D3E               	goto	l605
  6781  0D14  2D04               	goto	l1895
  6782  0D15                     l1899:	
  6783  0D15  083D               	movf	___ftadd@exp1,w
  6784  0D16  023C               	subwf	___ftadd@exp2,w
  6785  0D17  1803               	skipnc
  6786  0D18  2D3E               	goto	l605
  6787  0D19                     l1901:	
  6788  0D19  3001               	movlw	1
  6789  0D1A                     u1875:	
  6790  0D1A  1003               	clrc
  6791  0D1B  0DB1               	rlf	___ftadd@f1,f
  6792  0D1C  0DB2               	rlf	___ftadd@f1+1,f
  6793  0D1D  0DB3               	rlf	___ftadd@f1+2,f
  6794  0D1E  3EFF               	addlw	-1
  6795  0D1F  1D03               	skipz
  6796  0D20  2D1A               	goto	u1875
  6797  0D21  3001               	movlw	1
  6798  0D22  02BD               	subwf	___ftadd@exp1,f
  6799  0D23  083C               	movf	___ftadd@exp2,w
  6800  0D24  063D               	xorwf	___ftadd@exp1,w
  6801  0D25  1903               	skipnz
  6802  0D26  2D3A               	goto	l1909
  6803  0D27  3001               	movlw	1
  6804  0D28  02BB               	subwf	___ftadd@sign,f
  6805  0D29  083B               	movf	___ftadd@sign,w
  6806  0D2A  3907               	andlw	7
  6807  0D2B  1903               	btfsc	3,2
  6808  0D2C  2D3A               	goto	l1909
  6809  0D2D  2D19               	goto	l1901
  6810  0D2E                     l1907:	
  6811  0D2E  3001               	movlw	1
  6812  0D2F                     u1905:	
  6813  0D2F  1003               	clrc
  6814  0D30  0CB6               	rrf	___ftadd@f2+2,f
  6815  0D31  0CB5               	rrf	___ftadd@f2+1,f
  6816  0D32  0CB4               	rrf	___ftadd@f2,f
  6817  0D33  3EFF               	addlw	-1
  6818  0D34  1D03               	skipz
  6819  0D35  2D2F               	goto	u1905
  6820  0D36  3001               	movlw	1
  6821  0D37  00B7               	movwf	??___ftadd
  6822  0D38  0837               	movf	??___ftadd,w
  6823  0D39  07BC               	addwf	___ftadd@exp2,f
  6824  0D3A                     l1909:	
  6825  0D3A  083D               	movf	___ftadd@exp1,w
  6826  0D3B  063C               	xorwf	___ftadd@exp2,w
  6827  0D3C  1D03               	skipz
  6828  0D3D  2D2E               	goto	l1907
  6829  0D3E                     l605:	
  6830  0D3E  1FBB               	btfss	___ftadd@sign,7
  6831  0D3F  2D50               	goto	l1913
  6832  0D40  30FF               	movlw	255
  6833  0D41  06B1               	xorwf	___ftadd@f1,f
  6834  0D42  30FF               	movlw	255
  6835  0D43  06B2               	xorwf	___ftadd@f1+1,f
  6836  0D44  30FF               	movlw	255
  6837  0D45  06B3               	xorwf	___ftadd@f1+2,f
  6838  0D46  3001               	movlw	1
  6839  0D47  07B1               	addwf	___ftadd@f1,f
  6840  0D48  3000               	movlw	0
  6841  0D49  1803               	skipnc
  6842  0D4A  3001               	movlw	1
  6843  0D4B  07B2               	addwf	___ftadd@f1+1,f
  6844  0D4C  3000               	movlw	0
  6845  0D4D  1803               	skipnc
  6846  0D4E  3001               	movlw	1
  6847  0D4F  07B3               	addwf	___ftadd@f1+2,f
  6848  0D50                     l1913:	
  6849  0D50  1F3B               	btfss	___ftadd@sign,6
  6850  0D51  2D62               	goto	l1917
  6851  0D52  30FF               	movlw	255
  6852  0D53  06B4               	xorwf	___ftadd@f2,f
  6853  0D54  30FF               	movlw	255
  6854  0D55  06B5               	xorwf	___ftadd@f2+1,f
  6855  0D56  30FF               	movlw	255
  6856  0D57  06B6               	xorwf	___ftadd@f2+2,f
  6857  0D58  3001               	movlw	1
  6858  0D59  07B4               	addwf	___ftadd@f2,f
  6859  0D5A  3000               	movlw	0
  6860  0D5B  1803               	skipnc
  6861  0D5C  3001               	movlw	1
  6862  0D5D  07B5               	addwf	___ftadd@f2+1,f
  6863  0D5E  3000               	movlw	0
  6864  0D5F  1803               	skipnc
  6865  0D60  3001               	movlw	1
  6866  0D61  07B6               	addwf	___ftadd@f2+2,f
  6867  0D62                     l1917:	
  6868  0D62  01BB               	clrf	___ftadd@sign
  6869  0D63  0831               	movf	___ftadd@f1,w
  6870  0D64  07B4               	addwf	___ftadd@f2,f
  6871  0D65  0832               	movf	___ftadd@f1+1,w
  6872  0D66  1103               	clrz
  6873  0D67  1803               	skipnc
  6874  0D68  0A32               	incf	___ftadd@f1+1,w
  6875  0D69  1D03               	btfss	3,2
  6876  0D6A  07B5               	addwf	___ftadd@f2+1,f
  6877  0D6B  0833               	movf	___ftadd@f1+2,w
  6878  0D6C  1103               	clrz
  6879  0D6D  1803               	skipnc
  6880  0D6E  0A33               	incf	___ftadd@f1+2,w
  6881  0D6F  1D03               	btfss	3,2
  6882  0D70  07B6               	addwf	___ftadd@f2+2,f
  6883  0D71  1FB6               	btfss	___ftadd@f2+2,7
  6884  0D72  2D85               	goto	l1927
  6885  0D73  30FF               	movlw	255
  6886  0D74  06B4               	xorwf	___ftadd@f2,f
  6887  0D75  30FF               	movlw	255
  6888  0D76  06B5               	xorwf	___ftadd@f2+1,f
  6889  0D77  30FF               	movlw	255
  6890  0D78  06B6               	xorwf	___ftadd@f2+2,f
  6891  0D79  3001               	movlw	1
  6892  0D7A  07B4               	addwf	___ftadd@f2,f
  6893  0D7B  3000               	movlw	0
  6894  0D7C  1803               	skipnc
  6895  0D7D  3001               	movlw	1
  6896  0D7E  07B5               	addwf	___ftadd@f2+1,f
  6897  0D7F  3000               	movlw	0
  6898  0D80  1803               	skipnc
  6899  0D81  3001               	movlw	1
  6900  0D82  07B6               	addwf	___ftadd@f2+2,f
  6901  0D83  01BB               	clrf	___ftadd@sign
  6902  0D84  0ABB               	incf	___ftadd@sign,f
  6903  0D85                     l1927:	
  6904  0D85  0834               	movf	___ftadd@f2,w
  6905  0D86  00A0               	movwf	___ftpack@arg
  6906  0D87  0835               	movf	___ftadd@f2+1,w
  6907  0D88  00A1               	movwf	___ftpack@arg+1
  6908  0D89  0836               	movf	___ftadd@f2+2,w
  6909  0D8A  00A2               	movwf	___ftpack@arg+2
  6910  0D8B  083D               	movf	___ftadd@exp1,w
  6911  0D8C  00B7               	movwf	??___ftadd
  6912  0D8D  0837               	movf	??___ftadd,w
  6913  0D8E  00A3               	movwf	___ftpack@exp
  6914  0D8F  083B               	movf	___ftadd@sign,w
  6915  0D90  00B8               	movwf	??___ftadd+1
  6916  0D91  0838               	movf	??___ftadd+1,w
  6917  0D92  00A4               	movwf	___ftpack@sign
  6918  0D93  160A  118A  2704   	fcall	___ftpack
  6919  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  6920  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  6921  0D98  0820               	movf	?___ftpack,w
  6922  0D99  00B1               	movwf	?___ftadd
  6923  0D9A  0821               	movf	?___ftpack+1,w
  6924  0D9B  00B2               	movwf	?___ftadd+1
  6925  0D9C  0822               	movf	?___ftpack+2,w
  6926  0D9D  00B3               	movwf	?___ftadd+2
  6927  0D9E  0008               	return
  6928  0D9F                     __end_of___ftadd:	
  6929                           
  6930                           	psect	text26
  6931  1704                     __ptext26:	
  6932 ;; *************** function ___ftpack *****************
  6933 ;; Defined at:
  6934 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  arg             3    0[BANK0 ] unsigned um
  6937 ;;  exp             1    3[BANK0 ] unsigned char 
  6938 ;;  sign            1    4[BANK0 ] unsigned char 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  3    0[BANK0 ] float 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6950 ;;      Params:         0       5       0       0       0
  6951 ;;      Locals:         0       0       0       0       0
  6952 ;;      Temps:          0       3       0       0       0
  6953 ;;      Totals:         0       8       0       0       0
  6954 ;;Total ram usage:        8 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    2
  6957 ;; This function calls:
  6958 ;;		Nothing
  6959 ;; This function is called by:
  6960 ;;		___ftadd
  6961 ;;		___ftdiv
  6962 ;;		___ftmul
  6963 ;;		___lbtoft
  6964 ;;		___lltoft
  6965 ;;		___lwtoft
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function ___ftpack
  6971  1704                     ___ftpack:	
  6972                           
  6973                           ;incstack = 0
  6974                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6975  1704  1283               	bcf	3,5	;RP0=0, select bank0
  6976  1705  1303               	bcf	3,6	;RP1=0, select bank0
  6977  1706  0823               	movf	___ftpack@exp,w
  6978  1707  1903               	btfsc	3,2
  6979  1708  2F0E               	goto	l1777
  6980  1709  0822               	movf	___ftpack@arg+2,w
  6981  170A  0421               	iorwf	___ftpack@arg+1,w
  6982  170B  0420               	iorwf	___ftpack@arg,w
  6983  170C  1D03               	skipz
  6984  170D  2F21               	goto	l1783
  6985  170E                     l1777:	
  6986  170E  3000               	movlw	0
  6987  170F  00A0               	movwf	?___ftpack
  6988  1710  3000               	movlw	0
  6989  1711  00A1               	movwf	?___ftpack+1
  6990  1712  3000               	movlw	0
  6991  1713  00A2               	movwf	?___ftpack+2
  6992  1714  0008               	return
  6993  1715                     l1781:	
  6994  1715  3001               	movlw	1
  6995  1716  00A5               	movwf	??___ftpack
  6996  1717  0825               	movf	??___ftpack,w
  6997  1718  07A3               	addwf	___ftpack@exp,f
  6998  1719  3001               	movlw	1
  6999  171A                     u1545:	
  7000  171A  1003               	clrc
  7001  171B  0CA2               	rrf	___ftpack@arg+2,f
  7002  171C  0CA1               	rrf	___ftpack@arg+1,f
  7003  171D  0CA0               	rrf	___ftpack@arg,f
  7004  171E  3EFF               	addlw	-1
  7005  171F  1D03               	skipz
  7006  1720  2F1A               	goto	u1545
  7007  1721                     l1783:	
  7008  1721  30FE               	movlw	254
  7009  1722  0522               	andwf	___ftpack@arg+2,w
  7010  1723  1903               	btfsc	3,2
  7011  1724  2F3C               	goto	l574
  7012  1725  2F15               	goto	l1781
  7013  1726                     l1785:	
  7014  1726  3001               	movlw	1
  7015  1727  00A5               	movwf	??___ftpack
  7016  1728  0825               	movf	??___ftpack,w
  7017  1729  07A3               	addwf	___ftpack@exp,f
  7018  172A  3001               	movlw	1
  7019  172B  07A0               	addwf	___ftpack@arg,f
  7020  172C  3000               	movlw	0
  7021  172D  1803               	skipnc
  7022  172E  3001               	movlw	1
  7023  172F  07A1               	addwf	___ftpack@arg+1,f
  7024  1730  3000               	movlw	0
  7025  1731  1803               	skipnc
  7026  1732  3001               	movlw	1
  7027  1733  07A2               	addwf	___ftpack@arg+2,f
  7028  1734  3001               	movlw	1
  7029  1735                     u1565:	
  7030  1735  1003               	clrc
  7031  1736  0CA2               	rrf	___ftpack@arg+2,f
  7032  1737  0CA1               	rrf	___ftpack@arg+1,f
  7033  1738  0CA0               	rrf	___ftpack@arg,f
  7034  1739  3EFF               	addlw	-1
  7035  173A  1D03               	skipz
  7036  173B  2F35               	goto	u1565
  7037  173C                     l574:	
  7038  173C  30FF               	movlw	255
  7039  173D  0522               	andwf	___ftpack@arg+2,w
  7040  173E  1903               	btfsc	3,2
  7041  173F  2F4F               	goto	l1793
  7042  1740  2F26               	goto	l1785
  7043  1741                     l1795:	
  7044  1741  3002               	movlw	2
  7045  1742  0223               	subwf	___ftpack@exp,w
  7046  1743  1C03               	btfss	3,0
  7047  1744  2F51               	goto	l581
  7048  1745  3001               	movlw	1
  7049  1746  02A3               	subwf	___ftpack@exp,f
  7050  1747  3001               	movlw	1
  7051  1748                     u1585:	
  7052  1748  1003               	clrc
  7053  1749  0DA0               	rlf	___ftpack@arg,f
  7054  174A  0DA1               	rlf	___ftpack@arg+1,f
  7055  174B  0DA2               	rlf	___ftpack@arg+2,f
  7056  174C  3EFF               	addlw	-1
  7057  174D  1D03               	skipz
  7058  174E  2F48               	goto	u1585
  7059  174F                     l1793:	
  7060  174F  1FA1               	btfss	___ftpack@arg+1,7
  7061  1750  2F41               	goto	l1795
  7062  1751                     l581:	
  7063  1751  1823               	btfsc	___ftpack@exp,0
  7064  1752  2F59               	goto	l582
  7065  1753  30FF               	movlw	255
  7066  1754  05A0               	andwf	___ftpack@arg,f
  7067  1755  307F               	movlw	127
  7068  1756  05A1               	andwf	___ftpack@arg+1,f
  7069  1757  30FF               	movlw	255
  7070  1758  05A2               	andwf	___ftpack@arg+2,f
  7071  1759                     l582:	
  7072  1759  1003               	clrc
  7073  175A  0CA3               	rrf	___ftpack@exp,f
  7074  175B  0823               	movf	___ftpack@exp,w
  7075  175C  00A5               	movwf	??___ftpack
  7076  175D  01A6               	clrf	??___ftpack+1
  7077  175E  01A7               	clrf	??___ftpack+2
  7078  175F  3010               	movlw	16
  7079  1760                     u1625:	
  7080  1760  1003               	clrc
  7081  1761  0DA5               	rlf	??___ftpack,f
  7082  1762  0DA6               	rlf	??___ftpack+1,f
  7083  1763  0DA7               	rlf	??___ftpack+2,f
  7084  1764  3EFF               	addlw	-1
  7085  1765  1D03               	skipz
  7086  1766  2F60               	goto	u1625
  7087  1767  0825               	movf	??___ftpack,w
  7088  1768  04A0               	iorwf	___ftpack@arg,f
  7089  1769  0826               	movf	??___ftpack+1,w
  7090  176A  04A1               	iorwf	___ftpack@arg+1,f
  7091  176B  0827               	movf	??___ftpack+2,w
  7092  176C  04A2               	iorwf	___ftpack@arg+2,f
  7093  176D  0824               	movf	___ftpack@sign,w
  7094  176E  1903               	btfsc	3,2
  7095  176F  0008               	return
  7096  1770  17A2               	bsf	___ftpack@arg+2,7
  7097  1771  0008               	return
  7098  1772                     __end_of___ftpack:	
  7099                           
  7100                           	psect	text27
  7101  15C6                     __ptext27:	
  7102 ;; *************** function _LCDWriteString *****************
  7103 ;; Defined at:
  7104 ;;		line 163 in file "lcd.h"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  a               2    5[BANK0 ] PTR const unsigned char 
  7107 ;;		 -> STR_16(10), STR_15(8), STR_14(9), STR_13(8), 
  7108 ;;		 -> STR_12(10), STR_11(8), STR_10(9), STR_9(8), 
  7109 ;;		 -> STR_8(10), STR_7(8), STR_6(9), STR_5(8), 
  7110 ;;		 -> STR_4(10), STR_3(9), STR_2(9), STR_1(9), 
  7111 ;;		 -> displayLCD@temp2(8), displayLCD@temp1(8), 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  i               2   10[BANK0 ] int 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;		None               void
  7116 ;; Registers used:
  7117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7123 ;;      Params:         0       2       0       0       0
  7124 ;;      Locals:         0       2       0       0       0
  7125 ;;      Temps:          0       3       0       0       0
  7126 ;;      Totals:         0       7       0       0       0
  7127 ;;Total ram usage:        7 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    4
  7130 ;; This function calls:
  7131 ;;		_LCDWriteChar
  7132 ;; This function is called by:
  7133 ;;		_displayLCD
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           
  7138                           ;psect for function _LCDWriteString
  7139  15C6                     _LCDWriteString:	
  7140                           
  7141                           ;lcd.h: 165: for(int i=0;a[i]!='\0';i++)
  7142                           
  7143                           ;incstack = 0
  7144                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7145  15C6  1283               	bcf	3,5	;RP0=0, select bank0
  7146  15C7  1303               	bcf	3,6	;RP1=0, select bank0
  7147  15C8  01AA               	clrf	LCDWriteString@i
  7148  15C9  01AB               	clrf	LCDWriteString@i+1
  7149  15CA                     l2189:	
  7150  15CA  082A               	movf	LCDWriteString@i,w
  7151  15CB  0725               	addwf	LCDWriteString@a,w
  7152  15CC  00A8               	movwf	??_LCDWriteString+1
  7153  15CD  0826               	movf	LCDWriteString@a+1,w
  7154  15CE  00A7               	movwf	??_LCDWriteString
  7155  15CF  1803               	skipnc
  7156  15D0  0AA7               	incf	??_LCDWriteString,f
  7157  15D1  1BAA               	btfsc	LCDWriteString@i,7
  7158  15D2  03A7               	decf	??_LCDWriteString,f
  7159  15D3  1283               	bcf	3,5	;RP0=0, select bank0
  7160  15D4  1303               	bcf	3,6	;RP1=0, select bank0
  7161  15D5  0827               	movf	??_LCDWriteString,w
  7162  15D6  00A9               	movwf	??_LCDWriteString+2
  7163  15D7  0829               	movf	??_LCDWriteString+2,w
  7164  15D8  00FF               	movwf	127
  7165  15D9  0828               	movf	??_LCDWriteString+1,w
  7166  15DA  0084               	movwf	4
  7167  15DB  160A  118A  2000  160A  118A  	fcall	stringtab
  7168  15E0  3A00               	xorlw	0
  7169  15E1  1903               	btfsc	3,2
  7170  15E2  0008               	return
  7171                           
  7172                           ;lcd.h: 166: {
  7173                           ;lcd.h: 167: LCDWriteChar(a[i]);
  7174  15E3  082A               	movf	LCDWriteString@i,w
  7175  15E4  0725               	addwf	LCDWriteString@a,w
  7176  15E5  00A8               	movwf	??_LCDWriteString+1
  7177  15E6  0826               	movf	LCDWriteString@a+1,w
  7178  15E7  00A7               	movwf	??_LCDWriteString
  7179  15E8  1803               	skipnc
  7180  15E9  0AA7               	incf	??_LCDWriteString,f
  7181  15EA  1BAA               	btfsc	LCDWriteString@i,7
  7182  15EB  03A7               	decf	??_LCDWriteString,f
  7183  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  7184  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  7185  15EE  0827               	movf	??_LCDWriteString,w
  7186  15EF  00A9               	movwf	??_LCDWriteString+2
  7187  15F0  0829               	movf	??_LCDWriteString+2,w
  7188  15F1  00FF               	movwf	127
  7189  15F2  0828               	movf	??_LCDWriteString+1,w
  7190  15F3  0084               	movwf	4
  7191  15F4  160A  118A  2000  160A  118A  	fcall	stringtab
  7192  15F9  160A  118A  242A  160A  118A  	fcall	_LCDWriteChar
  7193  15FE  3001               	movlw	1
  7194  15FF  1283               	bcf	3,5	;RP0=0, select bank0
  7195  1600  1303               	bcf	3,6	;RP1=0, select bank0
  7196  1601  07AA               	addwf	LCDWriteString@i,f
  7197  1602  1803               	skipnc
  7198  1603  0AAB               	incf	LCDWriteString@i+1,f
  7199  1604  3000               	movlw	0
  7200  1605  07AB               	addwf	LCDWriteString@i+1,f
  7201  1606  2DCA               	goto	l2189
  7202  1607                     __end_of_LCDWriteString:	
  7203                           
  7204                           	psect	text28
  7205  142A                     __ptext28:	
  7206 ;; *************** function _LCDWriteChar *****************
  7207 ;; Defined at:
  7208 ;;		line 131 in file "lcd.h"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  a               1    wreg     unsigned char 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  a               1    4[BANK0 ] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;		None               void
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, pclath, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7222 ;;      Params:         0       0       0       0       0
  7223 ;;      Locals:         0       1       0       0       0
  7224 ;;      Temps:          0       2       0       0       0
  7225 ;;      Totals:         0       3       0       0       0
  7226 ;;Total ram usage:        3 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    3
  7229 ;; This function calls:
  7230 ;;		_LCDSetBits
  7231 ;;		_pulse
  7232 ;; This function is called by:
  7233 ;;		_LCDWriteString
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _LCDWriteChar
  7239  142A                     _LCDWriteChar:	
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
  7243                           ;LCDWriteChar@a stored from wreg
  7244  142A  1283               	bcf	3,5	;RP0=0, select bank0
  7245  142B  1303               	bcf	3,6	;RP1=0, select bank0
  7246  142C  00A4               	movwf	LCDWriteChar@a
  7247                           
  7248                           ;lcd.h: 133: LCDSetBits(a);
  7249  142D  0824               	movf	LCDWriteChar@a,w
  7250  142E  160A  118A  2399  160A  118A  	fcall	_LCDSetBits
  7251                           
  7252                           ;lcd.h: 134: RB0 = 1;
  7253  1433  1283               	bcf	3,5	;RP0=0, select bank0
  7254  1434  1303               	bcf	3,6	;RP1=0, select bank0
  7255  1435  1406               	bsf	6,0	;volatile
  7256                           
  7257                           ;lcd.h: 136: pulse();
  7258  1436  160A  118A  2378  160A  118A  	fcall	_pulse
  7259                           
  7260                           ;lcd.h: 137: a = a<<4;
  7261  143B  1283               	bcf	3,5	;RP0=0, select bank0
  7262  143C  1303               	bcf	3,6	;RP1=0, select bank0
  7263  143D  0824               	movf	LCDWriteChar@a,w
  7264  143E  00A2               	movwf	??_LCDWriteChar
  7265  143F  3003               	movlw	3
  7266  1440                     u1655:	
  7267  1440  1003               	clrc
  7268  1441  0DA2               	rlf	??_LCDWriteChar,f
  7269  1442  3EFF               	addlw	-1
  7270  1443  1D03               	skipz
  7271  1444  2C40               	goto	u1655
  7272  1445  1003               	clrc
  7273  1446  0D22               	rlf	??_LCDWriteChar,w
  7274  1447  00A3               	movwf	??_LCDWriteChar+1
  7275  1448  0823               	movf	??_LCDWriteChar+1,w
  7276  1449  00A4               	movwf	LCDWriteChar@a
  7277                           
  7278                           ;lcd.h: 138: LCDSetBits(a);
  7279  144A  0824               	movf	LCDWriteChar@a,w
  7280  144B  160A  118A  2399  160A  118A  	fcall	_LCDSetBits
  7281                           
  7282                           ;lcd.h: 139: pulse();
  7283  1450  160A  118A  2378   	fcall	_pulse
  7284  1453  0008               	return
  7285  1454                     __end_of_LCDWriteChar:	
  7286                           
  7287                           	psect	text29
  7288  1516                     __ptext29:	
  7289 ;; *************** function _LCDSetCursor *****************
  7290 ;; Defined at:
  7291 ;;		line 146 in file "lcd.h"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  a               1    wreg     unsigned char 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  a               1    5[BANK0 ] unsigned char 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;		None               void
  7298 ;; Registers used:
  7299 ;;		wreg, status,2, status,0, pclath, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7305 ;;      Params:         0       0       0       0       0
  7306 ;;      Locals:         0       1       0       0       0
  7307 ;;      Temps:          0       2       0       0       0
  7308 ;;      Totals:         0       3       0       0       0
  7309 ;;Total ram usage:        3 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    4
  7312 ;; This function calls:
  7313 ;;		_LCD4bitCmd
  7314 ;; This function is called by:
  7315 ;;		_displayLCD
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           
  7320                           ;psect for function _LCDSetCursor
  7321  1516                     _LCDSetCursor:	
  7322                           
  7323                           ;incstack = 0
  7324                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
  7325                           ;LCDSetCursor@a stored from wreg
  7326  1516  1283               	bcf	3,5	;RP0=0, select bank0
  7327  1517  1303               	bcf	3,6	;RP1=0, select bank0
  7328  1518  00A5               	movwf	LCDSetCursor@a
  7329                           
  7330                           ;lcd.h: 148: if (a & 16)
  7331  1519  1E25               	btfss	LCDSetCursor@a,4
  7332  151A  2D35               	goto	l2177
  7333                           
  7334                           ;lcd.h: 149: {
  7335                           ;lcd.h: 150: LCD4bitCmd(0xC0);
  7336  151B  30C0               	movlw	192
  7337  151C  160A  118A  2388  160A  118A  	fcall	_LCD4bitCmd
  7338                           
  7339                           ;lcd.h: 151: a = a << 4;
  7340  1521  1283               	bcf	3,5	;RP0=0, select bank0
  7341  1522  1303               	bcf	3,6	;RP1=0, select bank0
  7342  1523  0825               	movf	LCDSetCursor@a,w
  7343  1524  00A3               	movwf	??_LCDSetCursor
  7344  1525  3003               	movlw	3
  7345  1526                     u2465:	
  7346  1526  1003               	clrc
  7347  1527  0DA3               	rlf	??_LCDSetCursor,f
  7348  1528  3EFF               	addlw	-1
  7349  1529  1D03               	skipz
  7350  152A  2D26               	goto	u2465
  7351  152B  1003               	clrc
  7352  152C  0D23               	rlf	??_LCDSetCursor,w
  7353  152D  00A4               	movwf	??_LCDSetCursor+1
  7354  152E  0824               	movf	??_LCDSetCursor+1,w
  7355  152F  00A5               	movwf	LCDSetCursor@a
  7356                           
  7357                           ;lcd.h: 152: LCD4bitCmd(a);
  7358  1530  0825               	movf	LCDSetCursor@a,w
  7359  1531  160A  118A  2388   	fcall	_LCD4bitCmd
  7360                           
  7361                           ;lcd.h: 153: }
  7362  1534  0008               	return
  7363  1535                     l2177:	
  7364                           
  7365                           ;lcd.h: 155: else
  7366                           ;lcd.h: 156: {
  7367                           ;lcd.h: 157: LCD4bitCmd(0x80);
  7368  1535  3080               	movlw	128
  7369  1536  160A  118A  2388  160A  118A  	fcall	_LCD4bitCmd
  7370                           
  7371                           ;lcd.h: 158: a = a << 4;
  7372  153B  1283               	bcf	3,5	;RP0=0, select bank0
  7373  153C  1303               	bcf	3,6	;RP1=0, select bank0
  7374  153D  0825               	movf	LCDSetCursor@a,w
  7375  153E  00A3               	movwf	??_LCDSetCursor
  7376  153F  3003               	movlw	3
  7377  1540                     u2475:	
  7378  1540  1003               	clrc
  7379  1541  0DA3               	rlf	??_LCDSetCursor,f
  7380  1542  3EFF               	addlw	-1
  7381  1543  1D03               	skipz
  7382  1544  2D40               	goto	u2475
  7383  1545  1003               	clrc
  7384  1546  0D23               	rlf	??_LCDSetCursor,w
  7385  1547  00A4               	movwf	??_LCDSetCursor+1
  7386  1548  0824               	movf	??_LCDSetCursor+1,w
  7387  1549  00A5               	movwf	LCDSetCursor@a
  7388                           
  7389                           ;lcd.h: 159: LCD4bitCmd(a);
  7390  154A  0825               	movf	LCDSetCursor@a,w
  7391  154B  160A  118A  2388   	fcall	_LCD4bitCmd
  7392  154E  0008               	return
  7393  154F                     __end_of_LCDSetCursor:	
  7394                           
  7395                           	psect	text30
  7396  1388                     __ptext30:	
  7397 ;; *************** function _LCD4bitCmd *****************
  7398 ;; Defined at:
  7399 ;;		line 123 in file "lcd.h"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  a               1    wreg     unsigned char 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  a               1    2[BANK0 ] unsigned char 
  7404 ;; Return value:  Size  Location     Type
  7405 ;;		None               void
  7406 ;; Registers used:
  7407 ;;		wreg, status,2, status,0, pclath, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7413 ;;      Params:         0       0       0       0       0
  7414 ;;      Locals:         0       1       0       0       0
  7415 ;;      Temps:          0       0       0       0       0
  7416 ;;      Totals:         0       1       0       0       0
  7417 ;;Total ram usage:        1 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    3
  7420 ;; This function calls:
  7421 ;;		_LCDSetBits
  7422 ;;		_pulse
  7423 ;; This function is called by:
  7424 ;;		_LCDSetCursor
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           
  7429                           ;psect for function _LCD4bitCmd
  7430  1388                     _LCD4bitCmd:	
  7431                           
  7432                           ;incstack = 0
  7433                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
  7434                           ;LCD4bitCmd@a stored from wreg
  7435  1388  1283               	bcf	3,5	;RP0=0, select bank0
  7436  1389  1303               	bcf	3,6	;RP1=0, select bank0
  7437  138A  00A2               	movwf	LCD4bitCmd@a
  7438                           
  7439                           ;lcd.h: 125: LCDSetBits(a);
  7440  138B  0822               	movf	LCD4bitCmd@a,w
  7441  138C  160A  118A  2399  160A  118A  	fcall	_LCDSetBits
  7442                           
  7443                           ;lcd.h: 126: RB0 = 0;
  7444  1391  1283               	bcf	3,5	;RP0=0, select bank0
  7445  1392  1303               	bcf	3,6	;RP1=0, select bank0
  7446  1393  1006               	bcf	6,0	;volatile
  7447                           
  7448                           ;lcd.h: 127: RD7 = 0;
  7449  1394  1388               	bcf	8,7	;volatile
  7450                           
  7451                           ;lcd.h: 128: pulse();
  7452  1395  160A  118A  2378   	fcall	_pulse
  7453  1398  0008               	return
  7454  1399                     __end_of_LCD4bitCmd:	
  7455                           
  7456                           	psect	text31
  7457  1378                     __ptext31:	
  7458 ;; *************** function _pulse *****************
  7459 ;; Defined at:
  7460 ;;		line 102 in file "lcd.h"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;		None
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;		None
  7465 ;; Return value:  Size  Location     Type
  7466 ;;		None               void
  7467 ;; Registers used:
  7468 ;;		wreg
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7474 ;;      Params:         0       0       0       0       0
  7475 ;;      Locals:         0       0       0       0       0
  7476 ;;      Temps:          0       2       0       0       0
  7477 ;;      Totals:         0       2       0       0       0
  7478 ;;Total ram usage:        2 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    2
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		_initLCD
  7485 ;;		_LCDcmd
  7486 ;;		_LCD4bitCmd
  7487 ;;		_LCDWriteChar
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           
  7492                           ;psect for function _pulse
  7493  1378                     _pulse:	
  7494                           
  7495                           ;lcd.h: 104: RB1 = 1;
  7496                           
  7497                           ;incstack = 0
  7498                           ; Regs used in _pulse: [wreg]
  7499  1378  1283               	bcf	3,5	;RP0=0, select bank0
  7500  1379  1303               	bcf	3,6	;RP1=0, select bank0
  7501  137A  1486               	bsf	6,1	;volatile
  7502                           
  7503                           ;lcd.h: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  7504  137B  3003               	movlw	3
  7505  137C  00A1               	movwf	??_pulse+1
  7506  137D  3097               	movlw	151
  7507  137E  00A0               	movwf	??_pulse
  7508  137F                     u3097:	
  7509  137F  0BA0               	decfsz	??_pulse,f
  7510  1380  2B7F               	goto	u3097
  7511  1381  0BA1               	decfsz	??_pulse+1,f
  7512  1382  2B7F               	goto	u3097
  7513  1383  2B84               	nop2
  7514                           
  7515                           ;lcd.h: 106: RB1 = 0;
  7516  1384  1283               	bcf	3,5	;RP0=0, select bank0
  7517  1385  1303               	bcf	3,6	;RP1=0, select bank0
  7518  1386  1086               	bcf	6,1	;volatile
  7519  1387  0008               	return
  7520  1388                     __end_of_pulse:	
  7521                           
  7522                           	psect	text32
  7523  1399                     __ptext32:	
  7524 ;; *************** function _LCDSetBits *****************
  7525 ;; Defined at:
  7526 ;;		line 79 in file "lcd.h"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  a               1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  a               1    0[BANK0 ] unsigned char 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;		None               void
  7533 ;; Registers used:
  7534 ;;		wreg
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7540 ;;      Params:         0       0       0       0       0
  7541 ;;      Locals:         0       1       0       0       0
  7542 ;;      Temps:          0       0       0       0       0
  7543 ;;      Totals:         0       1       0       0       0
  7544 ;;Total ram usage:        1 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    2
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_initLCD
  7551 ;;		_LCDcmd
  7552 ;;		_LCD4bitCmd
  7553 ;;		_LCDWriteChar
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           
  7558                           ;psect for function _LCDSetBits
  7559  1399                     _LCDSetBits:	
  7560                           
  7561                           ;incstack = 0
  7562                           ; Regs used in _LCDSetBits: [wreg]
  7563                           ;LCDSetBits@a stored from wreg
  7564  1399  1283               	bcf	3,5	;RP0=0, select bank0
  7565  139A  1303               	bcf	3,6	;RP1=0, select bank0
  7566  139B  00A0               	movwf	LCDSetBits@a
  7567                           
  7568                           ;lcd.h: 81: if(a & 16)
  7569  139C  1E20               	btfss	LCDSetBits@a,4
  7570  139D  2BA0               	goto	l118
  7571                           
  7572                           ;lcd.h: 82: RB2 = 1;
  7573  139E  1506               	bsf	6,2	;volatile
  7574  139F  2BA1               	goto	l119
  7575  13A0                     l118:	
  7576                           
  7577                           ;lcd.h: 83: else
  7578                           ;lcd.h: 84: RB2 = 0;
  7579  13A0  1106               	bcf	6,2	;volatile
  7580  13A1                     l119:	
  7581                           
  7582                           ;lcd.h: 86: if(a & 32)
  7583  13A1  1EA0               	btfss	LCDSetBits@a,5
  7584  13A2  2BA5               	goto	l120
  7585                           
  7586                           ;lcd.h: 87: RB3 = 1;
  7587  13A3  1586               	bsf	6,3	;volatile
  7588  13A4  2BA6               	goto	l121
  7589  13A5                     l120:	
  7590                           
  7591                           ;lcd.h: 88: else
  7592                           ;lcd.h: 89: RB3 = 0;
  7593  13A5  1186               	bcf	6,3	;volatile
  7594  13A6                     l121:	
  7595                           
  7596                           ;lcd.h: 91: if(a & 64)
  7597  13A6  1F20               	btfss	LCDSetBits@a,6
  7598  13A7  2BAA               	goto	l122
  7599                           
  7600                           ;lcd.h: 92: RB4 = 1;
  7601  13A8  1606               	bsf	6,4	;volatile
  7602  13A9  2BAB               	goto	l123
  7603  13AA                     l122:	
  7604                           
  7605                           ;lcd.h: 93: else
  7606                           ;lcd.h: 94: RB4 = 0;
  7607  13AA  1206               	bcf	6,4	;volatile
  7608  13AB                     l123:	
  7609                           
  7610                           ;lcd.h: 96: if(a & 128)
  7611  13AB  1FA0               	btfss	LCDSetBits@a,7
  7612  13AC  2BAF               	goto	l124
  7613                           
  7614                           ;lcd.h: 97: RB5 = 1;
  7615  13AD  1686               	bsf	6,5	;volatile
  7616  13AE  0008               	return
  7617  13AF                     l124:	
  7618                           
  7619                           ;lcd.h: 98: else
  7620                           ;lcd.h: 99: RB5 = 0;
  7621  13AF  1286               	bcf	6,5	;volatile
  7622  13B0  0008               	return
  7623  13B1                     __end_of_LCDSetBits:	
  7624                           
  7625                           	psect	text33
  7626  13C9                     __ptext33:	
  7627 ;; *************** function _currentGainInit *****************
  7628 ;; Defined at:
  7629 ;;		line 274 in file "PIC16F917 Battery Management.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;  gain            1    wreg     unsigned char 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  gain            1    0[BANK0 ] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;		None               void
  7636 ;; Registers used:
  7637 ;;		wreg, status,2, status,0
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7643 ;;      Params:         0       0       0       0       0
  7644 ;;      Locals:         0       1       0       0       0
  7645 ;;      Temps:          0       0       0       0       0
  7646 ;;      Totals:         0       1       0       0       0
  7647 ;;Total ram usage:        1 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    2
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_main
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           
  7658                           ;psect for function _currentGainInit
  7659  13C9                     _currentGainInit:	
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _currentGainInit: [wreg+status,2+status,0]
  7663                           ;currentGainInit@gain stored from wreg
  7664  13C9  1283               	bcf	3,5	;RP0=0, select bank0
  7665  13CA  1303               	bcf	3,6	;RP1=0, select bank0
  7666  13CB  00A0               	movwf	currentGainInit@gain
  7667                           
  7668                           ;PIC16F917 Battery Management.c: 276: if ( gain >= 100 )
  7669  13CC  3064               	movlw	100
  7670  13CD  0220               	subwf	currentGainInit@gain,w
  7671  13CE  1C03               	skipc
  7672  13CF  2BD9               	goto	l304
  7673                           
  7674                           ;PIC16F917 Battery Management.c: 277: {
  7675                           ;PIC16F917 Battery Management.c: 278: RA6 = 1;
  7676  13D0  1705               	bsf	5,6	;volatile
  7677                           
  7678                           ;PIC16F917 Battery Management.c: 280: if ( gain == 100 )
  7679  13D1  3064               	movlw	100
  7680  13D2  0620               	xorwf	currentGainInit@gain,w
  7681  13D3  1D03               	btfss	3,2
  7682  13D4  2BD7               	goto	l305
  7683                           
  7684                           ;PIC16F917 Battery Management.c: 281: {
  7685                           ;PIC16F917 Battery Management.c: 282: RA7 = 0;
  7686  13D5  1385               	bcf	5,7	;volatile
  7687                           
  7688                           ;PIC16F917 Battery Management.c: 284: }
  7689                           
  7690                           ;PIC16F917 Battery Management.c: 283: return;
  7691  13D6  0008               	return
  7692  13D7                     l305:	
  7693                           
  7694                           ;PIC16F917 Battery Management.c: 285: else
  7695                           ;PIC16F917 Battery Management.c: 286: {
  7696                           ;PIC16F917 Battery Management.c: 287: RA7 = 1;
  7697  13D7  1785               	bsf	5,7	;volatile
  7698                           
  7699                           ;PIC16F917 Battery Management.c: 289: }
  7700                           ;PIC16F917 Battery Management.c: 291: }
  7701                           
  7702                           ;PIC16F917 Battery Management.c: 288: return;
  7703  13D8  0008               	return
  7704  13D9                     l304:	
  7705                           
  7706                           ;PIC16F917 Battery Management.c: 293: else
  7707                           ;PIC16F917 Battery Management.c: 294: {
  7708                           ;PIC16F917 Battery Management.c: 295: RA6 = 0;
  7709  13D9  1305               	bcf	5,6	;volatile
  7710                           
  7711                           ;PIC16F917 Battery Management.c: 297: if ( gain == 25 )
  7712  13DA  3019               	movlw	25
  7713  13DB  0620               	xorwf	currentGainInit@gain,w
  7714  13DC  1D03               	btfss	3,2
  7715  13DD  2BE0               	goto	l309
  7716                           
  7717                           ;PIC16F917 Battery Management.c: 298: {
  7718                           ;PIC16F917 Battery Management.c: 299: RA7 = 0;
  7719  13DE  1385               	bcf	5,7	;volatile
  7720                           
  7721                           ;PIC16F917 Battery Management.c: 301: }
  7722                           
  7723                           ;PIC16F917 Battery Management.c: 300: return;
  7724  13DF  0008               	return
  7725  13E0                     l309:	
  7726                           
  7727                           ;PIC16F917 Battery Management.c: 302: else
  7728                           ;PIC16F917 Battery Management.c: 303: {
  7729                           ;PIC16F917 Battery Management.c: 304: RA7 = 1;
  7730  13E0  1785               	bsf	5,7	;volatile
  7731                           
  7732                           ;PIC16F917 Battery Management.c: 305: return;
  7733  13E1  0008               	return
  7734  13E2                     __end_of_currentGainInit:	
  7735                           
  7736                           	psect	text34
  7737  07EA                     __ptext34:	
  7738 ;; *************** function _isr *****************
  7739 ;; Defined at:
  7740 ;;		line 258 in file "setup.h"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;		None
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;		None               void
  7747 ;; Registers used:
  7748 ;;		wreg, status,2, status,0, pclath, cstack
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7754 ;;      Params:         0       0       0       0       0
  7755 ;;      Locals:         0       0       0       0       0
  7756 ;;      Temps:          4       0       0       0       0
  7757 ;;      Totals:         4       0       0       0       0
  7758 ;;Total ram usage:        4 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    1
  7761 ;; This function calls:
  7762 ;;		_isrTimer0
  7763 ;; This function is called by:
  7764 ;;		Interrupt level 1
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _isr
  7770  07EA                     _isr:	
  7771                           
  7772                           ;setup.h: 260: isrTimer0();
  7773  07EA  160A  118A  2400  120A  118A  	fcall	_isrTimer0
  7774  07EF  0877               	movf	??_isr+3,w
  7775  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  7776  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  7777  07F2  00FF               	movwf	127
  7778  07F3  0876               	movf	??_isr+2,w
  7779  07F4  008A               	movwf	10
  7780  07F5  0875               	movf	??_isr+1,w
  7781  07F6  0084               	movwf	4
  7782  07F7  0E74               	swapf	??_isr^(0+-128),w
  7783  07F8  0083               	movwf	3
  7784  07F9  0EFE               	swapf	126,f
  7785  07FA  0E7E               	swapf	126,w
  7786  07FB  0009               	retfie
  7787  07FC                     __end_of_isr:	
  7788                           
  7789                           	psect	intentry
  7790  0004                     __pintentry:	
  7791                           ;incstack = 0
  7792                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  7793                           
  7794  0004                     interrupt_function:	
  7795  007E                     saved_w	set	btemp
  7796  0004  00FE               	movwf	btemp
  7797  0005  0E03               	swapf	3,w
  7798  0006  00F4               	movwf	??_isr
  7799  0007  0804               	movf	4,w
  7800  0008  00F5               	movwf	??_isr+1
  7801  0009  080A               	movf	10,w
  7802  000A  00F6               	movwf	??_isr+2
  7803  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7804  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7805  000D  087F               	movf	btemp+1,w
  7806  000E  00F7               	movwf	??_isr+3
  7807  000F  120A  118A  2FEA   	ljmp	_isr
  7808                           
  7809                           	psect	text35
  7810  1400                     __ptext35:	
  7811 ;; *************** function _isrTimer0 *****************
  7812 ;; Defined at:
  7813 ;;		line 64 in file "timer0.h"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7827 ;;      Params:         0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0
  7829 ;;      Temps:          4       0       0       0       0
  7830 ;;      Totals:         4       0       0       0       0
  7831 ;;Total ram usage:        4 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; This function calls:
  7834 ;;		Nothing
  7835 ;; This function is called by:
  7836 ;;		_isr
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           
  7841                           ;psect for function _isrTimer0
  7842  1400                     _isrTimer0:	
  7843                           
  7844                           ;timer0.h: 66: if (INTCONbits.T0IF == 1 && INTCONbits.T0IE == 1)
  7845                           
  7846                           ;incstack = 0
  7847                           ; Regs used in _isrTimer0: [wreg]
  7848  1400  1D0B               	btfss	11,2	;volatile
  7849  1401  0008               	return
  7850  1402  1E8B               	btfss	11,5	;volatile
  7851  1403  0008               	return
  7852                           
  7853                           ;timer0.h: 67: {
  7854                           ;timer0.h: 70: time = time + 255;
  7855  1404  30FF               	movlw	255
  7856  1405  00F0               	movwf	??_isrTimer0
  7857  1406  3000               	movlw	0
  7858  1407  00F1               	movwf	??_isrTimer0+1
  7859  1408  3000               	movlw	0
  7860  1409  00F2               	movwf	??_isrTimer0+2
  7861  140A  3000               	movlw	0
  7862  140B  00F3               	movwf	??_isrTimer0+3
  7863  140C  1683               	bsf	3,5	;RP0=1, select bank1
  7864  140D  1303               	bcf	3,6	;RP1=0, select bank1
  7865  140E  085F               	movf	_time^(0+128),w
  7866  140F  07F0               	addwf	??_isrTimer0,f
  7867  1410  0860               	movf	(_time+1)^(0+128),w
  7868  1411  1803               	skipnc
  7869  1412  0F60               	incfsz	(_time+1)^(0+128),w
  7870  1413  2C15               	goto	u266_20
  7871  1414  2C16               	goto	u266_21
  7872  1415                     u266_20:	
  7873  1415  07F1               	addwf	??_isrTimer0+1,f
  7874  1416                     u266_21:	
  7875  1416  0861               	movf	(_time+2)^(0+128),w
  7876  1417  1803               	skipnc
  7877  1418  0F61               	incfsz	(_time+2)^(0+128),w
  7878  1419  2C1B               	goto	u266_22
  7879  141A  2C1C               	goto	u266_23
  7880  141B                     u266_22:	
  7881  141B  07F2               	addwf	??_isrTimer0+2,f
  7882  141C                     u266_23:	
  7883  141C  0862               	movf	(_time+3)^(0+128),w
  7884  141D  1803               	skipnc
  7885  141E  0A62               	incf	(_time+3)^(0+128),w
  7886  141F  07F3               	addwf	??_isrTimer0+3,f
  7887  1420  0873               	movf	??_isrTimer0+3,w
  7888  1421  00E2               	movwf	(_time+3)^(0+128)
  7889  1422  0872               	movf	??_isrTimer0+2,w
  7890  1423  00E1               	movwf	(_time+2)^(0+128)
  7891  1424  0871               	movf	??_isrTimer0+1,w
  7892  1425  00E0               	movwf	(_time+1)^(0+128)
  7893  1426  0870               	movf	??_isrTimer0,w
  7894  1427  00DF               	movwf	_time^(0+128)
  7895                           
  7896                           ;timer0.h: 72: INTCONbits.T0IF = 0;
  7897  1428  110B               	bcf	11,2	;volatile
  7898  1429  0008               	return
  7899  142A                     __end_of_isrTimer0:	
  7900  007E                     btemp	set	126	;btemp
  7901  007E                     wtemp	set	126
  7902  007E                     wtemp0	set	126
  7903  0080                     wtemp1	set	128
  7904  0082                     wtemp2	set	130
  7905  0084                     wtemp3	set	132
  7906  0086                     wtemp4	set	134
  7907  0088                     wtemp5	set	136
  7908  007F                     wtemp6	set	127
  7909  007E                     ttemp	set	126
  7910  007E                     ttemp0	set	126
  7911  0081                     ttemp1	set	129
  7912  0084                     ttemp2	set	132
  7913  0087                     ttemp3	set	135
  7914  007F                     ttemp4	set	127
  7915  007E                     ltemp	set	126
  7916  007E                     ltemp0	set	126
  7917  0082                     ltemp1	set	130
  7918  0086                     ltemp2	set	134
  7919  0080                     ltemp3	set	128


Data Sizes:
    Strings     95
    Constant    28
    Data        7
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80     45      78
    BANK3            96      0      48
    BANK2            80      0       0

Pointer List with Targets:

    floatToASCII@returnVal	PTR unsigned char  size(1) Largest target is 8
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 

    LCDWriteString@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_16(CODE[10]), STR_15(CODE[8]), STR_14(CODE[9]), STR_13(CODE[8]), 
		 -> STR_12(CODE[10]), STR_11(CODE[8]), STR_10(CODE[9]), STR_9(CODE[8]), 
		 -> STR_8(CODE[10]), STR_7(CODE[8]), STR_6(CODE[9]), STR_5(CODE[8]), 
		 -> STR_4(CODE[10]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 
		 -> displayLCD@temp2(BANK1[8]), displayLCD@temp1(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrTimer0

Critical Paths under _main in BANK0

    _main->_sampleBatteryCells
    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    _initController->_initLCD
    _handlePB->_stopWatch
    _stopWatch->___fttol
    _initLCD->_LCDcmd
    _LCDcmd->_pulse
    _displayLCD->_floatToASCII
    _floatToASCII->___fttol
    ___lltoft->___ftpack
    ___fttol->___ftdiv
    ___ftneg->___lltoft
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    _LCDWriteString->_LCDWriteChar
    _LCDWriteChar->_pulse
    _LCDSetCursor->_LCD4bitCmd
    _LCD4bitCmd->_pulse

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_displayLCD
    _handlePB->_stopWatch
    _displayLCD->_floatToASCII

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   82483
                                             43 BANK1      2     2      0
                    _currentGainInit
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      4     4      0   12044
                                             62 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        9     9      0   14284
                                             62 BANK0      9     9      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2170
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  38    38      0   24347
                                             72 BANK0      8     8      0
                            ___ftadd
                            ___ftmul
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                       10     7      3   12135
                                             62 BANK0     10     7      3
                            ___ftadd (ARG)
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2      92
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2362
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     802
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     243
                            _initADC
                            _initLCD
                          _timeSetup
 ---------------------------------------------------------------------------------
 (2) _timeSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             3     3      0    9095
                                             17 BANK1      3     3      0
                            _initLCD
                          _stopWatch
 ---------------------------------------------------------------------------------
 (2) _stopWatch                                           21    17      4    8852
                                             76 BANK0      4     0      4
                                              0 BANK1     17    17      0
                            ___ftmul
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     243
                                              5 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                          22    20      2   22404
                                             21 BANK1     22    20      2
                       _LCDSetCursor
                     _LCDWriteString
                       _floatToASCII
 ---------------------------------------------------------------------------------
 (2) _floatToASCII                                        25    21      4   19925
                                             76 BANK0      4     0      4
                                              0 BANK1     21    21      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                           ___lltoft
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     476
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2601
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     508
                                             62 BANK0     14    10      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     173
                                             14 BANK0      3     0      3
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    5674
                                             30 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3068
                                             46 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4882
                                             17 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       7     5      2    1781
                                              5 BANK0      7     5      2
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     155
                                              2 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     222
                                              3 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     110
                                              2 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _currentGainInit                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0       0
                                              4 COMMON     4     4      0
                          _isrTimer0
 ---------------------------------------------------------------------------------
 (6) _isrTimer0                                            4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _currentGainInit
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     _floatToASCII
       ___ftadd
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
   _handlePB
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _stopWatch
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
     _timeSetup
   _sampleBatteryCells
     ___ftadd
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _sampleVoltage
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _analogRead (ARG)
   _sampleCurrent
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
     _analogRead

 _isr (ROOT)
   _isrTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      30       8       50.0%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2D      4E       6       97.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DC      12        0.0%
ABS                  0      0      DC      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jul 12 14:36:36 2015

                ?_LCDSetBits 0070                            pc 0002                  __CFG_CP$OFF 0000  
                         fsr 0004                 ___ftadd@exp1 003D                 ___ftadd@exp2 003C  
               ___ftadd@sign 003B                          l120 13A5                          l121 13A6  
                        l122 13AA                          l123 13AB                          l124 13AF  
                        l301 0FFF                          l118 13A0                          l119 13A1  
                        l223 1566                          l304 13D9                          l305 13D7  
                        l316 1661                          l309 13E0                          l605 0D3E  
                        l581 1751                          l582 1759                          l574 173C  
                        l665 17E6                          _RB0 0030                          _RB1 0031  
                        _RC0 0038                          _RB2 0032                          _RC1 0039  
                        _RB3 0033                          _RD0 0040                          _RC2 003A  
                        _RB4 0034                          _RA6 002E                          _RD1 0041  
                        _RC3 003B                          _RB5 0035                          _RA7 002F  
                        _RD2 0042                          _RD4 0044                          _RD5 0045  
                        _RD7 0047                 __CFG_CPD$OFF 0000                ?_floatToASCII 006C  
                        _isr 07EA                          fsr0 0004                          indf 0000  
              ?_LCDSetCursor 0070                 __CFG_IESO$ON 0000                 ___ftdiv@cntr 0058  
               ___ftdiv@sign 005D                         l2001 0B3A                         l2013 0B62  
                       l2101 1485                         l2103 1497                         l2009 0B52  
                       l2211 0442                         l2037 178C                         l2205 0428  
                       l2125 15B6                         l2117 1592                         l2063 17DB  
                       l2055 17BE                         l2223 0585                         l2119 15A0  
                       l2065 17E9                         l2057 17CE                         l2081 16C6  
                       l2225 0589                         l2129 15C1                         l2315 0855  
                       l2411 09A1                         l2069 17F7                         l2093 16FB  
                       l2245 05A3                         l2309 082E                         l2405 097C  
                       l2079 16B6                         l2255 06E6                         l2247 06E1  
                       l2423 0727                         l2177 1535                         l2089 16EE  
                       l2257 06FF                         l2273 0B9C                         l2531 0E57  
                       l2189 15CA                         l1901 0D19                         l2517 0DCE  
                       l2277 0BBC                         l2509 1698                         l2429 074C  
                       l2287 0C82                         l2631 14BC                         l1913 0D50  
                       l2545 0EE0                         l2289 0C8C                         l1907 0D2E  
                       l1781 1715                         l1917 0D62                         l1909 0D3A  
                       l1853 1627                         l1783 1721                         l1927 0D85  
                       l1871 0CC6                         l1943 0A33                         l2559 0F65  
                       l2575 0FEA                         l1793 174F                         l1785 1726  
                       l1777 170E                         l1937 0A1D                         l1849 1611  
                       l1795 1741                         l1867 0CBF                         l2499 167D  
                       l1877 0CD5                         l1965 0A97                         l1957 0A78  
                       l1895 0D04                         l1897 0D10                         l1889 0CEF  
                       l1985 0AEB                         l1899 0D15                         l1979 0AD5  
                       l2699 0FF1                         l1997 0B2A                         ?_isr 0070  
                       STR_1 1049                         STR_2 1040                         STR_3 1052  
                       STR_4 102C                         STR_5 105B                         STR_6 1040  
                       STR_7 1063                         STR_8 1036                         STR_9 106B  
                       u2005 0A79                         u2015 0A8A                         u2025 0A98  
                       u2105 0B3B                         u2115 0B43                         u2205 1793  
                       u3007 08BB                         u2065 0AF7                         u2305 16BA  
                       u3017 08CE                         u2155 0B63                         u2075 0B09  
                       u2235 17BF                         u3027 08DD                         u2165 0B6B  
                       u2325 16C8                         u3037 08ED                         u2335 16DD  
                       u3047 08FD                         u2415 15A1                         u2600 0BE5  
                       u1625 1760                         u1545 171A                         u2265 17DD  
                       u2345 16EF                         u1705 1631                         u3057 0919  
                       u2601 0BE6                         u2425 15AD                         u2610 0BF7  
                       u2602 0BEB                         u2531 051A                         u2515 0426  
                       u3067 092A                         u2611 0BF8                         u2603 0BEC  
                       u2435 15B7                         u2532 0525                         u2612 0BFD  
              __CFG_DEBUG$ON 0000                         u1565 1735                         u2365 148A  
                       u2533 0530                         u2525 0440                         u1645 146B  
                       u3077 093B                         u2613 0BFE                         u1655 1440  
                       u1815 0CF0                         u3087 094C                         u2800 0DBF  
                       u3097 137F                         u2465 1526                         u1585 1748  
                       u1905 0D2F                         u2625 082C                         u2705 097A  
                       u2475 1540                         u2395 1595                         u2635 0853  
                       u2715 099F                         u1845 0D05                         u2725 0725  
                       u1695 1629                         u2735 074A                         u2585 05BB  
                       u1875 0D1A                         u2763 167B                         u2790 0DA9  
                       u1985 0A45                         u1995 0A57                         u2947 095A  
                       u2957 005F                         u2967 0237                         u2977 155E  
                       u2987 1652                         u2997 168D                         _TMR0 0001  
                       _main 14AE                 ___ftpack@arg 0020                 ___ftpack@exp 0023  
                       _time 00DF                         btemp 007E                         ltemp 007E  
                       start 0012                         ttemp 007E                         wtemp 007E  
                LCDSetBits@a 0020                __CFG_MCLRE$ON 0000                 ___ftmul@cntr 004C  
               ___ftmul@sign 004D                 ___fttol@exp1 006B                 ___fttol@lval 0067  
                      ??_isr 0074                ?_LCDWriteChar 0070          __size_of_LCD4bitCmd 0011  
                      ?_main 0070              __end_of___ftadd 0D9F                        STR_10 1040  
                      STR_11 1073                        STR_12 1036                        STR_13 107B  
                      STR_14 1040                        STR_15 1083                        STR_16 1036  
              __CFG_WDTE$OFF 0000              __end_of___ftdiv 0ABD              __end_of___ftneg 1369  
                      _ANSEL 0091              __end_of___lldiv 1704              __end_of___ftmul 0B90  
            __end_of___fttol 1800               ??_floatToASCII 00A0              __end_of___lwdiv 15C6  
            __end_of_cell1RR 101D              __end_of_cell2RR 1020              __end_of_cell3RR 1023  
            __end_of_cell4RR 1026              __end_of_cell5RR 1029              __end_of_cell6RR 102C  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _PORTE 0009               ??_LCDSetCursor 0023  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088                        _TRISE 0089          ___lmul@multiplicand 0024  
               ___lltoft@exp 002D               __CFG_FCMEN$OFF 0000              __end_of_initADC 1378  
            __end_of_initLCD 0952              __end_of_refVolt 1019                ___ftpack@sign 0024  
                      _pulse 1378          __size_of_LCDSetBits 0018               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
      __end_of_sampleCurrent 07EA            ??_sampleReference 005E              __initialization 0015  
      __end_of_sampleVoltage 08A9                 __end_of_main 14DF               ??_LCDWriteChar 0022  
                     ??_main 00CB                ___fttol@sign1 0066       _sampleBatteryCells$890 006D  
     _sampleBatteryCells$889 006A                       _ADCON0 001F                       _ADCON1 009F  
                     _ADRESH 001E                       _ADRESL 009E                       ?_pulse 0070  
           __end_of___ftpack 1772             __end_of___lbtoft 1400                       _LCDCON 0107  
           __end_of___lltoft 14AE                       _LCDcmd 1454                       u266_20 1415  
                     u266_21 1416                       u266_22 141B             __end_of___lwtoft 13C9  
                     u266_23 141C              _currentGainInit 13C9               __CFG_PWRTE$OFF 0000  
           __end_of_handlePB 16A4               _LCDWriteString 15C6                       ___lmul 1607  
                  ??___ftadd 0037                    ??___ftdiv 0054                    ??___ftneg 0031  
                  ??___lldiv 0028                    ??___ftmul 0044                    ??___fttol 0062  
                  ??___lwdiv 0024                       _btmStr 0190                       _topStr 01A0  
                  ??_initADC 0020        ___ftmul@f3_as_product 0049                    ??_initLCD 0025  
               __pdataCOMMON 0078      __size_of_initController 0037                       saved_w 007E  
          sampleCurrent@temp 0065                 ??_LCD4bitCmd 0022                floatToASCII@i 00B3  
              floatToASCII@j 00A8                floatToASCII@k 00AA      __end_of__initialization 0053  
                 ___ftadd@f1 0031                   ___ftadd@f2 0034       __end_of_LCDWriteString 1607  
                 ___ftdiv@f1 0051                   ___ftdiv@f2 004E                   ___ftdiv@f3 0059  
       __end_of_floatToASCII 0710                   ___ftneg@f1 002E                   ___lbtoft@c 002F  
       __end_of_LCDSetCursor 154F                LCDSetCursor@a 0025                   ___ftmul@f1 003E  
                 ___ftmul@f2 0041                   ___fttol@f1 005E               __pcstackCOMMON 0070  
               __pidataBANK1 1354                 ??_LCDSetBits 0020                   ___lltoft@c 0028  
              __end_of_pulse 1388   __end_of_sampleBatteryCells 0404           __end_of_LCD4bitCmd 1399  
                 ___lwtoft@c 0028               _OPTION_REGbits 0081      __end_of_currentGainInit 13E2  
                    ??_pulse 0020         __end_of_LCDWriteChar 1454                   __pbssBANK1 00CD  
                 __pbssBANK3 0190                      ?_LCDcmd 0070           __end_of_LCDSetBits 13B1  
        currentGainInit@gain 0020                      LCDcmd@a 0024                   _analogRead 154F  
            ?_LCDWriteString 0025           __size_of_isrTimer0 002A                   __pmaintext 14AE  
                    ?___lmul 0020                   __pintentry 0004                      _CCP1CON 0017  
                    _CCP2CON 001D               ___lmul@product 0029                    ?___ftpack 0020  
                  ?___lbtoft 0028                    ?___lltoft 0028                    ?___lwtoft 0028  
             displayLCD@disp 00B5           __size_of_timeSetup 000C                    ?_handlePB 0070  
                 _displayLCD 0D9F              _sampleReference 0952                   __stringtab 1000  
          __end_of_cellVoltL 1013           __size_of_stopWatch 0106              __size_of_LCDcmd 002B  
          __end_of_convConst 1016              __size_of___lmul 0041                      ___ftadd 0C96  
                    ___ftdiv 0A05                      ___ftneg 135F                      ___lldiv 16A4  
                    ___ftmul 0ABD                      ___fttol 1772                      ___lwdiv 1588  
                    _cell1RR 101A                      _cell2RR 101D                      _cell3RR 1020  
                    _cell4RR 1023                      _cell5RR 1026                      _cell6RR 1029  
                 ??___ftpack 0025                   ??___lbtoft 002B                   ??___lltoft 002C  
                    __ptext1 0952                      __ptext2 0710                      __ptext3 13E2  
                    __ptext4 0057                      __ptext5 080E                      __ptext6 154F  
                    __ptext7 13B1                      __ptext8 1588                      __ptext9 14DF  
                 ??___lwtoft 002B                      _initADC 1369                      _initLCD 08A9  
             _initController 14DF                      _current 00E7                 __size_of_isr 0012  
                    _refVolt 1016            __end_of_isrTimer0 142A                   ??_handlePB 00B1  
                    _supVolt 0078                      clrloop0 1358             ?_currentGainInit 0070  
       end_of_initialization 0053        __size_of_floatToASCII 030C            __end_of_sampleNum 101A  
          _sampleCurrent$891 0060        __size_of_LCDSetCursor 0039                LCDWriteChar@a 0024  
          __end_of_timeSetup 080E                  ?_analogRead 0020              ___lldiv@divisor 0020  
            ___lldiv@counter 002D            __end_of_stopWatch 0C96       __end_of_initController 1516  
     __size_of_sampleCurrent 00DA      __end_of_sampleReference 0A05                 _floatToASCII 0404  
      __size_of_LCDWriteChar 002A                 _LCDSetCursor 1516                  ?_displayLCD 00B5  
     __size_of_sampleVoltage 009B                  ___ftdiv@exp 005C               __end_of_LCDcmd 147F  
                ___ftmul@exp 0048               __end_of___lmul 1648                 _LCDWriteChar 142A  
              __pidataCOMMON 07FC              ?_initController 0070          __size_of_analogRead 0039  
        start_initialization 0015        floatToASCII@precision 006F                  __end_of_isr 07FC  
      floatToASCII@returnVal 00B4           _sampleBatteryCells 0057             ??_LCDWriteString 0027  
                   ??_LCDcmd 0022          ?_sampleBatteryCells 0070                _sampleCurrent 0710  
                   ??___lmul 0028                _sampleVoltage 080E          __size_of_displayLCD 0261  
                __pdataBANK1 00EB         ??_sampleBatteryCells 0068            __size_of___ftpack 006E  
          __size_of___lbtoft 001E            __size_of___lltoft 002F             ?_sampleReference 0070  
                __pbssCOMMON 007C                    ___latbits 0002            __size_of___lwtoft 0018  
              __pcstackBANK0 0020                __pcstackBANK1 00A0            __size_of_handlePB 005C  
             ?_sampleCurrent 0070                    _cellVoltL 1010             ___lwdiv@dividend 0022  
           sampleReference@i 0060               ?_sampleVoltage 005E                     ?___ftadd 0031  
                   ?___ftdiv 004E                     ?___ftneg 002E                     ?___lldiv 0020  
                   ?___ftmul 003E                     ?___fttol 005E                     ?___lwdiv 0020  
              stopWatch@mode 00AC                stopWatch@temp 00AD                    _convConst 1013  
                  __pstrings 1000              displayLCD@F2781 01B0              displayLCD@F2783 01B8  
                   ?_initADC 0070                     ?_initLCD 0070             ___lwdiv@quotient 0025  
          sampleVoltage@chan 0063               __size_of_pulse 0010            sampleVoltage@temp 0066  
                  _isrTimer0 1400              displayLCD@temp1 00BB              displayLCD@temp2 00C3  
          interrupt_function 0004                 ??_analogRead 0022                    clear_ram0 1357  
                  _sampleNum 1019                    _timeSetup 0802         floatToASCII@decPoint 00A7  
                 _ADCON0bits 001F                  __stringbase 100F                    _stopWatch 0B90  
         __end_of_analogRead 1588                 ??_displayLCD 00B7           stopWatch@startTime 00E3  
          ___lmul@multiplier 0020                   ?_isrTimer0 0070              ??_sampleCurrent 005E  
   __size_of_currentGainInit 0019              ??_sampleVoltage 0061                   ?_timeSetup 0070  
           ??_initController 0028                   _CMCON0bits 009C           __end_of_displayLCD 1000  
           __size_of___ftadd 0109             __size_of___ftdiv 00B8             __size_of___ftneg 000A  
           __size_of___lldiv 0060             __size_of___ftmul 00D3             __size_of___fttol 008E  
           __size_of___lwdiv 003E                     ___ftpack 1704                     ___lbtoft 13E2  
         __end_of__stringtab 1010                     ___lltoft 147F                     ___lwtoft 13B1  
                _currentGain 007B             __size_of_initADC 000F             __size_of_initLCD 00A9  
                 ?_stopWatch 006C                     _cellVolt 00CD              ___lwdiv@divisor 0020  
                   _handlePB 1648              ___lwdiv@counter 0027                     __ptext10 0802  
                   __ptext11 1369                     __ptext20 16A4                     __ptext12 1648  
                   __ptext21 1772                     __ptext13 0B90                     __ptext30 1388  
                   __ptext22 135F                     __ptext14 08A9                     __ptext31 1378  
                   __ptext23 0ABD                     __ptext15 1454                     __ptext32 1399  
                   __ptext24 0A05                     __ptext16 0D9F                     __ptext33 13C9  
                   __ptext25 0C96                     __ptext17 0404                     __ptext34 07EA  
                   __ptext26 1704                     __ptext18 1607                     __ptext35 1400  
                   __ptext27 15C6                     __ptext19 147F                     __ptext28 142A  
                   __ptext29 1516                   _LCD4bitCmd 1388               _LCDDisplayMode 00EA  
              __size_of_main 0031                     _refValue 007C              LCDWriteString@a 0025  
            LCDWriteString@i 002A                   _LCDSetBits 1399                     _shuntRes 00EB  
        floatToASCII@leading 00A6          floatToASCII@prevSum 00AB                   _INTCONbits 000B  
             analogRead@chan 0024               sampleCurrent@i 0063                  ??_isrTimer0 0070  
                   intlevel1 0000             ___lldiv@dividend 0024                   _LVDCONbits 0109  
                LCD4bitCmd@a 0022                    stringcode 100A                   _OSCCONbits 008F  
                ??_timeSetup 0020           floatToASCII@scaler 00AF            ??_currentGainInit 0020  
__size_of_sampleBatteryCells 03AD             ___lldiv@quotient 0029                  ??_stopWatch 00A0  
          floatToASCII@j_342 00A5               sampleVoltage@i 0064                     stringdir 100A  
                   stringtab 1000          analogRead@returnVal 0025                  ?_LCD4bitCmd 0070  
         __CFG_FOSC$INTOSCIO 0000     __size_of_sampleReference 00B3              floatToASCII@num 006C  
    __size_of_LCDWriteString 0041  
