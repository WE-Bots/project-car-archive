

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jul 03 20:19:22 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F917
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0110                     	;# 
   135  0111                     	;# 
   136  0112                     	;# 
   137  0113                     	;# 
   138  0114                     	;# 
   139  0115                     	;# 
   140  0116                     	;# 
   141  0117                     	;# 
   142  0118                     	;# 
   143  0119                     	;# 
   144  011A                     	;# 
   145  011B                     	;# 
   146  011C                     	;# 
   147  011D                     	;# 
   148  011E                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151                           
   152                           	psect	idataCOMMON
   153  0003                     __pidataCOMMON:	
   154                           
   155                           ;initializer for _currentGain
   156  0003  34C8               	retlw	200
   157                           
   158                           	psect	idataBANK1
   159  1000                     __pidataBANK1:	
   160                           
   161                           ;initializer for _shuntRes
   162  1000  34D7               	retlw	215
   163  1001  3423               	retlw	35
   164  1002  343C               	retlw	60
   165                           
   166                           ;initializer for _supVolt
   167  1003  3466               	retlw	102
   168  1004  3486               	retlw	134
   169  1005  3440               	retlw	64
   170                           
   171                           	psect	stringtext
   172  1800                     __pstringtext:	
   173  1800                     stringtab:	
   174  1800                     __stringtab:	
   175                           
   176                           ;	String table - string pointers are 2 bytes each
   177  1800  1BFF               	btfsc	btemp+1,7
   178  1801  280A               	ljmp	stringcode
   179  1802  1383               	bcf	3,7
   180  1803  187F               	btfsc	btemp+1,0
   181  1804  1783               	bsf	3,7
   182  1805  0800               	movf	0,w
   183  1806  0A84               	incf	4,f
   184  1807  1903               	skipnz
   185  1808  0AFF               	incf	btemp+1,f
   186  1809  0008               	return
   187  180A                     stringcode:	
   188  180A  087F               	movf	btemp+1,w
   189  180B  397F               	andlw	127
   190  180C  008A               	movwf	10
   191  180D  0804               	movf	4,w
   192  180E  0A84               	incf	4,f
   193  180F  1903               	skipnz
   194  1810  0AFF               	incf	btemp+1,f
   195  1811  0082               	movwf	2
   196  1812                     __stringbase:	
   197  1812                     __end_of__stringtab:	
   198  1812                     _dpowers:	
   199  1812  3401               	retlw	1
   200  1813  3400               	retlw	0
   201  1814  3400               	retlw	0
   202  1815  3400               	retlw	0
   203  1816  340A               	retlw	10
   204  1817  3400               	retlw	0
   205  1818  3400               	retlw	0
   206  1819  3400               	retlw	0
   207  181A  3464               	retlw	100
   208  181B  3400               	retlw	0
   209  181C  3400               	retlw	0
   210  181D  3400               	retlw	0
   211  181E  34E8               	retlw	232
   212  181F  3403               	retlw	3
   213  1820  3400               	retlw	0
   214  1821  3400               	retlw	0
   215  1822  3410               	retlw	16
   216  1823  3427               	retlw	39
   217  1824  3400               	retlw	0
   218  1825  3400               	retlw	0
   219  1826  34A0               	retlw	160
   220  1827  3486               	retlw	134
   221  1828  3401               	retlw	1
   222  1829  3400               	retlw	0
   223  182A  3440               	retlw	64
   224  182B  3442               	retlw	66
   225  182C  340F               	retlw	15
   226  182D  3400               	retlw	0
   227  182E  3480               	retlw	128
   228  182F  3496               	retlw	150
   229  1830  3498               	retlw	152
   230  1831  3400               	retlw	0
   231  1832  3400               	retlw	0
   232  1833  34E1               	retlw	225
   233  1834  34F5               	retlw	245
   234  1835  3405               	retlw	5
   235  1836  3400               	retlw	0
   236  1837  34CA               	retlw	202
   237  1838  349A               	retlw	154
   238  1839  343B               	retlw	59
   239  183A                     __end_of_dpowers:	
   240  183A                     __npowers_:	
   241  183A  3400               	retlw	0
   242  183B  3480               	retlw	128
   243  183C  343F               	retlw	63
   244  183D  34CD               	retlw	205
   245  183E  34CC               	retlw	204
   246  183F  343D               	retlw	61
   247  1840  34D7               	retlw	215
   248  1841  3423               	retlw	35
   249  1842  343C               	retlw	60
   250  1843  3412               	retlw	18
   251  1844  3483               	retlw	131
   252  1845  343A               	retlw	58
   253  1846  34B7               	retlw	183
   254  1847  34D1               	retlw	209
   255  1848  3438               	retlw	56
   256  1849  34C6               	retlw	198
   257  184A  3427               	retlw	39
   258  184B  3437               	retlw	55
   259  184C  3438               	retlw	56
   260  184D  3486               	retlw	134
   261  184E  3435               	retlw	53
   262  184F  34C0               	retlw	192
   263  1850  34D6               	retlw	214
   264  1851  3433               	retlw	51
   265  1852  34CC               	retlw	204
   266  1853  342B               	retlw	43
   267  1854  3432               	retlw	50
   268  1855  3470               	retlw	112
   269  1856  3489               	retlw	137
   270  1857  3430               	retlw	48
   271  1858  34E7               	retlw	231
   272  1859  34DB               	retlw	219
   273  185A  342E               	retlw	46
   274  185B  34E5               	retlw	229
   275  185C  343C               	retlw	60
   276  185D  341E               	retlw	30
   277  185E  3442               	retlw	66
   278  185F  34A2               	retlw	162
   279  1860  340D               	retlw	13
   280  1861                     __end_of__npowers_:	
   281  1861                     __powers_:	
   282  1861  3400               	retlw	0
   283  1862  3480               	retlw	128
   284  1863  343F               	retlw	63
   285  1864  3400               	retlw	0
   286  1865  3420               	retlw	32
   287  1866  3441               	retlw	65
   288  1867  3400               	retlw	0
   289  1868  34C8               	retlw	200
   290  1869  3442               	retlw	66
   291  186A  3400               	retlw	0
   292  186B  347A               	retlw	122
   293  186C  3444               	retlw	68
   294  186D  3440               	retlw	64
   295  186E  341C               	retlw	28
   296  186F  3446               	retlw	70
   297  1870  3450               	retlw	80
   298  1871  34C3               	retlw	195
   299  1872  3447               	retlw	71
   300  1873  3424               	retlw	36
   301  1874  3474               	retlw	116
   302  1875  3449               	retlw	73
   303  1876  3497               	retlw	151
   304  1877  3418               	retlw	24
   305  1878  344B               	retlw	75
   306  1879  34BC               	retlw	188
   307  187A  34BE               	retlw	190
   308  187B  344C               	retlw	76
   309  187C  346B               	retlw	107
   310  187D  346E               	retlw	110
   311  187E  344E               	retlw	78
   312  187F  3403               	retlw	3
   313  1880  3415               	retlw	21
   314  1881  3450               	retlw	80
   315  1882  3479               	retlw	121
   316  1883  34AD               	retlw	173
   317  1884  3460               	retlw	96
   318  1885  34F3               	retlw	243
   319  1886  3449               	retlw	73
   320  1887  3471               	retlw	113
   321  1888                     __end_of__powers_:	
   322  1888                     _refVolt:	
   323  1888  349E               	retlw	158
   324  1889  348F               	retlw	143
   325  188A  343F               	retlw	63
   326  188B                     __end_of_refVolt:	
   327  188B                     _cell1RDT:	
   328  188B  3498               	retlw	152
   329  188C  3408               	retlw	8
   330  188D                     __end_of_cell1RDT:	
   331  188D                     _cell2RDT:	
   332  188D  345C               	retlw	92
   333  188E  3412               	retlw	18
   334  188F                     __end_of_cell2RDT:	
   335  188F                     _cell3RDT:	
   336  188F  3410               	retlw	16
   337  1890  3427               	retlw	39
   338  1891                     __end_of_cell3RDT:	
   339  1891                     _cell4RDT:	
   340  1891  346C               	retlw	108
   341  1892  3439               	retlw	57
   342  1893                     __end_of_cell4RDT:	
   343  1893                     _cell5RDT:	
   344  1893  3420               	retlw	32
   345  1894  344E               	retlw	78
   346  1895                     __end_of_cell5RDT:	
   347  1895                     _cell6RDT:	
   348  1895  347C               	retlw	124
   349  1896  3460               	retlw	96
   350  1897                     __end_of_cell6RDT:	
   351  1897                     _cellRDB:	
   352  1897  3498               	retlw	152
   353  1898  3408               	retlw	8
   354  1899                     __end_of_cellRDB:	
   355  001F                     _ADCON0	set	31
   356  001F                     _ADCON0bits	set	31
   357  001E                     _ADRESH	set	30
   358  0017                     _CCP1CON	set	23
   359  001D                     _CCP2CON	set	29
   360  0005                     _PORTA	set	5
   361  0006                     _PORTB	set	6
   362  0007                     _PORTC	set	7
   363  0008                     _PORTD	set	8
   364  0009                     _PORTE	set	9
   365  002E                     _RA6	set	46
   366  002F                     _RA7	set	47
   367  0030                     _RB0	set	48
   368  0031                     _RB1	set	49
   369  0032                     _RB2	set	50
   370  0033                     _RB3	set	51
   371  0034                     _RB4	set	52
   372  0035                     _RB5	set	53
   373  0038                     _RC0	set	56
   374  003A                     _RC2	set	58
   375  003B                     _RC3	set	59
   376  0040                     _RD0	set	64
   377  0041                     _RD1	set	65
   378  0042                     _RD2	set	66
   379  0044                     _RD4	set	68
   380  0045                     _RD5	set	69
   381  0046                     _RD6	set	70
   382  0047                     _RD7	set	71
   383  009F                     _ADCON1	set	159
   384  009E                     _ADRESL	set	158
   385  0091                     _ANSEL	set	145
   386  009C                     _CMCON0bits	set	156
   387  0081                     _OPTION_REGbits	set	129
   388  008F                     _OSCCONbits	set	143
   389  0085                     _TRISA	set	133
   390  0086                     _TRISB	set	134
   391  0087                     _TRISC	set	135
   392  0088                     _TRISD	set	136
   393  0089                     _TRISE	set	137
   394  0107                     _LCDCON	set	263
   395  0109                     _LVDCONbits	set	265
   396  1899                     STR_3:	
   397  1899  3456               	retlw	86	;'V'
   398  189A  346F               	retlw	111	;'o'
   399  189B  346C               	retlw	108	;'l'
   400  189C  3474               	retlw	116	;'t'
   401  189D  3461               	retlw	97	;'a'
   402  189E  3467               	retlw	103	;'g'
   403  189F  3465               	retlw	101	;'e'
   404  18A0  343A               	retlw	58	;':'
   405  18A1  3425               	retlw	37	;'%'
   406  18A2  342E               	retlw	46	;'.'
   407  18A3  3433               	retlw	51	;'3'
   408  18A4  3466               	retlw	102	;'f'
   409  18A5  3420               	retlw	32	;' '
   410  18A6  3456               	retlw	86	;'V'
   411  18A7  3420               	retlw	32	;' '
   412  18A8  3420               	retlw	32	;' '
   413  18A9  3420               	retlw	32	;' '
   414  18AA  3420               	retlw	32	;' '
   415  18AB  3420               	retlw	32	;' '
   416  18AC  3420               	retlw	32	;' '
   417  18AD  3400               	retlw	0
   418  18AE                     STR_4:	
   419  18AE  3443               	retlw	67	;'C'
   420  18AF  3475               	retlw	117	;'u'
   421  18B0  3472               	retlw	114	;'r'
   422  18B1  3472               	retlw	114	;'r'
   423  18B2  3465               	retlw	101	;'e'
   424  18B3  346E               	retlw	110	;'n'
   425  18B4  3474               	retlw	116	;'t'
   426  18B5  343A               	retlw	58	;':'
   427  18B6  3425               	retlw	37	;'%'
   428  18B7  342E               	retlw	46	;'.'
   429  18B8  3433               	retlw	51	;'3'
   430  18B9  3466               	retlw	102	;'f'
   431  18BA  3441               	retlw	65	;'A'
   432  18BB  3420               	retlw	32	;' '
   433  18BC  3420               	retlw	32	;' '
   434  18BD  3420               	retlw	32	;' '
   435  18BE  3420               	retlw	32	;' '
   436  18BF  3420               	retlw	32	;' '
   437  18C0  3420               	retlw	32	;' '
   438  18C1  3400               	retlw	0
   439  18C2                     STR_1:	
   440  18C2  3420               	retlw	32	;' '
   441  18C3  3420               	retlw	32	;' '
   442  18C4  3420               	retlw	32	;' '
   443  18C5  3420               	retlw	32	;' '
   444  18C6  3420               	retlw	32	;' '
   445  18C7  3420               	retlw	32	;' '
   446  18C8  3420               	retlw	32	;' '
   447  18C9  3420               	retlw	32	;' '
   448  18CA  3420               	retlw	32	;' '
   449  18CB  3420               	retlw	32	;' '
   450  18CC  3420               	retlw	32	;' '
   451  18CD  3420               	retlw	32	;' '
   452  18CE  3420               	retlw	32	;' '
   453  18CF  3420               	retlw	32	;' '
   454  18D0  3420               	retlw	32	;' '
   455  18D1  3420               	retlw	32	;' '
   456  18D2  3400               	retlw	0
   457  18D3                     STR_5:	
   458  18D3  3443               	retlw	67	;'C'
   459  18D4  3465               	retlw	101	;'e'
   460  18D5  346C               	retlw	108	;'l'
   461  18D6  346C               	retlw	108	;'l'
   462  18D7  3420               	retlw	32	;' '
   463  18D8  3431               	retlw	49	;'1'
   464  18D9  343A               	retlw	58	;':'
   465  18DA  3425               	retlw	37	;'%'
   466  18DB  342E               	retlw	46	;'.'
   467  18DC  3432               	retlw	50	;'2'
   468  18DD  3466               	retlw	102	;'f'
   469  18DE  3420               	retlw	32	;' '
   470  18DF  3420               	retlw	32	;' '
   471  18E0  3420               	retlw	32	;' '
   472  18E1  3420               	retlw	32	;' '
   473  18E2  3420               	retlw	32	;' '
   474  18E3  3400               	retlw	0
   475  18E4                     STR_6:	
   476  18E4  3443               	retlw	67	;'C'
   477  18E5  3465               	retlw	101	;'e'
   478  18E6  346C               	retlw	108	;'l'
   479  18E7  346C               	retlw	108	;'l'
   480  18E8  3420               	retlw	32	;' '
   481  18E9  3432               	retlw	50	;'2'
   482  18EA  343A               	retlw	58	;':'
   483  18EB  3425               	retlw	37	;'%'
   484  18EC  342E               	retlw	46	;'.'
   485  18ED  3432               	retlw	50	;'2'
   486  18EE  3466               	retlw	102	;'f'
   487  18EF  3420               	retlw	32	;' '
   488  18F0  3420               	retlw	32	;' '
   489  18F1  3420               	retlw	32	;' '
   490  18F2  3420               	retlw	32	;' '
   491  18F3  3420               	retlw	32	;' '
   492  18F4  3400               	retlw	0
   493  18F5                     STR_7:	
   494  18F5  3443               	retlw	67	;'C'
   495  18F6  3465               	retlw	101	;'e'
   496  18F7  346C               	retlw	108	;'l'
   497  18F8  346C               	retlw	108	;'l'
   498  18F9  3420               	retlw	32	;' '
   499  18FA  3433               	retlw	51	;'3'
   500  18FB  343A               	retlw	58	;':'
   501  18FC  3425               	retlw	37	;'%'
   502  18FD  342E               	retlw	46	;'.'
   503  18FE  3432               	retlw	50	;'2'
   504  18FF  3466               	retlw	102	;'f'
   505  1900  3420               	retlw	32	;' '
   506  1901  3420               	retlw	32	;' '
   507  1902  3420               	retlw	32	;' '
   508  1903  3420               	retlw	32	;' '
   509  1904  3420               	retlw	32	;' '
   510  1905  3400               	retlw	0
   511  1906                     STR_8:	
   512  1906  3443               	retlw	67	;'C'
   513  1907  3465               	retlw	101	;'e'
   514  1908  346C               	retlw	108	;'l'
   515  1909  346C               	retlw	108	;'l'
   516  190A  3420               	retlw	32	;' '
   517  190B  3434               	retlw	52	;'4'
   518  190C  343A               	retlw	58	;':'
   519  190D  3425               	retlw	37	;'%'
   520  190E  342E               	retlw	46	;'.'
   521  190F  3432               	retlw	50	;'2'
   522  1910  3466               	retlw	102	;'f'
   523  1911  3420               	retlw	32	;' '
   524  1912  3420               	retlw	32	;' '
   525  1913  3420               	retlw	32	;' '
   526  1914  3420               	retlw	32	;' '
   527  1915  3420               	retlw	32	;' '
   528  1916  3400               	retlw	0
   529  1917                     STR_9:	
   530  1917  3443               	retlw	67	;'C'
   531  1918  3465               	retlw	101	;'e'
   532  1919  346C               	retlw	108	;'l'
   533  191A  346C               	retlw	108	;'l'
   534  191B  3420               	retlw	32	;' '
   535  191C  3435               	retlw	53	;'5'
   536  191D  343A               	retlw	58	;':'
   537  191E  3425               	retlw	37	;'%'
   538  191F  342E               	retlw	46	;'.'
   539  1920  3432               	retlw	50	;'2'
   540  1921  3466               	retlw	102	;'f'
   541  1922  3420               	retlw	32	;' '
   542  1923  3420               	retlw	32	;' '
   543  1924  3420               	retlw	32	;' '
   544  1925  3420               	retlw	32	;' '
   545  1926  3420               	retlw	32	;' '
   546  1927  3400               	retlw	0
   547  1928                     STR_10:	
   548  1928  3443               	retlw	67	;'C'
   549  1929  3465               	retlw	101	;'e'
   550  192A  346C               	retlw	108	;'l'
   551  192B  346C               	retlw	108	;'l'
   552  192C  3420               	retlw	32	;' '
   553  192D  3436               	retlw	54	;'6'
   554  192E  343A               	retlw	58	;':'
   555  192F  3425               	retlw	37	;'%'
   556  1930  342E               	retlw	46	;'.'
   557  1931  3432               	retlw	50	;'2'
   558  1932  3466               	retlw	102	;'f'
   559  1933  3420               	retlw	32	;' '
   560  1934  3420               	retlw	32	;' '
   561  1935  3420               	retlw	32	;' '
   562  1936  3420               	retlw	32	;' '
   563  1937  3420               	retlw	32	;' '
   564  1938  3400               	retlw	0
   565  18C2                     
   566                           ; #config settings
   567  0000                     
   568                           	psect	cinit
   569  0015                     start_initialization:	
   570  0015                     __initialization:	
   571                           
   572                           ; Clear objects allocated to COMMON
   573  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   574  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   575  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   576                           
   577                           ; Clear objects allocated to BANK1
   578  0018  1383               	bcf	3,7	;select IRP bank0
   579  0019  30A0               	movlw	low __pbssBANK1
   580  001A  0084               	movwf	4
   581  001B  30C5               	movlw	low (__pbssBANK1+37)
   582  001C  160A  158A  2265  120A  118A  	fcall	clear_ram0
   583                           
   584                           ; Clear objects allocated to BANK3
   585  0021  1783               	bsf	3,7	;select IRP bank2
   586  0022  3090               	movlw	low __pbssBANK3
   587  0023  0084               	movwf	4
   588  0024  30A0               	movlw	low (__pbssBANK3+16)
   589  0025  160A  158A  2265  120A  118A  	fcall	clear_ram0
   590                           
   591                           ; Initialize objects allocated to BANK1
   592  002A  1683               	bsf	3,5	;RP0=1, select bank1
   593  002B  1303               	bcf	3,6	;RP1=0, select bank1
   594  002C  160A  118A  2000  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   595  0031  00E3               	movwf	__pdataBANK1& (0+127)
   596  0032  160A  118A  2001  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   597  0037  00E4               	movwf	(__pdataBANK1+1)& (0+127)
   598  0038  160A  118A  2002  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   599  003D  00E5               	movwf	(__pdataBANK1+2)& (0+127)
   600  003E  160A  118A  2003  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   601  0043  00E6               	movwf	(__pdataBANK1+3)& (0+127)
   602  0044  160A  118A  2004  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   603  0049  00E7               	movwf	(__pdataBANK1+4)& (0+127)
   604  004A  160A  118A  2005  120A  118A  	fcall	__pidataBANK1+5	;fetch initializer
   605  004F  00E8               	movwf	(__pdataBANK1+5)& (0+127)
   606                           
   607                           ; Initialize objects allocated to COMMON
   608  0050  120A  118A  2003   	fcall	__pidataCOMMON	;fetch initializer
   609  0053  00F9               	movwf	__pdataCOMMON& (0+127)
   610  0054                     end_of_initialization:	
   611                           ;End of C runtime variable initialization code
   612                           
   613  0054                     __end_of__initialization:	
   614  0054  0183               	clrf	3
   615  0055  160A  158A  2F91   	ljmp	_main	;jump to C main() function
   616                           
   617                           	psect	bssCOMMON
   618  0076                     __pbssCOMMON:	
   619  0076                     _refValue:	
   620  0076                     	ds	2
   621  0078                     _LCDDisplayMode:	
   622  0078                     	ds	1
   623                           
   624                           	psect	dataCOMMON
   625  0079                     __pdataCOMMON:	
   626  0079                     _currentGain:	
   627  0079                     	ds	1
   628                           
   629                           	psect	bssBANK1
   630  00A0                     __pbssBANK1:	
   631  00A0                     _cellVolt:	
   632  00A0                     	ds	18
   633  00B2                     _current:	
   634  00B2                     	ds	3
   635  00B5                     _topStr:	
   636  00B5                     	ds	16
   637                           
   638                           	psect	dataBANK1
   639  00E3                     __pdataBANK1:	
   640  00E3                     _shuntRes:	
   641  00E3                     	ds	3
   642  00E6                     _supVolt:	
   643  00E6                     	ds	3
   644                           
   645                           	psect	bssBANK3
   646  0190                     __pbssBANK3:	
   647  0190                     _btmStr:	
   648  0190                     	ds	16
   649                           
   650                           	psect	clrtext
   651  1A65                     clear_ram0:	
   652                           ;	Called with FSR containing the base address, and
   653                           ;	W with the last address+1
   654                           
   655  1A65  0064               	clrwdt	;clear the watchdog before getting into this loop
   656  1A66                     clrloop0:	
   657  1A66  0180               	clrf	0	;clear RAM location pointed to by FSR
   658  1A67  0A84               	incf	4,f	;increment pointer
   659  1A68  0604               	xorwf	4,w	;XOR with final address
   660  1A69  1903               	btfsc	3,2	;have we reached the end yet?
   661  1A6A  3400               	retlw	0	;all done for this memory range, return
   662  1A6B  0604               	xorwf	4,w	;XOR again to restore value
   663  1A6C  2A66               	goto	clrloop0	;do the next byte
   664                           
   665                           	psect	cstackBANK1
   666  00C5                     __pcstackBANK1:	
   667  00C5                     ??_sprintf:	
   668                           
   669                           ; 0 bytes @ 0x0
   670  00C5                     	ds	6
   671  00CB                     _sprintf$856:	
   672                           
   673                           ; 3 bytes @ 0x6
   674  00CB                     	ds	3
   675  00CE                     sprintf@ap:	
   676                           
   677                           ; 1 bytes @ 0x9
   678  00CE                     	ds	1
   679  00CF                     sprintf@flag:	
   680                           
   681                           ; 2 bytes @ 0xA
   682  00CF                     	ds	2
   683  00D1                     sprintf@val:	
   684                           
   685                           ; 4 bytes @ 0xC
   686  00D1                     	ds	4
   687  00D5                     sprintf@exp:	
   688                           
   689                           ; 2 bytes @ 0x10
   690  00D5                     	ds	2
   691  00D7                     sprintf@tmpval:	
   692                           
   693                           ; 4 bytes @ 0x12
   694  00D7                     	ds	4
   695  00DB                     sprintf@prec:	
   696                           
   697                           ; 2 bytes @ 0x16
   698  00DB                     	ds	2
   699  00DD                     sprintf@fval:	
   700                           
   701                           ; 3 bytes @ 0x18
   702  00DD                     	ds	3
   703  00E0                     sprintf@c:	
   704                           
   705                           ; 1 bytes @ 0x1B
   706  00E0                     	ds	1
   707  00E1                     ??_main:	
   708                           
   709                           ; 0 bytes @ 0x1C
   710  00E1                     	ds	2
   711                           
   712                           	psect	cstackCOMMON
   713  0070                     __pcstackCOMMON:	
   714  0070                     ?_LCDSetBits:	
   715  0070                     ?_pulse:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?_LCDcmd:	
   719                           ; 0 bytes @ 0x0
   720                           
   721  0070                     ?_sampleReference:	
   722                           ; 0 bytes @ 0x0
   723                           
   724  0070                     ?_sampleCurrent:	
   725                           ; 0 bytes @ 0x0
   726                           
   727  0070                     ?_sampleBatteryCells:	
   728                           ; 0 bytes @ 0x0
   729                           
   730  0070                     ?_handlePB:	
   731                           ; 0 bytes @ 0x0
   732                           
   733  0070                     ?_isdigit:	
   734                           ; 0 bytes @ 0x0
   735                           
   736  0070                     ?_initLCD:	
   737                           ; 1 bit 
   738                           
   739  0070                     ?_LCD4bitCmd:	
   740                           ; 0 bytes @ 0x0
   741                           
   742  0070                     ?_LCDWriteChar:	
   743                           ; 0 bytes @ 0x0
   744                           
   745  0070                     ?_LCDSetCursor:	
   746                           ; 0 bytes @ 0x0
   747                           
   748  0070                     ?_initADC:	
   749                           ; 0 bytes @ 0x0
   750                           
   751  0070                     ?_initController:	
   752                           ; 0 bytes @ 0x0
   753                           
   754  0070                     ?_isr:	
   755                           ; 0 bytes @ 0x0
   756                           
   757  0070                     ??_isr:	
   758                           ; 0 bytes @ 0x0
   759                           
   760  0070                     ?_main:	
   761                           ; 0 bytes @ 0x0
   762                           
   763                           
   764                           ; 0 bytes @ 0x0
   765  0070                     	ds	4
   766  0074                     ??_LCDSetBits:	
   767  0074                     ??_pulse:	
   768                           ; 0 bytes @ 0x4
   769                           
   770  0074                     ??_handlePB:	
   771                           ; 0 bytes @ 0x4
   772                           
   773  0074                     ??_isdigit:	
   774                           ; 0 bytes @ 0x4
   775                           
   776  0074                     ??_initADC:	
   777                           ; 0 bytes @ 0x4
   778                           
   779  0074                     ??___wmul:	
   780                           ; 0 bytes @ 0x4
   781                           
   782  0074                     ??___awmod:	
   783                           ; 0 bytes @ 0x4
   784                           
   785  0074                     ??___ftneg:	
   786                           ; 0 bytes @ 0x4
   787                           
   788  0074                     ??___lldiv:	
   789                           ; 0 bytes @ 0x4
   790                           
   791  0074                     ??___llmod:	
   792                           ; 0 bytes @ 0x4
   793                           
   794  0074                     ??___lltoft:	
   795                           ; 0 bytes @ 0x4
   796                           
   797  0074                     ??___lwdiv:	
   798                           ; 0 bytes @ 0x4
   799                           
   800  0074                     ?_analogRead:	
   801                           ; 0 bytes @ 0x4
   802                           
   803  0074                     LCDSetBits@a:	
   804                           ; 2 bytes @ 0x4
   805                           
   806  0074                     _isdigit$619:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  0074                     ___lbtoft@c:	
   810                           ; 1 bytes @ 0x4
   811                           
   812  0074                     ___wmul@product:	
   813                           ; 1 bytes @ 0x4
   814                           
   815                           
   816                           ; 2 bytes @ 0x4
   817  0074                     	ds	1
   818  0075                     ??___awdiv:	
   819  0075                     isdigit@c:	
   820                           ; 0 bytes @ 0x5
   821                           
   822  0075                     ___llmod@counter:	
   823                           ; 1 bytes @ 0x5
   824                           
   825  0075                     ___lltoft@exp:	
   826                           ; 1 bytes @ 0x5
   827                           
   828                           
   829                           ; 1 bytes @ 0x5
   830  0075                     	ds	1
   831  0076                     ??_sampleCurrent:	
   832  0076                     ??_displayLCD:	
   833                           ; 0 bytes @ 0x6
   834                           
   835  0076                     ??_LCD4bitCmd:	
   836                           ; 0 bytes @ 0x6
   837                           
   838  0076                     ??_initController:	
   839                           ; 0 bytes @ 0x6
   840                           
   841  0076                     ??___ftsub:	
   842                           ; 0 bytes @ 0x6
   843                           
   844                           
   845                           	psect	cstackBANK0
   846  0020                     __pcstackBANK0:	
   847                           ; 0 bytes @ 0x6
   848                           
   849  0020                     ??_LCDcmd:	
   850  0020                     ??_LCDWriteChar:	
   851                           ; 0 bytes @ 0x0
   852                           
   853  0020                     ??_analogRead:	
   854                           ; 0 bytes @ 0x0
   855                           
   856  0020                     ?___ftge:	
   857                           ; 0 bytes @ 0x0
   858                           
   859  0020                     ?___wmul:	
   860                           ; 1 bit 
   861                           
   862  0020                     ?___awmod:	
   863                           ; 2 bytes @ 0x0
   864                           
   865  0020                     ?___lwdiv:	
   866                           ; 2 bytes @ 0x0
   867                           
   868  0020                     ?___ftpack:	
   869                           ; 2 bytes @ 0x0
   870                           
   871  0020                     ?___ftneg:	
   872                           ; 3 bytes @ 0x0
   873                           
   874  0020                     ?__tdiv_to_l_:	
   875                           ; 3 bytes @ 0x0
   876                           
   877  0020                     ?__div_to_l_:	
   878                           ; 4 bytes @ 0x0
   879                           
   880  0020                     ?___lldiv:	
   881                           ; 4 bytes @ 0x0
   882                           
   883  0020                     ?___llmod:	
   884                           ; 4 bytes @ 0x0
   885                           
   886  0020                     LCD4bitCmd@a:	
   887                           ; 4 bytes @ 0x0
   888                           
   889  0020                     ___wmul@multiplier:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0020                     ___awmod@divisor:	
   893                           ; 2 bytes @ 0x0
   894                           
   895  0020                     ___lwdiv@divisor:	
   896                           ; 2 bytes @ 0x0
   897                           
   898  0020                     __div_to_l_@f1:	
   899                           ; 2 bytes @ 0x0
   900                           
   901  0020                     ___ftpack@arg:	
   902                           ; 3 bytes @ 0x0
   903                           
   904  0020                     __tdiv_to_l_@f1:	
   905                           ; 3 bytes @ 0x0
   906                           
   907  0020                     ___ftge@ff1:	
   908                           ; 3 bytes @ 0x0
   909                           
   910  0020                     ___ftneg@f1:	
   911                           ; 3 bytes @ 0x0
   912                           
   913  0020                     ___lldiv@divisor:	
   914                           ; 3 bytes @ 0x0
   915                           
   916  0020                     ___llmod@divisor:	
   917                           ; 4 bytes @ 0x0
   918                           
   919                           
   920                           ; 4 bytes @ 0x0
   921  0020                     	ds	1
   922  0021                     ??_LCDSetCursor:	
   923                           
   924                           ; 0 bytes @ 0x1
   925  0021                     	ds	1
   926  0022                     LCDcmd@a:	
   927  0022                     LCDWriteChar@a:	
   928                           ; 1 bytes @ 0x2
   929                           
   930  0022                     analogRead@chan:	
   931                           ; 1 bytes @ 0x2
   932                           
   933  0022                     ___wmul@multiplicand:	
   934                           ; 1 bytes @ 0x2
   935                           
   936  0022                     ___awmod@dividend:	
   937                           ; 2 bytes @ 0x2
   938                           
   939  0022                     ___lwdiv@dividend:	
   940                           ; 2 bytes @ 0x2
   941                           
   942                           
   943                           ; 2 bytes @ 0x2
   944  0022                     	ds	1
   945  0023                     ??_initLCD:	
   946  0023                     ?_LCDWriteString:	
   947                           ; 0 bytes @ 0x3
   948                           
   949  0023                     LCDSetCursor@a:	
   950                           ; 0 bytes @ 0x3
   951                           
   952  0023                     ___ftpack@exp:	
   953                           ; 1 bytes @ 0x3
   954                           
   955  0023                     LCDWriteString@a:	
   956                           ; 1 bytes @ 0x3
   957                           
   958  0023                     analogRead@returnVal:	
   959                           ; 2 bytes @ 0x3
   960                           
   961  0023                     __div_to_l_@f2:	
   962                           ; 2 bytes @ 0x3
   963                           
   964  0023                     __tdiv_to_l_@f2:	
   965                           ; 3 bytes @ 0x3
   966                           
   967  0023                     ___ftge@ff2:	
   968                           ; 3 bytes @ 0x3
   969                           
   970                           
   971                           ; 3 bytes @ 0x3
   972  0023                     	ds	1
   973  0024                     ___awmod@counter:	
   974  0024                     ___ftpack@sign:	
   975                           ; 1 bytes @ 0x4
   976                           
   977  0024                     ___lwdiv@counter:	
   978                           ; 1 bytes @ 0x4
   979                           
   980  0024                     ___lldiv@dividend:	
   981                           ; 1 bytes @ 0x4
   982                           
   983  0024                     ___llmod@dividend:	
   984                           ; 4 bytes @ 0x4
   985                           
   986                           
   987                           ; 4 bytes @ 0x4
   988  0024                     	ds	1
   989  0025                     ??___ftpack:	
   990  0025                     ??_LCDWriteString:	
   991                           ; 0 bytes @ 0x5
   992                           
   993  0025                     ___awmod@sign:	
   994                           ; 0 bytes @ 0x5
   995                           
   996  0025                     ___lwdiv@quotient:	
   997                           ; 1 bytes @ 0x5
   998                           
   999                           
  1000                           ; 2 bytes @ 0x5
  1001  0025                     	ds	1
  1002  0026                     ??__tdiv_to_l_:	
  1003  0026                     ??__div_to_l_:	
  1004                           ; 0 bytes @ 0x6
  1005                           
  1006  0026                     ??___ftge:	
  1007                           ; 0 bytes @ 0x6
  1008                           
  1009  0026                     ?___awdiv:	
  1010                           ; 0 bytes @ 0x6
  1011                           
  1012  0026                     ___awdiv@divisor:	
  1013                           ; 2 bytes @ 0x6
  1014                           
  1015                           
  1016                           ; 2 bytes @ 0x6
  1017  0026                     	ds	2
  1018  0028                     ?___lbtoft:	
  1019  0028                     ?___lltoft:	
  1020                           ; 3 bytes @ 0x8
  1021                           
  1022  0028                     ?___lwtoft:	
  1023                           ; 3 bytes @ 0x8
  1024                           
  1025  0028                     LCDWriteString@i:	
  1026                           ; 3 bytes @ 0x8
  1027                           
  1028  0028                     ___awdiv@dividend:	
  1029                           ; 2 bytes @ 0x8
  1030                           
  1031  0028                     ___lwtoft@c:	
  1032                           ; 2 bytes @ 0x8
  1033                           
  1034  0028                     ___lldiv@quotient:	
  1035                           ; 2 bytes @ 0x8
  1036                           
  1037  0028                     ___lltoft@c:	
  1038                           ; 4 bytes @ 0x8
  1039                           
  1040                           
  1041                           ; 4 bytes @ 0x8
  1042  0028                     	ds	2
  1043  002A                     ___awdiv@counter:	
  1044  002A                     __tdiv_to_l_@quot:	
  1045                           ; 1 bytes @ 0xA
  1046                           
  1047                           
  1048                           ; 4 bytes @ 0xA
  1049  002A                     	ds	1
  1050  002B                     ??___lbtoft:	
  1051  002B                     ??___lwtoft:	
  1052                           ; 0 bytes @ 0xB
  1053                           
  1054  002B                     ___awdiv@sign:	
  1055                           ; 0 bytes @ 0xB
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0xB
  1059  002B                     	ds	1
  1060  002C                     ___lldiv@counter:	
  1061  002C                     ___awdiv@quotient:	
  1062                           ; 1 bytes @ 0xC
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0xC
  1066  002C                     	ds	2
  1067  002E                     ?___bmul:	
  1068  002E                     ___bmul@multiplicand:	
  1069                           ; 1 bytes @ 0xE
  1070                           
  1071  002E                     __tdiv_to_l_@cntr:	
  1072                           ; 1 bytes @ 0xE
  1073                           
  1074  002E                     __div_to_l_@quot:	
  1075                           ; 1 bytes @ 0xE
  1076                           
  1077                           
  1078                           ; 4 bytes @ 0xE
  1079  002E                     	ds	1
  1080  002F                     ??___bmul:	
  1081  002F                     __tdiv_to_l_@exp1:	
  1082                           ; 0 bytes @ 0xF
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0xF
  1086  002F                     	ds	1
  1087  0030                     ___bmul@product:	
  1088                           
  1089                           ; 1 bytes @ 0x10
  1090  0030                     	ds	1
  1091  0031                     ___bmul@multiplier:	
  1092                           
  1093                           ; 1 bytes @ 0x11
  1094  0031                     	ds	1
  1095  0032                     ?___ftmul:	
  1096  0032                     __div_to_l_@cntr:	
  1097                           ; 3 bytes @ 0x12
  1098                           
  1099  0032                     ___ftmul@f1:	
  1100                           ; 1 bytes @ 0x12
  1101                           
  1102                           
  1103                           ; 3 bytes @ 0x12
  1104  0032                     	ds	1
  1105  0033                     __div_to_l_@exp1:	
  1106                           
  1107                           ; 1 bytes @ 0x13
  1108  0033                     	ds	2
  1109  0035                     ___ftmul@f2:	
  1110                           
  1111                           ; 3 bytes @ 0x15
  1112  0035                     	ds	3
  1113  0038                     ??___ftmul:	
  1114                           
  1115                           ; 0 bytes @ 0x18
  1116  0038                     	ds	4
  1117  003C                     ___ftmul@exp:	
  1118                           
  1119                           ; 1 bytes @ 0x1C
  1120  003C                     	ds	1
  1121  003D                     ___ftmul@f3_as_product:	
  1122                           
  1123                           ; 3 bytes @ 0x1D
  1124  003D                     	ds	3
  1125  0040                     ___ftmul@cntr:	
  1126                           
  1127                           ; 1 bytes @ 0x20
  1128  0040                     	ds	1
  1129  0041                     ___ftmul@sign:	
  1130                           
  1131                           ; 1 bytes @ 0x21
  1132  0041                     	ds	1
  1133  0042                     ?_fround:	
  1134  0042                     ?_scale:	
  1135                           ; 3 bytes @ 0x22
  1136                           
  1137  0042                     ?___ftdiv:	
  1138                           ; 3 bytes @ 0x22
  1139                           
  1140  0042                     ___ftdiv@f2:	
  1141                           ; 3 bytes @ 0x22
  1142                           
  1143                           
  1144                           ; 3 bytes @ 0x22
  1145  0042                     	ds	3
  1146  0045                     ??_fround:	
  1147  0045                     ??_scale:	
  1148                           ; 0 bytes @ 0x25
  1149                           
  1150  0045                     ___ftdiv@f1:	
  1151                           ; 0 bytes @ 0x25
  1152                           
  1153                           
  1154                           ; 3 bytes @ 0x25
  1155  0045                     	ds	2
  1156  0047                     _scale$855:	
  1157                           
  1158                           ; 3 bytes @ 0x27
  1159  0047                     	ds	1
  1160  0048                     ??___ftdiv:	
  1161                           
  1162                           ; 0 bytes @ 0x28
  1163  0048                     	ds	2
  1164  004A                     scale@scl:	
  1165                           
  1166                           ; 1 bytes @ 0x2A
  1167  004A                     	ds	1
  1168  004B                     ?___fttol:	
  1169  004B                     ___fttol@f1:	
  1170                           ; 4 bytes @ 0x2B
  1171                           
  1172  004B                     _fround$854:	
  1173                           ; 3 bytes @ 0x2B
  1174                           
  1175                           
  1176                           ; 3 bytes @ 0x2B
  1177  004B                     	ds	1
  1178  004C                     ___ftdiv@cntr:	
  1179                           
  1180                           ; 1 bytes @ 0x2C
  1181  004C                     	ds	1
  1182  004D                     ___ftdiv@f3:	
  1183                           
  1184                           ; 3 bytes @ 0x2D
  1185  004D                     	ds	1
  1186  004E                     _fround$853:	
  1187                           
  1188                           ; 3 bytes @ 0x2E
  1189  004E                     	ds	1
  1190  004F                     ??___fttol:	
  1191                           
  1192                           ; 0 bytes @ 0x2F
  1193  004F                     	ds	1
  1194  0050                     ___ftdiv@exp:	
  1195                           
  1196                           ; 1 bytes @ 0x30
  1197  0050                     	ds	1
  1198  0051                     fround@prec:	
  1199  0051                     ___ftdiv@sign:	
  1200                           ; 1 bytes @ 0x31
  1201                           
  1202                           
  1203                           ; 1 bytes @ 0x31
  1204  0051                     	ds	1
  1205  0052                     ??_sampleReference:	
  1206  0052                     ?_sampleVoltage:	
  1207                           ; 0 bytes @ 0x32
  1208                           
  1209  0052                     ?___ftadd:	
  1210                           ; 3 bytes @ 0x32
  1211                           
  1212  0052                     ___ftadd@f1:	
  1213                           ; 3 bytes @ 0x32
  1214                           
  1215  0052                     _sampleCurrent$852:	
  1216                           ; 3 bytes @ 0x32
  1217                           
  1218                           
  1219                           ; 3 bytes @ 0x32
  1220  0052                     	ds	1
  1221  0053                     ___fttol@sign1:	
  1222                           
  1223                           ; 1 bytes @ 0x33
  1224  0053                     	ds	1
  1225  0054                     ___fttol@lval:	
  1226                           
  1227                           ; 4 bytes @ 0x34
  1228  0054                     	ds	1
  1229  0055                     ??_sampleVoltage:	
  1230  0055                     ___ftadd@f2:	
  1231                           ; 0 bytes @ 0x35
  1232                           
  1233                           
  1234                           ; 3 bytes @ 0x35
  1235  0055                     	ds	2
  1236  0057                     sampleVoltage@chan:	
  1237                           
  1238                           ; 1 bytes @ 0x37
  1239  0057                     	ds	1
  1240  0058                     ??_sampleBatteryCells:	
  1241  0058                     ??___ftadd:	
  1242                           ; 0 bytes @ 0x38
  1243                           
  1244  0058                     ___fttol@exp1:	
  1245                           ; 0 bytes @ 0x38
  1246                           
  1247                           
  1248                           ; 1 bytes @ 0x38
  1249  0058                     	ds	4
  1250  005C                     ___ftadd@sign:	
  1251  005C                     _sampleBatteryCells$851:	
  1252                           ; 1 bytes @ 0x3C
  1253                           
  1254                           
  1255                           ; 3 bytes @ 0x3C
  1256  005C                     	ds	1
  1257  005D                     ___ftadd@exp2:	
  1258                           
  1259                           ; 1 bytes @ 0x3D
  1260  005D                     	ds	1
  1261  005E                     ___ftadd@exp1:	
  1262                           
  1263                           ; 1 bytes @ 0x3E
  1264  005E                     	ds	1
  1265  005F                     ?_batteryVoltage:	
  1266  005F                     ?___ftsub:	
  1267                           ; 3 bytes @ 0x3F
  1268                           
  1269  005F                     ___ftsub@f2:	
  1270                           ; 3 bytes @ 0x3F
  1271                           
  1272                           
  1273                           ; 3 bytes @ 0x3F
  1274  005F                     	ds	3
  1275  0062                     ??_batteryVoltage:	
  1276  0062                     ___ftsub@f1:	
  1277                           ; 0 bytes @ 0x42
  1278                           
  1279                           
  1280                           ; 3 bytes @ 0x42
  1281  0062                     	ds	1
  1282  0063                     batteryVoltage@sum:	
  1283                           
  1284                           ; 3 bytes @ 0x43
  1285  0063                     	ds	3
  1286  0066                     batteryVoltage@i:	
  1287                           
  1288                           ; 1 bytes @ 0x46
  1289  0066                     	ds	1
  1290  0067                     ?_sprintf:	
  1291  0067                     sprintf@sp:	
  1292                           ; 2 bytes @ 0x47
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x47
  1296  0067                     	ds	2
  1297  0069                     sprintf@f:	
  1298                           
  1299                           ; 2 bytes @ 0x49
  1300  0069                     	ds	5
  1301  006E                     ?_displayLCD:	
  1302  006E                     displayLCD@disp:	
  1303                           ; 0 bytes @ 0x4E
  1304                           
  1305                           
  1306                           ; 2 bytes @ 0x4E
  1307  006E                     	ds	2
  1308                           
  1309                           	psect	maintext
  1310  1F91                     __pmaintext:	
  1311 ;;
  1312 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1313 ;;
  1314 ;; *************** function _main *****************
  1315 ;; Defined at:
  1316 ;;		line 64 in file "PIC16F917 Battery Management.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;		None               void
  1323 ;; Registers used:
  1324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : B00/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0
  1332 ;;      Temps:          0       0       2       0       0
  1333 ;;      Totals:         0       0       2       0       0
  1334 ;;Total ram usage:        2 bytes
  1335 ;; Hardware stack levels required when called:    6
  1336 ;; This function calls:
  1337 ;;		_LCDSetCursor
  1338 ;;		_LCDWriteString
  1339 ;;		_displayLCD
  1340 ;;		_handlePB
  1341 ;;		_initController
  1342 ;;		_sampleBatteryCells
  1343 ;;		_sampleCurrent
  1344 ;;		_sampleReference
  1345 ;;		_sprintf
  1346 ;; This function is called by:
  1347 ;;		Startup code after reset
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           
  1352                           ;psect for function _main
  1353  1F91                     _main:	
  1354                           
  1355                           ;PIC16F917 Battery Management.c: 66: initController();
  1356                           
  1357                           ;incstack = 0
  1358                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1359  1F91  160A  158A  23E7  160A  158A  	fcall	_initController
  1360                           
  1361                           ;PIC16F917 Battery Management.c: 70: RD4 = 1;
  1362  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  1363  1F97  1303               	bcf	3,6	;RP1=0, select bank0
  1364  1F98  1608               	bsf	8,4	;volatile
  1365                           
  1366                           ;PIC16F917 Battery Management.c: 76: sprintf(topStr, "                ");
  1367  1F99  30B5               	movlw	(low (_topStr| 0))& (0+255)
  1368  1F9A  00E7               	movwf	sprintf@sp
  1369  1F9B  3000               	movlw	0
  1370  1F9C  00E8               	movwf	sprintf@sp+1
  1371  1F9D  30C2               	movlw	low (STR_1| (0+32768))
  1372  1F9E  00E9               	movwf	sprintf@f
  1373  1F9F  3098               	movlw	high (STR_1| (0+32768))
  1374  1FA0  00EA               	movwf	sprintf@f+1
  1375  1FA1  120A  118A  2058  160A  158A  	fcall	_sprintf
  1376                           
  1377                           ;PIC16F917 Battery Management.c: 77: LCDSetCursor(0x00);
  1378  1FA6  3000               	movlw	0
  1379  1FA7  160A  158A  2419  160A  158A  	fcall	_LCDSetCursor
  1380                           
  1381                           ;PIC16F917 Battery Management.c: 78: LCDWriteString (topStr);
  1382  1FAC  30B5               	movlw	(low (_topStr| 0))& (0+255)
  1383  1FAD  1283               	bcf	3,5	;RP0=0, select bank0
  1384  1FAE  1303               	bcf	3,6	;RP1=0, select bank0
  1385  1FAF  00A3               	movwf	LCDWriteString@a
  1386  1FB0  3000               	movlw	0
  1387  1FB1  00A4               	movwf	LCDWriteString@a+1
  1388  1FB2  160A  158A  248B  160A  158A  	fcall	_LCDWriteString
  1389                           
  1390                           ;PIC16F917 Battery Management.c: 79: sprintf(btmStr, "                ");
  1391  1FB7  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  1392  1FB8  1283               	bcf	3,5	;RP0=0, select bank0
  1393  1FB9  1303               	bcf	3,6	;RP1=0, select bank0
  1394  1FBA  00E7               	movwf	sprintf@sp
  1395  1FBB  3001               	movlw	1
  1396  1FBC  00E8               	movwf	sprintf@sp+1
  1397  1FBD  30C2               	movlw	low (STR_1| (0+32768))
  1398  1FBE  00E9               	movwf	sprintf@f
  1399  1FBF  3098               	movlw	high (STR_1| (0+32768))
  1400  1FC0  00EA               	movwf	sprintf@f+1
  1401  1FC1  120A  118A  2058  160A  158A  	fcall	_sprintf
  1402                           
  1403                           ;PIC16F917 Battery Management.c: 80: LCDSetCursor(0x10);
  1404  1FC6  3010               	movlw	16
  1405  1FC7  160A  158A  2419  160A  158A  	fcall	_LCDSetCursor
  1406                           
  1407                           ;PIC16F917 Battery Management.c: 81: LCDWriteString (btmStr);
  1408  1FCC  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  1409  1FCD  1283               	bcf	3,5	;RP0=0, select bank0
  1410  1FCE  1303               	bcf	3,6	;RP1=0, select bank0
  1411  1FCF  00A3               	movwf	LCDWriteString@a
  1412  1FD0  3001               	movlw	1
  1413  1FD1  00A4               	movwf	LCDWriteString@a+1
  1414  1FD2  160A  158A  248B  160A  158A  	fcall	_LCDWriteString
  1415  1FD7                     l4286:	
  1416                           ;PIC16F917 Battery Management.c: 84: while(1)
  1417                           
  1418                           
  1419                           ;PIC16F917 Battery Management.c: 85: {
  1420                           ;PIC16F917 Battery Management.c: 86: sampleReference();
  1421  1FD7  160A  158A  26B8  160A  158A  	fcall	_sampleReference
  1422                           
  1423                           ;PIC16F917 Battery Management.c: 87: sampleCurrent();
  1424  1FDC  160A  118A  20B7  160A  158A  	fcall	_sampleCurrent
  1425                           
  1426                           ;PIC16F917 Battery Management.c: 88: sampleBatteryCells();
  1427  1FE1  120A  158A  2501  160A  158A  	fcall	_sampleBatteryCells
  1428                           
  1429                           ;PIC16F917 Battery Management.c: 90: handlePB();
  1430  1FE6  160A  158A  2305  160A  158A  	fcall	_handlePB
  1431                           
  1432                           ;PIC16F917 Battery Management.c: 92: displayLCD(LCDDisplayMode);
  1433  1FEB  0878               	movf	_LCDDisplayMode,w
  1434  1FEC  1683               	bsf	3,5	;RP0=1, select bank1
  1435  1FED  1303               	bcf	3,6	;RP1=0, select bank1
  1436  1FEE  00E1               	movwf	??_main^(0+128)
  1437  1FEF  01E2               	clrf	(??_main^(0+128)+1)
  1438  1FF0  0861               	movf	??_main^(0+128),w
  1439  1FF1  1283               	bcf	3,5	;RP0=0, select bank0
  1440  1FF2  1303               	bcf	3,6	;RP1=0, select bank0
  1441  1FF3  00EE               	movwf	displayLCD@disp
  1442  1FF4  1683               	bsf	3,5	;RP0=1, select bank1
  1443  1FF5  1303               	bcf	3,6	;RP1=0, select bank1
  1444  1FF6  0862               	movf	(??_main+1)^(0+128),w
  1445  1FF7  1283               	bcf	3,5	;RP0=0, select bank0
  1446  1FF8  1303               	bcf	3,6	;RP1=0, select bank0
  1447  1FF9  00EF               	movwf	displayLCD@disp+1
  1448  1FFA  160A  118A  2680  160A  158A  	fcall	_displayLCD
  1449  1FFF  2FD7               	goto	l4286
  1450  2000                     __end_of_main:	
  1451                           
  1452                           	psect	text1
  1453  1EB8                     __ptext1:	
  1454 ;; *************** function _sampleReference *****************
  1455 ;; Defined at:
  1456 ;;		line 128 in file "PIC16F917 Battery Management.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;		None
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;		None               void
  1463 ;; Registers used:
  1464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1470 ;;      Params:         0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0
  1472 ;;      Temps:          0       2       0       0       0
  1473 ;;      Totals:         0       2       0       0       0
  1474 ;;Total ram usage:        2 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    3
  1477 ;; This function calls:
  1478 ;;		___ftdiv
  1479 ;;		___ftmul
  1480 ;;		___lwtoft
  1481 ;;		_analogRead
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;;		_checkCurrent
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _sampleReference
  1490  1EB8                     _sampleReference:	
  1491                           
  1492                           ;PIC16F917 Battery Management.c: 131: RD1 = 1;
  1493                           
  1494                           ;incstack = 0
  1495                           ; Regs used in _sampleReference: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1496  1EB8  1283               	bcf	3,5	;RP0=0, select bank0
  1497  1EB9  1303               	bcf	3,6	;RP1=0, select bank0
  1498  1EBA  1488               	bsf	8,1	;volatile
  1499                           
  1500                           ;PIC16F917 Battery Management.c: 133: RC2 = 1;
  1501  1EBB  1507               	bsf	7,2	;volatile
  1502                           
  1503                           ;PIC16F917 Battery Management.c: 135: _delay((unsigned long)((5)*(8000000/4000.0)));
  1504  1EBC  300D               	movlw	13
  1505  1EBD  00D3               	movwf	??_sampleReference+1
  1506  1EBE  30FB               	movlw	251
  1507  1EBF  00D2               	movwf	??_sampleReference
  1508  1EC0                     u6107:	
  1509  1EC0  0BD2               	decfsz	??_sampleReference,f
  1510  1EC1  2EC0               	goto	u6107
  1511  1EC2  0BD3               	decfsz	??_sampleReference+1,f
  1512  1EC3  2EC0               	goto	u6107
  1513  1EC4  2EC5               	nop2
  1514                           
  1515                           ;PIC16F917 Battery Management.c: 137: refValue = analogRead(REFV);
  1516  1EC5  3002               	movlw	2
  1517  1EC6  160A  158A  2452  160A  158A  	fcall	_analogRead
  1518  1ECB  0875               	movf	?_analogRead+1,w
  1519  1ECC  00F7               	movwf	_refValue+1
  1520  1ECD  0874               	movf	?_analogRead,w
  1521  1ECE  00F6               	movwf	_refValue
  1522                           
  1523                           ;PIC16F917 Battery Management.c: 140: RD1 = 0;
  1524  1ECF  1283               	bcf	3,5	;RP0=0, select bank0
  1525  1ED0  1303               	bcf	3,6	;RP1=0, select bank0
  1526  1ED1  1088               	bcf	8,1	;volatile
  1527                           
  1528                           ;PIC16F917 Battery Management.c: 142: RC2 = 0;
  1529  1ED2  1107               	bcf	7,2	;volatile
  1530                           
  1531                           ;PIC16F917 Battery Management.c: 144: supVolt = (refVolt * 1023)/refValue;
  1532  1ED3  0877               	movf	_refValue+1,w
  1533  1ED4  00A9               	movwf	___lwtoft@c+1
  1534  1ED5  0876               	movf	_refValue,w
  1535  1ED6  00A8               	movwf	___lwtoft@c
  1536  1ED7  160A  158A  22D3  160A  158A  	fcall	___lwtoft
  1537  1EDC  1283               	bcf	3,5	;RP0=0, select bank0
  1538  1EDD  1303               	bcf	3,6	;RP1=0, select bank0
  1539  1EDE  0828               	movf	?___lwtoft,w
  1540  1EDF  00C2               	movwf	___ftdiv@f2
  1541  1EE0  0829               	movf	?___lwtoft+1,w
  1542  1EE1  00C3               	movwf	___ftdiv@f2+1
  1543  1EE2  082A               	movf	?___lwtoft+2,w
  1544  1EE3  00C4               	movwf	___ftdiv@f2+2
  1545  1EE4  30C0               	movlw	192
  1546  1EE5  00B2               	movwf	___ftmul@f1
  1547  1EE6  307F               	movlw	127
  1548  1EE7  00B3               	movwf	___ftmul@f1+1
  1549  1EE8  3044               	movlw	68
  1550  1EE9  00B4               	movwf	___ftmul@f1+2
  1551  1EEA  3088               	movlw	low (_refVolt| (0+32768))
  1552  1EEB  0084               	movwf	4
  1553  1EEC  3098               	movlw	high (_refVolt| (0+32768))
  1554  1EED  00FF               	movwf	127
  1555  1EEE  160A  158A  2000  160A  158A  	fcall	stringtab
  1556  1EF3  00B5               	movwf	___ftmul@f2
  1557  1EF4  160A  158A  2000  160A  158A  	fcall	stringtab
  1558  1EF9  00B6               	movwf	___ftmul@f2+1
  1559  1EFA  160A  158A  2000  160A  158A  	fcall	stringtab
  1560  1EFF  00B7               	movwf	___ftmul@f2+2
  1561  1F00  160A  118A  2371  160A  158A  	fcall	___ftmul
  1562  1F05  1283               	bcf	3,5	;RP0=0, select bank0
  1563  1F06  1303               	bcf	3,6	;RP1=0, select bank0
  1564  1F07  0832               	movf	?___ftmul,w
  1565  1F08  00C5               	movwf	___ftdiv@f1
  1566  1F09  0833               	movf	?___ftmul+1,w
  1567  1F0A  00C6               	movwf	___ftdiv@f1+1
  1568  1F0B  0834               	movf	?___ftmul+2,w
  1569  1F0C  00C7               	movwf	___ftdiv@f1+2
  1570  1F0D  160A  118A  21F6   	fcall	___ftdiv
  1571  1F10  1283               	bcf	3,5	;RP0=0, select bank0
  1572  1F11  1303               	bcf	3,6	;RP1=0, select bank0
  1573  1F12  0842               	movf	?___ftdiv,w
  1574  1F13  1683               	bsf	3,5	;RP0=1, select bank1
  1575  1F14  1303               	bcf	3,6	;RP1=0, select bank1
  1576  1F15  00E6               	movwf	_supVolt^(0+128)
  1577  1F16  1283               	bcf	3,5	;RP0=0, select bank0
  1578  1F17  1303               	bcf	3,6	;RP1=0, select bank0
  1579  1F18  0843               	movf	?___ftdiv+1,w
  1580  1F19  1683               	bsf	3,5	;RP0=1, select bank1
  1581  1F1A  1303               	bcf	3,6	;RP1=0, select bank1
  1582  1F1B  00E7               	movwf	(_supVolt+1)^(0+128)
  1583  1F1C  1283               	bcf	3,5	;RP0=0, select bank0
  1584  1F1D  1303               	bcf	3,6	;RP1=0, select bank0
  1585  1F1E  0844               	movf	?___ftdiv+2,w
  1586  1F1F  1683               	bsf	3,5	;RP0=1, select bank1
  1587  1F20  1303               	bcf	3,6	;RP1=0, select bank1
  1588  1F21  00E8               	movwf	(_supVolt+2)^(0+128)
  1589  1F22  0008               	return
  1590  1F23                     __end_of_sampleReference:	
  1591                           
  1592                           	psect	text2
  1593  10B7                     __ptext2:	
  1594 ;; *************** function _sampleCurrent *****************
  1595 ;; Defined at:
  1596 ;;		line 154 in file "PIC16F917 Battery Management.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;		None               void
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, pclath, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1610 ;;      Params:         0       0       0       0       0
  1611 ;;      Locals:         0       3       0       0       0
  1612 ;;      Temps:          0       0       0       0       0
  1613 ;;      Totals:         0       3       0       0       0
  1614 ;;Total ram usage:        3 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    3
  1617 ;; This function calls:
  1618 ;;		___ftdiv
  1619 ;;		___ftmul
  1620 ;;		___lbtoft
  1621 ;;		___lwtoft
  1622 ;;		_analogRead
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;;		_checkCurrent
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _sampleCurrent
  1631  10B7                     _sampleCurrent:	
  1632                           
  1633                           ;PIC16F917 Battery Management.c: 159: current = ((analogRead(CURRENT) * supVolt)/1023) /
      +                           (shuntRes * currentGain);
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _sampleCurrent: [wreg+status,2+status,0+pclath+cstack]
  1637  10B7  30C0               	movlw	192
  1638  10B8  1283               	bcf	3,5	;RP0=0, select bank0
  1639  10B9  1303               	bcf	3,6	;RP1=0, select bank0
  1640  10BA  00C2               	movwf	___ftdiv@f2
  1641  10BB  307F               	movlw	127
  1642  10BC  00C3               	movwf	___ftdiv@f2+1
  1643  10BD  3044               	movlw	68
  1644  10BE  00C4               	movwf	___ftdiv@f2+2
  1645  10BF  1683               	bsf	3,5	;RP0=1, select bank1
  1646  10C0  1303               	bcf	3,6	;RP1=0, select bank1
  1647  10C1  0866               	movf	_supVolt^(0+128),w
  1648  10C2  1283               	bcf	3,5	;RP0=0, select bank0
  1649  10C3  1303               	bcf	3,6	;RP1=0, select bank0
  1650  10C4  00B2               	movwf	___ftmul@f1
  1651  10C5  1683               	bsf	3,5	;RP0=1, select bank1
  1652  10C6  1303               	bcf	3,6	;RP1=0, select bank1
  1653  10C7  0867               	movf	(_supVolt+1)^(0+128),w
  1654  10C8  1283               	bcf	3,5	;RP0=0, select bank0
  1655  10C9  1303               	bcf	3,6	;RP1=0, select bank0
  1656  10CA  00B3               	movwf	___ftmul@f1+1
  1657  10CB  1683               	bsf	3,5	;RP0=1, select bank1
  1658  10CC  1303               	bcf	3,6	;RP1=0, select bank1
  1659  10CD  0868               	movf	(_supVolt+2)^(0+128),w
  1660  10CE  1283               	bcf	3,5	;RP0=0, select bank0
  1661  10CF  1303               	bcf	3,6	;RP1=0, select bank0
  1662  10D0  00B4               	movwf	___ftmul@f1+2
  1663  10D1  3007               	movlw	7
  1664  10D2  160A  158A  2452  160A  118A  	fcall	_analogRead
  1665  10D7  0875               	movf	?_analogRead+1,w
  1666  10D8  1283               	bcf	3,5	;RP0=0, select bank0
  1667  10D9  1303               	bcf	3,6	;RP1=0, select bank0
  1668  10DA  00A9               	movwf	___lwtoft@c+1
  1669  10DB  0874               	movf	?_analogRead,w
  1670  10DC  00A8               	movwf	___lwtoft@c
  1671  10DD  160A  158A  22D3  160A  118A  	fcall	___lwtoft
  1672  10E2  1283               	bcf	3,5	;RP0=0, select bank0
  1673  10E3  1303               	bcf	3,6	;RP1=0, select bank0
  1674  10E4  0828               	movf	?___lwtoft,w
  1675  10E5  00B5               	movwf	___ftmul@f2
  1676  10E6  0829               	movf	?___lwtoft+1,w
  1677  10E7  00B6               	movwf	___ftmul@f2+1
  1678  10E8  082A               	movf	?___lwtoft+2,w
  1679  10E9  00B7               	movwf	___ftmul@f2+2
  1680  10EA  160A  118A  2371  160A  118A  	fcall	___ftmul
  1681  10EF  1283               	bcf	3,5	;RP0=0, select bank0
  1682  10F0  1303               	bcf	3,6	;RP1=0, select bank0
  1683  10F1  0832               	movf	?___ftmul,w
  1684  10F2  00C5               	movwf	___ftdiv@f1
  1685  10F3  0833               	movf	?___ftmul+1,w
  1686  10F4  00C6               	movwf	___ftdiv@f1+1
  1687  10F5  0834               	movf	?___ftmul+2,w
  1688  10F6  00C7               	movwf	___ftdiv@f1+2
  1689  10F7  160A  118A  21F6  160A  118A  	fcall	___ftdiv
  1690  10FC  1283               	bcf	3,5	;RP0=0, select bank0
  1691  10FD  1303               	bcf	3,6	;RP1=0, select bank0
  1692  10FE  0842               	movf	?___ftdiv,w
  1693  10FF  00D2               	movwf	_sampleCurrent$852
  1694  1100  0843               	movf	?___ftdiv+1,w
  1695  1101  00D3               	movwf	_sampleCurrent$852+1
  1696  1102  0844               	movf	?___ftdiv+2,w
  1697  1103  00D4               	movwf	_sampleCurrent$852+2
  1698                           
  1699                           ;PIC16F917 Battery Management.c: 159: current = ((analogRead(CURRENT) * supVolt)/1023) /
      +                           (shuntRes * currentGain);
  1700  1104  1683               	bsf	3,5	;RP0=1, select bank1
  1701  1105  1303               	bcf	3,6	;RP1=0, select bank1
  1702  1106  0863               	movf	_shuntRes^(0+128),w
  1703  1107  1283               	bcf	3,5	;RP0=0, select bank0
  1704  1108  1303               	bcf	3,6	;RP1=0, select bank0
  1705  1109  00B2               	movwf	___ftmul@f1
  1706  110A  1683               	bsf	3,5	;RP0=1, select bank1
  1707  110B  1303               	bcf	3,6	;RP1=0, select bank1
  1708  110C  0864               	movf	(_shuntRes+1)^(0+128),w
  1709  110D  1283               	bcf	3,5	;RP0=0, select bank0
  1710  110E  1303               	bcf	3,6	;RP1=0, select bank0
  1711  110F  00B3               	movwf	___ftmul@f1+1
  1712  1110  1683               	bsf	3,5	;RP0=1, select bank1
  1713  1111  1303               	bcf	3,6	;RP1=0, select bank1
  1714  1112  0865               	movf	(_shuntRes+2)^(0+128),w
  1715  1113  1283               	bcf	3,5	;RP0=0, select bank0
  1716  1114  1303               	bcf	3,6	;RP1=0, select bank0
  1717  1115  00B4               	movwf	___ftmul@f1+2
  1718  1116  0879               	movf	_currentGain,w
  1719  1117  160A  158A  2322  160A  118A  	fcall	___lbtoft
  1720  111C  1283               	bcf	3,5	;RP0=0, select bank0
  1721  111D  1303               	bcf	3,6	;RP1=0, select bank0
  1722  111E  0828               	movf	?___lbtoft,w
  1723  111F  00B5               	movwf	___ftmul@f2
  1724  1120  0829               	movf	?___lbtoft+1,w
  1725  1121  00B6               	movwf	___ftmul@f2+1
  1726  1122  082A               	movf	?___lbtoft+2,w
  1727  1123  00B7               	movwf	___ftmul@f2+2
  1728  1124  160A  118A  2371  160A  118A  	fcall	___ftmul
  1729  1129  1283               	bcf	3,5	;RP0=0, select bank0
  1730  112A  1303               	bcf	3,6	;RP1=0, select bank0
  1731  112B  0832               	movf	?___ftmul,w
  1732  112C  00C2               	movwf	___ftdiv@f2
  1733  112D  0833               	movf	?___ftmul+1,w
  1734  112E  00C3               	movwf	___ftdiv@f2+1
  1735  112F  0834               	movf	?___ftmul+2,w
  1736  1130  00C4               	movwf	___ftdiv@f2+2
  1737  1131  0852               	movf	_sampleCurrent$852,w
  1738  1132  00C5               	movwf	___ftdiv@f1
  1739  1133  0853               	movf	_sampleCurrent$852+1,w
  1740  1134  00C6               	movwf	___ftdiv@f1+1
  1741  1135  0854               	movf	_sampleCurrent$852+2,w
  1742  1136  00C7               	movwf	___ftdiv@f1+2
  1743  1137  160A  118A  21F6   	fcall	___ftdiv
  1744  113A  1283               	bcf	3,5	;RP0=0, select bank0
  1745  113B  1303               	bcf	3,6	;RP1=0, select bank0
  1746  113C  0842               	movf	?___ftdiv,w
  1747  113D  1683               	bsf	3,5	;RP0=1, select bank1
  1748  113E  1303               	bcf	3,6	;RP1=0, select bank1
  1749  113F  00B2               	movwf	_current^(0+128)
  1750  1140  1283               	bcf	3,5	;RP0=0, select bank0
  1751  1141  1303               	bcf	3,6	;RP1=0, select bank0
  1752  1142  0843               	movf	?___ftdiv+1,w
  1753  1143  1683               	bsf	3,5	;RP0=1, select bank1
  1754  1144  1303               	bcf	3,6	;RP1=0, select bank1
  1755  1145  00B3               	movwf	(_current+1)^(0+128)
  1756  1146  1283               	bcf	3,5	;RP0=0, select bank0
  1757  1147  1303               	bcf	3,6	;RP1=0, select bank0
  1758  1148  0844               	movf	?___ftdiv+2,w
  1759  1149  1683               	bsf	3,5	;RP0=1, select bank1
  1760  114A  1303               	bcf	3,6	;RP1=0, select bank1
  1761  114B  00B4               	movwf	(_current+2)^(0+128)
  1762  114C  0008               	return
  1763  114D                     __end_of_sampleCurrent:	
  1764                           
  1765                           	psect	text3
  1766  1B22                     __ptext3:	
  1767 ;; *************** function ___lbtoft *****************
  1768 ;; Defined at:
  1769 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  c               1    wreg     unsigned char 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  c               1    4[COMMON] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  3    8[BANK0 ] float 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       3       0       0       0
  1784 ;;      Locals:         1       0       0       0       0
  1785 ;;      Temps:          0       4       0       0       0
  1786 ;;      Totals:         1       7       0       0       0
  1787 ;;Total ram usage:        8 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    2
  1790 ;; This function calls:
  1791 ;;		___ftpack
  1792 ;; This function is called by:
  1793 ;;		_sampleCurrent
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           
  1798                           ;psect for function ___lbtoft
  1799  1B22                     ___lbtoft:	
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1803                           ;___lbtoft@c stored from wreg
  1804  1B22  00F4               	movwf	___lbtoft@c
  1805  1B23  0874               	movf	___lbtoft@c,w
  1806  1B24  1283               	bcf	3,5	;RP0=0, select bank0
  1807  1B25  1303               	bcf	3,6	;RP1=0, select bank0
  1808  1B26  00AB               	movwf	??___lbtoft
  1809  1B27  01AC               	clrf	??___lbtoft+1
  1810  1B28  01AD               	clrf	??___lbtoft+2
  1811  1B29  082B               	movf	??___lbtoft,w
  1812  1B2A  00A0               	movwf	___ftpack@arg
  1813  1B2B  082C               	movf	??___lbtoft+1,w
  1814  1B2C  00A1               	movwf	___ftpack@arg+1
  1815  1B2D  082D               	movf	??___lbtoft+2,w
  1816  1B2E  00A2               	movwf	___ftpack@arg+2
  1817  1B2F  308E               	movlw	142
  1818  1B30  00AE               	movwf	??___lbtoft+3
  1819  1B31  082E               	movf	??___lbtoft+3,w
  1820  1B32  00A3               	movwf	___ftpack@exp
  1821  1B33  01A4               	clrf	___ftpack@sign
  1822  1B34  160A  158A  2723   	fcall	___ftpack
  1823  1B37  1283               	bcf	3,5	;RP0=0, select bank0
  1824  1B38  1303               	bcf	3,6	;RP1=0, select bank0
  1825  1B39  0820               	movf	?___ftpack,w
  1826  1B3A  00A8               	movwf	?___lbtoft
  1827  1B3B  0821               	movf	?___ftpack+1,w
  1828  1B3C  00A9               	movwf	?___lbtoft+1
  1829  1B3D  0822               	movf	?___ftpack+2,w
  1830  1B3E  00AA               	movwf	?___lbtoft+2
  1831  1B3F  0008               	return
  1832  1B40                     __end_of___lbtoft:	
  1833                           
  1834                           	psect	text4
  1835  0D01                     __ptext4:	
  1836 ;; *************** function _sampleBatteryCells *****************
  1837 ;; Defined at:
  1838 ;;		line 98 in file "PIC16F917 Battery Management.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;		None               void
  1845 ;; Registers used:
  1846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1852 ;;      Params:         0       0       0       0       0
  1853 ;;      Locals:         0       3       0       0       0
  1854 ;;      Temps:          0       4       0       0       0
  1855 ;;      Totals:         0       7       0       0       0
  1856 ;;Total ram usage:        7 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    4
  1859 ;; This function calls:
  1860 ;;		___ftmul
  1861 ;;		___lwdiv
  1862 ;;		___lwtoft
  1863 ;;		_sampleVoltage
  1864 ;; This function is called by:
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           
  1870                           ;psect for function _sampleBatteryCells
  1871  0D01                     _sampleBatteryCells:	
  1872                           
  1873                           ;PIC16F917 Battery Management.c: 101: RC2 = 1;
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in _sampleBatteryCells: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1877  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0D03  1507               	bsf	7,2	;volatile
  1880                           
  1881                           ;PIC16F917 Battery Management.c: 104: RD0 = 1;
  1882  0D04  1408               	bsf	8,0	;volatile
  1883                           
  1884                           ;PIC16F917 Battery Management.c: 106: _delay((unsigned long)((1)*(8000000/4000.0)));
  1885  0D05  3003               	movlw	3
  1886  0D06  00D9               	movwf	??_sampleBatteryCells+1
  1887  0D07  3097               	movlw	151
  1888  0D08  00D8               	movwf	??_sampleBatteryCells
  1889  0D09                     u6117:	
  1890  0D09  0BD8               	decfsz	??_sampleBatteryCells,f
  1891  0D0A  2D09               	goto	u6117
  1892  0D0B  0BD9               	decfsz	??_sampleBatteryCells+1,f
  1893  0D0C  2D09               	goto	u6117
  1894  0D0D  2D0E               	nop2
  1895                           
  1896                           ;PIC16F917 Battery Management.c: 109: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1897  0D0E  3000               	movlw	0
  1898  0D0F  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  1899  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  1900  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  1901  0D16  0852               	movf	?_sampleVoltage,w
  1902  0D17  00DC               	movwf	_sampleBatteryCells$851
  1903  0D18  0853               	movf	?_sampleVoltage+1,w
  1904  0D19  00DD               	movwf	_sampleBatteryCells$851+1
  1905  0D1A  0854               	movf	?_sampleVoltage+2,w
  1906  0D1B  00DE               	movwf	_sampleBatteryCells$851+2
  1907                           
  1908                           ;PIC16F917 Battery Management.c: 109: cellVolt[0] = ( ( cell1RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL1);
  1909  0D1C  085C               	movf	_sampleBatteryCells$851,w
  1910  0D1D  00B2               	movwf	___ftmul@f1
  1911  0D1E  085D               	movf	_sampleBatteryCells$851+1,w
  1912  0D1F  00B3               	movwf	___ftmul@f1+1
  1913  0D20  085E               	movf	_sampleBatteryCells$851+2,w
  1914  0D21  00B4               	movwf	___ftmul@f1+2
  1915  0D22  3097               	movlw	low (_cellRDB| (0+32768))
  1916  0D23  0084               	movwf	4
  1917  0D24  3098               	movlw	high (_cellRDB| (0+32768))
  1918  0D25  00FF               	movwf	127
  1919  0D26  160A  158A  2000  120A  158A  	fcall	stringtab
  1920  0D2B  00A0               	movwf	___lwdiv@divisor
  1921  0D2C  160A  158A  2000  120A  158A  	fcall	stringtab
  1922  0D31  00A1               	movwf	___lwdiv@divisor+1
  1923  0D32  3097               	movlw	low (_cellRDB| (0+32768))
  1924  0D33  0084               	movwf	4
  1925  0D34  3098               	movlw	high (_cellRDB| (0+32768))
  1926  0D35  00FF               	movwf	127
  1927  0D36  160A  158A  2000  120A  158A  	fcall	stringtab
  1928  0D3B  00D8               	movwf	??_sampleBatteryCells
  1929  0D3C  160A  158A  2000  120A  158A  	fcall	stringtab
  1930  0D41  00D9               	movwf	??_sampleBatteryCells+1
  1931  0D42  308B               	movlw	low (_cell1RDT| (0+32768))
  1932  0D43  0084               	movwf	4
  1933  0D44  3098               	movlw	high (_cell1RDT| (0+32768))
  1934  0D45  00FF               	movwf	127
  1935  0D46  160A  158A  2000  120A  158A  	fcall	stringtab
  1936  0D4B  00DA               	movwf	??_sampleBatteryCells+2
  1937  0D4C  160A  158A  2000  120A  158A  	fcall	stringtab
  1938  0D51  00DB               	movwf	??_sampleBatteryCells+3
  1939  0D52  0858               	movf	??_sampleBatteryCells,w
  1940  0D53  075A               	addwf	??_sampleBatteryCells+2,w
  1941  0D54  00A2               	movwf	___lwdiv@dividend
  1942  0D55  0859               	movf	??_sampleBatteryCells+1,w
  1943  0D56  1803               	skipnc
  1944  0D57  0A59               	incf	??_sampleBatteryCells+1,w
  1945  0D58  075B               	addwf	??_sampleBatteryCells+3,w
  1946  0D59  00A3               	movwf	___lwdiv@dividend+1
  1947  0D5A  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  1948  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0D61  0821               	movf	?___lwdiv+1,w
  1951  0D62  00A9               	movwf	___lwtoft@c+1
  1952  0D63  0820               	movf	?___lwdiv,w
  1953  0D64  00A8               	movwf	___lwtoft@c
  1954  0D65  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  1955  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  1956  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  1957  0D6C  0828               	movf	?___lwtoft,w
  1958  0D6D  00B5               	movwf	___ftmul@f2
  1959  0D6E  0829               	movf	?___lwtoft+1,w
  1960  0D6F  00B6               	movwf	___ftmul@f2+1
  1961  0D70  082A               	movf	?___lwtoft+2,w
  1962  0D71  00B7               	movwf	___ftmul@f2+2
  1963  0D72  160A  118A  2371  120A  158A  	fcall	___ftmul
  1964  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  1965  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  1966  0D79  0832               	movf	?___ftmul,w
  1967  0D7A  1683               	bsf	3,5	;RP0=1, select bank1
  1968  0D7B  1303               	bcf	3,6	;RP1=0, select bank1
  1969  0D7C  00A0               	movwf	_cellVolt^(0+128)
  1970  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0D7F  0833               	movf	?___ftmul+1,w
  1973  0D80  1683               	bsf	3,5	;RP0=1, select bank1
  1974  0D81  1303               	bcf	3,6	;RP1=0, select bank1
  1975  0D82  00A1               	movwf	(_cellVolt+1)^(0+128)
  1976  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  1977  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  1978  0D85  0834               	movf	?___ftmul+2,w
  1979  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  1980  0D87  1303               	bcf	3,6	;RP1=0, select bank1
  1981  0D88  00A2               	movwf	(_cellVolt+2)^(0+128)
  1982                           
  1983                           ;PIC16F917 Battery Management.c: 110: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1984  0D89  3001               	movlw	1
  1985  0D8A  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  1986  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  1987  0D90  1303               	bcf	3,6	;RP1=0, select bank0
  1988  0D91  0852               	movf	?_sampleVoltage,w
  1989  0D92  00DC               	movwf	_sampleBatteryCells$851
  1990  0D93  0853               	movf	?_sampleVoltage+1,w
  1991  0D94  00DD               	movwf	_sampleBatteryCells$851+1
  1992  0D95  0854               	movf	?_sampleVoltage+2,w
  1993  0D96  00DE               	movwf	_sampleBatteryCells$851+2
  1994                           
  1995                           ;PIC16F917 Battery Management.c: 110: cellVolt[1] = ( ( cell2RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL2);
  1996  0D97  085C               	movf	_sampleBatteryCells$851,w
  1997  0D98  00B2               	movwf	___ftmul@f1
  1998  0D99  085D               	movf	_sampleBatteryCells$851+1,w
  1999  0D9A  00B3               	movwf	___ftmul@f1+1
  2000  0D9B  085E               	movf	_sampleBatteryCells$851+2,w
  2001  0D9C  00B4               	movwf	___ftmul@f1+2
  2002  0D9D  3097               	movlw	low (_cellRDB| (0+32768))
  2003  0D9E  0084               	movwf	4
  2004  0D9F  3098               	movlw	high (_cellRDB| (0+32768))
  2005  0DA0  00FF               	movwf	127
  2006  0DA1  160A  158A  2000  120A  158A  	fcall	stringtab
  2007  0DA6  00A0               	movwf	___lwdiv@divisor
  2008  0DA7  160A  158A  2000  120A  158A  	fcall	stringtab
  2009  0DAC  00A1               	movwf	___lwdiv@divisor+1
  2010  0DAD  3097               	movlw	low (_cellRDB| (0+32768))
  2011  0DAE  0084               	movwf	4
  2012  0DAF  3098               	movlw	high (_cellRDB| (0+32768))
  2013  0DB0  00FF               	movwf	127
  2014  0DB1  160A  158A  2000  120A  158A  	fcall	stringtab
  2015  0DB6  00D8               	movwf	??_sampleBatteryCells
  2016  0DB7  160A  158A  2000  120A  158A  	fcall	stringtab
  2017  0DBC  00D9               	movwf	??_sampleBatteryCells+1
  2018  0DBD  308D               	movlw	low (_cell2RDT| (0+32768))
  2019  0DBE  0084               	movwf	4
  2020  0DBF  3098               	movlw	high (_cell2RDT| (0+32768))
  2021  0DC0  00FF               	movwf	127
  2022  0DC1  160A  158A  2000  120A  158A  	fcall	stringtab
  2023  0DC6  00DA               	movwf	??_sampleBatteryCells+2
  2024  0DC7  160A  158A  2000  120A  158A  	fcall	stringtab
  2025  0DCC  00DB               	movwf	??_sampleBatteryCells+3
  2026  0DCD  0858               	movf	??_sampleBatteryCells,w
  2027  0DCE  075A               	addwf	??_sampleBatteryCells+2,w
  2028  0DCF  00A2               	movwf	___lwdiv@dividend
  2029  0DD0  0859               	movf	??_sampleBatteryCells+1,w
  2030  0DD1  1803               	skipnc
  2031  0DD2  0A59               	incf	??_sampleBatteryCells+1,w
  2032  0DD3  075B               	addwf	??_sampleBatteryCells+3,w
  2033  0DD4  00A3               	movwf	___lwdiv@dividend+1
  2034  0DD5  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  2035  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0DDC  0821               	movf	?___lwdiv+1,w
  2038  0DDD  00A9               	movwf	___lwtoft@c+1
  2039  0DDE  0820               	movf	?___lwdiv,w
  2040  0DDF  00A8               	movwf	___lwtoft@c
  2041  0DE0  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  2042  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0DE7  0828               	movf	?___lwtoft,w
  2045  0DE8  00B5               	movwf	___ftmul@f2
  2046  0DE9  0829               	movf	?___lwtoft+1,w
  2047  0DEA  00B6               	movwf	___ftmul@f2+1
  2048  0DEB  082A               	movf	?___lwtoft+2,w
  2049  0DEC  00B7               	movwf	___ftmul@f2+2
  2050  0DED  160A  118A  2371  120A  158A  	fcall	___ftmul
  2051  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  2052  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0DF4  0832               	movf	?___ftmul,w
  2054  0DF5  1683               	bsf	3,5	;RP0=1, select bank1
  2055  0DF6  1303               	bcf	3,6	;RP1=0, select bank1
  2056  0DF7  00A3               	movwf	(_cellVolt^(0+128)+3)
  2057  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0DFA  0833               	movf	?___ftmul+1,w
  2060  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  2061  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  2062  0DFD  00A4               	movwf	((_cellVolt+1)^(0+128)+3)
  2063  0DFE  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0DFF  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0E00  0834               	movf	?___ftmul+2,w
  2066  0E01  1683               	bsf	3,5	;RP0=1, select bank1
  2067  0E02  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0E03  00A5               	movwf	((_cellVolt+2)^(0+128)+3)
  2069                           
  2070                           ;PIC16F917 Battery Management.c: 111: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  2071  0E04  3005               	movlw	5
  2072  0E05  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  2073  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
  2074  0E0B  1303               	bcf	3,6	;RP1=0, select bank0
  2075  0E0C  0852               	movf	?_sampleVoltage,w
  2076  0E0D  00DC               	movwf	_sampleBatteryCells$851
  2077  0E0E  0853               	movf	?_sampleVoltage+1,w
  2078  0E0F  00DD               	movwf	_sampleBatteryCells$851+1
  2079  0E10  0854               	movf	?_sampleVoltage+2,w
  2080  0E11  00DE               	movwf	_sampleBatteryCells$851+2
  2081                           
  2082                           ;PIC16F917 Battery Management.c: 111: cellVolt[2] = ( ( cell3RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL3);
  2083  0E12  085C               	movf	_sampleBatteryCells$851,w
  2084  0E13  00B2               	movwf	___ftmul@f1
  2085  0E14  085D               	movf	_sampleBatteryCells$851+1,w
  2086  0E15  00B3               	movwf	___ftmul@f1+1
  2087  0E16  085E               	movf	_sampleBatteryCells$851+2,w
  2088  0E17  00B4               	movwf	___ftmul@f1+2
  2089  0E18  3097               	movlw	low (_cellRDB| (0+32768))
  2090  0E19  0084               	movwf	4
  2091  0E1A  3098               	movlw	high (_cellRDB| (0+32768))
  2092  0E1B  00FF               	movwf	127
  2093  0E1C  160A  158A  2000  120A  158A  	fcall	stringtab
  2094  0E21  00A0               	movwf	___lwdiv@divisor
  2095  0E22  160A  158A  2000  120A  158A  	fcall	stringtab
  2096  0E27  00A1               	movwf	___lwdiv@divisor+1
  2097  0E28  3097               	movlw	low (_cellRDB| (0+32768))
  2098  0E29  0084               	movwf	4
  2099  0E2A  3098               	movlw	high (_cellRDB| (0+32768))
  2100  0E2B  00FF               	movwf	127
  2101  0E2C  160A  158A  2000  120A  158A  	fcall	stringtab
  2102  0E31  00D8               	movwf	??_sampleBatteryCells
  2103  0E32  160A  158A  2000  120A  158A  	fcall	stringtab
  2104  0E37  00D9               	movwf	??_sampleBatteryCells+1
  2105  0E38  308F               	movlw	low (_cell3RDT| (0+32768))
  2106  0E39  0084               	movwf	4
  2107  0E3A  3098               	movlw	high (_cell3RDT| (0+32768))
  2108  0E3B  00FF               	movwf	127
  2109  0E3C  160A  158A  2000  120A  158A  	fcall	stringtab
  2110  0E41  00DA               	movwf	??_sampleBatteryCells+2
  2111  0E42  160A  158A  2000  120A  158A  	fcall	stringtab
  2112  0E47  00DB               	movwf	??_sampleBatteryCells+3
  2113  0E48  0858               	movf	??_sampleBatteryCells,w
  2114  0E49  075A               	addwf	??_sampleBatteryCells+2,w
  2115  0E4A  00A2               	movwf	___lwdiv@dividend
  2116  0E4B  0859               	movf	??_sampleBatteryCells+1,w
  2117  0E4C  1803               	skipnc
  2118  0E4D  0A59               	incf	??_sampleBatteryCells+1,w
  2119  0E4E  075B               	addwf	??_sampleBatteryCells+3,w
  2120  0E4F  00A3               	movwf	___lwdiv@dividend+1
  2121  0E50  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  2122  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0E57  0821               	movf	?___lwdiv+1,w
  2125  0E58  00A9               	movwf	___lwtoft@c+1
  2126  0E59  0820               	movf	?___lwdiv,w
  2127  0E5A  00A8               	movwf	___lwtoft@c
  2128  0E5B  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  2129  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0E62  0828               	movf	?___lwtoft,w
  2132  0E63  00B5               	movwf	___ftmul@f2
  2133  0E64  0829               	movf	?___lwtoft+1,w
  2134  0E65  00B6               	movwf	___ftmul@f2+1
  2135  0E66  082A               	movf	?___lwtoft+2,w
  2136  0E67  00B7               	movwf	___ftmul@f2+2
  2137  0E68  160A  118A  2371  120A  158A  	fcall	___ftmul
  2138  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0E6F  0832               	movf	?___ftmul,w
  2141  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  2142  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  2143  0E72  00A6               	movwf	(_cellVolt^(0+128)+6)
  2144  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0E75  0833               	movf	?___ftmul+1,w
  2147  0E76  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0E77  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0E78  00A7               	movwf	((_cellVolt+1)^(0+128)+6)
  2150  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0E7B  0834               	movf	?___ftmul+2,w
  2153  0E7C  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0E7D  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0E7E  00A8               	movwf	((_cellVolt+2)^(0+128)+6)
  2156                           
  2157                           ;PIC16F917 Battery Management.c: 113: RD0 = 0;
  2158  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0E81  1008               	bcf	8,0	;volatile
  2161                           
  2162                           ;PIC16F917 Battery Management.c: 114: RC3 = 1;
  2163  0E82  1587               	bsf	7,3	;volatile
  2164                           
  2165                           ;PIC16F917 Battery Management.c: 116: _delay((unsigned long)((1)*(8000000/4000.0)));
  2166  0E83  3003               	movlw	3
  2167  0E84  00D9               	movwf	??_sampleBatteryCells+1
  2168  0E85  3097               	movlw	151
  2169  0E86  00D8               	movwf	??_sampleBatteryCells
  2170  0E87                     u6127:	
  2171  0E87  0BD8               	decfsz	??_sampleBatteryCells,f
  2172  0E88  2E87               	goto	u6127
  2173  0E89  0BD9               	decfsz	??_sampleBatteryCells+1,f
  2174  0E8A  2E87               	goto	u6127
  2175  0E8B  2E8C               	nop2
  2176                           
  2177                           ;PIC16F917 Battery Management.c: 118: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  2178  0E8C  3006               	movlw	6
  2179  0E8D  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  2180  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0E94  0852               	movf	?_sampleVoltage,w
  2183  0E95  00DC               	movwf	_sampleBatteryCells$851
  2184  0E96  0853               	movf	?_sampleVoltage+1,w
  2185  0E97  00DD               	movwf	_sampleBatteryCells$851+1
  2186  0E98  0854               	movf	?_sampleVoltage+2,w
  2187  0E99  00DE               	movwf	_sampleBatteryCells$851+2
  2188                           
  2189                           ;PIC16F917 Battery Management.c: 118: cellVolt[3] = ( ( cell4RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL4);
  2190  0E9A  085C               	movf	_sampleBatteryCells$851,w
  2191  0E9B  00B2               	movwf	___ftmul@f1
  2192  0E9C  085D               	movf	_sampleBatteryCells$851+1,w
  2193  0E9D  00B3               	movwf	___ftmul@f1+1
  2194  0E9E  085E               	movf	_sampleBatteryCells$851+2,w
  2195  0E9F  00B4               	movwf	___ftmul@f1+2
  2196  0EA0  3097               	movlw	low (_cellRDB| (0+32768))
  2197  0EA1  0084               	movwf	4
  2198  0EA2  3098               	movlw	high (_cellRDB| (0+32768))
  2199  0EA3  00FF               	movwf	127
  2200  0EA4  160A  158A  2000  120A  158A  	fcall	stringtab
  2201  0EA9  00A0               	movwf	___lwdiv@divisor
  2202  0EAA  160A  158A  2000  120A  158A  	fcall	stringtab
  2203  0EAF  00A1               	movwf	___lwdiv@divisor+1
  2204  0EB0  3097               	movlw	low (_cellRDB| (0+32768))
  2205  0EB1  0084               	movwf	4
  2206  0EB2  3098               	movlw	high (_cellRDB| (0+32768))
  2207  0EB3  00FF               	movwf	127
  2208  0EB4  160A  158A  2000  120A  158A  	fcall	stringtab
  2209  0EB9  00D8               	movwf	??_sampleBatteryCells
  2210  0EBA  160A  158A  2000  120A  158A  	fcall	stringtab
  2211  0EBF  00D9               	movwf	??_sampleBatteryCells+1
  2212  0EC0  3091               	movlw	low (_cell4RDT| (0+32768))
  2213  0EC1  0084               	movwf	4
  2214  0EC2  3098               	movlw	high (_cell4RDT| (0+32768))
  2215  0EC3  00FF               	movwf	127
  2216  0EC4  160A  158A  2000  120A  158A  	fcall	stringtab
  2217  0EC9  00DA               	movwf	??_sampleBatteryCells+2
  2218  0ECA  160A  158A  2000  120A  158A  	fcall	stringtab
  2219  0ECF  00DB               	movwf	??_sampleBatteryCells+3
  2220  0ED0  0858               	movf	??_sampleBatteryCells,w
  2221  0ED1  075A               	addwf	??_sampleBatteryCells+2,w
  2222  0ED2  00A2               	movwf	___lwdiv@dividend
  2223  0ED3  0859               	movf	??_sampleBatteryCells+1,w
  2224  0ED4  1803               	skipnc
  2225  0ED5  0A59               	incf	??_sampleBatteryCells+1,w
  2226  0ED6  075B               	addwf	??_sampleBatteryCells+3,w
  2227  0ED7  00A3               	movwf	___lwdiv@dividend+1
  2228  0ED8  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  2229  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0EDF  0821               	movf	?___lwdiv+1,w
  2232  0EE0  00A9               	movwf	___lwtoft@c+1
  2233  0EE1  0820               	movf	?___lwdiv,w
  2234  0EE2  00A8               	movwf	___lwtoft@c
  2235  0EE3  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  2236  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0EEA  0828               	movf	?___lwtoft,w
  2239  0EEB  00B5               	movwf	___ftmul@f2
  2240  0EEC  0829               	movf	?___lwtoft+1,w
  2241  0EED  00B6               	movwf	___ftmul@f2+1
  2242  0EEE  082A               	movf	?___lwtoft+2,w
  2243  0EEF  00B7               	movwf	___ftmul@f2+2
  2244  0EF0  160A  118A  2371  120A  158A  	fcall	___ftmul
  2245  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2246  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2247  0EF7  0832               	movf	?___ftmul,w
  2248  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  2250  0EFA  00A9               	movwf	(_cellVolt^(0+128)+9)
  2251  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0EFD  0833               	movf	?___ftmul+1,w
  2254  0EFE  1683               	bsf	3,5	;RP0=1, select bank1
  2255  0EFF  1303               	bcf	3,6	;RP1=0, select bank1
  2256  0F00  00AA               	movwf	((_cellVolt+1)^(0+128)+9)
  2257  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  2259  0F03  0834               	movf	?___ftmul+2,w
  2260  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  2261  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  2262  0F06  00AB               	movwf	((_cellVolt+2)^(0+128)+9)
  2263                           
  2264                           ;PIC16F917 Battery Management.c: 119: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  2265  0F07  3003               	movlw	3
  2266  0F08  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  2267  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0F0F  0852               	movf	?_sampleVoltage,w
  2270  0F10  00DC               	movwf	_sampleBatteryCells$851
  2271  0F11  0853               	movf	?_sampleVoltage+1,w
  2272  0F12  00DD               	movwf	_sampleBatteryCells$851+1
  2273  0F13  0854               	movf	?_sampleVoltage+2,w
  2274  0F14  00DE               	movwf	_sampleBatteryCells$851+2
  2275                           
  2276                           ;PIC16F917 Battery Management.c: 119: cellVolt[4] = ( ( cell5RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL5);
  2277  0F15  085C               	movf	_sampleBatteryCells$851,w
  2278  0F16  00B2               	movwf	___ftmul@f1
  2279  0F17  085D               	movf	_sampleBatteryCells$851+1,w
  2280  0F18  00B3               	movwf	___ftmul@f1+1
  2281  0F19  085E               	movf	_sampleBatteryCells$851+2,w
  2282  0F1A  00B4               	movwf	___ftmul@f1+2
  2283  0F1B  3097               	movlw	low (_cellRDB| (0+32768))
  2284  0F1C  0084               	movwf	4
  2285  0F1D  3098               	movlw	high (_cellRDB| (0+32768))
  2286  0F1E  00FF               	movwf	127
  2287  0F1F  160A  158A  2000  120A  158A  	fcall	stringtab
  2288  0F24  00A0               	movwf	___lwdiv@divisor
  2289  0F25  160A  158A  2000  120A  158A  	fcall	stringtab
  2290  0F2A  00A1               	movwf	___lwdiv@divisor+1
  2291  0F2B  3097               	movlw	low (_cellRDB| (0+32768))
  2292  0F2C  0084               	movwf	4
  2293  0F2D  3098               	movlw	high (_cellRDB| (0+32768))
  2294  0F2E  00FF               	movwf	127
  2295  0F2F  160A  158A  2000  120A  158A  	fcall	stringtab
  2296  0F34  00D8               	movwf	??_sampleBatteryCells
  2297  0F35  160A  158A  2000  120A  158A  	fcall	stringtab
  2298  0F3A  00D9               	movwf	??_sampleBatteryCells+1
  2299  0F3B  3093               	movlw	low (_cell5RDT| (0+32768))
  2300  0F3C  0084               	movwf	4
  2301  0F3D  3098               	movlw	high (_cell5RDT| (0+32768))
  2302  0F3E  00FF               	movwf	127
  2303  0F3F  160A  158A  2000  120A  158A  	fcall	stringtab
  2304  0F44  00DA               	movwf	??_sampleBatteryCells+2
  2305  0F45  160A  158A  2000  120A  158A  	fcall	stringtab
  2306  0F4A  00DB               	movwf	??_sampleBatteryCells+3
  2307  0F4B  0858               	movf	??_sampleBatteryCells,w
  2308  0F4C  075A               	addwf	??_sampleBatteryCells+2,w
  2309  0F4D  00A2               	movwf	___lwdiv@dividend
  2310  0F4E  0859               	movf	??_sampleBatteryCells+1,w
  2311  0F4F  1803               	skipnc
  2312  0F50  0A59               	incf	??_sampleBatteryCells+1,w
  2313  0F51  075B               	addwf	??_sampleBatteryCells+3,w
  2314  0F52  00A3               	movwf	___lwdiv@dividend+1
  2315  0F53  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  2316  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0F5A  0821               	movf	?___lwdiv+1,w
  2319  0F5B  00A9               	movwf	___lwtoft@c+1
  2320  0F5C  0820               	movf	?___lwdiv,w
  2321  0F5D  00A8               	movwf	___lwtoft@c
  2322  0F5E  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  2323  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0F65  0828               	movf	?___lwtoft,w
  2326  0F66  00B5               	movwf	___ftmul@f2
  2327  0F67  0829               	movf	?___lwtoft+1,w
  2328  0F68  00B6               	movwf	___ftmul@f2+1
  2329  0F69  082A               	movf	?___lwtoft+2,w
  2330  0F6A  00B7               	movwf	___ftmul@f2+2
  2331  0F6B  160A  118A  2371  120A  158A  	fcall	___ftmul
  2332  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  2334  0F72  0832               	movf	?___ftmul,w
  2335  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  2336  0F74  1303               	bcf	3,6	;RP1=0, select bank1
  2337  0F75  00AC               	movwf	(_cellVolt^(0+128)+12)
  2338  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0F77  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0F78  0833               	movf	?___ftmul+1,w
  2341  0F79  1683               	bsf	3,5	;RP0=1, select bank1
  2342  0F7A  1303               	bcf	3,6	;RP1=0, select bank1
  2343  0F7B  00AD               	movwf	((_cellVolt+1)^(0+128)+12)
  2344  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0F7E  0834               	movf	?___ftmul+2,w
  2347  0F7F  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0F80  1303               	bcf	3,6	;RP1=0, select bank1
  2349  0F81  00AE               	movwf	((_cellVolt+2)^(0+128)+12)
  2350                           
  2351                           ;PIC16F917 Battery Management.c: 120: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2352  0F82  3004               	movlw	4
  2353  0F83  160A  158A  25A6  120A  158A  	fcall	_sampleVoltage
  2354  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  2355  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  2356  0F8A  0852               	movf	?_sampleVoltage,w
  2357  0F8B  00DC               	movwf	_sampleBatteryCells$851
  2358  0F8C  0853               	movf	?_sampleVoltage+1,w
  2359  0F8D  00DD               	movwf	_sampleBatteryCells$851+1
  2360  0F8E  0854               	movf	?_sampleVoltage+2,w
  2361  0F8F  00DE               	movwf	_sampleBatteryCells$851+2
  2362                           
  2363                           ;PIC16F917 Battery Management.c: 120: cellVolt[5] = ( ( cell6RDT + cellRDB ) / cellRDB )
      +                           * sampleVoltage(CELL6);
  2364  0F90  085C               	movf	_sampleBatteryCells$851,w
  2365  0F91  00B2               	movwf	___ftmul@f1
  2366  0F92  085D               	movf	_sampleBatteryCells$851+1,w
  2367  0F93  00B3               	movwf	___ftmul@f1+1
  2368  0F94  085E               	movf	_sampleBatteryCells$851+2,w
  2369  0F95  00B4               	movwf	___ftmul@f1+2
  2370  0F96  3097               	movlw	low (_cellRDB| (0+32768))
  2371  0F97  0084               	movwf	4
  2372  0F98  3098               	movlw	high (_cellRDB| (0+32768))
  2373  0F99  00FF               	movwf	127
  2374  0F9A  160A  158A  2000  120A  158A  	fcall	stringtab
  2375  0F9F  00A0               	movwf	___lwdiv@divisor
  2376  0FA0  160A  158A  2000  120A  158A  	fcall	stringtab
  2377  0FA5  00A1               	movwf	___lwdiv@divisor+1
  2378  0FA6  3097               	movlw	low (_cellRDB| (0+32768))
  2379  0FA7  0084               	movwf	4
  2380  0FA8  3098               	movlw	high (_cellRDB| (0+32768))
  2381  0FA9  00FF               	movwf	127
  2382  0FAA  160A  158A  2000  120A  158A  	fcall	stringtab
  2383  0FAF  00D8               	movwf	??_sampleBatteryCells
  2384  0FB0  160A  158A  2000  120A  158A  	fcall	stringtab
  2385  0FB5  00D9               	movwf	??_sampleBatteryCells+1
  2386  0FB6  3095               	movlw	low (_cell6RDT| (0+32768))
  2387  0FB7  0084               	movwf	4
  2388  0FB8  3098               	movlw	high (_cell6RDT| (0+32768))
  2389  0FB9  00FF               	movwf	127
  2390  0FBA  160A  158A  2000  120A  158A  	fcall	stringtab
  2391  0FBF  00DA               	movwf	??_sampleBatteryCells+2
  2392  0FC0  160A  158A  2000  120A  158A  	fcall	stringtab
  2393  0FC5  00DB               	movwf	??_sampleBatteryCells+3
  2394  0FC6  0858               	movf	??_sampleBatteryCells,w
  2395  0FC7  075A               	addwf	??_sampleBatteryCells+2,w
  2396  0FC8  00A2               	movwf	___lwdiv@dividend
  2397  0FC9  0859               	movf	??_sampleBatteryCells+1,w
  2398  0FCA  1803               	skipnc
  2399  0FCB  0A59               	incf	??_sampleBatteryCells+1,w
  2400  0FCC  075B               	addwf	??_sampleBatteryCells+3,w
  2401  0FCD  00A3               	movwf	___lwdiv@dividend+1
  2402  0FCE  120A  118A  27C2  120A  158A  	fcall	___lwdiv
  2403  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0FD5  0821               	movf	?___lwdiv+1,w
  2406  0FD6  00A9               	movwf	___lwtoft@c+1
  2407  0FD7  0820               	movf	?___lwdiv,w
  2408  0FD8  00A8               	movwf	___lwtoft@c
  2409  0FD9  160A  158A  22D3  120A  158A  	fcall	___lwtoft
  2410  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  2411  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  2412  0FE0  0828               	movf	?___lwtoft,w
  2413  0FE1  00B5               	movwf	___ftmul@f2
  2414  0FE2  0829               	movf	?___lwtoft+1,w
  2415  0FE3  00B6               	movwf	___ftmul@f2+1
  2416  0FE4  082A               	movf	?___lwtoft+2,w
  2417  0FE5  00B7               	movwf	___ftmul@f2+2
  2418  0FE6  160A  118A  2371   	fcall	___ftmul
  2419  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  2421  0FEB  0832               	movf	?___ftmul,w
  2422  0FEC  1683               	bsf	3,5	;RP0=1, select bank1
  2423  0FED  1303               	bcf	3,6	;RP1=0, select bank1
  2424  0FEE  00AF               	movwf	(_cellVolt^(0+128)+15)
  2425  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0FF1  0833               	movf	?___ftmul+1,w
  2428  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  2430  0FF4  00B0               	movwf	((_cellVolt+1)^(0+128)+15)
  2431  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0FF7  0834               	movf	?___ftmul+2,w
  2434  0FF8  1683               	bsf	3,5	;RP0=1, select bank1
  2435  0FF9  1303               	bcf	3,6	;RP1=0, select bank1
  2436  0FFA  00B1               	movwf	((_cellVolt+2)^(0+128)+15)
  2437                           
  2438                           ;PIC16F917 Battery Management.c: 122: RC3 = 0;
  2439  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0FFD  1187               	bcf	7,3	;volatile
  2442                           
  2443                           ;PIC16F917 Battery Management.c: 124: RC2 = 0;
  2444  0FFE  1107               	bcf	7,2	;volatile
  2445  0FFF  0008               	return
  2446  1000                     __end_of_sampleBatteryCells:	
  2447                           
  2448                           	psect	text5
  2449  1DA6                     __ptext5:	
  2450 ;; *************** function _sampleVoltage *****************
  2451 ;; Defined at:
  2452 ;;		line 147 in file "PIC16F917 Battery Management.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  chan            1    wreg     enum E2735
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  chan            1   55[BANK0 ] enum E2735
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  3   50[BANK0 ] float 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2, status,0, pclath, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         0       3       0       0       0
  2467 ;;      Locals:         0       1       0       0       0
  2468 ;;      Temps:          0       2       0       0       0
  2469 ;;      Totals:         0       6       0       0       0
  2470 ;;Total ram usage:        6 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    3
  2473 ;; This function calls:
  2474 ;;		___ftdiv
  2475 ;;		___ftmul
  2476 ;;		___lwtoft
  2477 ;;		_analogRead
  2478 ;; This function is called by:
  2479 ;;		_sampleBatteryCells
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _sampleVoltage
  2485  1DA6                     _sampleVoltage:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _sampleVoltage: [wreg+status,2+status,0+pclath+cstack]
  2489                           ;sampleVoltage@chan stored from wreg
  2490  1DA6  1283               	bcf	3,5	;RP0=0, select bank0
  2491  1DA7  1303               	bcf	3,6	;RP1=0, select bank0
  2492  1DA8  00D7               	movwf	sampleVoltage@chan
  2493                           
  2494                           ;PIC16F917 Battery Management.c: 149: _delay((unsigned long)((5)*(8000000/4000.0)));
  2495  1DA9  300D               	movlw	13
  2496  1DAA  00D6               	movwf	??_sampleVoltage+1
  2497  1DAB  30FB               	movlw	251
  2498  1DAC  00D5               	movwf	??_sampleVoltage
  2499  1DAD                     u6137:	
  2500  1DAD  0BD5               	decfsz	??_sampleVoltage,f
  2501  1DAE  2DAD               	goto	u6137
  2502  1DAF  0BD6               	decfsz	??_sampleVoltage+1,f
  2503  1DB0  2DAD               	goto	u6137
  2504  1DB1  2DB2               	nop2
  2505                           
  2506                           ;PIC16F917 Battery Management.c: 151: return (analogRead(chan) * supVolt)/1023;
  2507  1DB2  30C0               	movlw	192
  2508  1DB3  1283               	bcf	3,5	;RP0=0, select bank0
  2509  1DB4  1303               	bcf	3,6	;RP1=0, select bank0
  2510  1DB5  00C2               	movwf	___ftdiv@f2
  2511  1DB6  307F               	movlw	127
  2512  1DB7  00C3               	movwf	___ftdiv@f2+1
  2513  1DB8  3044               	movlw	68
  2514  1DB9  00C4               	movwf	___ftdiv@f2+2
  2515  1DBA  1683               	bsf	3,5	;RP0=1, select bank1
  2516  1DBB  1303               	bcf	3,6	;RP1=0, select bank1
  2517  1DBC  0866               	movf	_supVolt^(0+128),w
  2518  1DBD  1283               	bcf	3,5	;RP0=0, select bank0
  2519  1DBE  1303               	bcf	3,6	;RP1=0, select bank0
  2520  1DBF  00B2               	movwf	___ftmul@f1
  2521  1DC0  1683               	bsf	3,5	;RP0=1, select bank1
  2522  1DC1  1303               	bcf	3,6	;RP1=0, select bank1
  2523  1DC2  0867               	movf	(_supVolt+1)^(0+128),w
  2524  1DC3  1283               	bcf	3,5	;RP0=0, select bank0
  2525  1DC4  1303               	bcf	3,6	;RP1=0, select bank0
  2526  1DC5  00B3               	movwf	___ftmul@f1+1
  2527  1DC6  1683               	bsf	3,5	;RP0=1, select bank1
  2528  1DC7  1303               	bcf	3,6	;RP1=0, select bank1
  2529  1DC8  0868               	movf	(_supVolt+2)^(0+128),w
  2530  1DC9  1283               	bcf	3,5	;RP0=0, select bank0
  2531  1DCA  1303               	bcf	3,6	;RP1=0, select bank0
  2532  1DCB  00B4               	movwf	___ftmul@f1+2
  2533  1DCC  0857               	movf	sampleVoltage@chan,w
  2534  1DCD  160A  158A  2452  160A  158A  	fcall	_analogRead
  2535  1DD2  0875               	movf	?_analogRead+1,w
  2536  1DD3  1283               	bcf	3,5	;RP0=0, select bank0
  2537  1DD4  1303               	bcf	3,6	;RP1=0, select bank0
  2538  1DD5  00A9               	movwf	___lwtoft@c+1
  2539  1DD6  0874               	movf	?_analogRead,w
  2540  1DD7  00A8               	movwf	___lwtoft@c
  2541  1DD8  160A  158A  22D3  160A  158A  	fcall	___lwtoft
  2542  1DDD  1283               	bcf	3,5	;RP0=0, select bank0
  2543  1DDE  1303               	bcf	3,6	;RP1=0, select bank0
  2544  1DDF  0828               	movf	?___lwtoft,w
  2545  1DE0  00B5               	movwf	___ftmul@f2
  2546  1DE1  0829               	movf	?___lwtoft+1,w
  2547  1DE2  00B6               	movwf	___ftmul@f2+1
  2548  1DE3  082A               	movf	?___lwtoft+2,w
  2549  1DE4  00B7               	movwf	___ftmul@f2+2
  2550  1DE5  160A  118A  2371  160A  158A  	fcall	___ftmul
  2551  1DEA  1283               	bcf	3,5	;RP0=0, select bank0
  2552  1DEB  1303               	bcf	3,6	;RP1=0, select bank0
  2553  1DEC  0832               	movf	?___ftmul,w
  2554  1DED  00C5               	movwf	___ftdiv@f1
  2555  1DEE  0833               	movf	?___ftmul+1,w
  2556  1DEF  00C6               	movwf	___ftdiv@f1+1
  2557  1DF0  0834               	movf	?___ftmul+2,w
  2558  1DF1  00C7               	movwf	___ftdiv@f1+2
  2559  1DF2  160A  118A  21F6   	fcall	___ftdiv
  2560  1DF5  1283               	bcf	3,5	;RP0=0, select bank0
  2561  1DF6  1303               	bcf	3,6	;RP1=0, select bank0
  2562  1DF7  0842               	movf	?___ftdiv,w
  2563  1DF8  00D2               	movwf	?_sampleVoltage
  2564  1DF9  0843               	movf	?___ftdiv+1,w
  2565  1DFA  00D3               	movwf	?_sampleVoltage+1
  2566  1DFB  0844               	movf	?___ftdiv+2,w
  2567  1DFC  00D4               	movwf	?_sampleVoltage+2
  2568  1DFD  0008               	return
  2569  1DFE                     __end_of_sampleVoltage:	
  2570                           
  2571                           	psect	text6
  2572  1C52                     __ptext6:	
  2573 ;; *************** function _analogRead *****************
  2574 ;; Defined at:
  2575 ;;		line 73 in file "adc.h"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  chan            1    wreg     unsigned char 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  chan            1    2[BANK0 ] unsigned char 
  2580 ;;  returnVal       2    3[BANK0 ] unsigned int 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  2    4[COMMON] unsigned int 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2590 ;;      Params:         2       0       0       0       0
  2591 ;;      Locals:         0       3       0       0       0
  2592 ;;      Temps:          0       2       0       0       0
  2593 ;;      Totals:         2       5       0       0       0
  2594 ;;Total ram usage:        7 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    1
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_sampleReference
  2601 ;;		_sampleVoltage
  2602 ;;		_sampleCurrent
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _analogRead
  2608  1C52                     _analogRead:	
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _analogRead: [wreg+status,2+status,0]
  2612                           ;analogRead@chan stored from wreg
  2613  1C52  1283               	bcf	3,5	;RP0=0, select bank0
  2614  1C53  1303               	bcf	3,6	;RP1=0, select bank0
  2615  1C54  00A2               	movwf	analogRead@chan
  2616                           
  2617                           ;adc.h: 75: ADCON0bits.CHS = chan;
  2618  1C55  0822               	movf	analogRead@chan,w
  2619  1C56  00A0               	movwf	??_analogRead
  2620  1C57  0DA0               	rlf	??_analogRead,f
  2621  1C58  0DA0               	rlf	??_analogRead,f
  2622  1C59  081F               	movf	31,w	;volatile
  2623  1C5A  0620               	xorwf	??_analogRead,w
  2624  1C5B  39E3               	andlw	-29
  2625  1C5C  0620               	xorwf	??_analogRead,w
  2626  1C5D  009F               	movwf	31	;volatile
  2627                           
  2628                           ;adc.h: 77: ADCON0bits.ADON = 1;
  2629  1C5E  141F               	bsf	31,0	;volatile
  2630                           
  2631                           ;adc.h: 79: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2632  1C5F  3006               	movlw	6
  2633  1C60  00A0               	movwf	??_analogRead
  2634  1C61                     u6147:	
  2635  1C61  0BA0               	decfsz	??_analogRead,f
  2636  1C62  2C61               	goto	u6147
  2637  1C63  0000               	nop
  2638                           
  2639                           ;adc.h: 81: ADCON0bits.GO = 1;
  2640  1C64  1283               	bcf	3,5	;RP0=0, select bank0
  2641  1C65  1303               	bcf	3,6	;RP1=0, select bank0
  2642  1C66  149F               	bsf	31,1	;volatile
  2643                           
  2644                           ;adc.h: 83: unsigned int returnVal = 0;
  2645  1C67  01A3               	clrf	analogRead@returnVal
  2646  1C68  01A4               	clrf	analogRead@returnVal+1
  2647  1C69                     l156:	
  2648                           ;adc.h: 85: while (ADCON0bits.GO == 1) {}
  2649                           
  2650  1C69  189F               	btfsc	31,1	;volatile
  2651  1C6A  2C69               	goto	l156
  2652                           
  2653                           ;adc.h: 89: returnVal = ADRESH;
  2654  1C6B  081E               	movf	30,w	;volatile
  2655  1C6C  00A0               	movwf	??_analogRead
  2656  1C6D  01A1               	clrf	??_analogRead+1
  2657  1C6E  0820               	movf	??_analogRead,w
  2658  1C6F  00A3               	movwf	analogRead@returnVal
  2659  1C70  0821               	movf	??_analogRead+1,w
  2660  1C71  00A4               	movwf	analogRead@returnVal+1
  2661                           
  2662                           ;adc.h: 90: returnVal = returnVal << 8;
  2663  1C72  0823               	movf	analogRead@returnVal,w
  2664  1C73  00A1               	movwf	??_analogRead+1
  2665  1C74  01A0               	clrf	??_analogRead
  2666  1C75  0820               	movf	??_analogRead,w
  2667  1C76  00A3               	movwf	analogRead@returnVal
  2668  1C77  0821               	movf	??_analogRead+1,w
  2669  1C78  00A4               	movwf	analogRead@returnVal+1
  2670                           
  2671                           ;adc.h: 91: returnVal = returnVal | ADRESL;
  2672  1C79  0823               	movf	analogRead@returnVal,w
  2673  1C7A  1683               	bsf	3,5	;RP0=1, select bank1
  2674  1C7B  1303               	bcf	3,6	;RP1=0, select bank1
  2675  1C7C  041E               	iorwf	30,w	;volatile
  2676  1C7D  1283               	bcf	3,5	;RP0=0, select bank0
  2677  1C7E  1303               	bcf	3,6	;RP1=0, select bank0
  2678  1C7F  00A0               	movwf	??_analogRead
  2679  1C80  0824               	movf	analogRead@returnVal+1,w
  2680  1C81  00A1               	movwf	??_analogRead+1
  2681  1C82  0820               	movf	??_analogRead,w
  2682  1C83  00A3               	movwf	analogRead@returnVal
  2683  1C84  0821               	movf	??_analogRead+1,w
  2684  1C85  00A4               	movwf	analogRead@returnVal+1
  2685                           
  2686                           ;adc.h: 93: return returnVal;
  2687  1C86  0824               	movf	analogRead@returnVal+1,w
  2688  1C87  00F5               	movwf	?_analogRead+1
  2689  1C88  0823               	movf	analogRead@returnVal,w
  2690  1C89  00F4               	movwf	?_analogRead
  2691  1C8A  0008               	return
  2692  1C8B                     __end_of_analogRead:	
  2693                           
  2694                           	psect	text7
  2695  1AD3                     __ptext7:	
  2696 ;; *************** function ___lwtoft *****************
  2697 ;; Defined at:
  2698 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  c               2    8[BANK0 ] unsigned int 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;		None
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  3    8[BANK0 ] float 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0, pclath, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2712 ;;      Params:         0       3       0       0       0
  2713 ;;      Locals:         0       0       0       0       0
  2714 ;;      Temps:          0       1       0       0       0
  2715 ;;      Totals:         0       4       0       0       0
  2716 ;;Total ram usage:        4 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    2
  2719 ;; This function calls:
  2720 ;;		___ftpack
  2721 ;; This function is called by:
  2722 ;;		_sampleBatteryCells
  2723 ;;		_sampleReference
  2724 ;;		_sampleVoltage
  2725 ;;		_sampleCurrent
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function ___lwtoft
  2731  1AD3                     ___lwtoft:	
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2735  1AD3  1283               	bcf	3,5	;RP0=0, select bank0
  2736  1AD4  1303               	bcf	3,6	;RP1=0, select bank0
  2737  1AD5  0828               	movf	___lwtoft@c,w
  2738  1AD6  00A0               	movwf	___ftpack@arg
  2739  1AD7  0829               	movf	___lwtoft@c+1,w
  2740  1AD8  00A1               	movwf	___ftpack@arg+1
  2741  1AD9  01A2               	clrf	___ftpack@arg+2
  2742  1ADA  308E               	movlw	142
  2743  1ADB  00AB               	movwf	??___lwtoft
  2744  1ADC  082B               	movf	??___lwtoft,w
  2745  1ADD  00A3               	movwf	___ftpack@exp
  2746  1ADE  01A4               	clrf	___ftpack@sign
  2747  1ADF  160A  158A  2723   	fcall	___ftpack
  2748  1AE2  1283               	bcf	3,5	;RP0=0, select bank0
  2749  1AE3  1303               	bcf	3,6	;RP1=0, select bank0
  2750  1AE4  0820               	movf	?___ftpack,w
  2751  1AE5  00A8               	movwf	?___lwtoft
  2752  1AE6  0821               	movf	?___ftpack+1,w
  2753  1AE7  00A9               	movwf	?___lwtoft+1
  2754  1AE8  0822               	movf	?___ftpack+2,w
  2755  1AE9  00AA               	movwf	?___lwtoft+2
  2756  1AEA  0008               	return
  2757  1AEB                     __end_of___lwtoft:	
  2758                           
  2759                           	psect	text8
  2760  11F6                     __ptext8:	
  2761 ;; *************** function ___ftdiv *****************
  2762 ;; Defined at:
  2763 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  f2              3   34[BANK0 ] float 
  2766 ;;  f1              3   37[BANK0 ] float 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  f3              3   45[BANK0 ] float 
  2769 ;;  sign            1   49[BANK0 ] unsigned char 
  2770 ;;  exp             1   48[BANK0 ] unsigned char 
  2771 ;;  cntr            1   44[BANK0 ] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  3   34[BANK0 ] float 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0, pclath, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         0       6       0       0       0
  2782 ;;      Locals:         0       6       0       0       0
  2783 ;;      Temps:          0       4       0       0       0
  2784 ;;      Totals:         0      16       0       0       0
  2785 ;;Total ram usage:       16 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    2
  2788 ;; This function calls:
  2789 ;;		___ftpack
  2790 ;; This function is called by:
  2791 ;;		_sampleReference
  2792 ;;		_sampleVoltage
  2793 ;;		_sampleCurrent
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function ___ftdiv
  2799  11F6                     ___ftdiv:	
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2803  11F6  1283               	bcf	3,5	;RP0=0, select bank0
  2804  11F7  1303               	bcf	3,6	;RP1=0, select bank0
  2805  11F8  0845               	movf	___ftdiv@f1,w
  2806  11F9  00C8               	movwf	??___ftdiv
  2807  11FA  0846               	movf	___ftdiv@f1+1,w
  2808  11FB  00C9               	movwf	??___ftdiv+1
  2809  11FC  0847               	movf	___ftdiv@f1+2,w
  2810  11FD  00CA               	movwf	??___ftdiv+2
  2811  11FE  1003               	clrc
  2812  11FF  0D49               	rlf	??___ftdiv+1,w
  2813  1200  0D4A               	rlf	??___ftdiv+2,w
  2814  1201  00CB               	movwf	??___ftdiv+3
  2815  1202  084B               	movf	??___ftdiv+3,w
  2816  1203  00D0               	movwf	___ftdiv@exp
  2817  1204  0850               	movf	___ftdiv@exp,w
  2818  1205  1D03               	btfss	3,2
  2819  1206  2A0E               	goto	l3716
  2820  1207  3000               	movlw	0
  2821  1208  00C2               	movwf	?___ftdiv
  2822  1209  3000               	movlw	0
  2823  120A  00C3               	movwf	?___ftdiv+1
  2824  120B  3000               	movlw	0
  2825  120C  00C4               	movwf	?___ftdiv+2
  2826  120D  0008               	return
  2827  120E                     l3716:	
  2828  120E  0842               	movf	___ftdiv@f2,w
  2829  120F  00C8               	movwf	??___ftdiv
  2830  1210  0843               	movf	___ftdiv@f2+1,w
  2831  1211  00C9               	movwf	??___ftdiv+1
  2832  1212  0844               	movf	___ftdiv@f2+2,w
  2833  1213  00CA               	movwf	??___ftdiv+2
  2834  1214  1003               	clrc
  2835  1215  0D49               	rlf	??___ftdiv+1,w
  2836  1216  0D4A               	rlf	??___ftdiv+2,w
  2837  1217  00CB               	movwf	??___ftdiv+3
  2838  1218  084B               	movf	??___ftdiv+3,w
  2839  1219  00D1               	movwf	___ftdiv@sign
  2840  121A  0851               	movf	___ftdiv@sign,w
  2841  121B  1D03               	btfss	3,2
  2842  121C  2A24               	goto	l3722
  2843  121D  3000               	movlw	0
  2844  121E  00C2               	movwf	?___ftdiv
  2845  121F  3000               	movlw	0
  2846  1220  00C3               	movwf	?___ftdiv+1
  2847  1221  3000               	movlw	0
  2848  1222  00C4               	movwf	?___ftdiv+2
  2849  1223  0008               	return
  2850  1224                     l3722:	
  2851  1224  3000               	movlw	0
  2852  1225  00CD               	movwf	___ftdiv@f3
  2853  1226  3000               	movlw	0
  2854  1227  00CE               	movwf	___ftdiv@f3+1
  2855  1228  3000               	movlw	0
  2856  1229  00CF               	movwf	___ftdiv@f3+2
  2857  122A  3089               	movlw	137
  2858  122B  0751               	addwf	___ftdiv@sign,w
  2859  122C  00C8               	movwf	??___ftdiv
  2860  122D  0848               	movf	??___ftdiv,w
  2861  122E  02D0               	subwf	___ftdiv@exp,f
  2862  122F  0845               	movf	___ftdiv@f1,w
  2863  1230  00C8               	movwf	??___ftdiv
  2864  1231  0846               	movf	___ftdiv@f1+1,w
  2865  1232  00C9               	movwf	??___ftdiv+1
  2866  1233  0847               	movf	___ftdiv@f1+2,w
  2867  1234  00CA               	movwf	??___ftdiv+2
  2868  1235  3010               	movlw	16
  2869  1236                     u5345:	
  2870  1236  1003               	clrc
  2871  1237  0CCA               	rrf	??___ftdiv+2,f
  2872  1238  0CC9               	rrf	??___ftdiv+1,f
  2873  1239  0CC8               	rrf	??___ftdiv,f
  2874  123A  3EFF               	addlw	-1
  2875  123B  1D03               	skipz
  2876  123C  2A36               	goto	u5345
  2877  123D  0848               	movf	??___ftdiv,w
  2878  123E  00CB               	movwf	??___ftdiv+3
  2879  123F  084B               	movf	??___ftdiv+3,w
  2880  1240  00D1               	movwf	___ftdiv@sign
  2881  1241  0842               	movf	___ftdiv@f2,w
  2882  1242  00C8               	movwf	??___ftdiv
  2883  1243  0843               	movf	___ftdiv@f2+1,w
  2884  1244  00C9               	movwf	??___ftdiv+1
  2885  1245  0844               	movf	___ftdiv@f2+2,w
  2886  1246  00CA               	movwf	??___ftdiv+2
  2887  1247  3010               	movlw	16
  2888  1248                     u5355:	
  2889  1248  1003               	clrc
  2890  1249  0CCA               	rrf	??___ftdiv+2,f
  2891  124A  0CC9               	rrf	??___ftdiv+1,f
  2892  124B  0CC8               	rrf	??___ftdiv,f
  2893  124C  3EFF               	addlw	-1
  2894  124D  1D03               	skipz
  2895  124E  2A48               	goto	u5355
  2896  124F  0848               	movf	??___ftdiv,w
  2897  1250  00CB               	movwf	??___ftdiv+3
  2898  1251  084B               	movf	??___ftdiv+3,w
  2899  1252  06D1               	xorwf	___ftdiv@sign,f
  2900  1253  3080               	movlw	128
  2901  1254  00C8               	movwf	??___ftdiv
  2902  1255  0848               	movf	??___ftdiv,w
  2903  1256  05D1               	andwf	___ftdiv@sign,f
  2904  1257  17C6               	bsf	___ftdiv@f1+1,7
  2905  1258  30FF               	movlw	255
  2906  1259  05C5               	andwf	___ftdiv@f1,f
  2907  125A  30FF               	movlw	255
  2908  125B  05C6               	andwf	___ftdiv@f1+1,f
  2909  125C  3000               	movlw	0
  2910  125D  05C7               	andwf	___ftdiv@f1+2,f
  2911  125E  17C3               	bsf	___ftdiv@f2+1,7
  2912  125F  30FF               	movlw	255
  2913  1260  05C2               	andwf	___ftdiv@f2,f
  2914  1261  30FF               	movlw	255
  2915  1262  05C3               	andwf	___ftdiv@f2+1,f
  2916  1263  3000               	movlw	0
  2917  1264  05C4               	andwf	___ftdiv@f2+2,f
  2918  1265  3018               	movlw	24
  2919  1266  00C8               	movwf	??___ftdiv
  2920  1267  0848               	movf	??___ftdiv,w
  2921  1268  00CC               	movwf	___ftdiv@cntr
  2922  1269                     l3736:	
  2923  1269  3001               	movlw	1
  2924  126A                     u5365:	
  2925  126A  1003               	clrc
  2926  126B  0DCD               	rlf	___ftdiv@f3,f
  2927  126C  0DCE               	rlf	___ftdiv@f3+1,f
  2928  126D  0DCF               	rlf	___ftdiv@f3+2,f
  2929  126E  3EFF               	addlw	-1
  2930  126F  1D03               	skipz
  2931  1270  2A6A               	goto	u5365
  2932  1271  0844               	movf	___ftdiv@f2+2,w
  2933  1272  0247               	subwf	___ftdiv@f1+2,w
  2934  1273  1D03               	skipz
  2935  1274  2A7B               	goto	u5375
  2936  1275  0843               	movf	___ftdiv@f2+1,w
  2937  1276  0246               	subwf	___ftdiv@f1+1,w
  2938  1277  1D03               	skipz
  2939  1278  2A7B               	goto	u5375
  2940  1279  0842               	movf	___ftdiv@f2,w
  2941  127A  0245               	subwf	___ftdiv@f1,w
  2942  127B                     u5375:	
  2943  127B  1C03               	skipc
  2944  127C  2A88               	goto	l3744
  2945  127D  0842               	movf	___ftdiv@f2,w
  2946  127E  02C5               	subwf	___ftdiv@f1,f
  2947  127F  0843               	movf	___ftdiv@f2+1,w
  2948  1280  1C03               	skipc
  2949  1281  0F43               	incfsz	___ftdiv@f2+1,w
  2950  1282  02C6               	subwf	___ftdiv@f1+1,f
  2951  1283  0844               	movf	___ftdiv@f2+2,w
  2952  1284  1C03               	skipc
  2953  1285  0A44               	incf	___ftdiv@f2+2,w
  2954  1286  02C7               	subwf	___ftdiv@f1+2,f
  2955  1287  144D               	bsf	___ftdiv@f3,0
  2956  1288                     l3744:	
  2957  1288  3001               	movlw	1
  2958  1289                     u5385:	
  2959  1289  1003               	clrc
  2960  128A  0DC5               	rlf	___ftdiv@f1,f
  2961  128B  0DC6               	rlf	___ftdiv@f1+1,f
  2962  128C  0DC7               	rlf	___ftdiv@f1+2,f
  2963  128D  3EFF               	addlw	-1
  2964  128E  1D03               	skipz
  2965  128F  2A89               	goto	u5385
  2966  1290  3001               	movlw	1
  2967  1291  02CC               	subwf	___ftdiv@cntr,f
  2968  1292  1D03               	btfss	3,2
  2969  1293  2A69               	goto	l3736
  2970  1294  084D               	movf	___ftdiv@f3,w
  2971  1295  00A0               	movwf	___ftpack@arg
  2972  1296  084E               	movf	___ftdiv@f3+1,w
  2973  1297  00A1               	movwf	___ftpack@arg+1
  2974  1298  084F               	movf	___ftdiv@f3+2,w
  2975  1299  00A2               	movwf	___ftpack@arg+2
  2976  129A  0850               	movf	___ftdiv@exp,w
  2977  129B  00C8               	movwf	??___ftdiv
  2978  129C  0848               	movf	??___ftdiv,w
  2979  129D  00A3               	movwf	___ftpack@exp
  2980  129E  0851               	movf	___ftdiv@sign,w
  2981  129F  00C9               	movwf	??___ftdiv+1
  2982  12A0  0849               	movf	??___ftdiv+1,w
  2983  12A1  00A4               	movwf	___ftpack@sign
  2984  12A2  160A  158A  2723   	fcall	___ftpack
  2985  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  2986  12A6  1303               	bcf	3,6	;RP1=0, select bank0
  2987  12A7  0820               	movf	?___ftpack,w
  2988  12A8  00C2               	movwf	?___ftdiv
  2989  12A9  0821               	movf	?___ftpack+1,w
  2990  12AA  00C3               	movwf	?___ftdiv+1
  2991  12AB  0822               	movf	?___ftpack+2,w
  2992  12AC  00C4               	movwf	?___ftdiv+2
  2993  12AD  0008               	return
  2994  12AE                     __end_of___ftdiv:	
  2995                           
  2996                           	psect	text9
  2997  07C2                     __ptext9:	
  2998 ;; *************** function ___lwdiv *****************
  2999 ;; Defined at:
  3000 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  divisor         2    0[BANK0 ] unsigned int 
  3003 ;;  dividend        2    2[BANK0 ] unsigned int 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  quotient        2    5[BANK0 ] unsigned int 
  3006 ;;  counter         1    4[BANK0 ] unsigned char 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  2    0[BANK0 ] unsigned int 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3016 ;;      Params:         0       4       0       0       0
  3017 ;;      Locals:         0       3       0       0       0
  3018 ;;      Temps:          1       0       0       0       0
  3019 ;;      Totals:         1       7       0       0       0
  3020 ;;Total ram usage:        8 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    1
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_sampleBatteryCells
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function ___lwdiv
  3032  07C2                     ___lwdiv:	
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3036  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  3037  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  3038  07C4  01A5               	clrf	___lwdiv@quotient
  3039  07C5  01A6               	clrf	___lwdiv@quotient+1
  3040  07C6  0820               	movf	___lwdiv@divisor,w
  3041  07C7  0421               	iorwf	___lwdiv@divisor+1,w
  3042  07C8  1903               	btfsc	3,2
  3043  07C9  2FFB               	goto	l4126
  3044  07CA  01A4               	clrf	___lwdiv@counter
  3045  07CB  0AA4               	incf	___lwdiv@counter,f
  3046  07CC                     l4114:	
  3047  07CC  1BA1               	btfsc	___lwdiv@divisor+1,7
  3048  07CD  2FDA               	goto	l4116
  3049  07CE  3001               	movlw	1
  3050  07CF                     u6025:	
  3051  07CF  1003               	clrc
  3052  07D0  0DA0               	rlf	___lwdiv@divisor,f
  3053  07D1  0DA1               	rlf	___lwdiv@divisor+1,f
  3054  07D2  3EFF               	addlw	-1
  3055  07D3  1D03               	skipz
  3056  07D4  2FCF               	goto	u6025
  3057  07D5  3001               	movlw	1
  3058  07D6  00F4               	movwf	??___lwdiv
  3059  07D7  0874               	movf	??___lwdiv,w
  3060  07D8  07A4               	addwf	___lwdiv@counter,f
  3061  07D9  2FCC               	goto	l4114
  3062  07DA                     l4116:	
  3063  07DA  3001               	movlw	1
  3064  07DB                     u6045:	
  3065  07DB  1003               	clrc
  3066  07DC  0DA5               	rlf	___lwdiv@quotient,f
  3067  07DD  0DA6               	rlf	___lwdiv@quotient+1,f
  3068  07DE  3EFF               	addlw	-1
  3069  07DF  1D03               	skipz
  3070  07E0  2FDB               	goto	u6045
  3071  07E1  0821               	movf	___lwdiv@divisor+1,w
  3072  07E2  0223               	subwf	___lwdiv@dividend+1,w
  3073  07E3  1D03               	skipz
  3074  07E4  2FE7               	goto	u6055
  3075  07E5  0820               	movf	___lwdiv@divisor,w
  3076  07E6  0222               	subwf	___lwdiv@dividend,w
  3077  07E7                     u6055:	
  3078  07E7  1C03               	skipc
  3079  07E8  2FF0               	goto	l4122
  3080  07E9  0820               	movf	___lwdiv@divisor,w
  3081  07EA  02A2               	subwf	___lwdiv@dividend,f
  3082  07EB  0821               	movf	___lwdiv@divisor+1,w
  3083  07EC  1C03               	skipc
  3084  07ED  03A3               	decf	___lwdiv@dividend+1,f
  3085  07EE  02A3               	subwf	___lwdiv@dividend+1,f
  3086  07EF  1425               	bsf	___lwdiv@quotient,0
  3087  07F0                     l4122:	
  3088  07F0  3001               	movlw	1
  3089  07F1                     u6065:	
  3090  07F1  1003               	clrc
  3091  07F2  0CA1               	rrf	___lwdiv@divisor+1,f
  3092  07F3  0CA0               	rrf	___lwdiv@divisor,f
  3093  07F4  3EFF               	addlw	-1
  3094  07F5  1D03               	skipz
  3095  07F6  2FF1               	goto	u6065
  3096  07F7  3001               	movlw	1
  3097  07F8  02A4               	subwf	___lwdiv@counter,f
  3098  07F9  1D03               	btfss	3,2
  3099  07FA  2FDA               	goto	l4116
  3100  07FB                     l4126:	
  3101  07FB  0826               	movf	___lwdiv@quotient+1,w
  3102  07FC  00A1               	movwf	?___lwdiv+1
  3103  07FD  0825               	movf	___lwdiv@quotient,w
  3104  07FE  00A0               	movwf	?___lwdiv
  3105  07FF  0008               	return
  3106  0800                     __end_of___lwdiv:	
  3107                           
  3108                           	psect	text10
  3109  1BE7                     __ptext10:	
  3110 ;; *************** function _initController *****************
  3111 ;; Defined at:
  3112 ;;		line 211 in file "setup.h"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;		None               void
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, pclath, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3126 ;;      Params:         0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0
  3129 ;;      Totals:         0       0       0       0       0
  3130 ;;Total ram usage:        0 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    4
  3133 ;; This function calls:
  3134 ;;		_initADC
  3135 ;;		_initLCD
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _initController
  3143  1BE7                     _initController:	
  3144                           
  3145                           ;setup.h: 214: OSCCONbits.IRCF = 0b111;
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _initController: [wreg+status,2+status,0+pclath+cstack]
  3149  1BE7  3070               	movlw	112
  3150  1BE8  1683               	bsf	3,5	;RP0=1, select bank1
  3151  1BE9  1303               	bcf	3,6	;RP1=0, select bank1
  3152  1BEA  048F               	iorwf	15,f	;volatile
  3153                           
  3154                           ;setup.h: 215: OSCCONbits.SCS = 0;
  3155  1BEB  100F               	bcf	15,0	;volatile
  3156                           
  3157                           ;setup.h: 218: TRISA = 0b00111111;
  3158  1BEC  303F               	movlw	63
  3159  1BED  0085               	movwf	5	;volatile
  3160                           
  3161                           ;setup.h: 219: TRISB = 0b00000000;
  3162  1BEE  0186               	clrf	6	;volatile
  3163                           
  3164                           ;setup.h: 220: TRISC = 0b00000000;
  3165  1BEF  0187               	clrf	7	;volatile
  3166                           
  3167                           ;setup.h: 221: TRISD = 0b00100000;
  3168  1BF0  3020               	movlw	32
  3169  1BF1  0088               	movwf	8	;volatile
  3170                           
  3171                           ;setup.h: 222: TRISE = 0b00000111;
  3172  1BF2  3007               	movlw	7
  3173  1BF3  0089               	movwf	9	;volatile
  3174                           
  3175                           ;setup.h: 224: ANSEL = 0xFF;
  3176  1BF4  30FF               	movlw	255
  3177  1BF5  0091               	movwf	17	;volatile
  3178                           
  3179                           ;setup.h: 226: PORTA = 0;
  3180  1BF6  1283               	bcf	3,5	;RP0=0, select bank0
  3181  1BF7  1303               	bcf	3,6	;RP1=0, select bank0
  3182  1BF8  0185               	clrf	5	;volatile
  3183                           
  3184                           ;setup.h: 227: PORTB = 0;
  3185  1BF9  0186               	clrf	6	;volatile
  3186                           
  3187                           ;setup.h: 228: PORTC = 0;
  3188  1BFA  0187               	clrf	7	;volatile
  3189                           
  3190                           ;setup.h: 229: PORTD = 0;
  3191  1BFB  0188               	clrf	8	;volatile
  3192                           
  3193                           ;setup.h: 230: PORTE = 0;
  3194  1BFC  0189               	clrf	9	;volatile
  3195                           
  3196                           ;setup.h: 232: CMCON0bits.CM = 0b111;
  3197  1BFD  3007               	movlw	7
  3198  1BFE  1683               	bsf	3,5	;RP0=1, select bank1
  3199  1BFF  1303               	bcf	3,6	;RP1=0, select bank1
  3200  1C00  049C               	iorwf	28,f	;volatile
  3201                           
  3202                           ;setup.h: 233: LCDCON = 0;
  3203  1C01  1283               	bcf	3,5	;RP0=0, select bank2
  3204  1C02  1703               	bsf	3,6	;RP1=1, select bank2
  3205  1C03  0187               	clrf	7	;volatile
  3206                           
  3207                           ;setup.h: 234: LVDCONbits.LVDEN = 0;
  3208  1C04  1209               	bcf	9,4	;volatile
  3209                           
  3210                           ;setup.h: 235: CCP1CON = 0;
  3211  1C05  1283               	bcf	3,5	;RP0=0, select bank0
  3212  1C06  1303               	bcf	3,6	;RP1=0, select bank0
  3213  1C07  0197               	clrf	23	;volatile
  3214                           
  3215                           ;setup.h: 236: CCP2CON = 0;
  3216  1C08  019D               	clrf	29	;volatile
  3217                           
  3218                           ;setup.h: 237: OPTION_REGbits.nRBPU = 1;
  3219  1C09  1683               	bsf	3,5	;RP0=1, select bank1
  3220  1C0A  1303               	bcf	3,6	;RP1=0, select bank1
  3221  1C0B  1781               	bsf	1,7	;volatile
  3222                           
  3223                           ;setup.h: 239: RD2 = 0;
  3224  1C0C  1283               	bcf	3,5	;RP0=0, select bank0
  3225  1C0D  1303               	bcf	3,6	;RP1=0, select bank0
  3226  1C0E  1108               	bcf	8,2	;volatile
  3227                           
  3228                           ;setup.h: 241: RD6 = 0;
  3229  1C0F  1308               	bcf	8,6	;volatile
  3230                           
  3231                           ;setup.h: 243: initADC();
  3232  1C10  160A  158A  2290  160A  158A  	fcall	_initADC
  3233                           
  3234                           ;setup.h: 247: initLCD();
  3235  1C15  160A  118A  214D   	fcall	_initLCD
  3236  1C18  0008               	return
  3237  1C19                     __end_of_initController:	
  3238                           
  3239                           	psect	text11
  3240  114D                     __ptext11:	
  3241 ;; *************** function _initLCD *****************
  3242 ;; Defined at:
  3243 ;;		line 49 in file "lcd.h"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;		None
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, pclath, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3257 ;;      Params:         0       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0
  3259 ;;      Temps:          0       3       0       0       0
  3260 ;;      Totals:         0       3       0       0       0
  3261 ;;Total ram usage:        3 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    3
  3264 ;; This function calls:
  3265 ;;		_LCDSetBits
  3266 ;;		_LCDcmd
  3267 ;;		_pulse
  3268 ;; This function is called by:
  3269 ;;		_initController
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _initLCD
  3275  114D                     _initLCD:	
  3276                           
  3277                           ;lcd.h: 51: RB0 = 0;
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  3281  114D  1283               	bcf	3,5	;RP0=0, select bank0
  3282  114E  1303               	bcf	3,6	;RP1=0, select bank0
  3283  114F  1006               	bcf	6,0	;volatile
  3284                           
  3285                           ;lcd.h: 52: RD7 = 0;
  3286  1150  1388               	bcf	8,7	;volatile
  3287                           
  3288                           ;lcd.h: 53: LCDSetBits(0x00);
  3289  1151  3000               	movlw	0
  3290  1152  160A  158A  22EB  160A  118A  	fcall	_LCDSetBits
  3291                           
  3292                           ;lcd.h: 54: _delay((unsigned long)((100)*(8000000/4000.0)));
  3293  1157  3002               	movlw	2
  3294  1158  1283               	bcf	3,5	;RP0=0, select bank0
  3295  1159  1303               	bcf	3,6	;RP1=0, select bank0
  3296  115A  00A5               	movwf	??_initLCD+2
  3297  115B  3004               	movlw	4
  3298  115C  00A4               	movwf	??_initLCD+1
  3299  115D  30BA               	movlw	186
  3300  115E  00A3               	movwf	??_initLCD
  3301  115F                     u6157:	
  3302  115F  0BA3               	decfsz	??_initLCD,f
  3303  1160  295F               	goto	u6157
  3304  1161  0BA4               	decfsz	??_initLCD+1,f
  3305  1162  295F               	goto	u6157
  3306  1163  0BA5               	decfsz	??_initLCD+2,f
  3307  1164  295F               	goto	u6157
  3308  1165  0000               	nop
  3309                           
  3310                           ;lcd.h: 55: LCDSetBits(0x30);
  3311  1166  3030               	movlw	48
  3312  1167  160A  158A  22EB  160A  118A  	fcall	_LCDSetBits
  3313                           
  3314                           ;lcd.h: 56: _delay((unsigned long)((30)*(8000000/4000.0)));
  3315  116C  304E               	movlw	78
  3316  116D  1283               	bcf	3,5	;RP0=0, select bank0
  3317  116E  1303               	bcf	3,6	;RP1=0, select bank0
  3318  116F  00A4               	movwf	??_initLCD+1
  3319  1170  30EB               	movlw	235
  3320  1171  00A3               	movwf	??_initLCD
  3321  1172                     u6167:	
  3322  1172  0BA3               	decfsz	??_initLCD,f
  3323  1173  2972               	goto	u6167
  3324  1174  0BA4               	decfsz	??_initLCD+1,f
  3325  1175  2972               	goto	u6167
  3326                           
  3327                           ;lcd.h: 57: pulse();
  3328  1176  160A  158A  229F  160A  118A  	fcall	_pulse
  3329                           
  3330                           ;lcd.h: 58: _delay((unsigned long)((10)*(8000000/4000.0)));
  3331  117B  301A               	movlw	26
  3332  117C  1283               	bcf	3,5	;RP0=0, select bank0
  3333  117D  1303               	bcf	3,6	;RP1=0, select bank0
  3334  117E  00A4               	movwf	??_initLCD+1
  3335  117F  30F8               	movlw	248
  3336  1180  00A3               	movwf	??_initLCD
  3337  1181                     u6177:	
  3338  1181  0BA3               	decfsz	??_initLCD,f
  3339  1182  2981               	goto	u6177
  3340  1183  0BA4               	decfsz	??_initLCD+1,f
  3341  1184  2981               	goto	u6177
  3342  1185  0000               	nop
  3343                           
  3344                           ;lcd.h: 59: pulse();
  3345  1186  160A  158A  229F  160A  118A  	fcall	_pulse
  3346                           
  3347                           ;lcd.h: 60: _delay((unsigned long)((10)*(8000000/4000.0)));
  3348  118B  301A               	movlw	26
  3349  118C  1283               	bcf	3,5	;RP0=0, select bank0
  3350  118D  1303               	bcf	3,6	;RP1=0, select bank0
  3351  118E  00A4               	movwf	??_initLCD+1
  3352  118F  30F8               	movlw	248
  3353  1190  00A3               	movwf	??_initLCD
  3354  1191                     u6187:	
  3355  1191  0BA3               	decfsz	??_initLCD,f
  3356  1192  2991               	goto	u6187
  3357  1193  0BA4               	decfsz	??_initLCD+1,f
  3358  1194  2991               	goto	u6187
  3359  1195  0000               	nop
  3360                           
  3361                           ;lcd.h: 61: pulse();
  3362  1196  160A  158A  229F  160A  118A  	fcall	_pulse
  3363                           
  3364                           ;lcd.h: 62: _delay((unsigned long)((10)*(8000000/4000.0)));
  3365  119B  301A               	movlw	26
  3366  119C  1283               	bcf	3,5	;RP0=0, select bank0
  3367  119D  1303               	bcf	3,6	;RP1=0, select bank0
  3368  119E  00A4               	movwf	??_initLCD+1
  3369  119F  30F8               	movlw	248
  3370  11A0  00A3               	movwf	??_initLCD
  3371  11A1                     u6197:	
  3372  11A1  0BA3               	decfsz	??_initLCD,f
  3373  11A2  29A1               	goto	u6197
  3374  11A3  0BA4               	decfsz	??_initLCD+1,f
  3375  11A4  29A1               	goto	u6197
  3376  11A5  0000               	nop
  3377                           
  3378                           ;lcd.h: 63: LCDSetBits(0x20);
  3379  11A6  3020               	movlw	32
  3380  11A7  160A  158A  22EB  160A  118A  	fcall	_LCDSetBits
  3381                           
  3382                           ;lcd.h: 64: pulse();
  3383  11AC  160A  158A  229F  160A  118A  	fcall	_pulse
  3384                           
  3385                           ;lcd.h: 66: LCDcmd(0x28);
  3386  11B1  3028               	movlw	40
  3387  11B2  160A  158A  238B  160A  118A  	fcall	_LCDcmd
  3388                           
  3389                           ;lcd.h: 67: _delay((unsigned long)((10)*(8000000/4000.0)));
  3390  11B7  301A               	movlw	26
  3391  11B8  1283               	bcf	3,5	;RP0=0, select bank0
  3392  11B9  1303               	bcf	3,6	;RP1=0, select bank0
  3393  11BA  00A4               	movwf	??_initLCD+1
  3394  11BB  30F8               	movlw	248
  3395  11BC  00A3               	movwf	??_initLCD
  3396  11BD                     u6207:	
  3397  11BD  0BA3               	decfsz	??_initLCD,f
  3398  11BE  29BD               	goto	u6207
  3399  11BF  0BA4               	decfsz	??_initLCD+1,f
  3400  11C0  29BD               	goto	u6207
  3401  11C1  0000               	nop
  3402                           
  3403                           ;lcd.h: 68: LCDcmd(0x10);
  3404  11C2  3010               	movlw	16
  3405  11C3  160A  158A  238B  160A  118A  	fcall	_LCDcmd
  3406                           
  3407                           ;lcd.h: 69: _delay((unsigned long)((10)*(8000000/4000.0)));
  3408  11C8  301A               	movlw	26
  3409  11C9  1283               	bcf	3,5	;RP0=0, select bank0
  3410  11CA  1303               	bcf	3,6	;RP1=0, select bank0
  3411  11CB  00A4               	movwf	??_initLCD+1
  3412  11CC  30F8               	movlw	248
  3413  11CD  00A3               	movwf	??_initLCD
  3414  11CE                     u6217:	
  3415  11CE  0BA3               	decfsz	??_initLCD,f
  3416  11CF  29CE               	goto	u6217
  3417  11D0  0BA4               	decfsz	??_initLCD+1,f
  3418  11D1  29CE               	goto	u6217
  3419  11D2  0000               	nop
  3420                           
  3421                           ;lcd.h: 70: LCDcmd(0x0F);
  3422  11D3  300F               	movlw	15
  3423  11D4  160A  158A  238B  160A  118A  	fcall	_LCDcmd
  3424                           
  3425                           ;lcd.h: 71: _delay((unsigned long)((10)*(8000000/4000.0)));
  3426  11D9  301A               	movlw	26
  3427  11DA  1283               	bcf	3,5	;RP0=0, select bank0
  3428  11DB  1303               	bcf	3,6	;RP1=0, select bank0
  3429  11DC  00A4               	movwf	??_initLCD+1
  3430  11DD  30F8               	movlw	248
  3431  11DE  00A3               	movwf	??_initLCD
  3432  11DF                     u6227:	
  3433  11DF  0BA3               	decfsz	??_initLCD,f
  3434  11E0  29DF               	goto	u6227
  3435  11E1  0BA4               	decfsz	??_initLCD+1,f
  3436  11E2  29DF               	goto	u6227
  3437  11E3  0000               	nop
  3438                           
  3439                           ;lcd.h: 72: LCDcmd(0x06);
  3440  11E4  3006               	movlw	6
  3441  11E5  160A  158A  238B  160A  118A  	fcall	_LCDcmd
  3442                           
  3443                           ;lcd.h: 73: _delay((unsigned long)((10)*(8000000/4000.0)));
  3444  11EA  301A               	movlw	26
  3445  11EB  1283               	bcf	3,5	;RP0=0, select bank0
  3446  11EC  1303               	bcf	3,6	;RP1=0, select bank0
  3447  11ED  00A4               	movwf	??_initLCD+1
  3448  11EE  30F8               	movlw	248
  3449  11EF  00A3               	movwf	??_initLCD
  3450  11F0                     u6237:	
  3451  11F0  0BA3               	decfsz	??_initLCD,f
  3452  11F1  29F0               	goto	u6237
  3453  11F2  0BA4               	decfsz	??_initLCD+1,f
  3454  11F3  29F0               	goto	u6237
  3455  11F4  0000               	nop
  3456  11F5  0008               	return
  3457  11F6                     __end_of_initLCD:	
  3458                           
  3459                           	psect	text12
  3460  1B8B                     __ptext12:	
  3461 ;; *************** function _LCDcmd *****************
  3462 ;; Defined at:
  3463 ;;		line 108 in file "lcd.h"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  a               1    wreg     unsigned char 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  a               1    2[BANK0 ] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;		None               void
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, pclath, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3477 ;;      Params:         0       0       0       0       0
  3478 ;;      Locals:         0       1       0       0       0
  3479 ;;      Temps:          0       2       0       0       0
  3480 ;;      Totals:         0       3       0       0       0
  3481 ;;Total ram usage:        3 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    2
  3484 ;; This function calls:
  3485 ;;		_LCDSetBits
  3486 ;;		_pulse
  3487 ;; This function is called by:
  3488 ;;		_initLCD
  3489 ;;		_clearLCD
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _LCDcmd
  3495  1B8B                     _LCDcmd:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
  3499                           ;LCDcmd@a stored from wreg
  3500  1B8B  1283               	bcf	3,5	;RP0=0, select bank0
  3501  1B8C  1303               	bcf	3,6	;RP1=0, select bank0
  3502  1B8D  00A2               	movwf	LCDcmd@a
  3503                           
  3504                           ;lcd.h: 110: LCDSetBits(a);
  3505  1B8E  0822               	movf	LCDcmd@a,w
  3506  1B8F  160A  158A  22EB  160A  158A  	fcall	_LCDSetBits
  3507                           
  3508                           ;lcd.h: 111: RB0 = 0;
  3509  1B94  1283               	bcf	3,5	;RP0=0, select bank0
  3510  1B95  1303               	bcf	3,6	;RP1=0, select bank0
  3511  1B96  1006               	bcf	6,0	;volatile
  3512                           
  3513                           ;lcd.h: 112: RD7 = 0;
  3514  1B97  1388               	bcf	8,7	;volatile
  3515                           
  3516                           ;lcd.h: 113: pulse();
  3517  1B98  160A  158A  229F  160A  158A  	fcall	_pulse
  3518                           
  3519                           ;lcd.h: 114: a = a<<4;
  3520  1B9D  1283               	bcf	3,5	;RP0=0, select bank0
  3521  1B9E  1303               	bcf	3,6	;RP1=0, select bank0
  3522  1B9F  0822               	movf	LCDcmd@a,w
  3523  1BA0  00A0               	movwf	??_LCDcmd
  3524  1BA1  3003               	movlw	3
  3525  1BA2                     u4935:	
  3526  1BA2  1003               	clrc
  3527  1BA3  0DA0               	rlf	??_LCDcmd,f
  3528  1BA4  3EFF               	addlw	-1
  3529  1BA5  1D03               	skipz
  3530  1BA6  2BA2               	goto	u4935
  3531  1BA7  1003               	clrc
  3532  1BA8  0D20               	rlf	??_LCDcmd,w
  3533  1BA9  00A1               	movwf	??_LCDcmd+1
  3534  1BAA  0821               	movf	??_LCDcmd+1,w
  3535  1BAB  00A2               	movwf	LCDcmd@a
  3536                           
  3537                           ;lcd.h: 115: LCDSetBits(a);
  3538  1BAC  0822               	movf	LCDcmd@a,w
  3539  1BAD  160A  158A  22EB  160A  158A  	fcall	_LCDSetBits
  3540                           
  3541                           ;lcd.h: 116: pulse();
  3542  1BB2  160A  158A  229F   	fcall	_pulse
  3543  1BB5  0008               	return
  3544  1BB6                     __end_of_LCDcmd:	
  3545                           
  3546                           	psect	text13
  3547  1A90                     __ptext13:	
  3548 ;; *************** function _initADC *****************
  3549 ;; Defined at:
  3550 ;;		line 56 in file "adc.h"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		wreg, status,2
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3564 ;;      Params:         0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    1
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_initController
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _initADC
  3580  1A90                     _initADC:	
  3581                           
  3582                           ;adc.h: 58: ADCON0 = 0b10000001;
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _initADC: [wreg+status,2]
  3586  1A90  3081               	movlw	129
  3587  1A91  1283               	bcf	3,5	;RP0=0, select bank0
  3588  1A92  1303               	bcf	3,6	;RP1=0, select bank0
  3589  1A93  009F               	movwf	31	;volatile
  3590                           
  3591                           ;adc.h: 65: ADCON1 = 0b01110000;
  3592  1A94  3070               	movlw	112
  3593  1A95  1683               	bsf	3,5	;RP0=1, select bank1
  3594  1A96  1303               	bcf	3,6	;RP1=0, select bank1
  3595  1A97  009F               	movwf	31	;volatile
  3596                           
  3597                           ;adc.h: 68: ADRESH = 0x00;
  3598  1A98  1283               	bcf	3,5	;RP0=0, select bank0
  3599  1A99  1303               	bcf	3,6	;RP1=0, select bank0
  3600  1A9A  019E               	clrf	30	;volatile
  3601                           
  3602                           ;adc.h: 69: ADRESL = 0x00;
  3603  1A9B  1683               	bsf	3,5	;RP0=1, select bank1
  3604  1A9C  1303               	bcf	3,6	;RP1=0, select bank1
  3605  1A9D  019E               	clrf	30	;volatile
  3606  1A9E  0008               	return
  3607  1A9F                     __end_of_initADC:	
  3608                           
  3609                           	psect	text14
  3610  1B05                     __ptext14:	
  3611 ;; *************** function _handlePB *****************
  3612 ;; Defined at:
  3613 ;;		line 275 in file "PIC16F917 Battery Management.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;		None               void
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3627 ;;      Params:         0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0
  3629 ;;      Temps:          2       0       0       0       0
  3630 ;;      Totals:         2       0       0       0       0
  3631 ;;Total ram usage:        2 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    1
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_main
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _handlePB
  3643  1B05                     _handlePB:	
  3644                           
  3645                           ;PIC16F917 Battery Management.c: 277: if( RD5 == 1 )
  3646                           
  3647                           ;incstack = 0
  3648                           ; Regs used in _handlePB: [wreg+status,2+status,0]
  3649  1B05  1283               	bcf	3,5	;RP0=0, select bank0
  3650  1B06  1303               	bcf	3,6	;RP1=0, select bank0
  3651  1B07  1A88               	btfsc	8,5	;volatile
  3652  1B08  0008               	return
  3653                           
  3654                           ;PIC16F917 Battery Management.c: 280: _delay((unsigned long)((50)*(8000000/4000.0)));
  3655                           
  3656                           ;PIC16F917 Battery Management.c: 278: return;
  3657  1B09  3082               	movlw	130
  3658  1B0A  00F5               	movwf	??_handlePB+1
  3659  1B0B  30DD               	movlw	221
  3660  1B0C  00F4               	movwf	??_handlePB
  3661  1B0D                     u6247:	
  3662  1B0D  0BF4               	decfsz	??_handlePB,f
  3663  1B0E  2B0D               	goto	u6247
  3664  1B0F  0BF5               	decfsz	??_handlePB+1,f
  3665  1B10  2B0D               	goto	u6247
  3666  1B11  2B12               	nop2
  3667                           
  3668                           ;PIC16F917 Battery Management.c: 282: if( RD5 == 1 )
  3669  1B12  1283               	bcf	3,5	;RP0=0, select bank0
  3670  1B13  1303               	bcf	3,6	;RP1=0, select bank0
  3671  1B14  1A88               	btfsc	8,5	;volatile
  3672  1B15  0008               	return
  3673  1B16                     l237:	
  3674                           ;PIC16F917 Battery Management.c: 285: while( RD5 == 0 ) {}
  3675                           
  3676                           ;PIC16F917 Battery Management.c: 283: return;
  3677                           
  3678  1B16  1E88               	btfss	8,5	;volatile
  3679  1B17  2B16               	goto	l237
  3680                           
  3681                           ;PIC16F917 Battery Management.c: 287: LCDDisplayMode++;
  3682  1B18  3001               	movlw	1
  3683  1B19  00F4               	movwf	??_handlePB
  3684  1B1A  0874               	movf	??_handlePB,w
  3685  1B1B  07F8               	addwf	_LCDDisplayMode,f
  3686                           
  3687                           ;PIC16F917 Battery Management.c: 289: if (LCDDisplayMode > 3)
  3688  1B1C  3004               	movlw	4
  3689  1B1D  0278               	subwf	_LCDDisplayMode,w
  3690  1B1E  1C03               	skipc
  3691  1B1F  0008               	return
  3692                           
  3693                           ;PIC16F917 Battery Management.c: 290: LCDDisplayMode = 0;
  3694  1B20  01F8               	clrf	_LCDDisplayMode
  3695  1B21  0008               	return
  3696  1B22                     __end_of_handlePB:	
  3697                           
  3698                           	psect	text15
  3699  1680                     __ptext15:	
  3700 ;; *************** function _displayLCD *****************
  3701 ;; Defined at:
  3702 ;;		line 164 in file "PIC16F917 Battery Management.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  disp            2   78[BANK0 ] int 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3716 ;;      Params:         0       2       0       0       0
  3717 ;;      Locals:         0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0
  3719 ;;      Totals:         0       2       0       0       0
  3720 ;;Total ram usage:        2 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    5
  3723 ;; This function calls:
  3724 ;;		_LCDSetCursor
  3725 ;;		_LCDWriteString
  3726 ;;		_batteryVoltage
  3727 ;;		_sprintf
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _displayLCD
  3735  1680                     _displayLCD:	
  3736                           
  3737                           ;PIC16F917 Battery Management.c: 166: switch( disp )
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _displayLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3741  1680  2FEA               	goto	l4262
  3742  1681                     l4220:	
  3743                           ;PIC16F917 Battery Management.c: 167: {
  3744                           ;PIC16F917 Battery Management.c: 170: case 0:
  3745                           
  3746                           
  3747                           ;PIC16F917 Battery Management.c: 171: {
  3748                           ;PIC16F917 Battery Management.c: 172: sprintf( topStr, "Voltage:%.3f V      ", batteryVo
      +                          ltage() );
  3749  1681  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3750  1682  1283               	bcf	3,5	;RP0=0, select bank0
  3751  1683  1303               	bcf	3,6	;RP1=0, select bank0
  3752  1684  00E7               	movwf	sprintf@sp
  3753  1685  3000               	movlw	0
  3754  1686  00E8               	movwf	sprintf@sp+1
  3755  1687  3099               	movlw	low (STR_3| (0+32768))
  3756  1688  00E9               	movwf	sprintf@f
  3757  1689  3098               	movlw	high (STR_3| (0+32768))
  3758  168A  00EA               	movwf	sprintf@f+1
  3759  168B  160A  158A  24C5  160A  118A  	fcall	_batteryVoltage
  3760  1690  1283               	bcf	3,5	;RP0=0, select bank0
  3761  1691  1303               	bcf	3,6	;RP1=0, select bank0
  3762  1692  085F               	movf	?_batteryVoltage,w
  3763  1693  00EB               	movwf	?_sprintf+4
  3764  1694  0860               	movf	?_batteryVoltage+1,w
  3765  1695  00EC               	movwf	?_sprintf+5
  3766  1696  0861               	movf	?_batteryVoltage+2,w
  3767  1697  00ED               	movwf	?_sprintf+6
  3768  1698  120A  118A  2058  160A  118A  	fcall	_sprintf
  3769                           
  3770                           ;PIC16F917 Battery Management.c: 174: LCDSetCursor(0x00);
  3771  169D  3000               	movlw	0
  3772  169E  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3773                           
  3774                           ;PIC16F917 Battery Management.c: 175: LCDWriteString(topStr);
  3775  16A3  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3776  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  3777  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  3778  16A6  00A3               	movwf	LCDWriteString@a
  3779  16A7  3000               	movlw	0
  3780  16A8  00A4               	movwf	LCDWriteString@a+1
  3781  16A9  160A  158A  248B  160A  118A  	fcall	_LCDWriteString
  3782                           
  3783                           ;PIC16F917 Battery Management.c: 177: sprintf( btmStr, "Current:%.3fA      ", current);
  3784  16AE  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3785  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  3786  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  3787  16B1  00E7               	movwf	sprintf@sp
  3788  16B2  3001               	movlw	1
  3789  16B3  00E8               	movwf	sprintf@sp+1
  3790  16B4  30AE               	movlw	low (STR_4| (0+32768))
  3791  16B5  00E9               	movwf	sprintf@f
  3792  16B6  3098               	movlw	high (STR_4| (0+32768))
  3793  16B7  00EA               	movwf	sprintf@f+1
  3794  16B8  1683               	bsf	3,5	;RP0=1, select bank1
  3795  16B9  1303               	bcf	3,6	;RP1=0, select bank1
  3796  16BA  0832               	movf	_current^(0+128),w
  3797  16BB  1283               	bcf	3,5	;RP0=0, select bank0
  3798  16BC  1303               	bcf	3,6	;RP1=0, select bank0
  3799  16BD  00EB               	movwf	?_sprintf+4
  3800  16BE  1683               	bsf	3,5	;RP0=1, select bank1
  3801  16BF  1303               	bcf	3,6	;RP1=0, select bank1
  3802  16C0  0833               	movf	(_current+1)^(0+128),w
  3803  16C1  1283               	bcf	3,5	;RP0=0, select bank0
  3804  16C2  1303               	bcf	3,6	;RP1=0, select bank0
  3805  16C3  00EC               	movwf	?_sprintf+5
  3806  16C4  1683               	bsf	3,5	;RP0=1, select bank1
  3807  16C5  1303               	bcf	3,6	;RP1=0, select bank1
  3808  16C6  0834               	movf	(_current+2)^(0+128),w
  3809  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  3810  16C8  1303               	bcf	3,6	;RP1=0, select bank0
  3811  16C9  00ED               	movwf	?_sprintf+6
  3812  16CA  120A  118A  2058  160A  118A  	fcall	_sprintf
  3813                           
  3814                           ;PIC16F917 Battery Management.c: 179: LCDSetCursor(0x10);
  3815  16CF  3010               	movlw	16
  3816  16D0  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3817                           
  3818                           ;PIC16F917 Battery Management.c: 180: LCDWriteString(btmStr);
  3819  16D5  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3820  16D6  1283               	bcf	3,5	;RP0=0, select bank0
  3821  16D7  1303               	bcf	3,6	;RP1=0, select bank0
  3822  16D8  00A3               	movwf	LCDWriteString@a
  3823  16D9  3001               	movlw	1
  3824  16DA  00A4               	movwf	LCDWriteString@a+1
  3825  16DB  160A  158A  248B   	fcall	_LCDWriteString
  3826                           
  3827                           ;PIC16F917 Battery Management.c: 182: break;
  3828  16DE  0008               	return
  3829  16DF                     l4230:	
  3830                           ;PIC16F917 Battery Management.c: 183: }
  3831                           ;PIC16F917 Battery Management.c: 186: case 1:
  3832                           
  3833                           
  3834                           ;PIC16F917 Battery Management.c: 187: {
  3835                           ;PIC16F917 Battery Management.c: 188: sprintf( topStr, "Cell 1:%.2f     ", cellVolt[0] )
      +                          ;
  3836  16DF  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3837  16E0  1283               	bcf	3,5	;RP0=0, select bank0
  3838  16E1  1303               	bcf	3,6	;RP1=0, select bank0
  3839  16E2  00E7               	movwf	sprintf@sp
  3840  16E3  3000               	movlw	0
  3841  16E4  00E8               	movwf	sprintf@sp+1
  3842  16E5  30D3               	movlw	low (STR_5| (0+32768))
  3843  16E6  00E9               	movwf	sprintf@f
  3844  16E7  3098               	movlw	high (STR_5| (0+32768))
  3845  16E8  00EA               	movwf	sprintf@f+1
  3846  16E9  1683               	bsf	3,5	;RP0=1, select bank1
  3847  16EA  1303               	bcf	3,6	;RP1=0, select bank1
  3848  16EB  0820               	movf	_cellVolt^(0+128),w
  3849  16EC  1283               	bcf	3,5	;RP0=0, select bank0
  3850  16ED  1303               	bcf	3,6	;RP1=0, select bank0
  3851  16EE  00EB               	movwf	?_sprintf+4
  3852  16EF  1683               	bsf	3,5	;RP0=1, select bank1
  3853  16F0  1303               	bcf	3,6	;RP1=0, select bank1
  3854  16F1  0821               	movf	(_cellVolt+1)^(0+128),w
  3855  16F2  1283               	bcf	3,5	;RP0=0, select bank0
  3856  16F3  1303               	bcf	3,6	;RP1=0, select bank0
  3857  16F4  00EC               	movwf	?_sprintf+5
  3858  16F5  1683               	bsf	3,5	;RP0=1, select bank1
  3859  16F6  1303               	bcf	3,6	;RP1=0, select bank1
  3860  16F7  0822               	movf	(_cellVolt+2)^(0+128),w
  3861  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  3862  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  3863  16FA  00ED               	movwf	?_sprintf+6
  3864  16FB  120A  118A  2058  160A  118A  	fcall	_sprintf
  3865                           
  3866                           ;PIC16F917 Battery Management.c: 190: LCDSetCursor(0x00);
  3867  1700  3000               	movlw	0
  3868  1701  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3869                           
  3870                           ;PIC16F917 Battery Management.c: 191: LCDWriteString(topStr);
  3871  1706  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3872  1707  1283               	bcf	3,5	;RP0=0, select bank0
  3873  1708  1303               	bcf	3,6	;RP1=0, select bank0
  3874  1709  00A3               	movwf	LCDWriteString@a
  3875  170A  3000               	movlw	0
  3876  170B  00A4               	movwf	LCDWriteString@a+1
  3877  170C  160A  158A  248B  160A  118A  	fcall	_LCDWriteString
  3878                           
  3879                           ;PIC16F917 Battery Management.c: 193: sprintf( btmStr, "Cell 2:%.2f     ", cellVolt[1] )
      +                          ;
  3880  1711  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3881  1712  1283               	bcf	3,5	;RP0=0, select bank0
  3882  1713  1303               	bcf	3,6	;RP1=0, select bank0
  3883  1714  00E7               	movwf	sprintf@sp
  3884  1715  3001               	movlw	1
  3885  1716  00E8               	movwf	sprintf@sp+1
  3886  1717  30E4               	movlw	low (STR_6| (0+32768))
  3887  1718  00E9               	movwf	sprintf@f
  3888  1719  3098               	movlw	high (STR_6| (0+32768))
  3889  171A  00EA               	movwf	sprintf@f+1
  3890  171B  3003               	movlw	3
  3891  171C  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  3892  171D  0084               	movwf	4
  3893  171E  1383               	bcf	3,7	;select IRP bank1
  3894  171F  0800               	movf	0,w
  3895  1720  00EB               	movwf	?_sprintf+4
  3896  1721  0A84               	incf	4,f
  3897  1722  0800               	movf	0,w
  3898  1723  00EC               	movwf	?_sprintf+5
  3899  1724  0A84               	incf	4,f
  3900  1725  0800               	movf	0,w
  3901  1726  00ED               	movwf	?_sprintf+6
  3902  1727  120A  118A  2058  160A  118A  	fcall	_sprintf
  3903                           
  3904                           ;PIC16F917 Battery Management.c: 195: LCDSetCursor(0x10);
  3905  172C  3010               	movlw	16
  3906  172D  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3907                           
  3908                           ;PIC16F917 Battery Management.c: 196: LCDWriteString(btmStr);
  3909  1732  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3910  1733  1283               	bcf	3,5	;RP0=0, select bank0
  3911  1734  1303               	bcf	3,6	;RP1=0, select bank0
  3912  1735  00A3               	movwf	LCDWriteString@a
  3913  1736  3001               	movlw	1
  3914  1737  00A4               	movwf	LCDWriteString@a+1
  3915  1738  160A  158A  248B   	fcall	_LCDWriteString
  3916                           
  3917                           ;PIC16F917 Battery Management.c: 198: break;
  3918  173B  0008               	return
  3919  173C                     l4240:	
  3920                           ;PIC16F917 Battery Management.c: 199: }
  3921                           ;PIC16F917 Battery Management.c: 202: case 2:
  3922                           
  3923                           
  3924                           ;PIC16F917 Battery Management.c: 203: {
  3925                           ;PIC16F917 Battery Management.c: 204: sprintf( topStr, "Cell 3:%.2f     ", cellVolt[2] )
      +                          ;
  3926  173C  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3927  173D  1283               	bcf	3,5	;RP0=0, select bank0
  3928  173E  1303               	bcf	3,6	;RP1=0, select bank0
  3929  173F  00E7               	movwf	sprintf@sp
  3930  1740  3000               	movlw	0
  3931  1741  00E8               	movwf	sprintf@sp+1
  3932  1742  30F5               	movlw	low (STR_7| (0+32768))
  3933  1743  00E9               	movwf	sprintf@f
  3934  1744  3098               	movlw	high (STR_7| (0+32768))
  3935  1745  00EA               	movwf	sprintf@f+1
  3936  1746  3006               	movlw	6
  3937  1747  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  3938  1748  0084               	movwf	4
  3939  1749  1383               	bcf	3,7	;select IRP bank1
  3940  174A  0800               	movf	0,w
  3941  174B  00EB               	movwf	?_sprintf+4
  3942  174C  0A84               	incf	4,f
  3943  174D  0800               	movf	0,w
  3944  174E  00EC               	movwf	?_sprintf+5
  3945  174F  0A84               	incf	4,f
  3946  1750  0800               	movf	0,w
  3947  1751  00ED               	movwf	?_sprintf+6
  3948  1752  120A  118A  2058  160A  118A  	fcall	_sprintf
  3949                           
  3950                           ;PIC16F917 Battery Management.c: 206: LCDSetCursor(0x00);
  3951  1757  3000               	movlw	0
  3952  1758  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3953                           
  3954                           ;PIC16F917 Battery Management.c: 207: LCDWriteString(topStr);
  3955  175D  30B5               	movlw	(low (_topStr| 0))& (0+255)
  3956  175E  1283               	bcf	3,5	;RP0=0, select bank0
  3957  175F  1303               	bcf	3,6	;RP1=0, select bank0
  3958  1760  00A3               	movwf	LCDWriteString@a
  3959  1761  3000               	movlw	0
  3960  1762  00A4               	movwf	LCDWriteString@a+1
  3961  1763  160A  158A  248B  160A  118A  	fcall	_LCDWriteString
  3962                           
  3963                           ;PIC16F917 Battery Management.c: 209: sprintf( btmStr, "Cell 4:%.2f     ", cellVolt[3] )
      +                          ;
  3964  1768  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3965  1769  1283               	bcf	3,5	;RP0=0, select bank0
  3966  176A  1303               	bcf	3,6	;RP1=0, select bank0
  3967  176B  00E7               	movwf	sprintf@sp
  3968  176C  3001               	movlw	1
  3969  176D  00E8               	movwf	sprintf@sp+1
  3970  176E  3006               	movlw	low (STR_8| (0+32768))
  3971  176F  00E9               	movwf	sprintf@f
  3972  1770  3099               	movlw	high (STR_8| (0+32768))
  3973  1771  00EA               	movwf	sprintf@f+1
  3974  1772  3009               	movlw	9
  3975  1773  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  3976  1774  0084               	movwf	4
  3977  1775  1383               	bcf	3,7	;select IRP bank1
  3978  1776  0800               	movf	0,w
  3979  1777  00EB               	movwf	?_sprintf+4
  3980  1778  0A84               	incf	4,f
  3981  1779  0800               	movf	0,w
  3982  177A  00EC               	movwf	?_sprintf+5
  3983  177B  0A84               	incf	4,f
  3984  177C  0800               	movf	0,w
  3985  177D  00ED               	movwf	?_sprintf+6
  3986  177E  120A  118A  2058  160A  118A  	fcall	_sprintf
  3987                           
  3988                           ;PIC16F917 Battery Management.c: 211: LCDSetCursor(0x10);
  3989  1783  3010               	movlw	16
  3990  1784  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  3991                           
  3992                           ;PIC16F917 Battery Management.c: 212: LCDWriteString(btmStr);
  3993  1789  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  3994  178A  1283               	bcf	3,5	;RP0=0, select bank0
  3995  178B  1303               	bcf	3,6	;RP1=0, select bank0
  3996  178C  00A3               	movwf	LCDWriteString@a
  3997  178D  3001               	movlw	1
  3998  178E  00A4               	movwf	LCDWriteString@a+1
  3999  178F  160A  158A  248B   	fcall	_LCDWriteString
  4000                           
  4001                           ;PIC16F917 Battery Management.c: 214: break;
  4002  1792  0008               	return
  4003  1793                     l4250:	
  4004                           ;PIC16F917 Battery Management.c: 215: }
  4005                           ;PIC16F917 Battery Management.c: 218: case 3:
  4006                           
  4007                           
  4008                           ;PIC16F917 Battery Management.c: 219: {
  4009                           ;PIC16F917 Battery Management.c: 220: sprintf( topStr, "Cell 5:%.2f     ", cellVolt[4] )
      +                          ;
  4010  1793  30B5               	movlw	(low (_topStr| 0))& (0+255)
  4011  1794  1283               	bcf	3,5	;RP0=0, select bank0
  4012  1795  1303               	bcf	3,6	;RP1=0, select bank0
  4013  1796  00E7               	movwf	sprintf@sp
  4014  1797  3000               	movlw	0
  4015  1798  00E8               	movwf	sprintf@sp+1
  4016  1799  3017               	movlw	low (STR_9| (0+32768))
  4017  179A  00E9               	movwf	sprintf@f
  4018  179B  3099               	movlw	high (STR_9| (0+32768))
  4019  179C  00EA               	movwf	sprintf@f+1
  4020  179D  300C               	movlw	12
  4021  179E  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  4022  179F  0084               	movwf	4
  4023  17A0  1383               	bcf	3,7	;select IRP bank1
  4024  17A1  0800               	movf	0,w
  4025  17A2  00EB               	movwf	?_sprintf+4
  4026  17A3  0A84               	incf	4,f
  4027  17A4  0800               	movf	0,w
  4028  17A5  00EC               	movwf	?_sprintf+5
  4029  17A6  0A84               	incf	4,f
  4030  17A7  0800               	movf	0,w
  4031  17A8  00ED               	movwf	?_sprintf+6
  4032  17A9  120A  118A  2058  160A  118A  	fcall	_sprintf
  4033                           
  4034                           ;PIC16F917 Battery Management.c: 222: LCDSetCursor(0x00);
  4035  17AE  3000               	movlw	0
  4036  17AF  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  4037                           
  4038                           ;PIC16F917 Battery Management.c: 223: LCDWriteString(topStr);
  4039  17B4  30B5               	movlw	(low (_topStr| 0))& (0+255)
  4040  17B5  1283               	bcf	3,5	;RP0=0, select bank0
  4041  17B6  1303               	bcf	3,6	;RP1=0, select bank0
  4042  17B7  00A3               	movwf	LCDWriteString@a
  4043  17B8  3000               	movlw	0
  4044  17B9  00A4               	movwf	LCDWriteString@a+1
  4045  17BA  160A  158A  248B  160A  118A  	fcall	_LCDWriteString
  4046                           
  4047                           ;PIC16F917 Battery Management.c: 225: sprintf( btmStr, "Cell 6:%.2f     ", cellVolt[5] )
      +                          ;
  4048  17BF  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  4049  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  4050  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  4051  17C2  00E7               	movwf	sprintf@sp
  4052  17C3  3001               	movlw	1
  4053  17C4  00E8               	movwf	sprintf@sp+1
  4054  17C5  3028               	movlw	low (STR_10| (0+32768))
  4055  17C6  00E9               	movwf	sprintf@f
  4056  17C7  3099               	movlw	high (STR_10| (0+32768))
  4057  17C8  00EA               	movwf	sprintf@f+1
  4058  17C9  300F               	movlw	15
  4059  17CA  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  4060  17CB  0084               	movwf	4
  4061  17CC  1383               	bcf	3,7	;select IRP bank1
  4062  17CD  0800               	movf	0,w
  4063  17CE  00EB               	movwf	?_sprintf+4
  4064  17CF  0A84               	incf	4,f
  4065  17D0  0800               	movf	0,w
  4066  17D1  00EC               	movwf	?_sprintf+5
  4067  17D2  0A84               	incf	4,f
  4068  17D3  0800               	movf	0,w
  4069  17D4  00ED               	movwf	?_sprintf+6
  4070  17D5  120A  118A  2058  160A  118A  	fcall	_sprintf
  4071                           
  4072                           ;PIC16F917 Battery Management.c: 227: LCDSetCursor(0x10);
  4073  17DA  3010               	movlw	16
  4074  17DB  160A  158A  2419  160A  118A  	fcall	_LCDSetCursor
  4075                           
  4076                           ;PIC16F917 Battery Management.c: 228: LCDWriteString(btmStr);
  4077  17E0  3090               	movlw	(low (_btmStr| (0+256)))& (0+255)
  4078  17E1  1283               	bcf	3,5	;RP0=0, select bank0
  4079  17E2  1303               	bcf	3,6	;RP1=0, select bank0
  4080  17E3  00A3               	movwf	LCDWriteString@a
  4081  17E4  3001               	movlw	1
  4082  17E5  00A4               	movwf	LCDWriteString@a+1
  4083  17E6  160A  158A  248B   	fcall	_LCDWriteString
  4084                           
  4085                           ;PIC16F917 Battery Management.c: 231: }
  4086                           ;PIC16F917 Battery Management.c: 232: }
  4087                           
  4088                           ;PIC16F917 Battery Management.c: 230: break;
  4089  17E9  0008               	return
  4090  17EA                     l4262:	
  4091                           
  4092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4093                           ; Switch size 1, requested type "space"
  4094                           ; Number of cases is 1, Range of values is 0 to 0
  4095                           ; switch strategies available:
  4096                           ; Name         Instructions Cycles
  4097                           ; simple_byte            4     3 (average)
  4098                           ; direct_byte           11     8 (fixed)
  4099                           ; jumptable            260     6 (fixed)
  4100                           ;	Chosen strategy is simple_byte
  4101  17EA  1283               	bcf	3,5	;RP0=0, select bank0
  4102  17EB  1303               	bcf	3,6	;RP1=0, select bank0
  4103  17EC  086F               	movf	displayLCD@disp+1,w
  4104  17ED  3A00               	xorlw	0	; case 0
  4105  17EE  1903               	skipnz
  4106  17EF  2FF1               	goto	l4326
  4107  17F0  2FFF               	goto	l222
  4108  17F1                     l4326:	
  4109                           
  4110                           ; Switch size 1, requested type "space"
  4111                           ; Number of cases is 4, Range of values is 0 to 3
  4112                           ; switch strategies available:
  4113                           ; Name         Instructions Cycles
  4114                           ; simple_byte           13     7 (average)
  4115                           ; direct_byte           20     8 (fixed)
  4116                           ; jumptable            260     6 (fixed)
  4117                           ;	Chosen strategy is simple_byte
  4118  17F1  086E               	movf	displayLCD@disp,w
  4119  17F2  3A00               	xorlw	0	; case 0
  4120  17F3  1903               	skipnz
  4121  17F4  2E81               	goto	l4220
  4122  17F5  3A01               	xorlw	1	; case 1
  4123  17F6  1903               	skipnz
  4124  17F7  2EDF               	goto	l4230
  4125  17F8  3A03               	xorlw	3	; case 2
  4126  17F9  1903               	skipnz
  4127  17FA  2F3C               	goto	l4240
  4128  17FB  3A01               	xorlw	1	; case 3
  4129  17FC  1903               	skipnz
  4130  17FD  2F93               	goto	l4250
  4131  17FE  2FFF               	goto	l222
  4132  17FF                     l222:	
  4133  17FF  0008               	return
  4134  1800                     __end_of_displayLCD:	
  4135                           
  4136                           	psect	text16
  4137  0058                     __ptext16:	
  4138 ;; *************** function _sprintf *****************
  4139 ;; Defined at:
  4140 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  sp              2   71[BANK0 ] PTR unsigned char 
  4143 ;;		 -> btmStr(16), topStr(16), 
  4144 ;;  f               2   73[BANK0 ] PTR const unsigned char 
  4145 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  4146 ;;		 -> STR_6(17), STR_5(17), STR_4(20), STR_3(21), 
  4147 ;;		 -> STR_2(17), STR_1(17), 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  tmpval          4   18[BANK1 ] struct .
  4150 ;;  val             4   12[BANK1 ] unsigned long 
  4151 ;;  fval            3   24[BANK1 ] unsigned long 
  4152 ;;  prec            2   22[BANK1 ] int 
  4153 ;;  exp             2   16[BANK1 ] int 
  4154 ;;  flag            2   10[BANK1 ] unsigned short 
  4155 ;;  cp              2    0        PTR const unsigned char 
  4156 ;;  len             2    0        unsigned int 
  4157 ;;  width           2    0        int 
  4158 ;;  c               1   27[BANK1 ] char 
  4159 ;;  ap              1    9[BANK1 ] PTR void [1]
  4160 ;;		 -> ?_sprintf(2), 
  4161 ;;  d               1    0        unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2   71[BANK0 ] int 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4171 ;;      Params:         0       7       0       0       0
  4172 ;;      Locals:         0       0      22       0       0
  4173 ;;      Temps:          0       0       6       0       0
  4174 ;;      Totals:         0       7      28       0       0
  4175 ;;Total ram usage:       35 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    4
  4178 ;; This function calls:
  4179 ;;		___awdiv
  4180 ;;		___ftadd
  4181 ;;		___ftge
  4182 ;;		___ftmul
  4183 ;;		___ftneg
  4184 ;;		___ftsub
  4185 ;;		___fttol
  4186 ;;		___lldiv
  4187 ;;		___llmod
  4188 ;;		___lltoft
  4189 ;;		___wmul
  4190 ;;		__div_to_l_
  4191 ;;		__tdiv_to_l_
  4192 ;;		_fround
  4193 ;;		_isdigit
  4194 ;;		_scale
  4195 ;; This function is called by:
  4196 ;;		_main
  4197 ;;		_displayLCD
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _sprintf
  4203  0058                     _sprintf:	
  4204                           
  4205                           ;doprnt.c: 494: va_list ap;
  4206                           ;doprnt.c: 499: signed char c;
  4207                           ;doprnt.c: 501: int width;
  4208                           ;doprnt.c: 504: int prec;
  4209                           ;doprnt.c: 508: unsigned short flag;
  4210                           ;doprnt.c: 515: char d;
  4211                           ;doprnt.c: 516: double fval;
  4212                           ;doprnt.c: 517: int exp;
  4213                           ;doprnt.c: 523: union {
  4214                           ;doprnt.c: 524: unsigned long vd;
  4215                           ;doprnt.c: 525: double integ;
  4216                           ;doprnt.c: 526: } tmpval;
  4217                           ;doprnt.c: 528: unsigned long val;
  4218                           ;doprnt.c: 529: unsigned len;
  4219                           ;doprnt.c: 530: const char * cp;
  4220                           ;doprnt.c: 533: *ap = __va_start();
  4221                           
  4222                           ;incstack = 0
  4223                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4224  0058  306B               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
  4225  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4226  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4227  005B  00C5               	movwf	??_sprintf^(0+128)
  4228  005C  0845               	movf	??_sprintf^(0+128),w
  4229  005D  00CE               	movwf	sprintf@ap^(0+128)
  4230  005E                     l4070:	
  4231                           ;doprnt.c: 536: while(c = *f++) {
  4232                           
  4233  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4234  005F  086A               	movf	sprintf@f+1,w
  4235  0060  1683               	bsf	3,5	;RP0=1, select bank1
  4236  0061  1303               	bcf	3,6	;RP1=0, select bank1
  4237  0062  00C6               	movwf	(??_sprintf^(0+128)+1)
  4238  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4239  0064  1303               	bcf	3,6	;RP1=0, select bank0
  4240  0065  0869               	movf	sprintf@f,w
  4241  0066  1683               	bsf	3,5	;RP0=1, select bank1
  4242  0067  1303               	bcf	3,6	;RP1=0, select bank1
  4243  0068  00C5               	movwf	??_sprintf^(0+128)
  4244  0069  1283               	bcf	3,5	;RP0=0, select bank0
  4245  006A  1303               	bcf	3,6	;RP1=0, select bank0
  4246  006B  0AE9               	incf	sprintf@f,f
  4247  006C  1903               	skipnz
  4248  006D  0AEA               	incf	sprintf@f+1,f
  4249  006E  1683               	bsf	3,5	;RP0=1, select bank1
  4250  006F  1303               	bcf	3,6	;RP1=0, select bank1
  4251  0070  0846               	movf	(??_sprintf+1)^(0+128),w
  4252  0071  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0072  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0073  00FF               	movwf	127
  4255  0074  1683               	bsf	3,5	;RP0=1, select bank1
  4256  0075  1303               	bcf	3,6	;RP1=0, select bank1
  4257  0076  0845               	movf	??_sprintf^(0+128),w
  4258  0077  0084               	movwf	4
  4259  0078  1283               	bcf	3,5	;RP0=0, select bank0
  4260  0079  1303               	bcf	3,6	;RP1=0, select bank0
  4261  007A  160A  158A  2000  120A  118A  	fcall	stringtab
  4262  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4263  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4264  0081  00C7               	movwf	(??_sprintf+2)^(0+128)
  4265  0082  0847               	movf	(??_sprintf+2)^(0+128),w
  4266  0083  00E0               	movwf	sprintf@c^(0+128)
  4267  0084  0860               	movf	sprintf@c^(0+128),w
  4268  0085  1903               	btfsc	3,2
  4269  0086  2FB9               	goto	l4072
  4270                           
  4271                           ;doprnt.c: 538: if(c != '%')
  4272  0087  3025               	movlw	37
  4273  0088  0660               	xorwf	sprintf@c^(0+128),w
  4274  0089  1903               	btfsc	3,2
  4275  008A  289A               	goto	l3888
  4276                           
  4277                           ;doprnt.c: 540: {
  4278                           ;doprnt.c: 541: ((*sp++ = (c)));
  4279  008B  1283               	bcf	3,5	;RP0=0, select bank0
  4280  008C  1303               	bcf	3,6	;RP1=0, select bank0
  4281  008D  0867               	movf	sprintf@sp,w
  4282  008E  0084               	movwf	4
  4283  008F  1383               	bcf	3,7
  4284  0090  1868               	btfsc	sprintf@sp+1,0
  4285  0091  1783               	bsf	3,7
  4286  0092  1683               	bsf	3,5	;RP0=1, select bank1
  4287  0093  1303               	bcf	3,6	;RP1=0, select bank1
  4288  0094  0860               	movf	sprintf@c^(0+128),w
  4289  0095  0080               	movwf	0
  4290  0096  3001               	movlw	1
  4291  0097  1283               	bcf	3,5	;RP0=0, select bank0
  4292  0098  1303               	bcf	3,6	;RP1=0, select bank0
  4293  0099  2FB5               	goto	L1
  4294  009A                     l3888:	
  4295                           ;doprnt.c: 542: continue;
  4296                           
  4297                           
  4298                           ;doprnt.c: 543: }
  4299                           ;doprnt.c: 548: flag = 0;
  4300  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4301  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4302  009C  01CF               	clrf	sprintf@flag^(0+128)
  4303  009D  01D0               	clrf	(sprintf@flag+1)^(0+128)
  4304                           
  4305                           ;doprnt.c: 611: if(*f == '.') {
  4306  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4307  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4308  00A0  086A               	movf	sprintf@f+1,w
  4309  00A1  00FF               	movwf	127
  4310  00A2  0869               	movf	sprintf@f,w
  4311  00A3  0084               	movwf	4
  4312  00A4  160A  158A  2000  120A  118A  	fcall	stringtab
  4313  00A9  3A2E               	xorlw	46
  4314  00AA  1D03               	skipz
  4315  00AB  2906               	goto	l3900
  4316                           
  4317                           ;doprnt.c: 612: flag |= 0x4000;
  4318  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  4319  00AD  1303               	bcf	3,6	;RP1=0, select bank1
  4320  00AE  1750               	bsf	(sprintf@flag^(0+128)+1),6
  4321                           
  4322                           ;doprnt.c: 613: f++;
  4323  00AF  3001               	movlw	1
  4324  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4325  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4326  00B2  07E9               	addwf	sprintf@f,f
  4327  00B3  1803               	skipnc
  4328  00B4  0AEA               	incf	sprintf@f+1,f
  4329                           
  4330                           ;doprnt.c: 620: {
  4331                           ;doprnt.c: 621: prec = 0;
  4332  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  4333  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  4334  00B7  01DB               	clrf	sprintf@prec^(0+128)
  4335  00B8  01DC               	clrf	(sprintf@prec+1)^(0+128)
  4336  00B9                     l289:	
  4337                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4338                           
  4339  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  4340  00BA  086A               	movf	sprintf@f+1,w
  4341  00BB  00FF               	movwf	127
  4342  00BC  0869               	movf	sprintf@f,w
  4343  00BD  0084               	movwf	4
  4344  00BE  160A  158A  2000  120A  118A  	fcall	stringtab
  4345  00C3  160A  158A  2282  120A  118A  	fcall	_isdigit
  4346  00C8  1C03               	btfss	3,0
  4347  00C9  290E               	goto	l3906
  4348                           
  4349                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4350  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  4351  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  4352  00CC  085C               	movf	(sprintf@prec+1)^(0+128),w
  4353  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4354  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  4355  00CF  00A1               	movwf	___wmul@multiplier+1
  4356  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4357  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4358  00D2  085B               	movf	sprintf@prec^(0+128),w
  4359  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  4360  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  4361  00D5  00A0               	movwf	___wmul@multiplier
  4362  00D6  300A               	movlw	10
  4363  00D7  00A2               	movwf	___wmul@multiplicand
  4364  00D8  3000               	movlw	0
  4365  00D9  00A3               	movwf	___wmul@multiplicand+1
  4366  00DA  160A  118A  2006  120A  118A  	fcall	___wmul
  4367  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4368  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  4369  00E1  086A               	movf	sprintf@f+1,w
  4370  00E2  00FF               	movwf	127
  4371  00E3  0869               	movf	sprintf@f,w
  4372  00E4  0084               	movwf	4
  4373  00E5  160A  158A  2000  120A  118A  	fcall	stringtab
  4374  00EA  0720               	addwf	?___wmul,w
  4375  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  4376  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  4377  00ED  00C5               	movwf	??_sprintf^(0+128)
  4378  00EE  3000               	movlw	0
  4379  00EF  1803               	skipnc
  4380  00F0  3001               	movlw	1
  4381  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  4382  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  4383  00F3  0721               	addwf	?___wmul+1,w
  4384  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4385  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4386  00F6  00C6               	movwf	(??_sprintf+1)^(0+128)
  4387  00F7  0845               	movf	??_sprintf^(0+128),w
  4388  00F8  3ED0               	addlw	208
  4389  00F9  00DB               	movwf	sprintf@prec^(0+128)
  4390  00FA  0846               	movf	(??_sprintf+1)^(0+128),w
  4391  00FB  1803               	skipnc
  4392  00FC  3E01               	addlw	1
  4393  00FD  3EFF               	addlw	255
  4394  00FE  00DC               	movwf	(sprintf@prec+1)^(0+128)
  4395  00FF  3001               	movlw	1
  4396  0100  1283               	bcf	3,5	;RP0=0, select bank0
  4397  0101  1303               	bcf	3,6	;RP1=0, select bank0
  4398  0102  07E9               	addwf	sprintf@f,f
  4399  0103  1803               	skipnc
  4400  0104  0AEA               	incf	sprintf@f+1,f
  4401  0105  28B9               	goto	l289
  4402  0106                     l3900:	
  4403                           ;doprnt.c: 624: }
  4404                           ;doprnt.c: 625: } else {
  4405                           
  4406                           
  4407                           ;doprnt.c: 626: prec = 0;
  4408  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4409  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4410  0108  01DB               	clrf	sprintf@prec^(0+128)
  4411  0109  01DC               	clrf	(sprintf@prec+1)^(0+128)
  4412                           
  4413                           ;doprnt.c: 628: flag |= 0x1000;
  4414  010A  1650               	bsf	(sprintf@flag^(0+128)+1),4
  4415                           
  4416                           ;doprnt.c: 630: }
  4417                           ;doprnt.c: 635: switch(c = *f++) {
  4418  010B  290E               	goto	l3906
  4419  010C                     l296:	
  4420                           ;doprnt.c: 662: case 'f':
  4421                           
  4422                           ;doprnt.c: 638: goto alldone;
  4423                           
  4424                           ;doprnt.c: 637: case 0:
  4425                           
  4426                           
  4427                           ;doprnt.c: 663: flag |= 0x400;
  4428  010C  1550               	bsf	(sprintf@flag^(0+128)+1),2
  4429                           
  4430                           ;doprnt.c: 664: break;
  4431  010D  293A               	goto	l3908
  4432  010E                     l3906:	
  4433                           ;doprnt.c: 822: }
  4434                           
  4435                           ;doprnt.c: 813: continue;
  4436                           
  4437                           ;doprnt.c: 802: default:
  4438                           
  4439  010E  1283               	bcf	3,5	;RP0=0, select bank0
  4440  010F  1303               	bcf	3,6	;RP1=0, select bank0
  4441  0110  086A               	movf	sprintf@f+1,w
  4442  0111  1683               	bsf	3,5	;RP0=1, select bank1
  4443  0112  1303               	bcf	3,6	;RP1=0, select bank1
  4444  0113  00C6               	movwf	(??_sprintf^(0+128)+1)
  4445  0114  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0115  1303               	bcf	3,6	;RP1=0, select bank0
  4447  0116  0869               	movf	sprintf@f,w
  4448  0117  1683               	bsf	3,5	;RP0=1, select bank1
  4449  0118  1303               	bcf	3,6	;RP1=0, select bank1
  4450  0119  00C5               	movwf	??_sprintf^(0+128)
  4451  011A  1283               	bcf	3,5	;RP0=0, select bank0
  4452  011B  1303               	bcf	3,6	;RP1=0, select bank0
  4453  011C  0AE9               	incf	sprintf@f,f
  4454  011D  1903               	skipnz
  4455  011E  0AEA               	incf	sprintf@f+1,f
  4456  011F  1683               	bsf	3,5	;RP0=1, select bank1
  4457  0120  1303               	bcf	3,6	;RP1=0, select bank1
  4458  0121  0846               	movf	(??_sprintf+1)^(0+128),w
  4459  0122  1283               	bcf	3,5	;RP0=0, select bank0
  4460  0123  1303               	bcf	3,6	;RP1=0, select bank0
  4461  0124  00FF               	movwf	127
  4462  0125  1683               	bsf	3,5	;RP0=1, select bank1
  4463  0126  1303               	bcf	3,6	;RP1=0, select bank1
  4464  0127  0845               	movf	??_sprintf^(0+128),w
  4465  0128  0084               	movwf	4
  4466  0129  1283               	bcf	3,5	;RP0=0, select bank0
  4467  012A  1303               	bcf	3,6	;RP1=0, select bank0
  4468  012B  160A  158A  2000  120A  118A  	fcall	stringtab
  4469  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4470  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4471  0132  00E0               	movwf	sprintf@c^(0+128)
  4472                           
  4473                           ; Switch size 1, requested type "space"
  4474                           ; Number of cases is 2, Range of values is 0 to 102
  4475                           ; switch strategies available:
  4476                           ; Name         Instructions Cycles
  4477                           ; simple_byte            7     4 (average)
  4478                           ; jumptable            260     6 (fixed)
  4479                           ;	Chosen strategy is simple_byte
  4480  0133  3A00               	xorlw	0	; case 0
  4481  0134  1903               	skipnz
  4482  0135  2FB9               	goto	l4072
  4483  0136  3A66               	xorlw	102	; case 102
  4484  0137  1903               	skipnz
  4485  0138  290C               	goto	l296
  4486  0139  285E               	goto	l4070
  4487  013A                     l3908:	
  4488                           
  4489                           ;doprnt.c: 825: if(flag & (0x700)) {
  4490  013A  3000               	movlw	0
  4491  013B  054F               	andwf	sprintf@flag^(0+128),w
  4492  013C  00C5               	movwf	??_sprintf^(0+128)
  4493  013D  3007               	movlw	7
  4494  013E  0550               	andwf	(sprintf@flag+1)^(0+128),w
  4495  013F  00C6               	movwf	(??_sprintf+1)^(0+128)
  4496  0140  0845               	movf	??_sprintf^(0+128),w
  4497  0141  0446               	iorwf	(??_sprintf^(0+128)+1),w
  4498  0142  1903               	btfsc	3,2
  4499  0143  2F5D               	goto	l4054
  4500                           
  4501                           ;doprnt.c: 827: if(flag & 0x1000)
  4502  0144  1E50               	btfss	(sprintf@flag+1)^(0+128),4
  4503  0145  294A               	goto	l3914
  4504                           
  4505                           ;doprnt.c: 829: prec = 6;
  4506  0146  3006               	movlw	6
  4507  0147  00DB               	movwf	sprintf@prec^(0+128)
  4508  0148  3000               	movlw	0
  4509  0149  00DC               	movwf	(sprintf@prec^(0+128)+1)
  4510  014A                     l3914:	
  4511                           
  4512                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4513  014A  084E               	movf	sprintf@ap^(0+128),w
  4514  014B  0084               	movwf	4
  4515  014C  1383               	bcf	3,7	;select IRP bank0
  4516  014D  0800               	movf	0,w
  4517  014E  00DD               	movwf	sprintf@fval^(0+128)
  4518  014F  0A84               	incf	4,f
  4519  0150  0800               	movf	0,w
  4520  0151  00DE               	movwf	(sprintf@fval+1)^(0+128)
  4521  0152  0A84               	incf	4,f
  4522  0153  0800               	movf	0,w
  4523  0154  00DF               	movwf	(sprintf@fval+2)^(0+128)
  4524  0155  3003               	movlw	3
  4525  0156  00C5               	movwf	??_sprintf^(0+128)
  4526  0157  0845               	movf	??_sprintf^(0+128),w
  4527  0158  07CE               	addwf	sprintf@ap^(0+128),f
  4528                           
  4529                           ;doprnt.c: 831: if(fval < 0.0) {
  4530  0159  085D               	movf	sprintf@fval^(0+128),w
  4531  015A  1283               	bcf	3,5	;RP0=0, select bank0
  4532  015B  1303               	bcf	3,6	;RP1=0, select bank0
  4533  015C  00A0               	movwf	___ftge@ff1
  4534  015D  1683               	bsf	3,5	;RP0=1, select bank1
  4535  015E  1303               	bcf	3,6	;RP1=0, select bank1
  4536  015F  085E               	movf	(sprintf@fval+1)^(0+128),w
  4537  0160  1283               	bcf	3,5	;RP0=0, select bank0
  4538  0161  1303               	bcf	3,6	;RP1=0, select bank0
  4539  0162  00A1               	movwf	___ftge@ff1+1
  4540  0163  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0164  1303               	bcf	3,6	;RP1=0, select bank1
  4542  0165  085F               	movf	(sprintf@fval+2)^(0+128),w
  4543  0166  1283               	bcf	3,5	;RP0=0, select bank0
  4544  0167  1303               	bcf	3,6	;RP1=0, select bank0
  4545  0168  00A2               	movwf	___ftge@ff1+2
  4546  0169  3000               	movlw	0
  4547  016A  00A3               	movwf	___ftge@ff2
  4548  016B  3000               	movlw	0
  4549  016C  00A4               	movwf	___ftge@ff2+1
  4550  016D  3000               	movlw	0
  4551  016E  00A5               	movwf	___ftge@ff2+2
  4552  016F  160A  158A  2659  120A  118A  	fcall	___ftge
  4553  0174  1803               	btfsc	3,0
  4554  0175  29A3               	goto	l3924
  4555                           
  4556                           ;doprnt.c: 832: fval = -fval;
  4557  0176  1683               	bsf	3,5	;RP0=1, select bank1
  4558  0177  1303               	bcf	3,6	;RP1=0, select bank1
  4559  0178  085D               	movf	sprintf@fval^(0+128),w
  4560  0179  1283               	bcf	3,5	;RP0=0, select bank0
  4561  017A  1303               	bcf	3,6	;RP1=0, select bank0
  4562  017B  00A0               	movwf	___ftneg@f1
  4563  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4564  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4565  017E  085E               	movf	(sprintf@fval+1)^(0+128),w
  4566  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4567  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4568  0181  00A1               	movwf	___ftneg@f1+1
  4569  0182  1683               	bsf	3,5	;RP0=1, select bank1
  4570  0183  1303               	bcf	3,6	;RP1=0, select bank1
  4571  0184  085F               	movf	(sprintf@fval+2)^(0+128),w
  4572  0185  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0186  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0187  00A2               	movwf	___ftneg@f1+2
  4575  0188  160A  158A  226D  120A  118A  	fcall	___ftneg
  4576  018D  1283               	bcf	3,5	;RP0=0, select bank0
  4577  018E  1303               	bcf	3,6	;RP1=0, select bank0
  4578  018F  0820               	movf	?___ftneg,w
  4579  0190  1683               	bsf	3,5	;RP0=1, select bank1
  4580  0191  1303               	bcf	3,6	;RP1=0, select bank1
  4581  0192  00DD               	movwf	sprintf@fval^(0+128)
  4582  0193  1283               	bcf	3,5	;RP0=0, select bank0
  4583  0194  1303               	bcf	3,6	;RP1=0, select bank0
  4584  0195  0821               	movf	?___ftneg+1,w
  4585  0196  1683               	bsf	3,5	;RP0=1, select bank1
  4586  0197  1303               	bcf	3,6	;RP1=0, select bank1
  4587  0198  00DE               	movwf	(sprintf@fval+1)^(0+128)
  4588  0199  1283               	bcf	3,5	;RP0=0, select bank0
  4589  019A  1303               	bcf	3,6	;RP1=0, select bank0
  4590  019B  0822               	movf	?___ftneg+2,w
  4591  019C  1683               	bsf	3,5	;RP0=1, select bank1
  4592  019D  1303               	bcf	3,6	;RP1=0, select bank1
  4593  019E  00DF               	movwf	(sprintf@fval+2)^(0+128)
  4594                           
  4595                           ;doprnt.c: 833: flag |= 0x03;
  4596  019F  3003               	movlw	3
  4597  01A0  04CF               	iorwf	sprintf@flag^(0+128),f
  4598  01A1  3000               	movlw	0
  4599  01A2  04D0               	iorwf	(sprintf@flag+1)^(0+128),f
  4600  01A3                     l3924:	
  4601                           
  4602                           ;doprnt.c: 834: }
  4603                           ;doprnt.c: 835: exp = 0;
  4604  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  4605  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  4606  01A5  01D5               	clrf	sprintf@exp^(0+128)
  4607  01A6  01D6               	clrf	(sprintf@exp+1)^(0+128)
  4608                           
  4609                           ;doprnt.c: 836: if( fval!=0) {
  4610  01A7  085F               	movf	(sprintf@fval+2)^(0+128),w
  4611  01A8  045E               	iorwf	(sprintf@fval+1)^(0+128),w
  4612  01A9  045D               	iorwf	sprintf@fval^(0+128),w
  4613  01AA  1903               	skipnz
  4614  01AB  2AC3               	goto	l3952
  4615                           
  4616                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4617  01AC  30DD               	movlw	low (sprintf@fval| 0)
  4618  01AD  0084               	movwf	4
  4619  01AE  1383               	bcf	3,7	;select IRP bank1
  4620  01AF  0800               	movf	0,w
  4621  01B0  00C5               	movwf	??_sprintf^(0+128)
  4622  01B1  0A84               	incf	4,f
  4623  01B2  0800               	movf	0,w
  4624  01B3  00C6               	movwf	(??_sprintf^(0+128)+1)
  4625  01B4  0A84               	incf	4,f
  4626  01B5  0800               	movf	0,w
  4627  01B6  00C7               	movwf	(??_sprintf^(0+128)+2)
  4628  01B7  0A84               	incf	4,f
  4629  01B8  0800               	movf	0,w
  4630  01B9  00C8               	movwf	(??_sprintf^(0+128)+3)
  4631  01BA  300F               	movlw	15
  4632  01BB                     u5695:	
  4633  01BB  1003               	clrc
  4634  01BC  0CC8               	rrf	(??_sprintf^(0+128)+3),f
  4635  01BD  0CC7               	rrf	(??_sprintf^(0+128)+2),f
  4636  01BE  0CC6               	rrf	(??_sprintf^(0+128)+1),f
  4637  01BF  0CC5               	rrf	??_sprintf^(0+128),f
  4638  01C0  3EFF               	addlw	-1
  4639  01C1  1D03               	skipz
  4640  01C2  29BB               	goto	u5695
  4641  01C3  30FF               	movlw	255
  4642  01C4  0545               	andwf	??_sprintf^(0+128),w
  4643  01C5  00C9               	movwf	(??_sprintf+4)^(0+128)
  4644  01C6  3000               	movlw	0
  4645  01C7  0546               	andwf	(??_sprintf+1)^(0+128),w
  4646  01C8  00CA               	movwf	(??_sprintf+5)^(0+128)
  4647  01C9  0849               	movf	(??_sprintf+4)^(0+128),w
  4648  01CA  3E82               	addlw	130
  4649  01CB  00D5               	movwf	sprintf@exp^(0+128)
  4650  01CC  084A               	movf	(??_sprintf+5)^(0+128),w
  4651  01CD  1803               	skipnc
  4652  01CE  3E01               	addlw	1
  4653  01CF  3EFF               	addlw	255
  4654  01D0  00D6               	movwf	(sprintf@exp+1)^(0+128)
  4655                           
  4656                           ;doprnt.c: 838: exp--;
  4657  01D1  30FF               	movlw	255
  4658  01D2  07D5               	addwf	sprintf@exp^(0+128),f
  4659  01D3  1803               	skipnc
  4660  01D4  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  4661  01D5  30FF               	movlw	255
  4662  01D6  07D6               	addwf	(sprintf@exp+1)^(0+128),f
  4663                           
  4664                           ;doprnt.c: 839: exp *= 3;
  4665  01D7  3003               	movlw	3
  4666  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  4667  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  4668  01DA  00A0               	movwf	___wmul@multiplier
  4669  01DB  3000               	movlw	0
  4670  01DC  00A1               	movwf	___wmul@multiplier+1
  4671  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4672  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4673  01DF  0856               	movf	(sprintf@exp+1)^(0+128),w
  4674  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  4675  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  4676  01E2  00A3               	movwf	___wmul@multiplicand+1
  4677  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  4678  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  4679  01E5  0855               	movf	sprintf@exp^(0+128),w
  4680  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  4681  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  4682  01E8  00A2               	movwf	___wmul@multiplicand
  4683  01E9  160A  118A  2006  120A  118A  	fcall	___wmul
  4684  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  4685  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  4686  01F0  0821               	movf	?___wmul+1,w
  4687  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  4688  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  4689  01F3  00D6               	movwf	(sprintf@exp+1)^(0+128)
  4690  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  4691  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  4692  01F6  0820               	movf	?___wmul,w
  4693  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  4694  01F8  1303               	bcf	3,6	;RP1=0, select bank1
  4695  01F9  00D5               	movwf	sprintf@exp^(0+128)
  4696                           
  4697                           ;doprnt.c: 840: exp /= 10;
  4698  01FA  300A               	movlw	10
  4699  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  4700  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  4701  01FD  00A6               	movwf	___awdiv@divisor
  4702  01FE  3000               	movlw	0
  4703  01FF  00A7               	movwf	___awdiv@divisor+1
  4704  0200  1683               	bsf	3,5	;RP0=1, select bank1
  4705  0201  1303               	bcf	3,6	;RP1=0, select bank1
  4706  0202  0856               	movf	(sprintf@exp+1)^(0+128),w
  4707  0203  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0204  1303               	bcf	3,6	;RP1=0, select bank0
  4709  0205  00A9               	movwf	___awdiv@dividend+1
  4710  0206  1683               	bsf	3,5	;RP0=1, select bank1
  4711  0207  1303               	bcf	3,6	;RP1=0, select bank1
  4712  0208  0855               	movf	sprintf@exp^(0+128),w
  4713  0209  1283               	bcf	3,5	;RP0=0, select bank0
  4714  020A  1303               	bcf	3,6	;RP1=0, select bank0
  4715  020B  00A8               	movwf	___awdiv@dividend
  4716  020C  160A  158A  25FE  120A  118A  	fcall	___awdiv
  4717  0211  1283               	bcf	3,5	;RP0=0, select bank0
  4718  0212  1303               	bcf	3,6	;RP1=0, select bank0
  4719  0213  0827               	movf	?___awdiv+1,w
  4720  0214  1683               	bsf	3,5	;RP0=1, select bank1
  4721  0215  1303               	bcf	3,6	;RP1=0, select bank1
  4722  0216  00D6               	movwf	(sprintf@exp+1)^(0+128)
  4723  0217  1283               	bcf	3,5	;RP0=0, select bank0
  4724  0218  1303               	bcf	3,6	;RP1=0, select bank0
  4725  0219  0826               	movf	?___awdiv,w
  4726  021A  1683               	bsf	3,5	;RP0=1, select bank1
  4727  021B  1303               	bcf	3,6	;RP1=0, select bank1
  4728  021C  00D5               	movwf	sprintf@exp^(0+128)
  4729                           
  4730                           ;doprnt.c: 841: if(exp < 0)
  4731  021D  1FD6               	btfss	(sprintf@exp+1)^(0+128),7
  4732  021E  2A25               	goto	l3940
  4733                           
  4734                           ;doprnt.c: 842: exp--;
  4735  021F  30FF               	movlw	255
  4736  0220  07D5               	addwf	sprintf@exp^(0+128),f
  4737  0221  1803               	skipnc
  4738  0222  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  4739  0223  30FF               	movlw	255
  4740  0224  07D6               	addwf	(sprintf@exp+1)^(0+128),f
  4741  0225                     l3940:	
  4742                           
  4743                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4744  0225  0355               	decf	sprintf@exp^(0+128),w
  4745  0226  3AFF               	xorlw	255
  4746  0227  120A  158A  221E  120A  118A  	fcall	_scale
  4747  022C  1283               	bcf	3,5	;RP0=0, select bank0
  4748  022D  1303               	bcf	3,6	;RP1=0, select bank0
  4749  022E  0842               	movf	?_scale,w
  4750  022F  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0230  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0231  00D7               	movwf	sprintf@tmpval^(0+128)
  4753  0232  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0233  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0234  0843               	movf	?_scale+1,w
  4756  0235  1683               	bsf	3,5	;RP0=1, select bank1
  4757  0236  1303               	bcf	3,6	;RP1=0, select bank1
  4758  0237  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  4759  0238  1283               	bcf	3,5	;RP0=0, select bank0
  4760  0239  1303               	bcf	3,6	;RP1=0, select bank0
  4761  023A  0844               	movf	?_scale+2,w
  4762  023B  1683               	bsf	3,5	;RP0=1, select bank1
  4763  023C  1303               	bcf	3,6	;RP1=0, select bank1
  4764  023D  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  4765                           
  4766                           ;doprnt.c: 847: tmpval.integ *= fval;
  4767  023E  085D               	movf	sprintf@fval^(0+128),w
  4768  023F  1283               	bcf	3,5	;RP0=0, select bank0
  4769  0240  1303               	bcf	3,6	;RP1=0, select bank0
  4770  0241  00B2               	movwf	___ftmul@f1
  4771  0242  1683               	bsf	3,5	;RP0=1, select bank1
  4772  0243  1303               	bcf	3,6	;RP1=0, select bank1
  4773  0244  085E               	movf	(sprintf@fval+1)^(0+128),w
  4774  0245  1283               	bcf	3,5	;RP0=0, select bank0
  4775  0246  1303               	bcf	3,6	;RP1=0, select bank0
  4776  0247  00B3               	movwf	___ftmul@f1+1
  4777  0248  1683               	bsf	3,5	;RP0=1, select bank1
  4778  0249  1303               	bcf	3,6	;RP1=0, select bank1
  4779  024A  085F               	movf	(sprintf@fval+2)^(0+128),w
  4780  024B  1283               	bcf	3,5	;RP0=0, select bank0
  4781  024C  1303               	bcf	3,6	;RP1=0, select bank0
  4782  024D  00B4               	movwf	___ftmul@f1+2
  4783  024E  1683               	bsf	3,5	;RP0=1, select bank1
  4784  024F  1303               	bcf	3,6	;RP1=0, select bank1
  4785  0250  0857               	movf	sprintf@tmpval^(0+128),w
  4786  0251  1283               	bcf	3,5	;RP0=0, select bank0
  4787  0252  1303               	bcf	3,6	;RP1=0, select bank0
  4788  0253  00B5               	movwf	___ftmul@f2
  4789  0254  1683               	bsf	3,5	;RP0=1, select bank1
  4790  0255  1303               	bcf	3,6	;RP1=0, select bank1
  4791  0256  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  4792  0257  1283               	bcf	3,5	;RP0=0, select bank0
  4793  0258  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0259  00B6               	movwf	___ftmul@f2+1
  4795  025A  1683               	bsf	3,5	;RP0=1, select bank1
  4796  025B  1303               	bcf	3,6	;RP1=0, select bank1
  4797  025C  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  4798  025D  1283               	bcf	3,5	;RP0=0, select bank0
  4799  025E  1303               	bcf	3,6	;RP1=0, select bank0
  4800  025F  00B7               	movwf	___ftmul@f2+2
  4801  0260  160A  118A  2371  120A  118A  	fcall	___ftmul
  4802  0265  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0266  1303               	bcf	3,6	;RP1=0, select bank0
  4804  0267  0832               	movf	?___ftmul,w
  4805  0268  1683               	bsf	3,5	;RP0=1, select bank1
  4806  0269  1303               	bcf	3,6	;RP1=0, select bank1
  4807  026A  00D7               	movwf	sprintf@tmpval^(0+128)
  4808  026B  1283               	bcf	3,5	;RP0=0, select bank0
  4809  026C  1303               	bcf	3,6	;RP1=0, select bank0
  4810  026D  0833               	movf	?___ftmul+1,w
  4811  026E  1683               	bsf	3,5	;RP0=1, select bank1
  4812  026F  1303               	bcf	3,6	;RP1=0, select bank1
  4813  0270  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  4814  0271  1283               	bcf	3,5	;RP0=0, select bank0
  4815  0272  1303               	bcf	3,6	;RP1=0, select bank0
  4816  0273  0834               	movf	?___ftmul+2,w
  4817  0274  1683               	bsf	3,5	;RP0=1, select bank1
  4818  0275  1303               	bcf	3,6	;RP1=0, select bank1
  4819  0276  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  4820                           
  4821                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4822  0277  0857               	movf	sprintf@tmpval^(0+128),w
  4823  0278  1283               	bcf	3,5	;RP0=0, select bank0
  4824  0279  1303               	bcf	3,6	;RP1=0, select bank0
  4825  027A  00A0               	movwf	___ftge@ff1
  4826  027B  1683               	bsf	3,5	;RP0=1, select bank1
  4827  027C  1303               	bcf	3,6	;RP1=0, select bank1
  4828  027D  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  4829  027E  1283               	bcf	3,5	;RP0=0, select bank0
  4830  027F  1303               	bcf	3,6	;RP1=0, select bank0
  4831  0280  00A1               	movwf	___ftge@ff1+1
  4832  0281  1683               	bsf	3,5	;RP0=1, select bank1
  4833  0282  1303               	bcf	3,6	;RP1=0, select bank1
  4834  0283  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  4835  0284  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0285  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0286  00A2               	movwf	___ftge@ff1+2
  4838  0287  3000               	movlw	0
  4839  0288  00A3               	movwf	___ftge@ff2
  4840  0289  3080               	movlw	128
  4841  028A  00A4               	movwf	___ftge@ff2+1
  4842  028B  303F               	movlw	63
  4843  028C  00A5               	movwf	___ftge@ff2+2
  4844  028D  160A  158A  2659  120A  118A  	fcall	___ftge
  4845  0292  1803               	btfsc	3,0
  4846  0293  2A9C               	goto	l3948
  4847                           
  4848                           ;doprnt.c: 849: exp--;
  4849  0294  30FF               	movlw	255
  4850  0295  1683               	bsf	3,5	;RP0=1, select bank1
  4851  0296  1303               	bcf	3,6	;RP1=0, select bank1
  4852  0297  07D5               	addwf	sprintf@exp^(0+128),f
  4853  0298  1803               	skipnc
  4854  0299  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  4855  029A  30FF               	movlw	255
  4856  029B  2AC2               	goto	L2
  4857  029C                     l3948:	
  4858                           
  4859                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4860  029C  1683               	bsf	3,5	;RP0=1, select bank1
  4861  029D  1303               	bcf	3,6	;RP1=0, select bank1
  4862  029E  0857               	movf	sprintf@tmpval^(0+128),w
  4863  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4864  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  4865  02A1  00A0               	movwf	___ftge@ff1
  4866  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  4867  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  4868  02A4  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  4869  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  4870  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  4871  02A7  00A1               	movwf	___ftge@ff1+1
  4872  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  4873  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  4874  02AA  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  4875  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  4876  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  4877  02AD  00A2               	movwf	___ftge@ff1+2
  4878  02AE  3000               	movlw	0
  4879  02AF  00A3               	movwf	___ftge@ff2
  4880  02B0  3020               	movlw	32
  4881  02B1  00A4               	movwf	___ftge@ff2+1
  4882  02B2  3041               	movlw	65
  4883  02B3  00A5               	movwf	___ftge@ff2+2
  4884  02B4  160A  158A  2659  120A  118A  	fcall	___ftge
  4885  02B9  1C03               	btfss	3,0
  4886  02BA  2AC3               	goto	l3952
  4887                           
  4888                           ;doprnt.c: 851: exp++;
  4889  02BB  3001               	movlw	1
  4890  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  4891  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  4892  02BE  07D5               	addwf	sprintf@exp^(0+128),f
  4893  02BF  1803               	skipnc
  4894  02C0  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  4895  02C1  3000               	movlw	0
  4896  02C2                     L2:	
  4897  02C2  07D6               	addwf	(sprintf@exp+1)^(0+128),f
  4898  02C3                     l3952:	
  4899                           
  4900                           ;doprnt.c: 852: }
  4901                           ;doprnt.c: 1112: if(prec <= 12)
  4902  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  4903  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  4904  02C5  085C               	movf	(sprintf@prec+1)^(0+128),w
  4905  02C6  3A80               	xorlw	128
  4906  02C7  00FF               	movwf	127
  4907  02C8  3080               	movlw	128
  4908  02C9  027F               	subwf	127,w
  4909  02CA  1D03               	skipz
  4910  02CB  2ACE               	goto	u5735
  4911  02CC  300D               	movlw	13
  4912  02CD  025B               	subwf	sprintf@prec^(0+128),w
  4913  02CE                     u5735:	
  4914  02CE  1803               	skipnc
  4915  02CF  2B09               	goto	l3956
  4916                           
  4917                           ;doprnt.c: 1113: fval += fround(prec);
  4918  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  4919  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  4920  02D2  085B               	movf	sprintf@prec^(0+128),w
  4921  02D3  120A  158A  2060  120A  118A  	fcall	_fround
  4922  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  4923  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  4924  02DA  0842               	movf	?_fround,w
  4925  02DB  00D2               	movwf	___ftadd@f1
  4926  02DC  0843               	movf	?_fround+1,w
  4927  02DD  00D3               	movwf	___ftadd@f1+1
  4928  02DE  0844               	movf	?_fround+2,w
  4929  02DF  00D4               	movwf	___ftadd@f1+2
  4930  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  4931  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  4932  02E2  085D               	movf	sprintf@fval^(0+128),w
  4933  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  4934  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  4935  02E5  00D5               	movwf	___ftadd@f2
  4936  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  4937  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  4938  02E8  085E               	movf	(sprintf@fval+1)^(0+128),w
  4939  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  4940  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  4941  02EB  00D6               	movwf	___ftadd@f2+1
  4942  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  4943  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  4944  02EE  085F               	movf	(sprintf@fval+2)^(0+128),w
  4945  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  4946  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  4947  02F1  00D7               	movwf	___ftadd@f2+2
  4948  02F2  160A  118A  2444  120A  118A  	fcall	___ftadd
  4949  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  4950  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  4951  02F9  0852               	movf	?___ftadd,w
  4952  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  4953  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  4954  02FC  00DD               	movwf	sprintf@fval^(0+128)
  4955  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  4956  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  4957  02FF  0853               	movf	?___ftadd+1,w
  4958  0300  1683               	bsf	3,5	;RP0=1, select bank1
  4959  0301  1303               	bcf	3,6	;RP1=0, select bank1
  4960  0302  00DE               	movwf	(sprintf@fval+1)^(0+128)
  4961  0303  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0304  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0305  0854               	movf	?___ftadd+2,w
  4964  0306  1683               	bsf	3,5	;RP0=1, select bank1
  4965  0307  1303               	bcf	3,6	;RP1=0, select bank1
  4966  0308  00DF               	movwf	(sprintf@fval+2)^(0+128)
  4967  0309                     l3956:	
  4968                           
  4969                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4970  0309  1683               	bsf	3,5	;RP0=1, select bank1
  4971  030A  1303               	bcf	3,6	;RP1=0, select bank1
  4972  030B  0856               	movf	(sprintf@exp+1)^(0+128),w
  4973  030C  3A80               	xorlw	128
  4974  030D  00FF               	movwf	127
  4975  030E  3080               	movlw	128
  4976  030F  027F               	subwf	127,w
  4977  0310  1D03               	skipz
  4978  0311  2B14               	goto	u5745
  4979  0312  300A               	movlw	10
  4980  0313  0255               	subwf	sprintf@exp^(0+128),w
  4981  0314                     u5745:	
  4982  0314  1803               	skipnc
  4983  0315  2B47               	goto	l3964
  4984  0316  1683               	bsf	3,5	;RP0=1, select bank1
  4985  0317  1303               	bcf	3,6	;RP1=0, select bank1
  4986  0318  085F               	movf	(sprintf@fval+2)^(0+128),w
  4987  0319  045E               	iorwf	(sprintf@fval+1)^(0+128),w
  4988  031A  045D               	iorwf	sprintf@fval^(0+128),w
  4989  031B  1903               	skipnz
  4990  031C  2BCE               	goto	l3978
  4991  031D  085D               	movf	sprintf@fval^(0+128),w
  4992  031E  1283               	bcf	3,5	;RP0=0, select bank0
  4993  031F  1303               	bcf	3,6	;RP1=0, select bank0
  4994  0320  00CB               	movwf	___fttol@f1
  4995  0321  1683               	bsf	3,5	;RP0=1, select bank1
  4996  0322  1303               	bcf	3,6	;RP1=0, select bank1
  4997  0323  085E               	movf	(sprintf@fval+1)^(0+128),w
  4998  0324  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0325  1303               	bcf	3,6	;RP1=0, select bank0
  5000  0326  00CC               	movwf	___fttol@f1+1
  5001  0327  1683               	bsf	3,5	;RP0=1, select bank1
  5002  0328  1303               	bcf	3,6	;RP1=0, select bank1
  5003  0329  085F               	movf	(sprintf@fval+2)^(0+128),w
  5004  032A  1283               	bcf	3,5	;RP0=0, select bank0
  5005  032B  1303               	bcf	3,6	;RP1=0, select bank0
  5006  032C  00CD               	movwf	___fttol@f1+2
  5007  032D  160A  118A  2029  120A  118A  	fcall	___fttol
  5008  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5009  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5010  0334  084E               	movf	?___fttol+3,w
  5011  0335  044D               	iorwf	?___fttol+2,w
  5012  0336  044C               	iorwf	?___fttol+1,w
  5013  0337  044B               	iorwf	?___fttol,w
  5014  0338  1D03               	skipz
  5015  0339  2BCE               	goto	l3978
  5016  033A  1683               	bsf	3,5	;RP0=1, select bank1
  5017  033B  1303               	bcf	3,6	;RP1=0, select bank1
  5018  033C  0856               	movf	(sprintf@exp+1)^(0+128),w
  5019  033D  3A80               	xorlw	128
  5020  033E  00FF               	movwf	127
  5021  033F  3080               	movlw	128
  5022  0340  027F               	subwf	127,w
  5023  0341  1D03               	skipz
  5024  0342  2B45               	goto	u5775
  5025  0343  3002               	movlw	2
  5026  0344  0255               	subwf	sprintf@exp^(0+128),w
  5027  0345                     u5775:	
  5028  0345  1C03               	skipc
  5029  0346  2BCE               	goto	l3978
  5030  0347                     l3964:	
  5031                           
  5032                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5033  0347  1683               	bsf	3,5	;RP0=1, select bank1
  5034  0348  1303               	bcf	3,6	;RP1=0, select bank1
  5035  0349  0857               	movf	sprintf@tmpval^(0+128),w
  5036  034A  1283               	bcf	3,5	;RP0=0, select bank0
  5037  034B  1303               	bcf	3,6	;RP1=0, select bank0
  5038  034C  00A0               	movwf	___ftge@ff1
  5039  034D  1683               	bsf	3,5	;RP0=1, select bank1
  5040  034E  1303               	bcf	3,6	;RP1=0, select bank1
  5041  034F  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5042  0350  1283               	bcf	3,5	;RP0=0, select bank0
  5043  0351  1303               	bcf	3,6	;RP1=0, select bank0
  5044  0352  00A1               	movwf	___ftge@ff1+1
  5045  0353  1683               	bsf	3,5	;RP0=1, select bank1
  5046  0354  1303               	bcf	3,6	;RP1=0, select bank1
  5047  0355  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5048  0356  1283               	bcf	3,5	;RP0=0, select bank0
  5049  0357  1303               	bcf	3,6	;RP1=0, select bank0
  5050  0358  00A2               	movwf	___ftge@ff1+2
  5051  0359  3070               	movlw	112
  5052  035A  00A3               	movwf	___ftge@ff2
  5053  035B  3089               	movlw	137
  5054  035C  00A4               	movwf	___ftge@ff2+1
  5055  035D  3040               	movlw	64
  5056  035E  00A5               	movwf	___ftge@ff2+2
  5057  035F  160A  158A  2659  120A  118A  	fcall	___ftge
  5058  0364  1803               	btfsc	3,0
  5059  0365  2B68               	goto	l3968
  5060                           
  5061                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5062  0366  30F7               	movlw	247
  5063  0367  2B69               	goto	L3
  5064  0368                     l3968:	
  5065                           ;doprnt.c: 1122: }else{
  5066                           
  5067                           
  5068                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5069  0368  30F8               	movlw	248
  5070  0369                     L3:	
  5071  0369  1683               	bsf	3,5	;RP0=1, select bank1
  5072  036A  1303               	bcf	3,6	;RP1=0, select bank1
  5073  036B  07D5               	addwf	sprintf@exp^(0+128),f
  5074  036C  1803               	skipnc
  5075  036D  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  5076  036E  30FF               	movlw	255
  5077  036F  07D6               	addwf	(sprintf@exp+1)^(0+128),f
  5078                           
  5079                           ;doprnt.c: 1124: }
  5080                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5081  0370  0855               	movf	sprintf@exp^(0+128),w
  5082  0371  120A  158A  221E  120A  118A  	fcall	_scale
  5083  0376  1283               	bcf	3,5	;RP0=0, select bank0
  5084  0377  1303               	bcf	3,6	;RP1=0, select bank0
  5085  0378  0842               	movf	?_scale,w
  5086  0379  1683               	bsf	3,5	;RP0=1, select bank1
  5087  037A  1303               	bcf	3,6	;RP1=0, select bank1
  5088  037B  00D7               	movwf	sprintf@tmpval^(0+128)
  5089  037C  1283               	bcf	3,5	;RP0=0, select bank0
  5090  037D  1303               	bcf	3,6	;RP1=0, select bank0
  5091  037E  0843               	movf	?_scale+1,w
  5092  037F  1683               	bsf	3,5	;RP0=1, select bank1
  5093  0380  1303               	bcf	3,6	;RP1=0, select bank1
  5094  0381  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5095  0382  1283               	bcf	3,5	;RP0=0, select bank0
  5096  0383  1303               	bcf	3,6	;RP1=0, select bank0
  5097  0384  0844               	movf	?_scale+2,w
  5098  0385  1683               	bsf	3,5	;RP0=1, select bank1
  5099  0386  1303               	bcf	3,6	;RP1=0, select bank1
  5100  0387  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5101                           
  5102                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5103  0388  085D               	movf	sprintf@fval^(0+128),w
  5104  0389  1283               	bcf	3,5	;RP0=0, select bank0
  5105  038A  1303               	bcf	3,6	;RP1=0, select bank0
  5106  038B  00A0               	movwf	__tdiv_to_l_@f1
  5107  038C  1683               	bsf	3,5	;RP0=1, select bank1
  5108  038D  1303               	bcf	3,6	;RP1=0, select bank1
  5109  038E  085E               	movf	(sprintf@fval+1)^(0+128),w
  5110  038F  1283               	bcf	3,5	;RP0=0, select bank0
  5111  0390  1303               	bcf	3,6	;RP1=0, select bank0
  5112  0391  00A1               	movwf	__tdiv_to_l_@f1+1
  5113  0392  1683               	bsf	3,5	;RP0=1, select bank1
  5114  0393  1303               	bcf	3,6	;RP1=0, select bank1
  5115  0394  085F               	movf	(sprintf@fval+2)^(0+128),w
  5116  0395  1283               	bcf	3,5	;RP0=0, select bank0
  5117  0396  1303               	bcf	3,6	;RP1=0, select bank0
  5118  0397  00A2               	movwf	__tdiv_to_l_@f1+2
  5119  0398  1683               	bsf	3,5	;RP0=1, select bank1
  5120  0399  1303               	bcf	3,6	;RP1=0, select bank1
  5121  039A  0857               	movf	sprintf@tmpval^(0+128),w
  5122  039B  1283               	bcf	3,5	;RP0=0, select bank0
  5123  039C  1303               	bcf	3,6	;RP1=0, select bank0
  5124  039D  00A3               	movwf	__tdiv_to_l_@f2
  5125  039E  1683               	bsf	3,5	;RP0=1, select bank1
  5126  039F  1303               	bcf	3,6	;RP1=0, select bank1
  5127  03A0  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5128  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  5129  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  5130  03A3  00A4               	movwf	__tdiv_to_l_@f2+1
  5131  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  5132  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  5133  03A6  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5134  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  5135  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  5136  03A9  00A5               	movwf	__tdiv_to_l_@f2+2
  5137  03AA  160A  118A  22AE  120A  118A  	fcall	__tdiv_to_l_
  5138  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  5139  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  5140  03B1  0823               	movf	?__tdiv_to_l_+3,w
  5141  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  5142  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  5143  03B4  00D4               	movwf	(sprintf@val+3)^(0+128)
  5144  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  5145  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  5146  03B7  0822               	movf	?__tdiv_to_l_+2,w
  5147  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  5148  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  5149  03BA  00D3               	movwf	(sprintf@val+2)^(0+128)
  5150  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  5151  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  5152  03BD  0821               	movf	?__tdiv_to_l_+1,w
  5153  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  5154  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  5155  03C0  00D2               	movwf	(sprintf@val+1)^(0+128)
  5156  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  5157  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  5158  03C3  0820               	movf	?__tdiv_to_l_,w
  5159  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  5160  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  5161  03C6  00D1               	movwf	sprintf@val^(0+128)
  5162                           
  5163                           ;doprnt.c: 1129: fval = 0.0;
  5164  03C7  3000               	movlw	0
  5165  03C8  00DD               	movwf	sprintf@fval^(0+128)
  5166  03C9  3000               	movlw	0
  5167  03CA  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5168  03CB  3000               	movlw	0
  5169  03CC  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5170                           
  5171                           ;doprnt.c: 1130: } else {
  5172  03CD  2C4B               	goto	l3982
  5173  03CE                     l3978:	
  5174                           
  5175                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5176  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  5177  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  5178  03D0  085D               	movf	sprintf@fval^(0+128),w
  5179  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  5180  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  5181  03D3  00CB               	movwf	___fttol@f1
  5182  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  5183  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  5184  03D6  085E               	movf	(sprintf@fval+1)^(0+128),w
  5185  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  5186  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  5187  03D9  00CC               	movwf	___fttol@f1+1
  5188  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  5189  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  5190  03DC  085F               	movf	(sprintf@fval+2)^(0+128),w
  5191  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  5192  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  5193  03DF  00CD               	movwf	___fttol@f1+2
  5194  03E0  160A  118A  2029  120A  118A  	fcall	___fttol
  5195  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  5196  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  5197  03E7  084E               	movf	?___fttol+3,w
  5198  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  5199  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  5200  03EA  00D4               	movwf	(sprintf@val+3)^(0+128)
  5201  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  5202  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  5203  03ED  084D               	movf	?___fttol+2,w
  5204  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  5205  03EF  1303               	bcf	3,6	;RP1=0, select bank1
  5206  03F0  00D3               	movwf	(sprintf@val+2)^(0+128)
  5207  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  5208  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  5209  03F3  084C               	movf	?___fttol+1,w
  5210  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  5211  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  5212  03F6  00D2               	movwf	(sprintf@val+1)^(0+128)
  5213  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  5214  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  5215  03F9  084B               	movf	?___fttol,w
  5216  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  5217  03FB  1303               	bcf	3,6	;RP1=0, select bank1
  5218  03FC  00D1               	movwf	sprintf@val^(0+128)
  5219                           
  5220                           ;doprnt.c: 1132: fval -= (double)val;
  5221  03FD  0854               	movf	(sprintf@val+3)^(0+128),w
  5222  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  5223  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  5224  0400  00AB               	movwf	___lltoft@c+3
  5225  0401  1683               	bsf	3,5	;RP0=1, select bank1
  5226  0402  1303               	bcf	3,6	;RP1=0, select bank1
  5227  0403  0853               	movf	(sprintf@val+2)^(0+128),w
  5228  0404  1283               	bcf	3,5	;RP0=0, select bank0
  5229  0405  1303               	bcf	3,6	;RP1=0, select bank0
  5230  0406  00AA               	movwf	___lltoft@c+2
  5231  0407  1683               	bsf	3,5	;RP0=1, select bank1
  5232  0408  1303               	bcf	3,6	;RP1=0, select bank1
  5233  0409  0852               	movf	(sprintf@val+1)^(0+128),w
  5234  040A  1283               	bcf	3,5	;RP0=0, select bank0
  5235  040B  1303               	bcf	3,6	;RP1=0, select bank0
  5236  040C  00A9               	movwf	___lltoft@c+1
  5237  040D  1683               	bsf	3,5	;RP0=1, select bank1
  5238  040E  1303               	bcf	3,6	;RP1=0, select bank1
  5239  040F  0851               	movf	sprintf@val^(0+128),w
  5240  0410  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0411  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0412  00A8               	movwf	___lltoft@c
  5243  0413  160A  158A  23B6  120A  118A  	fcall	___lltoft
  5244  0418  1283               	bcf	3,5	;RP0=0, select bank0
  5245  0419  1303               	bcf	3,6	;RP1=0, select bank0
  5246  041A  0828               	movf	?___lltoft,w
  5247  041B  00DF               	movwf	___ftsub@f2
  5248  041C  0829               	movf	?___lltoft+1,w
  5249  041D  00E0               	movwf	___ftsub@f2+1
  5250  041E  082A               	movf	?___lltoft+2,w
  5251  041F  00E1               	movwf	___ftsub@f2+2
  5252  0420  1683               	bsf	3,5	;RP0=1, select bank1
  5253  0421  1303               	bcf	3,6	;RP1=0, select bank1
  5254  0422  085D               	movf	sprintf@fval^(0+128),w
  5255  0423  1283               	bcf	3,5	;RP0=0, select bank0
  5256  0424  1303               	bcf	3,6	;RP1=0, select bank0
  5257  0425  00E2               	movwf	___ftsub@f1
  5258  0426  1683               	bsf	3,5	;RP0=1, select bank1
  5259  0427  1303               	bcf	3,6	;RP1=0, select bank1
  5260  0428  085E               	movf	(sprintf@fval+1)^(0+128),w
  5261  0429  1283               	bcf	3,5	;RP0=0, select bank0
  5262  042A  1303               	bcf	3,6	;RP1=0, select bank0
  5263  042B  00E3               	movwf	___ftsub@f1+1
  5264  042C  1683               	bsf	3,5	;RP0=1, select bank1
  5265  042D  1303               	bcf	3,6	;RP1=0, select bank1
  5266  042E  085F               	movf	(sprintf@fval+2)^(0+128),w
  5267  042F  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0430  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0431  00E4               	movwf	___ftsub@f1+2
  5270  0432  160A  158A  2340  120A  118A  	fcall	___ftsub
  5271  0437  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0438  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0439  085F               	movf	?___ftsub,w
  5274  043A  1683               	bsf	3,5	;RP0=1, select bank1
  5275  043B  1303               	bcf	3,6	;RP1=0, select bank1
  5276  043C  00DD               	movwf	sprintf@fval^(0+128)
  5277  043D  1283               	bcf	3,5	;RP0=0, select bank0
  5278  043E  1303               	bcf	3,6	;RP1=0, select bank0
  5279  043F  0860               	movf	?___ftsub+1,w
  5280  0440  1683               	bsf	3,5	;RP0=1, select bank1
  5281  0441  1303               	bcf	3,6	;RP1=0, select bank1
  5282  0442  00DE               	movwf	(sprintf@fval+1)^(0+128)
  5283  0443  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0444  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0445  0861               	movf	?___ftsub+2,w
  5286  0446  1683               	bsf	3,5	;RP0=1, select bank1
  5287  0447  1303               	bcf	3,6	;RP1=0, select bank1
  5288  0448  00DF               	movwf	(sprintf@fval+2)^(0+128)
  5289                           
  5290                           ;doprnt.c: 1133: exp = 0;
  5291  0449  01D5               	clrf	sprintf@exp^(0+128)
  5292  044A  01D6               	clrf	(sprintf@exp+1)^(0+128)
  5293  044B                     l3982:	
  5294                           
  5295                           ;doprnt.c: 1134: }
  5296                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5297  044B  01E0               	clrf	sprintf@c^(0+128)
  5298  044C  0AE0               	incf	sprintf@c^(0+128),f
  5299  044D  300A               	movlw	10
  5300  044E  0660               	xorwf	sprintf@c^(0+128),w
  5301  044F  1903               	btfsc	3,2
  5302  0450  2CA1               	goto	l3994
  5303  0451                     l3988:	
  5304                           
  5305                           ;doprnt.c: 1137: if(val < dpowers[c])
  5306  0451  0860               	movf	sprintf@c^(0+128),w
  5307  0452  00C5               	movwf	??_sprintf^(0+128)
  5308  0453  3001               	movlw	1
  5309  0454                     u5805:	
  5310  0454  1003               	clrc
  5311  0455  0DC5               	rlf	??_sprintf^(0+128),f
  5312  0456  3EFF               	addlw	-1
  5313  0457  1D03               	skipz
  5314  0458  2C54               	goto	u5805
  5315  0459  1003               	clrc
  5316  045A  0D45               	rlf	??_sprintf^(0+128),w
  5317  045B  3E12               	addlw	low (_dpowers| (0+32768))
  5318  045C  0084               	movwf	4
  5319  045D  3098               	movlw	high (_dpowers| (0+32768))
  5320  045E  1803               	skipnc
  5321  045F  3E01               	addlw	1
  5322  0460  1283               	bcf	3,5	;RP0=0, select bank0
  5323  0461  1303               	bcf	3,6	;RP1=0, select bank0
  5324  0462  00FF               	movwf	127
  5325  0463  160A  158A  2000  120A  118A  	fcall	stringtab
  5326  0468  1683               	bsf	3,5	;RP0=1, select bank1
  5327  0469  1303               	bcf	3,6	;RP1=0, select bank1
  5328  046A  00C6               	movwf	(??_sprintf+1)^(0+128)
  5329  046B  1283               	bcf	3,5	;RP0=0, select bank0
  5330  046C  1303               	bcf	3,6	;RP1=0, select bank0
  5331  046D  160A  158A  2000  120A  118A  	fcall	stringtab
  5332  0472  1683               	bsf	3,5	;RP0=1, select bank1
  5333  0473  1303               	bcf	3,6	;RP1=0, select bank1
  5334  0474  00C7               	movwf	((??_sprintf+1)^(0+128)+1)
  5335  0475  1283               	bcf	3,5	;RP0=0, select bank0
  5336  0476  1303               	bcf	3,6	;RP1=0, select bank0
  5337  0477  160A  158A  2000  120A  118A  	fcall	stringtab
  5338  047C  1683               	bsf	3,5	;RP0=1, select bank1
  5339  047D  1303               	bcf	3,6	;RP1=0, select bank1
  5340  047E  00C8               	movwf	((??_sprintf+1)^(0+128)+2)
  5341  047F  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0480  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0481  160A  158A  2000  120A  118A  	fcall	stringtab
  5344  0486  1683               	bsf	3,5	;RP0=1, select bank1
  5345  0487  1303               	bcf	3,6	;RP1=0, select bank1
  5346  0488  00C9               	movwf	((??_sprintf+1)^(0+128)+3)
  5347  0489  0849               	movf	(??_sprintf+4)^(0+128),w
  5348  048A  0254               	subwf	(sprintf@val+3)^(0+128),w
  5349  048B  1D03               	skipz
  5350  048C  2C97               	goto	u5815
  5351  048D  0848               	movf	(??_sprintf+3)^(0+128),w
  5352  048E  0253               	subwf	(sprintf@val+2)^(0+128),w
  5353  048F  1D03               	skipz
  5354  0490  2C97               	goto	u5815
  5355  0491  0847               	movf	(??_sprintf+2)^(0+128),w
  5356  0492  0252               	subwf	(sprintf@val+1)^(0+128),w
  5357  0493  1D03               	skipz
  5358  0494  2C97               	goto	u5815
  5359  0495  0846               	movf	(??_sprintf+1)^(0+128),w
  5360  0496  0251               	subwf	sprintf@val^(0+128),w
  5361  0497                     u5815:	
  5362  0497  1C03               	btfss	3,0
  5363  0498  2CA1               	goto	l3994
  5364                           
  5365                           ;doprnt.c: 1138: break;
  5366  0499  3001               	movlw	1
  5367  049A  00C5               	movwf	??_sprintf^(0+128)
  5368  049B  0845               	movf	??_sprintf^(0+128),w
  5369  049C  07E0               	addwf	sprintf@c^(0+128),f
  5370  049D  300A               	movlw	10
  5371  049E  0660               	xorwf	sprintf@c^(0+128),w
  5372  049F  1D03               	btfss	3,2
  5373  04A0  2C51               	goto	l3988
  5374  04A1                     l3994:	
  5375                           
  5376                           ;doprnt.c: 1175: {
  5377                           ;doprnt.c: 1188: if(flag & 0x03)
  5378  04A1  3003               	movlw	3
  5379  04A2  054F               	andwf	sprintf@flag^(0+128),w
  5380  04A3  00C5               	movwf	??_sprintf^(0+128)
  5381  04A4  3000               	movlw	0
  5382  04A5  0550               	andwf	(sprintf@flag+1)^(0+128),w
  5383  04A6  00C6               	movwf	(??_sprintf+1)^(0+128)
  5384  04A7  0845               	movf	??_sprintf^(0+128),w
  5385  04A8  0446               	iorwf	(??_sprintf^(0+128)+1),w
  5386  04A9  1903               	btfsc	3,2
  5387  04AA  2CB8               	goto	l4008
  5388                           
  5389                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5390  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  5391  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  5392  04AD  0867               	movf	sprintf@sp,w
  5393  04AE  0084               	movwf	4
  5394  04AF  1383               	bcf	3,7
  5395  04B0  1868               	btfsc	sprintf@sp+1,0
  5396  04B1  1783               	bsf	3,7
  5397  04B2  302D               	movlw	45
  5398  04B3  0080               	movwf	0
  5399  04B4  3001               	movlw	1
  5400  04B5                     L4:	
  5401  04B5  07E7               	addwf	sprintf@sp,f
  5402  04B6  1803               	skipnc
  5403  04B7  0AE8               	incf	sprintf@sp+1,f
  5404  04B8                     l4008:	
  5405  04B8  30FF               	movlw	255
  5406  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  5407  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  5408  04BB  00C5               	movwf	??_sprintf^(0+128)
  5409  04BC  0845               	movf	??_sprintf^(0+128),w
  5410  04BD  07E0               	addwf	sprintf@c^(0+128),f
  5411  04BE  0A60               	incf	sprintf@c^(0+128),w
  5412  04BF  1903               	btfsc	3,2
  5413  04C0  2D88               	goto	l4016
  5414                           
  5415                           ;doprnt.c: 1200: {
  5416                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5417                           
  5418                           ;doprnt.c: 1195: }
  5419                           ;doprnt.c: 1196: while(c--) {
  5420  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  5421  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  5422  04C3  0860               	movf	sprintf@c^(0+128),w
  5423  04C4  00C5               	movwf	??_sprintf^(0+128)
  5424  04C5  3001               	movlw	1
  5425  04C6                     u5845:	
  5426  04C6  1003               	clrc
  5427  04C7  0DC5               	rlf	??_sprintf^(0+128),f
  5428  04C8  3EFF               	addlw	-1
  5429  04C9  1D03               	skipz
  5430  04CA  2CC6               	goto	u5845
  5431  04CB  1003               	clrc
  5432  04CC  0D45               	rlf	??_sprintf^(0+128),w
  5433  04CD  3E12               	addlw	low (_dpowers| (0+32768))
  5434  04CE  0084               	movwf	4
  5435  04CF  3098               	movlw	high (_dpowers| (0+32768))
  5436  04D0  1803               	skipnc
  5437  04D1  3E01               	addlw	1
  5438  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  5439  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  5440  04D4  00FF               	movwf	127
  5441  04D5  160A  158A  2000  120A  118A  	fcall	stringtab
  5442  04DA  00A0               	movwf	___lldiv@divisor
  5443  04DB  160A  158A  2000  120A  118A  	fcall	stringtab
  5444  04E0  00A1               	movwf	___lldiv@divisor+1
  5445  04E1  160A  158A  2000  120A  118A  	fcall	stringtab
  5446  04E6  00A2               	movwf	___lldiv@divisor+2
  5447  04E7  160A  158A  2000  120A  118A  	fcall	stringtab
  5448  04EC  00A3               	movwf	___lldiv@divisor+3
  5449  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  5450  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  5451  04EF  0854               	movf	(sprintf@val+3)^(0+128),w
  5452  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  5453  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  5454  04F2  00A7               	movwf	___lldiv@dividend+3
  5455  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  5456  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  5457  04F5  0853               	movf	(sprintf@val+2)^(0+128),w
  5458  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  5459  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  5460  04F8  00A6               	movwf	___lldiv@dividend+2
  5461  04F9  1683               	bsf	3,5	;RP0=1, select bank1
  5462  04FA  1303               	bcf	3,6	;RP1=0, select bank1
  5463  04FB  0852               	movf	(sprintf@val+1)^(0+128),w
  5464  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  5465  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  5466  04FE  00A5               	movwf	___lldiv@dividend+1
  5467  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  5468  0500  1303               	bcf	3,6	;RP1=0, select bank1
  5469  0501  0851               	movf	sprintf@val^(0+128),w
  5470  0502  1283               	bcf	3,5	;RP0=0, select bank0
  5471  0503  1303               	bcf	3,6	;RP1=0, select bank0
  5472  0504  00A4               	movwf	___lldiv@dividend
  5473  0505  120A  158A  2000  120A  118A  	fcall	___lldiv
  5474  050A  1283               	bcf	3,5	;RP0=0, select bank0
  5475  050B  1303               	bcf	3,6	;RP1=0, select bank0
  5476  050C  0823               	movf	?___lldiv+3,w
  5477  050D  1683               	bsf	3,5	;RP0=1, select bank1
  5478  050E  1303               	bcf	3,6	;RP1=0, select bank1
  5479  050F  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
  5480  0510  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0511  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0512  0822               	movf	?___lldiv+2,w
  5483  0513  1683               	bsf	3,5	;RP0=1, select bank1
  5484  0514  1303               	bcf	3,6	;RP1=0, select bank1
  5485  0515  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5486  0516  1283               	bcf	3,5	;RP0=0, select bank0
  5487  0517  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0518  0821               	movf	?___lldiv+1,w
  5489  0519  1683               	bsf	3,5	;RP0=1, select bank1
  5490  051A  1303               	bcf	3,6	;RP1=0, select bank1
  5491  051B  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5492  051C  1283               	bcf	3,5	;RP0=0, select bank0
  5493  051D  1303               	bcf	3,6	;RP1=0, select bank0
  5494  051E  0820               	movf	?___lldiv,w
  5495  051F  1683               	bsf	3,5	;RP0=1, select bank1
  5496  0520  1303               	bcf	3,6	;RP1=0, select bank1
  5497  0521  00D7               	movwf	sprintf@tmpval^(0+128)
  5498                           
  5499                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5500  0522  3000               	movlw	0
  5501  0523  1283               	bcf	3,5	;RP0=0, select bank0
  5502  0524  1303               	bcf	3,6	;RP1=0, select bank0
  5503  0525  00A3               	movwf	___llmod@divisor+3
  5504  0526  3000               	movlw	0
  5505  0527  00A2               	movwf	___llmod@divisor+2
  5506  0528  3000               	movlw	0
  5507  0529  00A1               	movwf	___llmod@divisor+1
  5508  052A  300A               	movlw	10
  5509  052B  00A0               	movwf	___llmod@divisor
  5510  052C  1683               	bsf	3,5	;RP0=1, select bank1
  5511  052D  1303               	bcf	3,6	;RP1=0, select bank1
  5512  052E  085A               	movf	(sprintf@tmpval+3)^(0+128),w
  5513  052F  1283               	bcf	3,5	;RP0=0, select bank0
  5514  0530  1303               	bcf	3,6	;RP1=0, select bank0
  5515  0531  00A7               	movwf	___llmod@dividend+3
  5516  0532  1683               	bsf	3,5	;RP0=1, select bank1
  5517  0533  1303               	bcf	3,6	;RP1=0, select bank1
  5518  0534  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5519  0535  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0536  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0537  00A6               	movwf	___llmod@dividend+2
  5522  0538  1683               	bsf	3,5	;RP0=1, select bank1
  5523  0539  1303               	bcf	3,6	;RP1=0, select bank1
  5524  053A  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5525  053B  1283               	bcf	3,5	;RP0=0, select bank0
  5526  053C  1303               	bcf	3,6	;RP1=0, select bank0
  5527  053D  00A5               	movwf	___llmod@dividend+1
  5528  053E  1683               	bsf	3,5	;RP0=1, select bank1
  5529  053F  1303               	bcf	3,6	;RP1=0, select bank1
  5530  0540  0857               	movf	sprintf@tmpval^(0+128),w
  5531  0541  1283               	bcf	3,5	;RP0=0, select bank0
  5532  0542  1303               	bcf	3,6	;RP1=0, select bank0
  5533  0543  00A4               	movwf	___llmod@dividend
  5534  0544  160A  158A  2558  120A  118A  	fcall	___llmod
  5535  0549  1283               	bcf	3,5	;RP0=0, select bank0
  5536  054A  1303               	bcf	3,6	;RP1=0, select bank0
  5537  054B  0823               	movf	?___llmod+3,w
  5538  054C  1683               	bsf	3,5	;RP0=1, select bank1
  5539  054D  1303               	bcf	3,6	;RP1=0, select bank1
  5540  054E  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
  5541  054F  1283               	bcf	3,5	;RP0=0, select bank0
  5542  0550  1303               	bcf	3,6	;RP1=0, select bank0
  5543  0551  0822               	movf	?___llmod+2,w
  5544  0552  1683               	bsf	3,5	;RP0=1, select bank1
  5545  0553  1303               	bcf	3,6	;RP1=0, select bank1
  5546  0554  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5547  0555  1283               	bcf	3,5	;RP0=0, select bank0
  5548  0556  1303               	bcf	3,6	;RP1=0, select bank0
  5549  0557  0821               	movf	?___llmod+1,w
  5550  0558  1683               	bsf	3,5	;RP0=1, select bank1
  5551  0559  1303               	bcf	3,6	;RP1=0, select bank1
  5552  055A  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5553  055B  1283               	bcf	3,5	;RP0=0, select bank0
  5554  055C  1303               	bcf	3,6	;RP1=0, select bank0
  5555  055D  0820               	movf	?___llmod,w
  5556  055E  1683               	bsf	3,5	;RP0=1, select bank1
  5557  055F  1303               	bcf	3,6	;RP1=0, select bank1
  5558  0560  00D7               	movwf	sprintf@tmpval^(0+128)
  5559                           
  5560                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5561  0561  0857               	movf	sprintf@tmpval^(0+128),w
  5562  0562  3E30               	addlw	48
  5563  0563  00C5               	movwf	??_sprintf^(0+128)
  5564  0564  1283               	bcf	3,5	;RP0=0, select bank0
  5565  0565  1303               	bcf	3,6	;RP1=0, select bank0
  5566  0566  0867               	movf	sprintf@sp,w
  5567  0567  0084               	movwf	4
  5568  0568  1383               	bcf	3,7
  5569  0569  1868               	btfsc	sprintf@sp+1,0
  5570  056A  1783               	bsf	3,7
  5571  056B  1683               	bsf	3,5	;RP0=1, select bank1
  5572  056C  1303               	bcf	3,6	;RP1=0, select bank1
  5573  056D  0845               	movf	??_sprintf^(0+128),w
  5574  056E  0080               	movwf	0
  5575  056F  3001               	movlw	1
  5576  0570  1283               	bcf	3,5	;RP0=0, select bank0
  5577  0571  1303               	bcf	3,6	;RP1=0, select bank0
  5578  0572  2CB5               	goto	L4
  5579  0573                     l4010:	
  5580                           ;doprnt.c: 1204: }
  5581                           ;doprnt.c: 1206: }
  5582                           ;doprnt.c: 1207: while(exp > 0) {
  5583                           
  5584                           
  5585                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5586  0573  1283               	bcf	3,5	;RP0=0, select bank0
  5587  0574  1303               	bcf	3,6	;RP1=0, select bank0
  5588  0575  0867               	movf	sprintf@sp,w
  5589  0576  0084               	movwf	4
  5590  0577  1383               	bcf	3,7
  5591  0578  1868               	btfsc	sprintf@sp+1,0
  5592  0579  1783               	bsf	3,7
  5593  057A  3030               	movlw	48
  5594  057B  0080               	movwf	0
  5595  057C  3001               	movlw	1
  5596  057D  07E7               	addwf	sprintf@sp,f
  5597  057E  1803               	skipnc
  5598  057F  0AE8               	incf	sprintf@sp+1,f
  5599                           
  5600                           ;doprnt.c: 1209: exp--;
  5601  0580  30FF               	movlw	255
  5602  0581  1683               	bsf	3,5	;RP0=1, select bank1
  5603  0582  1303               	bcf	3,6	;RP1=0, select bank1
  5604  0583  07D5               	addwf	sprintf@exp^(0+128),f
  5605  0584  1803               	skipnc
  5606  0585  0AD6               	incf	(sprintf@exp+1)^(0+128),f
  5607  0586  30FF               	movlw	255
  5608  0587  07D6               	addwf	(sprintf@exp+1)^(0+128),f
  5609  0588                     l4016:	
  5610  0588  0856               	movf	(sprintf@exp+1)^(0+128),w
  5611  0589  3A80               	xorlw	128
  5612  058A  00FF               	movwf	127
  5613  058B  3080               	movlw	128
  5614  058C  027F               	subwf	127,w
  5615  058D  1D03               	skipz
  5616  058E  2D91               	goto	u5865
  5617  058F  3001               	movlw	1
  5618  0590  0255               	subwf	sprintf@exp^(0+128),w
  5619  0591                     u5865:	
  5620  0591  1803               	skipnc
  5621  0592  2D73               	goto	l4010
  5622                           
  5623                           ;doprnt.c: 1210: }
  5624                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5625  0593  1683               	bsf	3,5	;RP0=1, select bank1
  5626  0594  1303               	bcf	3,6	;RP1=0, select bank1
  5627  0595  085C               	movf	(sprintf@prec+1)^(0+128),w
  5628  0596  3A80               	xorlw	128
  5629  0597  00FF               	movwf	127
  5630  0598  3080               	movlw	128
  5631  0599  027F               	subwf	127,w
  5632  059A  1D03               	skipz
  5633  059B  2D9E               	goto	u5875
  5634  059C  3009               	movlw	9
  5635  059D  025B               	subwf	sprintf@prec^(0+128),w
  5636  059E                     u5875:	
  5637  059E  1C03               	skipc
  5638  059F  2DA4               	goto	l4022
  5639                           
  5640                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5641  05A0  3008               	movlw	8
  5642  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  5643  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  5644  05A3  2DA7               	goto	L5
  5645  05A4                     l4022:	
  5646                           
  5647                           ;doprnt.c: 1213: else
  5648                           ;doprnt.c: 1214: c = prec;
  5649  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  5650  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  5651  05A6  085B               	movf	sprintf@prec^(0+128),w
  5652  05A7                     L5:	
  5653  05A7  00C5               	movwf	??_sprintf^(0+128)
  5654  05A8  0845               	movf	??_sprintf^(0+128),w
  5655  05A9  00E0               	movwf	sprintf@c^(0+128)
  5656                           
  5657                           ;doprnt.c: 1215: prec -= c;
  5658  05AA  0860               	movf	sprintf@c^(0+128),w
  5659  05AB  00C5               	movwf	??_sprintf^(0+128)
  5660  05AC  01C6               	clrf	(??_sprintf^(0+128)+1)
  5661  05AD  1BC5               	btfsc	??_sprintf^(0+128),7
  5662  05AE  03C6               	decf	(??_sprintf^(0+128)+1),f
  5663  05AF  0845               	movf	??_sprintf^(0+128),w
  5664  05B0  02DB               	subwf	sprintf@prec^(0+128),f
  5665  05B1  0846               	movf	(??_sprintf+1)^(0+128),w
  5666  05B2  1C03               	skipc
  5667  05B3  03DC               	decf	(sprintf@prec+1)^(0+128),f
  5668  05B4  02DC               	subwf	(sprintf@prec+1)^(0+128),f
  5669                           
  5670                           ;doprnt.c: 1219: if(c)
  5671  05B5  0860               	movf	sprintf@c^(0+128),w
  5672  05B6  1903               	btfsc	3,2
  5673  05B7  2DC5               	goto	l4030
  5674                           
  5675                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5676  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  5677  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  5678  05BA  0867               	movf	sprintf@sp,w
  5679  05BB  0084               	movwf	4
  5680  05BC  1383               	bcf	3,7
  5681  05BD  1868               	btfsc	sprintf@sp+1,0
  5682  05BE  1783               	bsf	3,7
  5683  05BF  302E               	movlw	46
  5684  05C0  0080               	movwf	0
  5685  05C1  3001               	movlw	1
  5686  05C2  07E7               	addwf	sprintf@sp,f
  5687  05C3  1803               	skipnc
  5688  05C4  0AE8               	incf	sprintf@sp+1,f
  5689  05C5                     l4030:	
  5690                           
  5691                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5692  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  5693  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  5694  05C7  0860               	movf	sprintf@c^(0+128),w
  5695  05C8  120A  158A  221E  120A  118A  	fcall	_scale
  5696  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  5697  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  5698  05CF  0842               	movf	?_scale,w
  5699  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  5700  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  5701  05D2  00CB               	movwf	_sprintf$856^(0+128)
  5702  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  5703  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  5704  05D5  0843               	movf	?_scale+1,w
  5705  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  5706  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  5707  05D8  00CC               	movwf	(_sprintf$856+1)^(0+128)
  5708  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  5709  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  5710  05DB  0844               	movf	?_scale+2,w
  5711  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  5712  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  5713  05DE  00CD               	movwf	(_sprintf$856+2)^(0+128)
  5714                           
  5715                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5716  05DF  084B               	movf	_sprintf$856^(0+128),w
  5717  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  5718  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  5719  05E2  00B5               	movwf	___ftmul@f2
  5720  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  5721  05E4  1303               	bcf	3,6	;RP1=0, select bank1
  5722  05E5  084C               	movf	(_sprintf$856+1)^(0+128),w
  5723  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  5724  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  5725  05E8  00B6               	movwf	___ftmul@f2+1
  5726  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  5727  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  5728  05EB  084D               	movf	(_sprintf$856+2)^(0+128),w
  5729  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  5730  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  5731  05EE  00B7               	movwf	___ftmul@f2+2
  5732  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  5733  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  5734  05F1  085D               	movf	sprintf@fval^(0+128),w
  5735  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5736  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5737  05F4  00B2               	movwf	___ftmul@f1
  5738  05F5  1683               	bsf	3,5	;RP0=1, select bank1
  5739  05F6  1303               	bcf	3,6	;RP1=0, select bank1
  5740  05F7  085E               	movf	(sprintf@fval+1)^(0+128),w
  5741  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  5742  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  5743  05FA  00B3               	movwf	___ftmul@f1+1
  5744  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  5745  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  5746  05FD  085F               	movf	(sprintf@fval+2)^(0+128),w
  5747  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  5748  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  5749  0600  00B4               	movwf	___ftmul@f1+2
  5750  0601  160A  118A  2371  120A  118A  	fcall	___ftmul
  5751  0606  1283               	bcf	3,5	;RP0=0, select bank0
  5752  0607  1303               	bcf	3,6	;RP1=0, select bank0
  5753  0608  0832               	movf	?___ftmul,w
  5754  0609  00CB               	movwf	___fttol@f1
  5755  060A  0833               	movf	?___ftmul+1,w
  5756  060B  00CC               	movwf	___fttol@f1+1
  5757  060C  0834               	movf	?___ftmul+2,w
  5758  060D  00CD               	movwf	___fttol@f1+2
  5759  060E  160A  118A  2029  120A  118A  	fcall	___fttol
  5760  0613  1283               	bcf	3,5	;RP0=0, select bank0
  5761  0614  1303               	bcf	3,6	;RP1=0, select bank0
  5762  0615  084E               	movf	?___fttol+3,w
  5763  0616  1683               	bsf	3,5	;RP0=1, select bank1
  5764  0617  1303               	bcf	3,6	;RP1=0, select bank1
  5765  0618  00D4               	movwf	(sprintf@val+3)^(0+128)
  5766  0619  1283               	bcf	3,5	;RP0=0, select bank0
  5767  061A  1303               	bcf	3,6	;RP1=0, select bank0
  5768  061B  084D               	movf	?___fttol+2,w
  5769  061C  1683               	bsf	3,5	;RP0=1, select bank1
  5770  061D  1303               	bcf	3,6	;RP1=0, select bank1
  5771  061E  00D3               	movwf	(sprintf@val+2)^(0+128)
  5772  061F  1283               	bcf	3,5	;RP0=0, select bank0
  5773  0620  1303               	bcf	3,6	;RP1=0, select bank0
  5774  0621  084C               	movf	?___fttol+1,w
  5775  0622  1683               	bsf	3,5	;RP0=1, select bank1
  5776  0623  1303               	bcf	3,6	;RP1=0, select bank1
  5777  0624  00D2               	movwf	(sprintf@val+1)^(0+128)
  5778  0625  1283               	bcf	3,5	;RP0=0, select bank0
  5779  0626  1303               	bcf	3,6	;RP1=0, select bank0
  5780  0627  084B               	movf	?___fttol,w
  5781  0628                     L6:	
  5782  0628  1683               	bsf	3,5	;RP0=1, select bank1
  5783  0629  1303               	bcf	3,6	;RP1=0, select bank1
  5784  062A  00D1               	movwf	sprintf@val^(0+128)
  5785  062B  30FF               	movlw	255
  5786  062C  00C5               	movwf	??_sprintf^(0+128)
  5787  062D  0845               	movf	??_sprintf^(0+128),w
  5788  062E  07E0               	addwf	sprintf@c^(0+128),f
  5789  062F  0A60               	incf	sprintf@c^(0+128),w
  5790  0630  1903               	btfsc	3,2
  5791  0631  2F58               	goto	l4052
  5792                           
  5793                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5794                           
  5795                           ;doprnt.c: 1228: while(c--) {
  5796  0632  0860               	movf	sprintf@c^(0+128),w
  5797  0633  00C5               	movwf	??_sprintf^(0+128)
  5798  0634  3001               	movlw	1
  5799  0635                     u5895:	
  5800  0635  1003               	clrc
  5801  0636  0DC5               	rlf	??_sprintf^(0+128),f
  5802  0637  3EFF               	addlw	-1
  5803  0638  1D03               	skipz
  5804  0639  2E35               	goto	u5895
  5805  063A  1003               	clrc
  5806  063B  0D45               	rlf	??_sprintf^(0+128),w
  5807  063C  3E12               	addlw	low (_dpowers| (0+32768))
  5808  063D  0084               	movwf	4
  5809  063E  3098               	movlw	high (_dpowers| (0+32768))
  5810  063F  1803               	skipnc
  5811  0640  3E01               	addlw	1
  5812  0641  1283               	bcf	3,5	;RP0=0, select bank0
  5813  0642  1303               	bcf	3,6	;RP1=0, select bank0
  5814  0643  00FF               	movwf	127
  5815  0644  160A  158A  2000  120A  118A  	fcall	stringtab
  5816  0649  00A0               	movwf	___lldiv@divisor
  5817  064A  160A  158A  2000  120A  118A  	fcall	stringtab
  5818  064F  00A1               	movwf	___lldiv@divisor+1
  5819  0650  160A  158A  2000  120A  118A  	fcall	stringtab
  5820  0655  00A2               	movwf	___lldiv@divisor+2
  5821  0656  160A  158A  2000  120A  118A  	fcall	stringtab
  5822  065B  00A3               	movwf	___lldiv@divisor+3
  5823  065C  1683               	bsf	3,5	;RP0=1, select bank1
  5824  065D  1303               	bcf	3,6	;RP1=0, select bank1
  5825  065E  0854               	movf	(sprintf@val+3)^(0+128),w
  5826  065F  1283               	bcf	3,5	;RP0=0, select bank0
  5827  0660  1303               	bcf	3,6	;RP1=0, select bank0
  5828  0661  00A7               	movwf	___lldiv@dividend+3
  5829  0662  1683               	bsf	3,5	;RP0=1, select bank1
  5830  0663  1303               	bcf	3,6	;RP1=0, select bank1
  5831  0664  0853               	movf	(sprintf@val+2)^(0+128),w
  5832  0665  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0666  1303               	bcf	3,6	;RP1=0, select bank0
  5834  0667  00A6               	movwf	___lldiv@dividend+2
  5835  0668  1683               	bsf	3,5	;RP0=1, select bank1
  5836  0669  1303               	bcf	3,6	;RP1=0, select bank1
  5837  066A  0852               	movf	(sprintf@val+1)^(0+128),w
  5838  066B  1283               	bcf	3,5	;RP0=0, select bank0
  5839  066C  1303               	bcf	3,6	;RP1=0, select bank0
  5840  066D  00A5               	movwf	___lldiv@dividend+1
  5841  066E  1683               	bsf	3,5	;RP0=1, select bank1
  5842  066F  1303               	bcf	3,6	;RP1=0, select bank1
  5843  0670  0851               	movf	sprintf@val^(0+128),w
  5844  0671  1283               	bcf	3,5	;RP0=0, select bank0
  5845  0672  1303               	bcf	3,6	;RP1=0, select bank0
  5846  0673  00A4               	movwf	___lldiv@dividend
  5847  0674  120A  158A  2000  120A  118A  	fcall	___lldiv
  5848  0679  1283               	bcf	3,5	;RP0=0, select bank0
  5849  067A  1303               	bcf	3,6	;RP1=0, select bank0
  5850  067B  0823               	movf	?___lldiv+3,w
  5851  067C  1683               	bsf	3,5	;RP0=1, select bank1
  5852  067D  1303               	bcf	3,6	;RP1=0, select bank1
  5853  067E  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
  5854  067F  1283               	bcf	3,5	;RP0=0, select bank0
  5855  0680  1303               	bcf	3,6	;RP1=0, select bank0
  5856  0681  0822               	movf	?___lldiv+2,w
  5857  0682  1683               	bsf	3,5	;RP0=1, select bank1
  5858  0683  1303               	bcf	3,6	;RP1=0, select bank1
  5859  0684  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5860  0685  1283               	bcf	3,5	;RP0=0, select bank0
  5861  0686  1303               	bcf	3,6	;RP1=0, select bank0
  5862  0687  0821               	movf	?___lldiv+1,w
  5863  0688  1683               	bsf	3,5	;RP0=1, select bank1
  5864  0689  1303               	bcf	3,6	;RP1=0, select bank1
  5865  068A  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5866  068B  1283               	bcf	3,5	;RP0=0, select bank0
  5867  068C  1303               	bcf	3,6	;RP1=0, select bank0
  5868  068D  0820               	movf	?___lldiv,w
  5869  068E  1683               	bsf	3,5	;RP0=1, select bank1
  5870  068F  1303               	bcf	3,6	;RP1=0, select bank1
  5871  0690  00D7               	movwf	sprintf@tmpval^(0+128)
  5872                           
  5873                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5874  0691  3000               	movlw	0
  5875  0692  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0693  1303               	bcf	3,6	;RP1=0, select bank0
  5877  0694  00A3               	movwf	___llmod@divisor+3
  5878  0695  3000               	movlw	0
  5879  0696  00A2               	movwf	___llmod@divisor+2
  5880  0697  3000               	movlw	0
  5881  0698  00A1               	movwf	___llmod@divisor+1
  5882  0699  300A               	movlw	10
  5883  069A  00A0               	movwf	___llmod@divisor
  5884  069B  1683               	bsf	3,5	;RP0=1, select bank1
  5885  069C  1303               	bcf	3,6	;RP1=0, select bank1
  5886  069D  085A               	movf	(sprintf@tmpval+3)^(0+128),w
  5887  069E  1283               	bcf	3,5	;RP0=0, select bank0
  5888  069F  1303               	bcf	3,6	;RP1=0, select bank0
  5889  06A0  00A7               	movwf	___llmod@dividend+3
  5890  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  5891  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  5892  06A3  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5893  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  5894  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  5895  06A6  00A6               	movwf	___llmod@dividend+2
  5896  06A7  1683               	bsf	3,5	;RP0=1, select bank1
  5897  06A8  1303               	bcf	3,6	;RP1=0, select bank1
  5898  06A9  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5899  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  5900  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  5901  06AC  00A5               	movwf	___llmod@dividend+1
  5902  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  5903  06AE  1303               	bcf	3,6	;RP1=0, select bank1
  5904  06AF  0857               	movf	sprintf@tmpval^(0+128),w
  5905  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  5906  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  5907  06B2  00A4               	movwf	___llmod@dividend
  5908  06B3  160A  158A  2558  120A  118A  	fcall	___llmod
  5909  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  5910  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  5911  06BA  0823               	movf	?___llmod+3,w
  5912  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  5913  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  5914  06BD  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
  5915  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  5916  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  5917  06C0  0822               	movf	?___llmod+2,w
  5918  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  5919  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  5920  06C3  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5921  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  5922  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  5923  06C6  0821               	movf	?___llmod+1,w
  5924  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  5925  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  5926  06C9  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5927  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  5928  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  5929  06CC  0820               	movf	?___llmod,w
  5930  06CD  1683               	bsf	3,5	;RP0=1, select bank1
  5931  06CE  1303               	bcf	3,6	;RP1=0, select bank1
  5932  06CF  00D7               	movwf	sprintf@tmpval^(0+128)
  5933                           
  5934                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5935  06D0  0857               	movf	sprintf@tmpval^(0+128),w
  5936  06D1  3E30               	addlw	48
  5937  06D2  00C5               	movwf	??_sprintf^(0+128)
  5938  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  5939  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  5940  06D5  0867               	movf	sprintf@sp,w
  5941  06D6  0084               	movwf	4
  5942  06D7  1383               	bcf	3,7
  5943  06D8  1868               	btfsc	sprintf@sp+1,0
  5944  06D9  1783               	bsf	3,7
  5945  06DA  1683               	bsf	3,5	;RP0=1, select bank1
  5946  06DB  1303               	bcf	3,6	;RP1=0, select bank1
  5947  06DC  0845               	movf	??_sprintf^(0+128),w
  5948  06DD  0080               	movwf	0
  5949  06DE  3001               	movlw	1
  5950  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  5951  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  5952  06E1  07E7               	addwf	sprintf@sp,f
  5953  06E2  1803               	skipnc
  5954  06E3  0AE8               	incf	sprintf@sp+1,f
  5955                           
  5956                           ;doprnt.c: 1232: val %= dpowers[c];
  5957  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  5958  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  5959  06E6  0860               	movf	sprintf@c^(0+128),w
  5960  06E7  00C5               	movwf	??_sprintf^(0+128)
  5961  06E8  3001               	movlw	1
  5962  06E9                     u5905:	
  5963  06E9  1003               	clrc
  5964  06EA  0DC5               	rlf	??_sprintf^(0+128),f
  5965  06EB  3EFF               	addlw	-1
  5966  06EC  1D03               	skipz
  5967  06ED  2EE9               	goto	u5905
  5968  06EE  1003               	clrc
  5969  06EF  0D45               	rlf	??_sprintf^(0+128),w
  5970  06F0  3E12               	addlw	low (_dpowers| (0+32768))
  5971  06F1  0084               	movwf	4
  5972  06F2  3098               	movlw	high (_dpowers| (0+32768))
  5973  06F3  1803               	skipnc
  5974  06F4  3E01               	addlw	1
  5975  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  5976  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  5977  06F7  00FF               	movwf	127
  5978  06F8  160A  158A  2000  120A  118A  	fcall	stringtab
  5979  06FD  00A0               	movwf	___llmod@divisor
  5980  06FE  160A  158A  2000  120A  118A  	fcall	stringtab
  5981  0703  00A1               	movwf	___llmod@divisor+1
  5982  0704  160A  158A  2000  120A  118A  	fcall	stringtab
  5983  0709  00A2               	movwf	___llmod@divisor+2
  5984  070A  160A  158A  2000  120A  118A  	fcall	stringtab
  5985  070F  00A3               	movwf	___llmod@divisor+3
  5986  0710  1683               	bsf	3,5	;RP0=1, select bank1
  5987  0711  1303               	bcf	3,6	;RP1=0, select bank1
  5988  0712  0854               	movf	(sprintf@val+3)^(0+128),w
  5989  0713  1283               	bcf	3,5	;RP0=0, select bank0
  5990  0714  1303               	bcf	3,6	;RP1=0, select bank0
  5991  0715  00A7               	movwf	___llmod@dividend+3
  5992  0716  1683               	bsf	3,5	;RP0=1, select bank1
  5993  0717  1303               	bcf	3,6	;RP1=0, select bank1
  5994  0718  0853               	movf	(sprintf@val+2)^(0+128),w
  5995  0719  1283               	bcf	3,5	;RP0=0, select bank0
  5996  071A  1303               	bcf	3,6	;RP1=0, select bank0
  5997  071B  00A6               	movwf	___llmod@dividend+2
  5998  071C  1683               	bsf	3,5	;RP0=1, select bank1
  5999  071D  1303               	bcf	3,6	;RP1=0, select bank1
  6000  071E  0852               	movf	(sprintf@val+1)^(0+128),w
  6001  071F  1283               	bcf	3,5	;RP0=0, select bank0
  6002  0720  1303               	bcf	3,6	;RP1=0, select bank0
  6003  0721  00A5               	movwf	___llmod@dividend+1
  6004  0722  1683               	bsf	3,5	;RP0=1, select bank1
  6005  0723  1303               	bcf	3,6	;RP1=0, select bank1
  6006  0724  0851               	movf	sprintf@val^(0+128),w
  6007  0725  1283               	bcf	3,5	;RP0=0, select bank0
  6008  0726  1303               	bcf	3,6	;RP1=0, select bank0
  6009  0727  00A4               	movwf	___llmod@dividend
  6010  0728  160A  158A  2558  120A  118A  	fcall	___llmod
  6011  072D  1283               	bcf	3,5	;RP0=0, select bank0
  6012  072E  1303               	bcf	3,6	;RP1=0, select bank0
  6013  072F  0823               	movf	?___llmod+3,w
  6014  0730  1683               	bsf	3,5	;RP0=1, select bank1
  6015  0731  1303               	bcf	3,6	;RP1=0, select bank1
  6016  0732  00D4               	movwf	(sprintf@val+3)^(0+128)
  6017  0733  1283               	bcf	3,5	;RP0=0, select bank0
  6018  0734  1303               	bcf	3,6	;RP1=0, select bank0
  6019  0735  0822               	movf	?___llmod+2,w
  6020  0736  1683               	bsf	3,5	;RP0=1, select bank1
  6021  0737  1303               	bcf	3,6	;RP1=0, select bank1
  6022  0738  00D3               	movwf	(sprintf@val+2)^(0+128)
  6023  0739  1283               	bcf	3,5	;RP0=0, select bank0
  6024  073A  1303               	bcf	3,6	;RP1=0, select bank0
  6025  073B  0821               	movf	?___llmod+1,w
  6026  073C  1683               	bsf	3,5	;RP0=1, select bank1
  6027  073D  1303               	bcf	3,6	;RP1=0, select bank1
  6028  073E  00D2               	movwf	(sprintf@val+1)^(0+128)
  6029  073F  1283               	bcf	3,5	;RP0=0, select bank0
  6030  0740  1303               	bcf	3,6	;RP1=0, select bank0
  6031  0741  0820               	movf	?___llmod,w
  6032  0742  2E28               	goto	L6
  6033  0743                     l4046:	
  6034                           ;doprnt.c: 1233: }
  6035                           ;doprnt.c: 1235: while(prec) {
  6036                           
  6037                           
  6038                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  6039  0743  1283               	bcf	3,5	;RP0=0, select bank0
  6040  0744  1303               	bcf	3,6	;RP1=0, select bank0
  6041  0745  0867               	movf	sprintf@sp,w
  6042  0746  0084               	movwf	4
  6043  0747  1383               	bcf	3,7
  6044  0748  1868               	btfsc	sprintf@sp+1,0
  6045  0749  1783               	bsf	3,7
  6046  074A  3030               	movlw	48
  6047  074B  0080               	movwf	0
  6048  074C  3001               	movlw	1
  6049  074D  07E7               	addwf	sprintf@sp,f
  6050  074E  1803               	skipnc
  6051  074F  0AE8               	incf	sprintf@sp+1,f
  6052                           
  6053                           ;doprnt.c: 1237: prec--;
  6054  0750  30FF               	movlw	255
  6055  0751  1683               	bsf	3,5	;RP0=1, select bank1
  6056  0752  1303               	bcf	3,6	;RP1=0, select bank1
  6057  0753  07DB               	addwf	sprintf@prec^(0+128),f
  6058  0754  1803               	skipnc
  6059  0755  0ADC               	incf	(sprintf@prec+1)^(0+128),f
  6060  0756  30FF               	movlw	255
  6061  0757  07DC               	addwf	(sprintf@prec+1)^(0+128),f
  6062  0758                     l4052:	
  6063  0758  085B               	movf	sprintf@prec^(0+128),w
  6064  0759  045C               	iorwf	(sprintf@prec+1)^(0+128),w
  6065  075A  1903               	btfsc	3,2
  6066  075B  285E               	goto	l4070
  6067  075C  2F43               	goto	l4046
  6068  075D                     l4054:	
  6069                           ;doprnt.c: 1238: }
  6070                           ;doprnt.c: 1245: continue;
  6071                           
  6072                           
  6073                           ;doprnt.c: 1246: }
  6074                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6075  075D  085B               	movf	sprintf@prec^(0+128),w
  6076  075E  045C               	iorwf	(sprintf@prec+1)^(0+128),w
  6077  075F  1D03               	btfss	3,2
  6078  0760  2F6D               	goto	l337
  6079  0761  0854               	movf	(sprintf@val+3)^(0+128),w
  6080  0762  0453               	iorwf	(sprintf@val+2)^(0+128),w
  6081  0763  0452               	iorwf	(sprintf@val+1)^(0+128),w
  6082  0764  0451               	iorwf	sprintf@val^(0+128),w
  6083  0765  1D03               	skipz
  6084  0766  2F6D               	goto	l337
  6085                           
  6086                           ;doprnt.c: 1291: prec++;
  6087  0767  3001               	movlw	1
  6088  0768  07DB               	addwf	sprintf@prec^(0+128),f
  6089  0769  1803               	skipnc
  6090  076A  0ADC               	incf	(sprintf@prec+1)^(0+128),f
  6091  076B  3000               	movlw	0
  6092  076C  07DC               	addwf	(sprintf@prec+1)^(0+128),f
  6093  076D                     l337:	
  6094                           
  6095                           ;doprnt.c: 1339: if(c < prec)
  6096  076D  0860               	movf	sprintf@c^(0+128),w
  6097  076E  00C5               	movwf	??_sprintf^(0+128)
  6098  076F  01C6               	clrf	(??_sprintf^(0+128)+1)
  6099  0770  1BC5               	btfsc	??_sprintf^(0+128),7
  6100  0771  03C6               	decf	(??_sprintf^(0+128)+1),f
  6101  0772  0846               	movf	(??_sprintf+1)^(0+128),w
  6102  0773  3A80               	xorlw	128
  6103  0774  00C7               	movwf	(??_sprintf+2)^(0+128)
  6104  0775  085C               	movf	(sprintf@prec+1)^(0+128),w
  6105  0776  3A80               	xorlw	128
  6106  0777  0247               	subwf	(??_sprintf+2)^(0+128),w
  6107  0778  1D03               	skipz
  6108  0779  2F7C               	goto	u5955
  6109  077A  085B               	movf	sprintf@prec^(0+128),w
  6110  077B  0245               	subwf	??_sprintf^(0+128),w
  6111  077C                     u5955:	
  6112  077C  1803               	skipnc
  6113  077D  2F85               	goto	l4062
  6114                           
  6115                           ;doprnt.c: 1340: c = prec;
  6116  077E  1683               	bsf	3,5	;RP0=1, select bank1
  6117  077F  1303               	bcf	3,6	;RP1=0, select bank1
  6118  0780  085B               	movf	sprintf@prec^(0+128),w
  6119  0781  00C5               	movwf	??_sprintf^(0+128)
  6120  0782  0845               	movf	??_sprintf^(0+128),w
  6121  0783  00E0               	movwf	sprintf@c^(0+128)
  6122  0784  2F9F               	goto	l339
  6123  0785                     l4062:	
  6124                           
  6125                           ;doprnt.c: 1341: else if(prec < c)
  6126  0785  1683               	bsf	3,5	;RP0=1, select bank1
  6127  0786  1303               	bcf	3,6	;RP1=0, select bank1
  6128  0787  0860               	movf	sprintf@c^(0+128),w
  6129  0788  00C5               	movwf	??_sprintf^(0+128)
  6130  0789  01C6               	clrf	(??_sprintf^(0+128)+1)
  6131  078A  1BC5               	btfsc	??_sprintf^(0+128),7
  6132  078B  03C6               	decf	(??_sprintf^(0+128)+1),f
  6133  078C  085C               	movf	(sprintf@prec+1)^(0+128),w
  6134  078D  3A80               	xorlw	128
  6135  078E  00C7               	movwf	(??_sprintf+2)^(0+128)
  6136  078F  0846               	movf	(??_sprintf+1)^(0+128),w
  6137  0790  3A80               	xorlw	128
  6138  0791  0247               	subwf	(??_sprintf+2)^(0+128),w
  6139  0792  1D03               	skipz
  6140  0793  2F96               	goto	u5965
  6141  0794  0845               	movf	??_sprintf^(0+128),w
  6142  0795  025B               	subwf	sprintf@prec^(0+128),w
  6143  0796                     u5965:	
  6144  0796  1803               	skipnc
  6145  0797  2F9F               	goto	l339
  6146                           
  6147                           ;doprnt.c: 1342: prec = c;
  6148  0798  1683               	bsf	3,5	;RP0=1, select bank1
  6149  0799  1303               	bcf	3,6	;RP1=0, select bank1
  6150  079A  0860               	movf	sprintf@c^(0+128),w
  6151  079B  00DB               	movwf	sprintf@prec^(0+128)
  6152  079C  01DC               	clrf	(sprintf@prec+1)^(0+128)
  6153  079D  1BDB               	btfsc	sprintf@prec^(0+128),7
  6154  079E  03DC               	decf	(sprintf@prec+1)^(0+128),f
  6155  079F                     l339:	
  6156                           
  6157                           ;doprnt.c: 1422: {
  6158                           ;doprnt.c: 1438: if(flag & 0x03)
  6159  079F  3003               	movlw	3
  6160  07A0  1683               	bsf	3,5	;RP0=1, select bank1
  6161  07A1  1303               	bcf	3,6	;RP1=0, select bank1
  6162  07A2  054F               	andwf	sprintf@flag^(0+128),w
  6163  07A3  00C5               	movwf	??_sprintf^(0+128)
  6164  07A4  3000               	movlw	0
  6165  07A5  0550               	andwf	(sprintf@flag+1)^(0+128),w
  6166  07A6  00C6               	movwf	(??_sprintf+1)^(0+128)
  6167  07A7  0845               	movf	??_sprintf^(0+128),w
  6168  07A8  0446               	iorwf	(??_sprintf^(0+128)+1),w
  6169  07A9  1903               	btfsc	3,2
  6170  07AA  285E               	goto	l4070
  6171                           
  6172                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6173  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  6174  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  6175  07AD  0867               	movf	sprintf@sp,w
  6176  07AE  0084               	movwf	4
  6177  07AF  1383               	bcf	3,7
  6178  07B0  1868               	btfsc	sprintf@sp+1,0
  6179  07B1  1783               	bsf	3,7
  6180  07B2  302D               	movlw	45
  6181  07B3  0080               	movwf	0
  6182  07B4  3001               	movlw	1
  6183  07B5                     L1:	
  6184  07B5  07E7               	addwf	sprintf@sp,f
  6185  07B6  1803               	skipnc
  6186  07B7  0AE8               	incf	sprintf@sp+1,f
  6187  07B8  285E               	goto	l4070
  6188  07B9                     l4072:	
  6189                           ;doprnt.c: 1469: }
  6190                           ;doprnt.c: 1533: }
  6191                           ;doprnt.c: 1535: alldone:
  6192                           
  6193                           
  6194                           ;doprnt.c: 1538: *sp = 0;
  6195  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  6196  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  6197  07BB  0867               	movf	sprintf@sp,w
  6198  07BC  0084               	movwf	4
  6199  07BD  1783               	bsf	3,7
  6200  07BE  1C68               	btfss	sprintf@sp+1,0
  6201  07BF  1383               	bcf	3,7
  6202  07C0  0180               	clrf	0
  6203  07C1  0008               	return
  6204  07C2                     __end_of_sprintf:	
  6205                           ;doprnt.c: 1540: return 0;
  6206                           ;	Return value of _sprintf is never used
  6207                           
  6208                           
  6209                           	psect	text17
  6210  0A1E                     __ptext17:	
  6211 ;; *************** function _scale *****************
  6212 ;; Defined at:
  6213 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  scl             1    wreg     char 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  scl             1   42[BANK0 ] char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  3   34[BANK0 ] char 
  6220 ;; Registers used:
  6221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6227 ;;      Params:         0       3       0       0       0
  6228 ;;      Locals:         0       4       0       0       0
  6229 ;;      Temps:          0       2       0       0       0
  6230 ;;      Totals:         0       9       0       0       0
  6231 ;;Total ram usage:        9 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    3
  6234 ;; This function calls:
  6235 ;;		___awdiv
  6236 ;;		___awmod
  6237 ;;		___bmul
  6238 ;;		___ftmul
  6239 ;; This function is called by:
  6240 ;;		_sprintf
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _scale
  6246  0A1E                     _scale:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6250                           ;scale@scl stored from wreg
  6251  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  6252  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  6253  0A20  00CA               	movwf	scale@scl
  6254                           
  6255                           ;doprnt.c: 428: if(scl < 0) {
  6256  0A21  1FCA               	btfss	scale@scl,7
  6257  0A22  2B93               	goto	l3574
  6258                           
  6259                           ;doprnt.c: 429: scl = -scl;
  6260  0A23  09CA               	comf	scale@scl,f
  6261  0A24  0ACA               	incf	scale@scl,f
  6262                           
  6263                           ;doprnt.c: 430: if(scl>=110)
  6264  0A25  084A               	movf	scale@scl,w
  6265  0A26  3A80               	xorlw	128
  6266  0A27  3E12               	addlw	-238
  6267  0A28  1C03               	skipc
  6268  0A29  2AF6               	goto	l3564
  6269                           
  6270                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6271  0A2A  3003               	movlw	3
  6272  0A2B  00C5               	movwf	??_scale
  6273  0A2C  0845               	movf	??_scale,w
  6274  0A2D  00AE               	movwf	___bmul@multiplicand
  6275  0A2E  300A               	movlw	10
  6276  0A2F  00A6               	movwf	___awdiv@divisor
  6277  0A30  3000               	movlw	0
  6278  0A31  00A7               	movwf	___awdiv@divisor+1
  6279  0A32  084A               	movf	scale@scl,w
  6280  0A33  00A2               	movwf	___awmod@dividend
  6281  0A34  01A3               	clrf	___awmod@dividend+1
  6282  0A35  1BA2               	btfsc	___awmod@dividend,7
  6283  0A36  03A3               	decf	___awmod@dividend+1,f
  6284  0A37  3064               	movlw	100
  6285  0A38  00A0               	movwf	___awmod@divisor
  6286  0A39  3000               	movlw	0
  6287  0A3A  00A1               	movwf	___awmod@divisor+1
  6288  0A3B  160A  158A  250B  120A  158A  	fcall	___awmod
  6289  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6290  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6291  0A42  0821               	movf	?___awmod+1,w
  6292  0A43  00A9               	movwf	___awdiv@dividend+1
  6293  0A44  0820               	movf	?___awmod,w
  6294  0A45  00A8               	movwf	___awdiv@dividend
  6295  0A46  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6296  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  6297  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  6298  0A4D  0826               	movf	?___awdiv,w
  6299  0A4E  3E09               	addlw	9
  6300  0A4F  160A  158A  22C0  120A  158A  	fcall	___bmul
  6301  0A54  3E3A               	addlw	low (__npowers_| (0+32768))
  6302  0A55  0084               	movwf	4
  6303  0A56  3098               	movlw	high (__npowers_| (0+32768))
  6304  0A57  1803               	skipnc
  6305  0A58  3E01               	addlw	1
  6306  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  6307  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  6308  0A5B  00FF               	movwf	127
  6309  0A5C  160A  158A  2000  120A  158A  	fcall	stringtab
  6310  0A61  00B2               	movwf	___ftmul@f1
  6311  0A62  160A  158A  2000  120A  158A  	fcall	stringtab
  6312  0A67  00B3               	movwf	___ftmul@f1+1
  6313  0A68  160A  158A  2000  120A  158A  	fcall	stringtab
  6314  0A6D  00B4               	movwf	___ftmul@f1+2
  6315  0A6E  3003               	movlw	3
  6316  0A6F  00C6               	movwf	??_scale+1
  6317  0A70  0846               	movf	??_scale+1,w
  6318  0A71  00AE               	movwf	___bmul@multiplicand
  6319  0A72  3064               	movlw	100
  6320  0A73  00A6               	movwf	___awdiv@divisor
  6321  0A74  3000               	movlw	0
  6322  0A75  00A7               	movwf	___awdiv@divisor+1
  6323  0A76  084A               	movf	scale@scl,w
  6324  0A77  00A8               	movwf	___awdiv@dividend
  6325  0A78  01A9               	clrf	___awdiv@dividend+1
  6326  0A79  1BA8               	btfsc	___awdiv@dividend,7
  6327  0A7A  03A9               	decf	___awdiv@dividend+1,f
  6328  0A7B  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6329  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  6330  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  6331  0A82  0826               	movf	?___awdiv,w
  6332  0A83  3E12               	addlw	18
  6333  0A84  160A  158A  22C0  120A  158A  	fcall	___bmul
  6334  0A89  3E3A               	addlw	low (__npowers_| (0+32768))
  6335  0A8A  0084               	movwf	4
  6336  0A8B  3098               	movlw	high (__npowers_| (0+32768))
  6337  0A8C  1803               	skipnc
  6338  0A8D  3E01               	addlw	1
  6339  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  6340  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  6341  0A90  00FF               	movwf	127
  6342  0A91  160A  158A  2000  120A  158A  	fcall	stringtab
  6343  0A96  00B5               	movwf	___ftmul@f2
  6344  0A97  160A  158A  2000  120A  158A  	fcall	stringtab
  6345  0A9C  00B6               	movwf	___ftmul@f2+1
  6346  0A9D  160A  158A  2000  120A  158A  	fcall	stringtab
  6347  0AA2  00B7               	movwf	___ftmul@f2+2
  6348  0AA3  160A  118A  2371  120A  158A  	fcall	___ftmul
  6349  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  6350  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  6351  0AAA  0832               	movf	?___ftmul,w
  6352  0AAB  00C7               	movwf	_scale$855
  6353  0AAC  0833               	movf	?___ftmul+1,w
  6354  0AAD  00C8               	movwf	_scale$855+1
  6355  0AAE  0834               	movf	?___ftmul+2,w
  6356  0AAF  00C9               	movwf	_scale$855+2
  6357                           
  6358                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6359  0AB0  3003               	movlw	3
  6360  0AB1  00C5               	movwf	??_scale
  6361  0AB2  0845               	movf	??_scale,w
  6362  0AB3  00AE               	movwf	___bmul@multiplicand
  6363  0AB4  084A               	movf	scale@scl,w
  6364  0AB5  00A2               	movwf	___awmod@dividend
  6365  0AB6  01A3               	clrf	___awmod@dividend+1
  6366  0AB7  1BA2               	btfsc	___awmod@dividend,7
  6367  0AB8  03A3               	decf	___awmod@dividend+1,f
  6368  0AB9  300A               	movlw	10
  6369  0ABA  00A0               	movwf	___awmod@divisor
  6370  0ABB  3000               	movlw	0
  6371  0ABC  00A1               	movwf	___awmod@divisor+1
  6372  0ABD  160A  158A  250B  120A  158A  	fcall	___awmod
  6373  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  6374  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  6375  0AC4  0820               	movf	?___awmod,w
  6376  0AC5  160A  158A  22C0  120A  158A  	fcall	___bmul
  6377  0ACA  3E3A               	addlw	low (__npowers_| (0+32768))
  6378  0ACB  0084               	movwf	4
  6379  0ACC  3098               	movlw	high (__npowers_| (0+32768))
  6380  0ACD  1803               	skipnc
  6381  0ACE  3E01               	addlw	1
  6382  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  6383  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  6384  0AD1  00FF               	movwf	127
  6385  0AD2  160A  158A  2000  120A  158A  	fcall	stringtab
  6386  0AD7  00B2               	movwf	___ftmul@f1
  6387  0AD8  160A  158A  2000  120A  158A  	fcall	stringtab
  6388  0ADD  00B3               	movwf	___ftmul@f1+1
  6389  0ADE  160A  158A  2000  120A  158A  	fcall	stringtab
  6390  0AE3  00B4               	movwf	___ftmul@f1+2
  6391  0AE4  0847               	movf	_scale$855,w
  6392  0AE5  00B5               	movwf	___ftmul@f2
  6393  0AE6  0848               	movf	_scale$855+1,w
  6394  0AE7  00B6               	movwf	___ftmul@f2+1
  6395  0AE8  0849               	movf	_scale$855+2,w
  6396  0AE9  00B7               	movwf	___ftmul@f2+2
  6397  0AEA  160A  118A  2371   	fcall	___ftmul
  6398  0AED  1283               	bcf	3,5	;RP0=0, select bank0
  6399  0AEE  1303               	bcf	3,6	;RP1=0, select bank0
  6400  0AEF  0832               	movf	?___ftmul,w
  6401  0AF0  00C2               	movwf	?_scale
  6402  0AF1  0833               	movf	?___ftmul+1,w
  6403  0AF2  00C3               	movwf	?_scale+1
  6404  0AF3  0834               	movf	?___ftmul+2,w
  6405  0AF4  00C4               	movwf	?_scale+2
  6406  0AF5  0008               	return
  6407  0AF6                     l3564:	
  6408                           
  6409                           ;doprnt.c: 432: else if(scl > 10)
  6410  0AF6  084A               	movf	scale@scl,w
  6411  0AF7  3A80               	xorlw	128
  6412  0AF8  3E75               	addlw	-139
  6413  0AF9  1C03               	skipc
  6414  0AFA  2B70               	goto	l3570
  6415                           
  6416                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6417  0AFB  3003               	movlw	3
  6418  0AFC  00C5               	movwf	??_scale
  6419  0AFD  0845               	movf	??_scale,w
  6420  0AFE  00AE               	movwf	___bmul@multiplicand
  6421  0AFF  084A               	movf	scale@scl,w
  6422  0B00  00A2               	movwf	___awmod@dividend
  6423  0B01  01A3               	clrf	___awmod@dividend+1
  6424  0B02  1BA2               	btfsc	___awmod@dividend,7
  6425  0B03  03A3               	decf	___awmod@dividend+1,f
  6426  0B04  300A               	movlw	10
  6427  0B05  00A0               	movwf	___awmod@divisor
  6428  0B06  3000               	movlw	0
  6429  0B07  00A1               	movwf	___awmod@divisor+1
  6430  0B08  160A  158A  250B  120A  158A  	fcall	___awmod
  6431  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  6432  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  6433  0B0F  0820               	movf	?___awmod,w
  6434  0B10  160A  158A  22C0  120A  158A  	fcall	___bmul
  6435  0B15  3E3A               	addlw	low (__npowers_| (0+32768))
  6436  0B16  0084               	movwf	4
  6437  0B17  3098               	movlw	high (__npowers_| (0+32768))
  6438  0B18  1803               	skipnc
  6439  0B19  3E01               	addlw	1
  6440  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  6441  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  6442  0B1C  00FF               	movwf	127
  6443  0B1D  160A  158A  2000  120A  158A  	fcall	stringtab
  6444  0B22  00B2               	movwf	___ftmul@f1
  6445  0B23  160A  158A  2000  120A  158A  	fcall	stringtab
  6446  0B28  00B3               	movwf	___ftmul@f1+1
  6447  0B29  160A  158A  2000  120A  158A  	fcall	stringtab
  6448  0B2E  00B4               	movwf	___ftmul@f1+2
  6449  0B2F  3003               	movlw	3
  6450  0B30  00C6               	movwf	??_scale+1
  6451  0B31  0846               	movf	??_scale+1,w
  6452  0B32  00AE               	movwf	___bmul@multiplicand
  6453  0B33  300A               	movlw	10
  6454  0B34  00A6               	movwf	___awdiv@divisor
  6455  0B35  3000               	movlw	0
  6456  0B36  00A7               	movwf	___awdiv@divisor+1
  6457  0B37  084A               	movf	scale@scl,w
  6458  0B38  00A8               	movwf	___awdiv@dividend
  6459  0B39  01A9               	clrf	___awdiv@dividend+1
  6460  0B3A  1BA8               	btfsc	___awdiv@dividend,7
  6461  0B3B  03A9               	decf	___awdiv@dividend+1,f
  6462  0B3C  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6463  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  6464  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  6465  0B43  0826               	movf	?___awdiv,w
  6466  0B44  3E09               	addlw	9
  6467  0B45  160A  158A  22C0  120A  158A  	fcall	___bmul
  6468  0B4A  3E3A               	addlw	low (__npowers_| (0+32768))
  6469  0B4B  0084               	movwf	4
  6470  0B4C  3098               	movlw	high (__npowers_| (0+32768))
  6471  0B4D  1803               	skipnc
  6472  0B4E  3E01               	addlw	1
  6473  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  6474  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  6475  0B51  00FF               	movwf	127
  6476  0B52  160A  158A  2000  120A  158A  	fcall	stringtab
  6477  0B57  00B5               	movwf	___ftmul@f2
  6478  0B58  160A  158A  2000  120A  158A  	fcall	stringtab
  6479  0B5D  00B6               	movwf	___ftmul@f2+1
  6480  0B5E  160A  158A  2000  120A  158A  	fcall	stringtab
  6481  0B63  00B7               	movwf	___ftmul@f2+2
  6482  0B64  160A  118A  2371   	fcall	___ftmul
  6483  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  6484  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  6485  0B69  0832               	movf	?___ftmul,w
  6486  0B6A  00C2               	movwf	?_scale
  6487  0B6B  0833               	movf	?___ftmul+1,w
  6488  0B6C  00C3               	movwf	?_scale+1
  6489  0B6D  0834               	movf	?___ftmul+2,w
  6490  0B6E  00C4               	movwf	?_scale+2
  6491  0B6F  0008               	return
  6492  0B70                     l3570:	
  6493                           
  6494                           ;doprnt.c: 434: return _npowers_[scl];
  6495  0B70  3003               	movlw	3
  6496  0B71  00C5               	movwf	??_scale
  6497  0B72  0845               	movf	??_scale,w
  6498  0B73  00AE               	movwf	___bmul@multiplicand
  6499  0B74  084A               	movf	scale@scl,w
  6500  0B75  160A  158A  22C0  120A  158A  	fcall	___bmul
  6501  0B7A  3E3A               	addlw	low (__npowers_| (0+32768))
  6502  0B7B  0084               	movwf	4
  6503  0B7C  3098               	movlw	high (__npowers_| (0+32768))
  6504  0B7D  1803               	skipnc
  6505  0B7E  3E01               	addlw	1
  6506  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  6507  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  6508  0B81  00FF               	movwf	127
  6509  0B82  160A  158A  2000  120A  158A  	fcall	stringtab
  6510  0B87  00C2               	movwf	?_scale
  6511  0B88  160A  158A  2000  120A  158A  	fcall	stringtab
  6512  0B8D  00C3               	movwf	?_scale+1
  6513  0B8E  160A  158A  2000   	fcall	stringtab
  6514  0B91  00C4               	movwf	?_scale+2
  6515  0B92  0008               	return
  6516  0B93                     l3574:	
  6517                           
  6518                           ;doprnt.c: 435: }
  6519                           ;doprnt.c: 436: if(scl>=110)
  6520  0B93  084A               	movf	scale@scl,w
  6521  0B94  3A80               	xorlw	128
  6522  0B95  3E12               	addlw	-238
  6523  0B96  1C03               	skipc
  6524  0B97  2C64               	goto	l3582
  6525                           
  6526                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6527  0B98  3003               	movlw	3
  6528  0B99  00C5               	movwf	??_scale
  6529  0B9A  0845               	movf	??_scale,w
  6530  0B9B  00AE               	movwf	___bmul@multiplicand
  6531  0B9C  300A               	movlw	10
  6532  0B9D  00A6               	movwf	___awdiv@divisor
  6533  0B9E  3000               	movlw	0
  6534  0B9F  00A7               	movwf	___awdiv@divisor+1
  6535  0BA0  084A               	movf	scale@scl,w
  6536  0BA1  00A2               	movwf	___awmod@dividend
  6537  0BA2  01A3               	clrf	___awmod@dividend+1
  6538  0BA3  1BA2               	btfsc	___awmod@dividend,7
  6539  0BA4  03A3               	decf	___awmod@dividend+1,f
  6540  0BA5  3064               	movlw	100
  6541  0BA6  00A0               	movwf	___awmod@divisor
  6542  0BA7  3000               	movlw	0
  6543  0BA8  00A1               	movwf	___awmod@divisor+1
  6544  0BA9  160A  158A  250B  120A  158A  	fcall	___awmod
  6545  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  6546  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  6547  0BB0  0821               	movf	?___awmod+1,w
  6548  0BB1  00A9               	movwf	___awdiv@dividend+1
  6549  0BB2  0820               	movf	?___awmod,w
  6550  0BB3  00A8               	movwf	___awdiv@dividend
  6551  0BB4  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6552  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  6553  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  6554  0BBB  0826               	movf	?___awdiv,w
  6555  0BBC  3E09               	addlw	9
  6556  0BBD  160A  158A  22C0  120A  158A  	fcall	___bmul
  6557  0BC2  3E61               	addlw	low (__powers_| (0+32768))
  6558  0BC3  0084               	movwf	4
  6559  0BC4  3098               	movlw	high (__powers_| (0+32768))
  6560  0BC5  1803               	skipnc
  6561  0BC6  3E01               	addlw	1
  6562  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  6563  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  6564  0BC9  00FF               	movwf	127
  6565  0BCA  160A  158A  2000  120A  158A  	fcall	stringtab
  6566  0BCF  00B2               	movwf	___ftmul@f1
  6567  0BD0  160A  158A  2000  120A  158A  	fcall	stringtab
  6568  0BD5  00B3               	movwf	___ftmul@f1+1
  6569  0BD6  160A  158A  2000  120A  158A  	fcall	stringtab
  6570  0BDB  00B4               	movwf	___ftmul@f1+2
  6571  0BDC  3003               	movlw	3
  6572  0BDD  00C6               	movwf	??_scale+1
  6573  0BDE  0846               	movf	??_scale+1,w
  6574  0BDF  00AE               	movwf	___bmul@multiplicand
  6575  0BE0  3064               	movlw	100
  6576  0BE1  00A6               	movwf	___awdiv@divisor
  6577  0BE2  3000               	movlw	0
  6578  0BE3  00A7               	movwf	___awdiv@divisor+1
  6579  0BE4  084A               	movf	scale@scl,w
  6580  0BE5  00A8               	movwf	___awdiv@dividend
  6581  0BE6  01A9               	clrf	___awdiv@dividend+1
  6582  0BE7  1BA8               	btfsc	___awdiv@dividend,7
  6583  0BE8  03A9               	decf	___awdiv@dividend+1,f
  6584  0BE9  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6585  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  6586  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  6587  0BF0  0826               	movf	?___awdiv,w
  6588  0BF1  3E12               	addlw	18
  6589  0BF2  160A  158A  22C0  120A  158A  	fcall	___bmul
  6590  0BF7  3E61               	addlw	low (__powers_| (0+32768))
  6591  0BF8  0084               	movwf	4
  6592  0BF9  3098               	movlw	high (__powers_| (0+32768))
  6593  0BFA  1803               	skipnc
  6594  0BFB  3E01               	addlw	1
  6595  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  6596  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  6597  0BFE  00FF               	movwf	127
  6598  0BFF  160A  158A  2000  120A  158A  	fcall	stringtab
  6599  0C04  00B5               	movwf	___ftmul@f2
  6600  0C05  160A  158A  2000  120A  158A  	fcall	stringtab
  6601  0C0A  00B6               	movwf	___ftmul@f2+1
  6602  0C0B  160A  158A  2000  120A  158A  	fcall	stringtab
  6603  0C10  00B7               	movwf	___ftmul@f2+2
  6604  0C11  160A  118A  2371  120A  158A  	fcall	___ftmul
  6605  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  6606  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  6607  0C18  0832               	movf	?___ftmul,w
  6608  0C19  00C7               	movwf	_scale$855
  6609  0C1A  0833               	movf	?___ftmul+1,w
  6610  0C1B  00C8               	movwf	_scale$855+1
  6611  0C1C  0834               	movf	?___ftmul+2,w
  6612  0C1D  00C9               	movwf	_scale$855+2
  6613                           
  6614                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6615  0C1E  3003               	movlw	3
  6616  0C1F  00C5               	movwf	??_scale
  6617  0C20  0845               	movf	??_scale,w
  6618  0C21  00AE               	movwf	___bmul@multiplicand
  6619  0C22  084A               	movf	scale@scl,w
  6620  0C23  00A2               	movwf	___awmod@dividend
  6621  0C24  01A3               	clrf	___awmod@dividend+1
  6622  0C25  1BA2               	btfsc	___awmod@dividend,7
  6623  0C26  03A3               	decf	___awmod@dividend+1,f
  6624  0C27  300A               	movlw	10
  6625  0C28  00A0               	movwf	___awmod@divisor
  6626  0C29  3000               	movlw	0
  6627  0C2A  00A1               	movwf	___awmod@divisor+1
  6628  0C2B  160A  158A  250B  120A  158A  	fcall	___awmod
  6629  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  6630  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  6631  0C32  0820               	movf	?___awmod,w
  6632  0C33  160A  158A  22C0  120A  158A  	fcall	___bmul
  6633  0C38  3E61               	addlw	low (__powers_| (0+32768))
  6634  0C39  0084               	movwf	4
  6635  0C3A  3098               	movlw	high (__powers_| (0+32768))
  6636  0C3B  1803               	skipnc
  6637  0C3C  3E01               	addlw	1
  6638  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  6639  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  6640  0C3F  00FF               	movwf	127
  6641  0C40  160A  158A  2000  120A  158A  	fcall	stringtab
  6642  0C45  00B2               	movwf	___ftmul@f1
  6643  0C46  160A  158A  2000  120A  158A  	fcall	stringtab
  6644  0C4B  00B3               	movwf	___ftmul@f1+1
  6645  0C4C  160A  158A  2000  120A  158A  	fcall	stringtab
  6646  0C51  00B4               	movwf	___ftmul@f1+2
  6647  0C52  0847               	movf	_scale$855,w
  6648  0C53  00B5               	movwf	___ftmul@f2
  6649  0C54  0848               	movf	_scale$855+1,w
  6650  0C55  00B6               	movwf	___ftmul@f2+1
  6651  0C56  0849               	movf	_scale$855+2,w
  6652  0C57  00B7               	movwf	___ftmul@f2+2
  6653  0C58  160A  118A  2371   	fcall	___ftmul
  6654  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  6655  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  6656  0C5D  0832               	movf	?___ftmul,w
  6657  0C5E  00C2               	movwf	?_scale
  6658  0C5F  0833               	movf	?___ftmul+1,w
  6659  0C60  00C3               	movwf	?_scale+1
  6660  0C61  0834               	movf	?___ftmul+2,w
  6661  0C62  00C4               	movwf	?_scale+2
  6662  0C63  0008               	return
  6663  0C64                     l3582:	
  6664                           
  6665                           ;doprnt.c: 438: else if(scl > 10)
  6666  0C64  084A               	movf	scale@scl,w
  6667  0C65  3A80               	xorlw	128
  6668  0C66  3E75               	addlw	-139
  6669  0C67  1C03               	skipc
  6670  0C68  2CDE               	goto	l3588
  6671                           
  6672                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6673  0C69  3003               	movlw	3
  6674  0C6A  00C5               	movwf	??_scale
  6675  0C6B  0845               	movf	??_scale,w
  6676  0C6C  00AE               	movwf	___bmul@multiplicand
  6677  0C6D  084A               	movf	scale@scl,w
  6678  0C6E  00A2               	movwf	___awmod@dividend
  6679  0C6F  01A3               	clrf	___awmod@dividend+1
  6680  0C70  1BA2               	btfsc	___awmod@dividend,7
  6681  0C71  03A3               	decf	___awmod@dividend+1,f
  6682  0C72  300A               	movlw	10
  6683  0C73  00A0               	movwf	___awmod@divisor
  6684  0C74  3000               	movlw	0
  6685  0C75  00A1               	movwf	___awmod@divisor+1
  6686  0C76  160A  158A  250B  120A  158A  	fcall	___awmod
  6687  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  6688  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  6689  0C7D  0820               	movf	?___awmod,w
  6690  0C7E  160A  158A  22C0  120A  158A  	fcall	___bmul
  6691  0C83  3E61               	addlw	low (__powers_| (0+32768))
  6692  0C84  0084               	movwf	4
  6693  0C85  3098               	movlw	high (__powers_| (0+32768))
  6694  0C86  1803               	skipnc
  6695  0C87  3E01               	addlw	1
  6696  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  6697  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  6698  0C8A  00FF               	movwf	127
  6699  0C8B  160A  158A  2000  120A  158A  	fcall	stringtab
  6700  0C90  00B2               	movwf	___ftmul@f1
  6701  0C91  160A  158A  2000  120A  158A  	fcall	stringtab
  6702  0C96  00B3               	movwf	___ftmul@f1+1
  6703  0C97  160A  158A  2000  120A  158A  	fcall	stringtab
  6704  0C9C  00B4               	movwf	___ftmul@f1+2
  6705  0C9D  3003               	movlw	3
  6706  0C9E  00C6               	movwf	??_scale+1
  6707  0C9F  0846               	movf	??_scale+1,w
  6708  0CA0  00AE               	movwf	___bmul@multiplicand
  6709  0CA1  300A               	movlw	10
  6710  0CA2  00A6               	movwf	___awdiv@divisor
  6711  0CA3  3000               	movlw	0
  6712  0CA4  00A7               	movwf	___awdiv@divisor+1
  6713  0CA5  084A               	movf	scale@scl,w
  6714  0CA6  00A8               	movwf	___awdiv@dividend
  6715  0CA7  01A9               	clrf	___awdiv@dividend+1
  6716  0CA8  1BA8               	btfsc	___awdiv@dividend,7
  6717  0CA9  03A9               	decf	___awdiv@dividend+1,f
  6718  0CAA  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6719  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  6720  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  6721  0CB1  0826               	movf	?___awdiv,w
  6722  0CB2  3E09               	addlw	9
  6723  0CB3  160A  158A  22C0  120A  158A  	fcall	___bmul
  6724  0CB8  3E61               	addlw	low (__powers_| (0+32768))
  6725  0CB9  0084               	movwf	4
  6726  0CBA  3098               	movlw	high (__powers_| (0+32768))
  6727  0CBB  1803               	skipnc
  6728  0CBC  3E01               	addlw	1
  6729  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  6730  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  6731  0CBF  00FF               	movwf	127
  6732  0CC0  160A  158A  2000  120A  158A  	fcall	stringtab
  6733  0CC5  00B5               	movwf	___ftmul@f2
  6734  0CC6  160A  158A  2000  120A  158A  	fcall	stringtab
  6735  0CCB  00B6               	movwf	___ftmul@f2+1
  6736  0CCC  160A  158A  2000  120A  158A  	fcall	stringtab
  6737  0CD1  00B7               	movwf	___ftmul@f2+2
  6738  0CD2  160A  118A  2371   	fcall	___ftmul
  6739  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  6740  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  6741  0CD7  0832               	movf	?___ftmul,w
  6742  0CD8  00C2               	movwf	?_scale
  6743  0CD9  0833               	movf	?___ftmul+1,w
  6744  0CDA  00C3               	movwf	?_scale+1
  6745  0CDB  0834               	movf	?___ftmul+2,w
  6746  0CDC  00C4               	movwf	?_scale+2
  6747  0CDD  0008               	return
  6748  0CDE                     l3588:	
  6749                           
  6750                           ;doprnt.c: 440: return _powers_[scl];
  6751  0CDE  3003               	movlw	3
  6752  0CDF  00C5               	movwf	??_scale
  6753  0CE0  0845               	movf	??_scale,w
  6754  0CE1  00AE               	movwf	___bmul@multiplicand
  6755  0CE2  084A               	movf	scale@scl,w
  6756  0CE3  160A  158A  22C0  120A  158A  	fcall	___bmul
  6757  0CE8  3E61               	addlw	low (__powers_| (0+32768))
  6758  0CE9  0084               	movwf	4
  6759  0CEA  3098               	movlw	high (__powers_| (0+32768))
  6760  0CEB  1803               	skipnc
  6761  0CEC  3E01               	addlw	1
  6762  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  6763  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  6764  0CEF  00FF               	movwf	127
  6765  0CF0  160A  158A  2000  120A  158A  	fcall	stringtab
  6766  0CF5  00C2               	movwf	?_scale
  6767  0CF6  160A  158A  2000  120A  158A  	fcall	stringtab
  6768  0CFB  00C3               	movwf	?_scale+1
  6769  0CFC  160A  158A  2000   	fcall	stringtab
  6770  0CFF  00C4               	movwf	?_scale+2
  6771  0D00  0008               	return
  6772  0D01                     __end_of_scale:	
  6773                           
  6774                           	psect	text18
  6775  1A82                     __ptext18:	
  6776 ;; *************** function _isdigit *****************
  6777 ;; Defined at:
  6778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  c               1    wreg     unsigned char 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  c               1    5[COMMON] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6792 ;;      Params:         0       0       0       0       0
  6793 ;;      Locals:         2       0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0
  6795 ;;      Totals:         2       0       0       0       0
  6796 ;;Total ram usage:        2 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    1
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		_sprintf
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _isdigit
  6808  1A82                     _isdigit:	
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6812                           ;isdigit@c stored from wreg
  6813  1A82  00F5               	movwf	isdigit@c
  6814  1A83  01F4               	clrf	_isdigit$619
  6815  1A84  303A               	movlw	58
  6816  1A85  0275               	subwf	isdigit@c,w
  6817  1A86  1803               	skipnc
  6818  1A87  2A8E               	goto	l2456
  6819  1A88  3030               	movlw	48
  6820  1A89  0275               	subwf	isdigit@c,w
  6821  1A8A  1C03               	skipc
  6822  1A8B  2A8E               	goto	l2456
  6823  1A8C  01F4               	clrf	_isdigit$619
  6824  1A8D  0AF4               	incf	_isdigit$619,f
  6825  1A8E                     l2456:	
  6826  1A8E  0C74               	rrf	_isdigit$619,w
  6827  1A8F  0008               	return
  6828  1A90                     __end_of_isdigit:	
  6829                           
  6830                           	psect	text19
  6831  0860                     __ptext19:	
  6832 ;; *************** function _fround *****************
  6833 ;; Defined at:
  6834 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  prec            1    wreg     unsigned char 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  prec            1   49[BANK0 ] unsigned char 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  3   34[BANK0 ] unsigned char 
  6841 ;; Registers used:
  6842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6848 ;;      Params:         0       3       0       0       0
  6849 ;;      Locals:         0       7       0       0       0
  6850 ;;      Temps:          0       6       0       0       0
  6851 ;;      Totals:         0      16       0       0       0
  6852 ;;Total ram usage:       16 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    3
  6855 ;; This function calls:
  6856 ;;		___awdiv
  6857 ;;		___awmod
  6858 ;;		___bmul
  6859 ;;		___ftmul
  6860 ;; This function is called by:
  6861 ;;		_sprintf
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           
  6866                           ;psect for function _fround
  6867  0860                     _fround:	
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6871                           ;fround@prec stored from wreg
  6872  0860  1283               	bcf	3,5	;RP0=0, select bank0
  6873  0861  1303               	bcf	3,6	;RP1=0, select bank0
  6874  0862  00D1               	movwf	fround@prec
  6875                           
  6876                           ;doprnt.c: 413: if(prec>=110)
  6877  0863  306E               	movlw	110
  6878  0864  0251               	subwf	fround@prec,w
  6879  0865  1C03               	skipc
  6880  0866  2952               	goto	l3540
  6881                           
  6882                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6883  0867  3003               	movlw	3
  6884  0868  00C5               	movwf	??_fround
  6885  0869  0845               	movf	??_fround,w
  6886  086A  00AE               	movwf	___bmul@multiplicand
  6887  086B  300A               	movlw	10
  6888  086C  00A6               	movwf	___awdiv@divisor
  6889  086D  3000               	movlw	0
  6890  086E  00A7               	movwf	___awdiv@divisor+1
  6891  086F  0851               	movf	fround@prec,w
  6892  0870  00C6               	movwf	??_fround+1
  6893  0871  01C7               	clrf	??_fround+2
  6894  0872  0846               	movf	??_fround+1,w
  6895  0873  00A2               	movwf	___awmod@dividend
  6896  0874  0847               	movf	??_fround+2,w
  6897  0875  00A3               	movwf	___awmod@dividend+1
  6898  0876  3064               	movlw	100
  6899  0877  00A0               	movwf	___awmod@divisor
  6900  0878  3000               	movlw	0
  6901  0879  00A1               	movwf	___awmod@divisor+1
  6902  087A  160A  158A  250B  120A  158A  	fcall	___awmod
  6903  087F  1283               	bcf	3,5	;RP0=0, select bank0
  6904  0880  1303               	bcf	3,6	;RP1=0, select bank0
  6905  0881  0821               	movf	?___awmod+1,w
  6906  0882  00A9               	movwf	___awdiv@dividend+1
  6907  0883  0820               	movf	?___awmod,w
  6908  0884  00A8               	movwf	___awdiv@dividend
  6909  0885  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6910  088A  1283               	bcf	3,5	;RP0=0, select bank0
  6911  088B  1303               	bcf	3,6	;RP1=0, select bank0
  6912  088C  0826               	movf	?___awdiv,w
  6913  088D  3E09               	addlw	9
  6914  088E  160A  158A  22C0  120A  158A  	fcall	___bmul
  6915  0893  3E3A               	addlw	low (__npowers_| (0+32768))
  6916  0894  0084               	movwf	4
  6917  0895  3098               	movlw	high (__npowers_| (0+32768))
  6918  0896  1803               	skipnc
  6919  0897  3E01               	addlw	1
  6920  0898  1283               	bcf	3,5	;RP0=0, select bank0
  6921  0899  1303               	bcf	3,6	;RP1=0, select bank0
  6922  089A  00FF               	movwf	127
  6923  089B  160A  158A  2000  120A  158A  	fcall	stringtab
  6924  08A0  00B2               	movwf	___ftmul@f1
  6925  08A1  160A  158A  2000  120A  158A  	fcall	stringtab
  6926  08A6  00B3               	movwf	___ftmul@f1+1
  6927  08A7  160A  158A  2000  120A  158A  	fcall	stringtab
  6928  08AC  00B4               	movwf	___ftmul@f1+2
  6929  08AD  3003               	movlw	3
  6930  08AE  00C8               	movwf	??_fround+3
  6931  08AF  0848               	movf	??_fround+3,w
  6932  08B0  00AE               	movwf	___bmul@multiplicand
  6933  08B1  3064               	movlw	100
  6934  08B2  00A6               	movwf	___awdiv@divisor
  6935  08B3  3000               	movlw	0
  6936  08B4  00A7               	movwf	___awdiv@divisor+1
  6937  08B5  0851               	movf	fround@prec,w
  6938  08B6  00C9               	movwf	??_fround+4
  6939  08B7  01CA               	clrf	??_fround+5
  6940  08B8  0849               	movf	??_fround+4,w
  6941  08B9  00A8               	movwf	___awdiv@dividend
  6942  08BA  084A               	movf	??_fround+5,w
  6943  08BB  00A9               	movwf	___awdiv@dividend+1
  6944  08BC  160A  158A  25FE  120A  158A  	fcall	___awdiv
  6945  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  6946  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  6947  08C3  0826               	movf	?___awdiv,w
  6948  08C4  3E12               	addlw	18
  6949  08C5  160A  158A  22C0  120A  158A  	fcall	___bmul
  6950  08CA  3E3A               	addlw	low (__npowers_| (0+32768))
  6951  08CB  0084               	movwf	4
  6952  08CC  3098               	movlw	high (__npowers_| (0+32768))
  6953  08CD  1803               	skipnc
  6954  08CE  3E01               	addlw	1
  6955  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  6956  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  6957  08D1  00FF               	movwf	127
  6958  08D2  160A  158A  2000  120A  158A  	fcall	stringtab
  6959  08D7  00B5               	movwf	___ftmul@f2
  6960  08D8  160A  158A  2000  120A  158A  	fcall	stringtab
  6961  08DD  00B6               	movwf	___ftmul@f2+1
  6962  08DE  160A  158A  2000  120A  158A  	fcall	stringtab
  6963  08E3  00B7               	movwf	___ftmul@f2+2
  6964  08E4  160A  118A  2371  120A  158A  	fcall	___ftmul
  6965  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  6966  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  6967  08EB  0832               	movf	?___ftmul,w
  6968  08EC  00CE               	movwf	_fround$853
  6969  08ED  0833               	movf	?___ftmul+1,w
  6970  08EE  00CF               	movwf	_fround$853+1
  6971  08EF  0834               	movf	?___ftmul+2,w
  6972  08F0  00D0               	movwf	_fround$853+2
  6973                           
  6974                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6975  08F1  3003               	movlw	3
  6976  08F2  00C5               	movwf	??_fround
  6977  08F3  0845               	movf	??_fround,w
  6978  08F4  00AE               	movwf	___bmul@multiplicand
  6979  08F5  0851               	movf	fround@prec,w
  6980  08F6  00C6               	movwf	??_fround+1
  6981  08F7  01C7               	clrf	??_fround+2
  6982  08F8  0846               	movf	??_fround+1,w
  6983  08F9  00A2               	movwf	___awmod@dividend
  6984  08FA  0847               	movf	??_fround+2,w
  6985  08FB  00A3               	movwf	___awmod@dividend+1
  6986  08FC  300A               	movlw	10
  6987  08FD  00A0               	movwf	___awmod@divisor
  6988  08FE  3000               	movlw	0
  6989  08FF  00A1               	movwf	___awmod@divisor+1
  6990  0900  160A  158A  250B  120A  158A  	fcall	___awmod
  6991  0905  1283               	bcf	3,5	;RP0=0, select bank0
  6992  0906  1303               	bcf	3,6	;RP1=0, select bank0
  6993  0907  0820               	movf	?___awmod,w
  6994  0908  160A  158A  22C0  120A  158A  	fcall	___bmul
  6995  090D  3E3A               	addlw	low (__npowers_| (0+32768))
  6996  090E  0084               	movwf	4
  6997  090F  3098               	movlw	high (__npowers_| (0+32768))
  6998  0910  1803               	skipnc
  6999  0911  3E01               	addlw	1
  7000  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7001  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7002  0914  00FF               	movwf	127
  7003  0915  160A  158A  2000  120A  158A  	fcall	stringtab
  7004  091A  00B2               	movwf	___ftmul@f1
  7005  091B  160A  158A  2000  120A  158A  	fcall	stringtab
  7006  0920  00B3               	movwf	___ftmul@f1+1
  7007  0921  160A  158A  2000  120A  158A  	fcall	stringtab
  7008  0926  00B4               	movwf	___ftmul@f1+2
  7009  0927  084E               	movf	_fround$853,w
  7010  0928  00B5               	movwf	___ftmul@f2
  7011  0929  084F               	movf	_fround$853+1,w
  7012  092A  00B6               	movwf	___ftmul@f2+1
  7013  092B  0850               	movf	_fround$853+2,w
  7014  092C  00B7               	movwf	___ftmul@f2+2
  7015  092D  160A  118A  2371  120A  158A  	fcall	___ftmul
  7016  0932  1283               	bcf	3,5	;RP0=0, select bank0
  7017  0933  1303               	bcf	3,6	;RP1=0, select bank0
  7018  0934  0832               	movf	?___ftmul,w
  7019  0935  00CB               	movwf	_fround$854
  7020  0936  0833               	movf	?___ftmul+1,w
  7021  0937  00CC               	movwf	_fround$854+1
  7022  0938  0834               	movf	?___ftmul+2,w
  7023  0939  00CD               	movwf	_fround$854+2
  7024                           
  7025                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7026  093A  3000               	movlw	0
  7027  093B  00B2               	movwf	___ftmul@f1
  7028  093C  3000               	movlw	0
  7029  093D  00B3               	movwf	___ftmul@f1+1
  7030  093E  303F               	movlw	63
  7031  093F  00B4               	movwf	___ftmul@f1+2
  7032  0940  084B               	movf	_fround$854,w
  7033  0941  00B5               	movwf	___ftmul@f2
  7034  0942  084C               	movf	_fround$854+1,w
  7035  0943  00B6               	movwf	___ftmul@f2+1
  7036  0944  084D               	movf	_fround$854+2,w
  7037  0945  00B7               	movwf	___ftmul@f2+2
  7038  0946  160A  118A  2371   	fcall	___ftmul
  7039  0949  1283               	bcf	3,5	;RP0=0, select bank0
  7040  094A  1303               	bcf	3,6	;RP1=0, select bank0
  7041  094B  0832               	movf	?___ftmul,w
  7042  094C  00C2               	movwf	?_fround
  7043  094D  0833               	movf	?___ftmul+1,w
  7044  094E  00C3               	movwf	?_fround+1
  7045  094F  0834               	movf	?___ftmul+2,w
  7046  0950  00C4               	movwf	?_fround+2
  7047  0951  0008               	return
  7048  0952                     l3540:	
  7049                           
  7050                           ;doprnt.c: 415: else if(prec > 10)
  7051  0952  300B               	movlw	11
  7052  0953  0251               	subwf	fround@prec,w
  7053  0954  1C03               	skipc
  7054  0955  29E8               	goto	l3548
  7055                           
  7056                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7057  0956  3003               	movlw	3
  7058  0957  00C5               	movwf	??_fround
  7059  0958  0845               	movf	??_fround,w
  7060  0959  00AE               	movwf	___bmul@multiplicand
  7061  095A  0851               	movf	fround@prec,w
  7062  095B  00C6               	movwf	??_fround+1
  7063  095C  01C7               	clrf	??_fround+2
  7064  095D  0846               	movf	??_fround+1,w
  7065  095E  00A2               	movwf	___awmod@dividend
  7066  095F  0847               	movf	??_fround+2,w
  7067  0960  00A3               	movwf	___awmod@dividend+1
  7068  0961  300A               	movlw	10
  7069  0962  00A0               	movwf	___awmod@divisor
  7070  0963  3000               	movlw	0
  7071  0964  00A1               	movwf	___awmod@divisor+1
  7072  0965  160A  158A  250B  120A  158A  	fcall	___awmod
  7073  096A  1283               	bcf	3,5	;RP0=0, select bank0
  7074  096B  1303               	bcf	3,6	;RP1=0, select bank0
  7075  096C  0820               	movf	?___awmod,w
  7076  096D  160A  158A  22C0  120A  158A  	fcall	___bmul
  7077  0972  3E3A               	addlw	low (__npowers_| (0+32768))
  7078  0973  0084               	movwf	4
  7079  0974  3098               	movlw	high (__npowers_| (0+32768))
  7080  0975  1803               	skipnc
  7081  0976  3E01               	addlw	1
  7082  0977  1283               	bcf	3,5	;RP0=0, select bank0
  7083  0978  1303               	bcf	3,6	;RP1=0, select bank0
  7084  0979  00FF               	movwf	127
  7085  097A  160A  158A  2000  120A  158A  	fcall	stringtab
  7086  097F  00B2               	movwf	___ftmul@f1
  7087  0980  160A  158A  2000  120A  158A  	fcall	stringtab
  7088  0985  00B3               	movwf	___ftmul@f1+1
  7089  0986  160A  158A  2000  120A  158A  	fcall	stringtab
  7090  098B  00B4               	movwf	___ftmul@f1+2
  7091  098C  3003               	movlw	3
  7092  098D  00C8               	movwf	??_fround+3
  7093  098E  0848               	movf	??_fround+3,w
  7094  098F  00AE               	movwf	___bmul@multiplicand
  7095  0990  300A               	movlw	10
  7096  0991  00A6               	movwf	___awdiv@divisor
  7097  0992  3000               	movlw	0
  7098  0993  00A7               	movwf	___awdiv@divisor+1
  7099  0994  0851               	movf	fround@prec,w
  7100  0995  00C9               	movwf	??_fround+4
  7101  0996  01CA               	clrf	??_fround+5
  7102  0997  0849               	movf	??_fround+4,w
  7103  0998  00A8               	movwf	___awdiv@dividend
  7104  0999  084A               	movf	??_fround+5,w
  7105  099A  00A9               	movwf	___awdiv@dividend+1
  7106  099B  160A  158A  25FE  120A  158A  	fcall	___awdiv
  7107  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  7108  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  7109  09A2  0826               	movf	?___awdiv,w
  7110  09A3  3E09               	addlw	9
  7111  09A4  160A  158A  22C0  120A  158A  	fcall	___bmul
  7112  09A9  3E3A               	addlw	low (__npowers_| (0+32768))
  7113  09AA  0084               	movwf	4
  7114  09AB  3098               	movlw	high (__npowers_| (0+32768))
  7115  09AC  1803               	skipnc
  7116  09AD  3E01               	addlw	1
  7117  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  7118  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  7119  09B0  00FF               	movwf	127
  7120  09B1  160A  158A  2000  120A  158A  	fcall	stringtab
  7121  09B6  00B5               	movwf	___ftmul@f2
  7122  09B7  160A  158A  2000  120A  158A  	fcall	stringtab
  7123  09BC  00B6               	movwf	___ftmul@f2+1
  7124  09BD  160A  158A  2000  120A  158A  	fcall	stringtab
  7125  09C2  00B7               	movwf	___ftmul@f2+2
  7126  09C3  160A  118A  2371  120A  158A  	fcall	___ftmul
  7127  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  7128  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  7129  09CA  0832               	movf	?___ftmul,w
  7130  09CB  00CE               	movwf	_fround$853
  7131  09CC  0833               	movf	?___ftmul+1,w
  7132  09CD  00CF               	movwf	_fround$853+1
  7133  09CE  0834               	movf	?___ftmul+2,w
  7134  09CF  00D0               	movwf	_fround$853+2
  7135                           
  7136                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7137  09D0  3000               	movlw	0
  7138  09D1  00B2               	movwf	___ftmul@f1
  7139  09D2  3000               	movlw	0
  7140  09D3  00B3               	movwf	___ftmul@f1+1
  7141  09D4  303F               	movlw	63
  7142  09D5  00B4               	movwf	___ftmul@f1+2
  7143  09D6  084E               	movf	_fround$853,w
  7144  09D7  00B5               	movwf	___ftmul@f2
  7145  09D8  084F               	movf	_fround$853+1,w
  7146  09D9  00B6               	movwf	___ftmul@f2+1
  7147  09DA  0850               	movf	_fround$853+2,w
  7148  09DB  00B7               	movwf	___ftmul@f2+2
  7149  09DC  160A  118A  2371   	fcall	___ftmul
  7150  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  7151  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  7152  09E1  0832               	movf	?___ftmul,w
  7153  09E2  00C2               	movwf	?_fround
  7154  09E3  0833               	movf	?___ftmul+1,w
  7155  09E4  00C3               	movwf	?_fround+1
  7156  09E5  0834               	movf	?___ftmul+2,w
  7157  09E6  00C4               	movwf	?_fround+2
  7158  09E7  0008               	return
  7159  09E8                     l3548:	
  7160                           
  7161                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7162  09E8  3000               	movlw	0
  7163  09E9  00B2               	movwf	___ftmul@f1
  7164  09EA  3000               	movlw	0
  7165  09EB  00B3               	movwf	___ftmul@f1+1
  7166  09EC  303F               	movlw	63
  7167  09ED  00B4               	movwf	___ftmul@f1+2
  7168  09EE  3003               	movlw	3
  7169  09EF  00C5               	movwf	??_fround
  7170  09F0  0845               	movf	??_fround,w
  7171  09F1  00AE               	movwf	___bmul@multiplicand
  7172  09F2  0851               	movf	fround@prec,w
  7173  09F3  160A  158A  22C0  120A  158A  	fcall	___bmul
  7174  09F8  3E3A               	addlw	low (__npowers_| (0+32768))
  7175  09F9  0084               	movwf	4
  7176  09FA  3098               	movlw	high (__npowers_| (0+32768))
  7177  09FB  1803               	skipnc
  7178  09FC  3E01               	addlw	1
  7179  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  7180  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  7181  09FF  00FF               	movwf	127
  7182  0A00  160A  158A  2000  120A  158A  	fcall	stringtab
  7183  0A05  00B5               	movwf	___ftmul@f2
  7184  0A06  160A  158A  2000  120A  158A  	fcall	stringtab
  7185  0A0B  00B6               	movwf	___ftmul@f2+1
  7186  0A0C  160A  158A  2000  120A  158A  	fcall	stringtab
  7187  0A11  00B7               	movwf	___ftmul@f2+2
  7188  0A12  160A  118A  2371   	fcall	___ftmul
  7189  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  7190  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  7191  0A17  0832               	movf	?___ftmul,w
  7192  0A18  00C2               	movwf	?_fround
  7193  0A19  0833               	movf	?___ftmul+1,w
  7194  0A1A  00C3               	movwf	?_fround+1
  7195  0A1B  0834               	movf	?___ftmul+2,w
  7196  0A1C  00C4               	movwf	?_fround+2
  7197  0A1D  0008               	return
  7198  0A1E                     __end_of_fround:	
  7199                           
  7200                           	psect	text20
  7201  1371                     __ptext20:	
  7202 ;; *************** function ___ftmul *****************
  7203 ;; Defined at:
  7204 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  f1              3   18[BANK0 ] float 
  7207 ;;  f2              3   21[BANK0 ] float 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  f3_as_produc    3   29[BANK0 ] unsigned um
  7210 ;;  sign            1   33[BANK0 ] unsigned char 
  7211 ;;  cntr            1   32[BANK0 ] unsigned char 
  7212 ;;  exp             1   28[BANK0 ] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  3   18[BANK0 ] float 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, pclath, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7222 ;;      Params:         0       6       0       0       0
  7223 ;;      Locals:         0       6       0       0       0
  7224 ;;      Temps:          0       4       0       0       0
  7225 ;;      Totals:         0      16       0       0       0
  7226 ;;Total ram usage:       16 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    2
  7229 ;; This function calls:
  7230 ;;		___ftpack
  7231 ;; This function is called by:
  7232 ;;		_sampleBatteryCells
  7233 ;;		_sampleReference
  7234 ;;		_sampleVoltage
  7235 ;;		_sampleCurrent
  7236 ;;		_fround
  7237 ;;		_scale
  7238 ;;		_sprintf
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function ___ftmul
  7244  1371                     ___ftmul:	
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7248  1371  1283               	bcf	3,5	;RP0=0, select bank0
  7249  1372  1303               	bcf	3,6	;RP1=0, select bank0
  7250  1373  0832               	movf	___ftmul@f1,w
  7251  1374  00B8               	movwf	??___ftmul
  7252  1375  0833               	movf	___ftmul@f1+1,w
  7253  1376  00B9               	movwf	??___ftmul+1
  7254  1377  0834               	movf	___ftmul@f1+2,w
  7255  1378  00BA               	movwf	??___ftmul+2
  7256  1379  1003               	clrc
  7257  137A  0D39               	rlf	??___ftmul+1,w
  7258  137B  0D3A               	rlf	??___ftmul+2,w
  7259  137C  00BB               	movwf	??___ftmul+3
  7260  137D  083B               	movf	??___ftmul+3,w
  7261  137E  00BC               	movwf	___ftmul@exp
  7262  137F  083C               	movf	___ftmul@exp,w
  7263  1380  1D03               	btfss	3,2
  7264  1381  2B89               	goto	l3444
  7265  1382  3000               	movlw	0
  7266  1383  00B2               	movwf	?___ftmul
  7267  1384  3000               	movlw	0
  7268  1385  00B3               	movwf	?___ftmul+1
  7269  1386  3000               	movlw	0
  7270  1387  00B4               	movwf	?___ftmul+2
  7271  1388  0008               	return
  7272  1389                     l3444:	
  7273  1389  0835               	movf	___ftmul@f2,w
  7274  138A  00B8               	movwf	??___ftmul
  7275  138B  0836               	movf	___ftmul@f2+1,w
  7276  138C  00B9               	movwf	??___ftmul+1
  7277  138D  0837               	movf	___ftmul@f2+2,w
  7278  138E  00BA               	movwf	??___ftmul+2
  7279  138F  1003               	clrc
  7280  1390  0D39               	rlf	??___ftmul+1,w
  7281  1391  0D3A               	rlf	??___ftmul+2,w
  7282  1392  00BB               	movwf	??___ftmul+3
  7283  1393  083B               	movf	??___ftmul+3,w
  7284  1394  00C1               	movwf	___ftmul@sign
  7285  1395  0841               	movf	___ftmul@sign,w
  7286  1396  1D03               	btfss	3,2
  7287  1397  2B9F               	goto	l3450
  7288  1398  3000               	movlw	0
  7289  1399  00B2               	movwf	?___ftmul
  7290  139A  3000               	movlw	0
  7291  139B  00B3               	movwf	?___ftmul+1
  7292  139C  3000               	movlw	0
  7293  139D  00B4               	movwf	?___ftmul+2
  7294  139E  0008               	return
  7295  139F                     l3450:	
  7296  139F  0841               	movf	___ftmul@sign,w
  7297  13A0  3E7B               	addlw	123
  7298  13A1  00B8               	movwf	??___ftmul
  7299  13A2  0838               	movf	??___ftmul,w
  7300  13A3  07BC               	addwf	___ftmul@exp,f
  7301  13A4  0832               	movf	___ftmul@f1,w
  7302  13A5  00B8               	movwf	??___ftmul
  7303  13A6  0833               	movf	___ftmul@f1+1,w
  7304  13A7  00B9               	movwf	??___ftmul+1
  7305  13A8  0834               	movf	___ftmul@f1+2,w
  7306  13A9  00BA               	movwf	??___ftmul+2
  7307  13AA  3010               	movlw	16
  7308  13AB                     u4815:	
  7309  13AB  1003               	clrc
  7310  13AC  0CBA               	rrf	??___ftmul+2,f
  7311  13AD  0CB9               	rrf	??___ftmul+1,f
  7312  13AE  0CB8               	rrf	??___ftmul,f
  7313  13AF  3EFF               	addlw	-1
  7314  13B0  1D03               	skipz
  7315  13B1  2BAB               	goto	u4815
  7316  13B2  0838               	movf	??___ftmul,w
  7317  13B3  00BB               	movwf	??___ftmul+3
  7318  13B4  083B               	movf	??___ftmul+3,w
  7319  13B5  00C1               	movwf	___ftmul@sign
  7320  13B6  0835               	movf	___ftmul@f2,w
  7321  13B7  00B8               	movwf	??___ftmul
  7322  13B8  0836               	movf	___ftmul@f2+1,w
  7323  13B9  00B9               	movwf	??___ftmul+1
  7324  13BA  0837               	movf	___ftmul@f2+2,w
  7325  13BB  00BA               	movwf	??___ftmul+2
  7326  13BC  3010               	movlw	16
  7327  13BD                     u4825:	
  7328  13BD  1003               	clrc
  7329  13BE  0CBA               	rrf	??___ftmul+2,f
  7330  13BF  0CB9               	rrf	??___ftmul+1,f
  7331  13C0  0CB8               	rrf	??___ftmul,f
  7332  13C1  3EFF               	addlw	-1
  7333  13C2  1D03               	skipz
  7334  13C3  2BBD               	goto	u4825
  7335  13C4  0838               	movf	??___ftmul,w
  7336  13C5  00BB               	movwf	??___ftmul+3
  7337  13C6  083B               	movf	??___ftmul+3,w
  7338  13C7  06C1               	xorwf	___ftmul@sign,f
  7339  13C8  3080               	movlw	128
  7340  13C9  00B8               	movwf	??___ftmul
  7341  13CA  0838               	movf	??___ftmul,w
  7342  13CB  05C1               	andwf	___ftmul@sign,f
  7343  13CC  17B3               	bsf	___ftmul@f1+1,7
  7344  13CD  17B6               	bsf	___ftmul@f2+1,7
  7345  13CE  30FF               	movlw	255
  7346  13CF  05B5               	andwf	___ftmul@f2,f
  7347  13D0  30FF               	movlw	255
  7348  13D1  05B6               	andwf	___ftmul@f2+1,f
  7349  13D2  3000               	movlw	0
  7350  13D3  05B7               	andwf	___ftmul@f2+2,f
  7351  13D4  3000               	movlw	0
  7352  13D5  00BD               	movwf	___ftmul@f3_as_product
  7353  13D6  3000               	movlw	0
  7354  13D7  00BE               	movwf	___ftmul@f3_as_product+1
  7355  13D8  3000               	movlw	0
  7356  13D9  00BF               	movwf	___ftmul@f3_as_product+2
  7357  13DA  3007               	movlw	7
  7358  13DB  00B8               	movwf	??___ftmul
  7359  13DC  0838               	movf	??___ftmul,w
  7360  13DD  00C0               	movwf	___ftmul@cntr
  7361  13DE                     l3462:	
  7362  13DE  1C32               	btfss	___ftmul@f1,0
  7363  13DF  2BEE               	goto	l3466
  7364  13E0  0835               	movf	___ftmul@f2,w
  7365  13E1  07BD               	addwf	___ftmul@f3_as_product,f
  7366  13E2  0836               	movf	___ftmul@f2+1,w
  7367  13E3  1103               	clrz
  7368  13E4  1803               	skipnc
  7369  13E5  0A36               	incf	___ftmul@f2+1,w
  7370  13E6  1D03               	btfss	3,2
  7371  13E7  07BE               	addwf	___ftmul@f3_as_product+1,f
  7372  13E8  0837               	movf	___ftmul@f2+2,w
  7373  13E9  1103               	clrz
  7374  13EA  1803               	skipnc
  7375  13EB  0A37               	incf	___ftmul@f2+2,w
  7376  13EC  1D03               	btfss	3,2
  7377  13ED  07BF               	addwf	___ftmul@f3_as_product+2,f
  7378  13EE                     l3466:	
  7379  13EE  3001               	movlw	1
  7380  13EF                     u4855:	
  7381  13EF  1003               	clrc
  7382  13F0  0CB4               	rrf	___ftmul@f1+2,f
  7383  13F1  0CB3               	rrf	___ftmul@f1+1,f
  7384  13F2  0CB2               	rrf	___ftmul@f1,f
  7385  13F3  3EFF               	addlw	-1
  7386  13F4  1D03               	skipz
  7387  13F5  2BEF               	goto	u4855
  7388  13F6  3001               	movlw	1
  7389  13F7                     u4865:	
  7390  13F7  1003               	clrc
  7391  13F8  0DB5               	rlf	___ftmul@f2,f
  7392  13F9  0DB6               	rlf	___ftmul@f2+1,f
  7393  13FA  0DB7               	rlf	___ftmul@f2+2,f
  7394  13FB  3EFF               	addlw	-1
  7395  13FC  1D03               	skipz
  7396  13FD  2BF7               	goto	u4865
  7397  13FE  3001               	movlw	1
  7398  13FF  02C0               	subwf	___ftmul@cntr,f
  7399  1400  1D03               	btfss	3,2
  7400  1401  2BDE               	goto	l3462
  7401  1402  3009               	movlw	9
  7402  1403  00B8               	movwf	??___ftmul
  7403  1404  0838               	movf	??___ftmul,w
  7404  1405  00C0               	movwf	___ftmul@cntr
  7405  1406                     l3474:	
  7406  1406  1C32               	btfss	___ftmul@f1,0
  7407  1407  2C16               	goto	l3478
  7408  1408  0835               	movf	___ftmul@f2,w
  7409  1409  07BD               	addwf	___ftmul@f3_as_product,f
  7410  140A  0836               	movf	___ftmul@f2+1,w
  7411  140B  1103               	clrz
  7412  140C  1803               	skipnc
  7413  140D  0A36               	incf	___ftmul@f2+1,w
  7414  140E  1D03               	btfss	3,2
  7415  140F  07BE               	addwf	___ftmul@f3_as_product+1,f
  7416  1410  0837               	movf	___ftmul@f2+2,w
  7417  1411  1103               	clrz
  7418  1412  1803               	skipnc
  7419  1413  0A37               	incf	___ftmul@f2+2,w
  7420  1414  1D03               	btfss	3,2
  7421  1415  07BF               	addwf	___ftmul@f3_as_product+2,f
  7422  1416                     l3478:	
  7423  1416  3001               	movlw	1
  7424  1417                     u4905:	
  7425  1417  1003               	clrc
  7426  1418  0CB4               	rrf	___ftmul@f1+2,f
  7427  1419  0CB3               	rrf	___ftmul@f1+1,f
  7428  141A  0CB2               	rrf	___ftmul@f1,f
  7429  141B  3EFF               	addlw	-1
  7430  141C  1D03               	skipz
  7431  141D  2C17               	goto	u4905
  7432  141E  3001               	movlw	1
  7433  141F                     u4915:	
  7434  141F  1003               	clrc
  7435  1420  0CBF               	rrf	___ftmul@f3_as_product+2,f
  7436  1421  0CBE               	rrf	___ftmul@f3_as_product+1,f
  7437  1422  0CBD               	rrf	___ftmul@f3_as_product,f
  7438  1423  3EFF               	addlw	-1
  7439  1424  1D03               	skipz
  7440  1425  2C1F               	goto	u4915
  7441  1426  3001               	movlw	1
  7442  1427  02C0               	subwf	___ftmul@cntr,f
  7443  1428  1D03               	btfss	3,2
  7444  1429  2C06               	goto	l3474
  7445  142A  083D               	movf	___ftmul@f3_as_product,w
  7446  142B  00A0               	movwf	___ftpack@arg
  7447  142C  083E               	movf	___ftmul@f3_as_product+1,w
  7448  142D  00A1               	movwf	___ftpack@arg+1
  7449  142E  083F               	movf	___ftmul@f3_as_product+2,w
  7450  142F  00A2               	movwf	___ftpack@arg+2
  7451  1430  083C               	movf	___ftmul@exp,w
  7452  1431  00B8               	movwf	??___ftmul
  7453  1432  0838               	movf	??___ftmul,w
  7454  1433  00A3               	movwf	___ftpack@exp
  7455  1434  0841               	movf	___ftmul@sign,w
  7456  1435  00B9               	movwf	??___ftmul+1
  7457  1436  0839               	movf	??___ftmul+1,w
  7458  1437  00A4               	movwf	___ftpack@sign
  7459  1438  160A  158A  2723   	fcall	___ftpack
  7460  143B  1283               	bcf	3,5	;RP0=0, select bank0
  7461  143C  1303               	bcf	3,6	;RP1=0, select bank0
  7462  143D  0820               	movf	?___ftpack,w
  7463  143E  00B2               	movwf	?___ftmul
  7464  143F  0821               	movf	?___ftpack+1,w
  7465  1440  00B3               	movwf	?___ftmul+1
  7466  1441  0822               	movf	?___ftpack+2,w
  7467  1442  00B4               	movwf	?___ftmul+2
  7468  1443  0008               	return
  7469  1444                     __end_of___ftmul:	
  7470                           
  7471                           	psect	text21
  7472  1D0B                     __ptext21:	
  7473 ;; *************** function ___awmod *****************
  7474 ;; Defined at:
  7475 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  divisor         2    0[BANK0 ] int 
  7478 ;;  dividend        2    2[BANK0 ] int 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  sign            1    5[BANK0 ] unsigned char 
  7481 ;;  counter         1    4[BANK0 ] unsigned char 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  2    0[BANK0 ] int 
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7491 ;;      Params:         0       4       0       0       0
  7492 ;;      Locals:         0       2       0       0       0
  7493 ;;      Temps:          1       0       0       0       0
  7494 ;;      Totals:         1       6       0       0       0
  7495 ;;Total ram usage:        7 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    1
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_fround
  7502 ;;		_scale
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function ___awmod
  7508  1D0B                     ___awmod:	
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7512  1D0B  1283               	bcf	3,5	;RP0=0, select bank0
  7513  1D0C  1303               	bcf	3,6	;RP1=0, select bank0
  7514  1D0D  01A5               	clrf	___awmod@sign
  7515  1D0E  1FA3               	btfss	___awmod@dividend+1,7
  7516  1D0F  2D17               	goto	l3338
  7517  1D10  09A2               	comf	___awmod@dividend,f
  7518  1D11  09A3               	comf	___awmod@dividend+1,f
  7519  1D12  0AA2               	incf	___awmod@dividend,f
  7520  1D13  1903               	skipnz
  7521  1D14  0AA3               	incf	___awmod@dividend+1,f
  7522  1D15  01A5               	clrf	___awmod@sign
  7523  1D16  0AA5               	incf	___awmod@sign,f
  7524  1D17                     l3338:	
  7525  1D17  1FA1               	btfss	___awmod@divisor+1,7
  7526  1D18  2D1E               	goto	l3342
  7527  1D19  09A0               	comf	___awmod@divisor,f
  7528  1D1A  09A1               	comf	___awmod@divisor+1,f
  7529  1D1B  0AA0               	incf	___awmod@divisor,f
  7530  1D1C  1903               	skipnz
  7531  1D1D  0AA1               	incf	___awmod@divisor+1,f
  7532  1D1E                     l3342:	
  7533  1D1E  0820               	movf	___awmod@divisor,w
  7534  1D1F  0421               	iorwf	___awmod@divisor+1,w
  7535  1D20  1903               	btfsc	3,2
  7536  1D21  2D4B               	goto	l3360
  7537  1D22  01A4               	clrf	___awmod@counter
  7538  1D23  0AA4               	incf	___awmod@counter,f
  7539  1D24                     l3350:	
  7540  1D24  1BA1               	btfsc	___awmod@divisor+1,7
  7541  1D25  2D32               	goto	l3352
  7542  1D26  3001               	movlw	1
  7543  1D27                     u4495:	
  7544  1D27  1003               	clrc
  7545  1D28  0DA0               	rlf	___awmod@divisor,f
  7546  1D29  0DA1               	rlf	___awmod@divisor+1,f
  7547  1D2A  3EFF               	addlw	-1
  7548  1D2B  1D03               	skipz
  7549  1D2C  2D27               	goto	u4495
  7550  1D2D  3001               	movlw	1
  7551  1D2E  00F4               	movwf	??___awmod
  7552  1D2F  0874               	movf	??___awmod,w
  7553  1D30  07A4               	addwf	___awmod@counter,f
  7554  1D31  2D24               	goto	l3350
  7555  1D32                     l3352:	
  7556  1D32  0821               	movf	___awmod@divisor+1,w
  7557  1D33  0223               	subwf	___awmod@dividend+1,w
  7558  1D34  1D03               	skipz
  7559  1D35  2D38               	goto	u4515
  7560  1D36  0820               	movf	___awmod@divisor,w
  7561  1D37  0222               	subwf	___awmod@dividend,w
  7562  1D38                     u4515:	
  7563  1D38  1C03               	skipc
  7564  1D39  2D40               	goto	l3356
  7565  1D3A  0820               	movf	___awmod@divisor,w
  7566  1D3B  02A2               	subwf	___awmod@dividend,f
  7567  1D3C  0821               	movf	___awmod@divisor+1,w
  7568  1D3D  1C03               	skipc
  7569  1D3E  03A3               	decf	___awmod@dividend+1,f
  7570  1D3F  02A3               	subwf	___awmod@dividend+1,f
  7571  1D40                     l3356:	
  7572  1D40  3001               	movlw	1
  7573  1D41                     u4525:	
  7574  1D41  1003               	clrc
  7575  1D42  0CA1               	rrf	___awmod@divisor+1,f
  7576  1D43  0CA0               	rrf	___awmod@divisor,f
  7577  1D44  3EFF               	addlw	-1
  7578  1D45  1D03               	skipz
  7579  1D46  2D41               	goto	u4525
  7580  1D47  3001               	movlw	1
  7581  1D48  02A4               	subwf	___awmod@counter,f
  7582  1D49  1D03               	btfss	3,2
  7583  1D4A  2D32               	goto	l3352
  7584  1D4B                     l3360:	
  7585  1D4B  0825               	movf	___awmod@sign,w
  7586  1D4C  1903               	btfsc	3,2
  7587  1D4D  2D53               	goto	l3364
  7588  1D4E  09A2               	comf	___awmod@dividend,f
  7589  1D4F  09A3               	comf	___awmod@dividend+1,f
  7590  1D50  0AA2               	incf	___awmod@dividend,f
  7591  1D51  1903               	skipnz
  7592  1D52  0AA3               	incf	___awmod@dividend+1,f
  7593  1D53                     l3364:	
  7594  1D53  0823               	movf	___awmod@dividend+1,w
  7595  1D54  00A1               	movwf	?___awmod+1
  7596  1D55  0822               	movf	___awmod@dividend,w
  7597  1D56  00A0               	movwf	?___awmod
  7598  1D57  0008               	return
  7599  1D58                     __end_of___awmod:	
  7600                           
  7601                           	psect	text22
  7602  1DFE                     __ptext22:	
  7603 ;; *************** function ___awdiv *****************
  7604 ;; Defined at:
  7605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  divisor         2    6[BANK0 ] int 
  7608 ;;  dividend        2    8[BANK0 ] int 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  quotient        2   12[BANK0 ] int 
  7611 ;;  sign            1   11[BANK0 ] unsigned char 
  7612 ;;  counter         1   10[BANK0 ] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  2    6[BANK0 ] int 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7622 ;;      Params:         0       4       0       0       0
  7623 ;;      Locals:         0       4       0       0       0
  7624 ;;      Temps:          1       0       0       0       0
  7625 ;;      Totals:         1       8       0       0       0
  7626 ;;Total ram usage:        9 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    1
  7629 ;; This function calls:
  7630 ;;		Nothing
  7631 ;; This function is called by:
  7632 ;;		_fround
  7633 ;;		_scale
  7634 ;;		_sprintf
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function ___awdiv
  7640  1DFE                     ___awdiv:	
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7644  1DFE  1283               	bcf	3,5	;RP0=0, select bank0
  7645  1DFF  1303               	bcf	3,6	;RP1=0, select bank0
  7646  1E00  01AB               	clrf	___awdiv@sign
  7647  1E01  1FA7               	btfss	___awdiv@divisor+1,7
  7648  1E02  2E0A               	goto	l2150
  7649  1E03  09A6               	comf	___awdiv@divisor,f
  7650  1E04  09A7               	comf	___awdiv@divisor+1,f
  7651  1E05  0AA6               	incf	___awdiv@divisor,f
  7652  1E06  1903               	skipnz
  7653  1E07  0AA7               	incf	___awdiv@divisor+1,f
  7654  1E08  01AB               	clrf	___awdiv@sign
  7655  1E09  0AAB               	incf	___awdiv@sign,f
  7656  1E0A                     l2150:	
  7657  1E0A  1FA9               	btfss	___awdiv@dividend+1,7
  7658  1E0B  2E15               	goto	l2156
  7659  1E0C  09A8               	comf	___awdiv@dividend,f
  7660  1E0D  09A9               	comf	___awdiv@dividend+1,f
  7661  1E0E  0AA8               	incf	___awdiv@dividend,f
  7662  1E0F  1903               	skipnz
  7663  1E10  0AA9               	incf	___awdiv@dividend+1,f
  7664  1E11  3001               	movlw	1
  7665  1E12  00F5               	movwf	??___awdiv
  7666  1E13  0875               	movf	??___awdiv,w
  7667  1E14  06AB               	xorwf	___awdiv@sign,f
  7668  1E15                     l2156:	
  7669  1E15  01AC               	clrf	___awdiv@quotient
  7670  1E16  01AD               	clrf	___awdiv@quotient+1
  7671  1E17  0826               	movf	___awdiv@divisor,w
  7672  1E18  0427               	iorwf	___awdiv@divisor+1,w
  7673  1E19  1903               	btfsc	3,2
  7674  1E1A  2E4C               	goto	l2178
  7675  1E1B  01AA               	clrf	___awdiv@counter
  7676  1E1C  0AAA               	incf	___awdiv@counter,f
  7677  1E1D                     l2166:	
  7678  1E1D  1BA7               	btfsc	___awdiv@divisor+1,7
  7679  1E1E  2E2B               	goto	l2168
  7680  1E1F  3001               	movlw	1
  7681  1E20                     u2375:	
  7682  1E20  1003               	clrc
  7683  1E21  0DA6               	rlf	___awdiv@divisor,f
  7684  1E22  0DA7               	rlf	___awdiv@divisor+1,f
  7685  1E23  3EFF               	addlw	-1
  7686  1E24  1D03               	skipz
  7687  1E25  2E20               	goto	u2375
  7688  1E26  3001               	movlw	1
  7689  1E27  00F5               	movwf	??___awdiv
  7690  1E28  0875               	movf	??___awdiv,w
  7691  1E29  07AA               	addwf	___awdiv@counter,f
  7692  1E2A  2E1D               	goto	l2166
  7693  1E2B                     l2168:	
  7694  1E2B  3001               	movlw	1
  7695  1E2C                     u2395:	
  7696  1E2C  1003               	clrc
  7697  1E2D  0DAC               	rlf	___awdiv@quotient,f
  7698  1E2E  0DAD               	rlf	___awdiv@quotient+1,f
  7699  1E2F  3EFF               	addlw	-1
  7700  1E30  1D03               	skipz
  7701  1E31  2E2C               	goto	u2395
  7702  1E32  0827               	movf	___awdiv@divisor+1,w
  7703  1E33  0229               	subwf	___awdiv@dividend+1,w
  7704  1E34  1D03               	skipz
  7705  1E35  2E38               	goto	u2405
  7706  1E36  0826               	movf	___awdiv@divisor,w
  7707  1E37  0228               	subwf	___awdiv@dividend,w
  7708  1E38                     u2405:	
  7709  1E38  1C03               	skipc
  7710  1E39  2E41               	goto	l2174
  7711  1E3A  0826               	movf	___awdiv@divisor,w
  7712  1E3B  02A8               	subwf	___awdiv@dividend,f
  7713  1E3C  0827               	movf	___awdiv@divisor+1,w
  7714  1E3D  1C03               	skipc
  7715  1E3E  03A9               	decf	___awdiv@dividend+1,f
  7716  1E3F  02A9               	subwf	___awdiv@dividend+1,f
  7717  1E40  142C               	bsf	___awdiv@quotient,0
  7718  1E41                     l2174:	
  7719  1E41  3001               	movlw	1
  7720  1E42                     u2415:	
  7721  1E42  1003               	clrc
  7722  1E43  0CA7               	rrf	___awdiv@divisor+1,f
  7723  1E44  0CA6               	rrf	___awdiv@divisor,f
  7724  1E45  3EFF               	addlw	-1
  7725  1E46  1D03               	skipz
  7726  1E47  2E42               	goto	u2415
  7727  1E48  3001               	movlw	1
  7728  1E49  02AA               	subwf	___awdiv@counter,f
  7729  1E4A  1D03               	btfss	3,2
  7730  1E4B  2E2B               	goto	l2168
  7731  1E4C                     l2178:	
  7732  1E4C  082B               	movf	___awdiv@sign,w
  7733  1E4D  1903               	btfsc	3,2
  7734  1E4E  2E54               	goto	l2182
  7735  1E4F  09AC               	comf	___awdiv@quotient,f
  7736  1E50  09AD               	comf	___awdiv@quotient+1,f
  7737  1E51  0AAC               	incf	___awdiv@quotient,f
  7738  1E52  1903               	skipnz
  7739  1E53  0AAD               	incf	___awdiv@quotient+1,f
  7740  1E54                     l2182:	
  7741  1E54  082D               	movf	___awdiv@quotient+1,w
  7742  1E55  00A7               	movwf	?___awdiv+1
  7743  1E56  082C               	movf	___awdiv@quotient,w
  7744  1E57  00A6               	movwf	?___awdiv
  7745  1E58  0008               	return
  7746  1E59                     __end_of___awdiv:	
  7747                           
  7748                           	psect	text23
  7749  12AE                     __ptext23:	
  7750 ;; *************** function __tdiv_to_l_ *****************
  7751 ;; Defined at:
  7752 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  f1              3    0[BANK0 ] float 
  7755 ;;  f2              3    3[BANK0 ] float 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  quot            4   10[BANK0 ] unsigned long 
  7758 ;;  exp1            1   15[BANK0 ] unsigned char 
  7759 ;;  cntr            1   14[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  4    0[BANK0 ] unsigned long 
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7769 ;;      Params:         0       6       0       0       0
  7770 ;;      Locals:         0       6       0       0       0
  7771 ;;      Temps:          0       4       0       0       0
  7772 ;;      Totals:         0      16       0       0       0
  7773 ;;Total ram usage:       16 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    1
  7776 ;; This function calls:
  7777 ;;		Nothing
  7778 ;; This function is called by:
  7779 ;;		_sprintf
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function __tdiv_to_l_
  7785  12AE                     __tdiv_to_l_:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7789  12AE  1283               	bcf	3,5	;RP0=0, select bank0
  7790  12AF  1303               	bcf	3,6	;RP1=0, select bank0
  7791  12B0  0820               	movf	__tdiv_to_l_@f1,w
  7792  12B1  00A6               	movwf	??__tdiv_to_l_
  7793  12B2  0821               	movf	__tdiv_to_l_@f1+1,w
  7794  12B3  00A7               	movwf	??__tdiv_to_l_+1
  7795  12B4  0822               	movf	__tdiv_to_l_@f1+2,w
  7796  12B5  00A8               	movwf	??__tdiv_to_l_+2
  7797  12B6  1003               	clrc
  7798  12B7  0D27               	rlf	??__tdiv_to_l_+1,w
  7799  12B8  0D28               	rlf	??__tdiv_to_l_+2,w
  7800  12B9  00A9               	movwf	??__tdiv_to_l_+3
  7801  12BA  0829               	movf	??__tdiv_to_l_+3,w
  7802  12BB  00AF               	movwf	__tdiv_to_l_@exp1
  7803  12BC  082F               	movf	__tdiv_to_l_@exp1,w
  7804  12BD  1D03               	btfss	3,2
  7805  12BE  2AC8               	goto	l3598
  7806  12BF  3000               	movlw	0
  7807  12C0  00A3               	movwf	?__tdiv_to_l_+3
  7808  12C1  3000               	movlw	0
  7809  12C2  00A2               	movwf	?__tdiv_to_l_+2
  7810  12C3  3000               	movlw	0
  7811  12C4  00A1               	movwf	?__tdiv_to_l_+1
  7812  12C5  3000               	movlw	0
  7813  12C6  00A0               	movwf	?__tdiv_to_l_
  7814  12C7  0008               	return
  7815  12C8                     l3598:	
  7816  12C8  0823               	movf	__tdiv_to_l_@f2,w
  7817  12C9  00A6               	movwf	??__tdiv_to_l_
  7818  12CA  0824               	movf	__tdiv_to_l_@f2+1,w
  7819  12CB  00A7               	movwf	??__tdiv_to_l_+1
  7820  12CC  0825               	movf	__tdiv_to_l_@f2+2,w
  7821  12CD  00A8               	movwf	??__tdiv_to_l_+2
  7822  12CE  1003               	clrc
  7823  12CF  0D27               	rlf	??__tdiv_to_l_+1,w
  7824  12D0  0D28               	rlf	??__tdiv_to_l_+2,w
  7825  12D1  00A9               	movwf	??__tdiv_to_l_+3
  7826  12D2  0829               	movf	??__tdiv_to_l_+3,w
  7827  12D3  00AE               	movwf	__tdiv_to_l_@cntr
  7828  12D4  082E               	movf	__tdiv_to_l_@cntr,w
  7829  12D5  1D03               	btfss	3,2
  7830  12D6  2AE0               	goto	l662
  7831  12D7  3000               	movlw	0
  7832  12D8  00A3               	movwf	?__tdiv_to_l_+3
  7833  12D9  3000               	movlw	0
  7834  12DA  00A2               	movwf	?__tdiv_to_l_+2
  7835  12DB  3000               	movlw	0
  7836  12DC  00A1               	movwf	?__tdiv_to_l_+1
  7837  12DD  3000               	movlw	0
  7838  12DE  00A0               	movwf	?__tdiv_to_l_
  7839  12DF  0008               	return
  7840  12E0                     l662:	
  7841  12E0  17A1               	bsf	__tdiv_to_l_@f1+1,7
  7842  12E1  30FF               	movlw	255
  7843  12E2  05A0               	andwf	__tdiv_to_l_@f1,f
  7844  12E3  30FF               	movlw	255
  7845  12E4  05A1               	andwf	__tdiv_to_l_@f1+1,f
  7846  12E5  3000               	movlw	0
  7847  12E6  05A2               	andwf	__tdiv_to_l_@f1+2,f
  7848  12E7  17A4               	bsf	__tdiv_to_l_@f2+1,7
  7849  12E8  30FF               	movlw	255
  7850  12E9  05A3               	andwf	__tdiv_to_l_@f2,f
  7851  12EA  30FF               	movlw	255
  7852  12EB  05A4               	andwf	__tdiv_to_l_@f2+1,f
  7853  12EC  3000               	movlw	0
  7854  12ED  05A5               	andwf	__tdiv_to_l_@f2+2,f
  7855  12EE  3000               	movlw	0
  7856  12EF  00AD               	movwf	__tdiv_to_l_@quot+3
  7857  12F0  3000               	movlw	0
  7858  12F1  00AC               	movwf	__tdiv_to_l_@quot+2
  7859  12F2  3000               	movlw	0
  7860  12F3  00AB               	movwf	__tdiv_to_l_@quot+1
  7861  12F4  3000               	movlw	0
  7862  12F5  00AA               	movwf	__tdiv_to_l_@quot
  7863  12F6  307F               	movlw	127
  7864  12F7  02AF               	subwf	__tdiv_to_l_@exp1,f
  7865  12F8  3098               	movlw	152
  7866  12F9  072E               	addwf	__tdiv_to_l_@cntr,w
  7867  12FA  00A6               	movwf	??__tdiv_to_l_
  7868  12FB  0826               	movf	??__tdiv_to_l_,w
  7869  12FC  02AF               	subwf	__tdiv_to_l_@exp1,f
  7870  12FD  3018               	movlw	24
  7871  12FE  00A6               	movwf	??__tdiv_to_l_
  7872  12FF  0826               	movf	??__tdiv_to_l_,w
  7873  1300  00AE               	movwf	__tdiv_to_l_@cntr
  7874  1301                     l3612:	
  7875  1301  3001               	movlw	1
  7876  1302  00A6               	movwf	??__tdiv_to_l_
  7877  1303                     u5055:	
  7878  1303  1003               	clrc
  7879  1304  0DAA               	rlf	__tdiv_to_l_@quot,f
  7880  1305  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  7881  1306  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  7882  1307  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  7883  1308  0BA6               	decfsz	??__tdiv_to_l_,f
  7884  1309  2B03               	goto	u5055
  7885  130A  0825               	movf	__tdiv_to_l_@f2+2,w
  7886  130B  0222               	subwf	__tdiv_to_l_@f1+2,w
  7887  130C  1D03               	skipz
  7888  130D  2B14               	goto	u5065
  7889  130E  0824               	movf	__tdiv_to_l_@f2+1,w
  7890  130F  0221               	subwf	__tdiv_to_l_@f1+1,w
  7891  1310  1D03               	skipz
  7892  1311  2B14               	goto	u5065
  7893  1312  0823               	movf	__tdiv_to_l_@f2,w
  7894  1313  0220               	subwf	__tdiv_to_l_@f1,w
  7895  1314                     u5065:	
  7896  1314  1C03               	skipc
  7897  1315  2B21               	goto	l3620
  7898  1316  0823               	movf	__tdiv_to_l_@f2,w
  7899  1317  02A0               	subwf	__tdiv_to_l_@f1,f
  7900  1318  0824               	movf	__tdiv_to_l_@f2+1,w
  7901  1319  1C03               	skipc
  7902  131A  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  7903  131B  02A1               	subwf	__tdiv_to_l_@f1+1,f
  7904  131C  0825               	movf	__tdiv_to_l_@f2+2,w
  7905  131D  1C03               	skipc
  7906  131E  0A25               	incf	__tdiv_to_l_@f2+2,w
  7907  131F  02A2               	subwf	__tdiv_to_l_@f1+2,f
  7908  1320  142A               	bsf	__tdiv_to_l_@quot,0
  7909  1321                     l3620:	
  7910  1321  3001               	movlw	1
  7911  1322                     u5075:	
  7912  1322  1003               	clrc
  7913  1323  0DA0               	rlf	__tdiv_to_l_@f1,f
  7914  1324  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  7915  1325  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  7916  1326  3EFF               	addlw	-1
  7917  1327  1D03               	skipz
  7918  1328  2B22               	goto	u5075
  7919  1329  3001               	movlw	1
  7920  132A  02AE               	subwf	__tdiv_to_l_@cntr,f
  7921  132B  1D03               	btfss	3,2
  7922  132C  2B01               	goto	l3612
  7923  132D  1FAF               	btfss	__tdiv_to_l_@exp1,7
  7924  132E  2B4D               	goto	l3632
  7925  132F  082F               	movf	__tdiv_to_l_@exp1,w
  7926  1330  3A80               	xorlw	128
  7927  1331  3E97               	addlw	151
  7928  1332  1803               	skipnc
  7929  1333  2B3D               	goto	l3630
  7930  1334  3000               	movlw	0
  7931  1335  00A3               	movwf	?__tdiv_to_l_+3
  7932  1336  3000               	movlw	0
  7933  1337  00A2               	movwf	?__tdiv_to_l_+2
  7934  1338  3000               	movlw	0
  7935  1339  00A1               	movwf	?__tdiv_to_l_+1
  7936  133A  3000               	movlw	0
  7937  133B  00A0               	movwf	?__tdiv_to_l_
  7938  133C  0008               	return
  7939  133D                     l3630:	
  7940  133D  3001               	movlw	1
  7941  133E                     u5115:	
  7942  133E  1003               	clrc
  7943  133F  0CAD               	rrf	__tdiv_to_l_@quot+3,f
  7944  1340  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  7945  1341  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  7946  1342  0CAA               	rrf	__tdiv_to_l_@quot,f
  7947  1343  3EFF               	addlw	-1
  7948  1344  1D03               	skipz
  7949  1345  2B3E               	goto	u5115
  7950  1346  3001               	movlw	1
  7951  1347  00A6               	movwf	??__tdiv_to_l_
  7952  1348  0826               	movf	??__tdiv_to_l_,w
  7953  1349  07AF               	addwf	__tdiv_to_l_@exp1,f
  7954  134A  1903               	btfsc	3,2
  7955  134B  2B68               	goto	l3640
  7956  134C  2B3D               	goto	l3630
  7957  134D                     l3632:	
  7958  134D  3018               	movlw	24
  7959  134E  022F               	subwf	__tdiv_to_l_@exp1,w
  7960  134F  1C03               	skipc
  7961  1350  2B65               	goto	l672
  7962  1351  3000               	movlw	0
  7963  1352  00A3               	movwf	?__tdiv_to_l_+3
  7964  1353  3000               	movlw	0
  7965  1354  00A2               	movwf	?__tdiv_to_l_+2
  7966  1355  3000               	movlw	0
  7967  1356  00A1               	movwf	?__tdiv_to_l_+1
  7968  1357  3000               	movlw	0
  7969  1358  00A0               	movwf	?__tdiv_to_l_
  7970  1359  0008               	return
  7971  135A                     l3638:	
  7972  135A  3001               	movlw	1
  7973  135B  00A6               	movwf	??__tdiv_to_l_
  7974  135C                     u5145:	
  7975  135C  1003               	clrc
  7976  135D  0DAA               	rlf	__tdiv_to_l_@quot,f
  7977  135E  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  7978  135F  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  7979  1360  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  7980  1361  0BA6               	decfsz	??__tdiv_to_l_,f
  7981  1362  2B5C               	goto	u5145
  7982  1363  3001               	movlw	1
  7983  1364  02AF               	subwf	__tdiv_to_l_@exp1,f
  7984  1365                     l672:	
  7985  1365  082F               	movf	__tdiv_to_l_@exp1,w
  7986  1366  1D03               	btfss	3,2
  7987  1367  2B5A               	goto	l3638
  7988  1368                     l3640:	
  7989  1368  082D               	movf	__tdiv_to_l_@quot+3,w
  7990  1369  00A3               	movwf	?__tdiv_to_l_+3
  7991  136A  082C               	movf	__tdiv_to_l_@quot+2,w
  7992  136B  00A2               	movwf	?__tdiv_to_l_+2
  7993  136C  082B               	movf	__tdiv_to_l_@quot+1,w
  7994  136D  00A1               	movwf	?__tdiv_to_l_+1
  7995  136E  082A               	movf	__tdiv_to_l_@quot,w
  7996  136F  00A0               	movwf	?__tdiv_to_l_
  7997  1370  0008               	return
  7998  1371                     __end_of__tdiv_to_l_:	
  7999                           
  8000                           	psect	text24
  8001  154D                     __ptext24:	
  8002 ;; *************** function __div_to_l_ *****************
  8003 ;; Defined at:
  8004 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  f1              3    0[BANK0 ] unsigned long 
  8007 ;;  f2              3    3[BANK0 ] unsigned long 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  quot            4   14[BANK0 ] unsigned long 
  8010 ;;  exp1            1   19[BANK0 ] unsigned char 
  8011 ;;  cntr            1   18[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  4    0[BANK0 ] unsigned long 
  8014 ;; Registers used:
  8015 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8021 ;;      Params:         0       6       0       0       0
  8022 ;;      Locals:         0       6       0       0       0
  8023 ;;      Temps:          0       8       0       0       0
  8024 ;;      Totals:         0      20       0       0       0
  8025 ;;Total ram usage:       20 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    1
  8028 ;; This function calls:
  8029 ;;		Nothing
  8030 ;; This function is called by:
  8031 ;;		_sprintf
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function __div_to_l_
  8037  154D                     __div_to_l_:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  8041  154D  3020               	movlw	low (__div_to_l_@f1| 0)
  8042  154E  0084               	movwf	4
  8043  154F  1383               	bcf	3,7	;select IRP bank0
  8044  1550  0800               	movf	0,w
  8045  1551  1283               	bcf	3,5	;RP0=0, select bank0
  8046  1552  1303               	bcf	3,6	;RP1=0, select bank0
  8047  1553  00A6               	movwf	??__div_to_l_
  8048  1554  0A84               	incf	4,f
  8049  1555  0800               	movf	0,w
  8050  1556  00A7               	movwf	??__div_to_l_+1
  8051  1557  0A84               	incf	4,f
  8052  1558  0800               	movf	0,w
  8053  1559  00A8               	movwf	??__div_to_l_+2
  8054  155A  0A84               	incf	4,f
  8055  155B  0800               	movf	0,w
  8056  155C  00A9               	movwf	??__div_to_l_+3
  8057  155D  1003               	clrc
  8058  155E  0D28               	rlf	??__div_to_l_+2,w
  8059  155F  0D29               	rlf	??__div_to_l_+3,w
  8060  1560  00AA               	movwf	??__div_to_l_+4
  8061  1561  082A               	movf	??__div_to_l_+4,w
  8062  1562  00B3               	movwf	__div_to_l_@exp1
  8063  1563  0833               	movf	__div_to_l_@exp1,w
  8064  1564  1D03               	btfss	3,2
  8065  1565  2D6F               	goto	l3650
  8066  1566  3000               	movlw	0
  8067  1567  00A3               	movwf	?__div_to_l_+3
  8068  1568  3000               	movlw	0
  8069  1569  00A2               	movwf	?__div_to_l_+2
  8070  156A  3000               	movlw	0
  8071  156B  00A1               	movwf	?__div_to_l_+1
  8072  156C  3000               	movlw	0
  8073  156D  00A0               	movwf	?__div_to_l_
  8074  156E  0008               	return
  8075  156F                     l3650:	
  8076  156F  3023               	movlw	low (__div_to_l_@f2| 0)
  8077  1570  0084               	movwf	4
  8078  1571  0800               	movf	0,w
  8079  1572  00A6               	movwf	??__div_to_l_
  8080  1573  0A84               	incf	4,f
  8081  1574  0800               	movf	0,w
  8082  1575  00A7               	movwf	??__div_to_l_+1
  8083  1576  0A84               	incf	4,f
  8084  1577  0800               	movf	0,w
  8085  1578  00A8               	movwf	??__div_to_l_+2
  8086  1579  0A84               	incf	4,f
  8087  157A  0800               	movf	0,w
  8088  157B  00A9               	movwf	??__div_to_l_+3
  8089  157C  1003               	clrc
  8090  157D  0D28               	rlf	??__div_to_l_+2,w
  8091  157E  0D29               	rlf	??__div_to_l_+3,w
  8092  157F  00AA               	movwf	??__div_to_l_+4
  8093  1580  082A               	movf	??__div_to_l_+4,w
  8094  1581  00B2               	movwf	__div_to_l_@cntr
  8095  1582  0832               	movf	__div_to_l_@cntr,w
  8096  1583  1D03               	btfss	3,2
  8097  1584  2D8E               	goto	l3656
  8098  1585  3000               	movlw	0
  8099  1586  00A3               	movwf	?__div_to_l_+3
  8100  1587  3000               	movlw	0
  8101  1588  00A2               	movwf	?__div_to_l_+2
  8102  1589  3000               	movlw	0
  8103  158A  00A1               	movwf	?__div_to_l_+1
  8104  158B  3000               	movlw	0
  8105  158C  00A0               	movwf	?__div_to_l_
  8106  158D  0008               	return
  8107  158E                     l3656:	
  8108  158E  3020               	movlw	low (__div_to_l_@f1| 0)
  8109  158F  0084               	movwf	4
  8110  1590  3000               	movlw	0
  8111  1591  0480               	iorwf	0,f
  8112  1592  0A84               	incf	4,f
  8113  1593  3000               	movlw	0
  8114  1594  0480               	iorwf	0,f
  8115  1595  0A84               	incf	4,f
  8116  1596  3080               	movlw	128
  8117  1597  0480               	iorwf	0,f
  8118  1598  0A84               	incf	4,f
  8119  1599  3000               	movlw	0
  8120  159A  0480               	iorwf	0,f
  8121  159B  3020               	movlw	low (__div_to_l_@f1| 0)
  8122  159C  0084               	movwf	4
  8123  159D  30FF               	movlw	255
  8124  159E  0580               	andwf	0,f
  8125  159F  0A84               	incf	4,f
  8126  15A0  30FF               	movlw	255
  8127  15A1  0580               	andwf	0,f
  8128  15A2  0A84               	incf	4,f
  8129  15A3  30FF               	movlw	255
  8130  15A4  0580               	andwf	0,f
  8131  15A5  0A84               	incf	4,f
  8132  15A6  3000               	movlw	0
  8133  15A7  0580               	andwf	0,f
  8134  15A8  3023               	movlw	low (__div_to_l_@f2| 0)
  8135  15A9  0084               	movwf	4
  8136  15AA  3000               	movlw	0
  8137  15AB  0480               	iorwf	0,f
  8138  15AC  0A84               	incf	4,f
  8139  15AD  3000               	movlw	0
  8140  15AE  0480               	iorwf	0,f
  8141  15AF  0A84               	incf	4,f
  8142  15B0  3080               	movlw	128
  8143  15B1  0480               	iorwf	0,f
  8144  15B2  0A84               	incf	4,f
  8145  15B3  3000               	movlw	0
  8146  15B4  0480               	iorwf	0,f
  8147  15B5  3023               	movlw	low (__div_to_l_@f2| 0)
  8148  15B6  0084               	movwf	4
  8149  15B7  30FF               	movlw	255
  8150  15B8  0580               	andwf	0,f
  8151  15B9  0A84               	incf	4,f
  8152  15BA  30FF               	movlw	255
  8153  15BB  0580               	andwf	0,f
  8154  15BC  0A84               	incf	4,f
  8155  15BD  30FF               	movlw	255
  8156  15BE  0580               	andwf	0,f
  8157  15BF  0A84               	incf	4,f
  8158  15C0  3000               	movlw	0
  8159  15C1  0580               	andwf	0,f
  8160  15C2  3000               	movlw	0
  8161  15C3  00B1               	movwf	__div_to_l_@quot+3
  8162  15C4  3000               	movlw	0
  8163  15C5  00B0               	movwf	__div_to_l_@quot+2
  8164  15C6  3000               	movlw	0
  8165  15C7  00AF               	movwf	__div_to_l_@quot+1
  8166  15C8  3000               	movlw	0
  8167  15C9  00AE               	movwf	__div_to_l_@quot
  8168  15CA  307F               	movlw	127
  8169  15CB  02B3               	subwf	__div_to_l_@exp1,f
  8170  15CC  30A0               	movlw	160
  8171  15CD  0732               	addwf	__div_to_l_@cntr,w
  8172  15CE  00A6               	movwf	??__div_to_l_
  8173  15CF  0826               	movf	??__div_to_l_,w
  8174  15D0  02B3               	subwf	__div_to_l_@exp1,f
  8175  15D1  3020               	movlw	32
  8176  15D2  00A6               	movwf	??__div_to_l_
  8177  15D3  0826               	movf	??__div_to_l_,w
  8178  15D4  00B2               	movwf	__div_to_l_@cntr
  8179  15D5                     l3666:	
  8180  15D5  3001               	movlw	1
  8181  15D6  00A6               	movwf	??__div_to_l_
  8182  15D7                     u5185:	
  8183  15D7  1003               	clrc
  8184  15D8  0DAE               	rlf	__div_to_l_@quot,f
  8185  15D9  0DAF               	rlf	__div_to_l_@quot+1,f
  8186  15DA  0DB0               	rlf	__div_to_l_@quot+2,f
  8187  15DB  0DB1               	rlf	__div_to_l_@quot+3,f
  8188  15DC  0BA6               	decfsz	??__div_to_l_,f
  8189  15DD  2DD7               	goto	u5185
  8190  15DE  3023               	movlw	low (__div_to_l_@f2| 0)
  8191  15DF  0084               	movwf	4
  8192  15E0  0800               	movf	0,w
  8193  15E1  00A6               	movwf	??__div_to_l_
  8194  15E2  0A84               	incf	4,f
  8195  15E3  0800               	movf	0,w
  8196  15E4  00A7               	movwf	??__div_to_l_+1
  8197  15E5  0A84               	incf	4,f
  8198  15E6  0800               	movf	0,w
  8199  15E7  00A8               	movwf	??__div_to_l_+2
  8200  15E8  0A84               	incf	4,f
  8201  15E9  0800               	movf	0,w
  8202  15EA  00A9               	movwf	??__div_to_l_+3
  8203  15EB  3020               	movlw	low (__div_to_l_@f1| 0)
  8204  15EC  0084               	movwf	4
  8205  15ED  0800               	movf	0,w
  8206  15EE  00AA               	movwf	??__div_to_l_+4
  8207  15EF  0A84               	incf	4,f
  8208  15F0  0800               	movf	0,w
  8209  15F1  00AB               	movwf	??__div_to_l_+5
  8210  15F2  0A84               	incf	4,f
  8211  15F3  0800               	movf	0,w
  8212  15F4  00AC               	movwf	??__div_to_l_+6
  8213  15F5  0A84               	incf	4,f
  8214  15F6  0800               	movf	0,w
  8215  15F7  00AD               	movwf	??__div_to_l_+7
  8216  15F8  0829               	movf	??__div_to_l_+3,w
  8217  15F9  022D               	subwf	??__div_to_l_+7,w
  8218  15FA  1D03               	skipz
  8219  15FB  2E06               	goto	u5195
  8220  15FC  0828               	movf	??__div_to_l_+2,w
  8221  15FD  022C               	subwf	??__div_to_l_+6,w
  8222  15FE  1D03               	skipz
  8223  15FF  2E06               	goto	u5195
  8224  1600  0827               	movf	??__div_to_l_+1,w
  8225  1601  022B               	subwf	??__div_to_l_+5,w
  8226  1602  1D03               	skipz
  8227  1603  2E06               	goto	u5195
  8228  1604  0826               	movf	??__div_to_l_,w
  8229  1605  022A               	subwf	??__div_to_l_+4,w
  8230  1606                     u5195:	
  8231  1606  1C03               	skipc
  8232  1607  2E2B               	goto	l585
  8233  1608  3023               	movlw	low (__div_to_l_@f2| 0)
  8234  1609  0084               	movwf	4
  8235  160A  0800               	movf	0,w
  8236  160B  00A6               	movwf	??__div_to_l_
  8237  160C  0A84               	incf	4,f
  8238  160D  0800               	movf	0,w
  8239  160E  00A7               	movwf	??__div_to_l_+1
  8240  160F  0A84               	incf	4,f
  8241  1610  0800               	movf	0,w
  8242  1611  00A8               	movwf	??__div_to_l_+2
  8243  1612  0A84               	incf	4,f
  8244  1613  0800               	movf	0,w
  8245  1614  00A9               	movwf	??__div_to_l_+3
  8246  1615  3020               	movlw	low (__div_to_l_@f1| 0)
  8247  1616  0084               	movwf	4
  8248  1617  0826               	movf	??__div_to_l_,w
  8249  1618  0280               	subwf	0,f
  8250  1619  0A84               	incf	4,f
  8251  161A  0827               	movf	??__div_to_l_+1,w
  8252  161B  1C03               	skipc
  8253  161C  0F27               	incfsz	??__div_to_l_+1,w
  8254  161D  0280               	subwf	0,f
  8255  161E  0A84               	incf	4,f
  8256  161F  0828               	movf	??__div_to_l_+2,w
  8257  1620  1C03               	skipc
  8258  1621  0F28               	incfsz	??__div_to_l_+2,w
  8259  1622  0280               	subwf	0,f
  8260  1623  0A84               	incf	4,f
  8261  1624  0829               	movf	??__div_to_l_+3,w
  8262  1625  1C03               	skipc
  8263  1626  0A29               	incf	??__div_to_l_+3,w
  8264  1627  0280               	subwf	0,f
  8265  1628  3003               	movlw	3
  8266  1629  0284               	subwf	4,f
  8267  162A  142E               	bsf	__div_to_l_@quot,0
  8268  162B                     l585:	
  8269  162B  3020               	movlw	low (__div_to_l_@f1| 0)
  8270  162C  0084               	movwf	4
  8271  162D  1003               	clrc
  8272  162E  0D80               	rlf	0,f
  8273  162F  0A84               	incf	4,f
  8274  1630  0D80               	rlf	0,f
  8275  1631  0A84               	incf	4,f
  8276  1632  0D80               	rlf	0,f
  8277  1633  0A84               	incf	4,f
  8278  1634  0D80               	rlf	0,f
  8279  1635  0384               	decf	4,f
  8280  1636  0384               	decf	4,f
  8281  1637  0384               	decf	4,f
  8282  1638  3001               	movlw	1
  8283  1639  02B2               	subwf	__div_to_l_@cntr,f
  8284  163A  1D03               	btfss	3,2
  8285  163B  2DD5               	goto	l3666
  8286  163C  1FB3               	btfss	__div_to_l_@exp1,7
  8287  163D  2E5C               	goto	l3684
  8288  163E  0833               	movf	__div_to_l_@exp1,w
  8289  163F  3A80               	xorlw	128
  8290  1640  3E9F               	addlw	159
  8291  1641  1803               	skipnc
  8292  1642  2E4C               	goto	l3682
  8293  1643  3000               	movlw	0
  8294  1644  00A3               	movwf	?__div_to_l_+3
  8295  1645  3000               	movlw	0
  8296  1646  00A2               	movwf	?__div_to_l_+2
  8297  1647  3000               	movlw	0
  8298  1648  00A1               	movwf	?__div_to_l_+1
  8299  1649  3000               	movlw	0
  8300  164A  00A0               	movwf	?__div_to_l_
  8301  164B  0008               	return
  8302  164C                     l3682:	
  8303  164C  3001               	movlw	1
  8304  164D                     u5235:	
  8305  164D  1003               	clrc
  8306  164E  0CB1               	rrf	__div_to_l_@quot+3,f
  8307  164F  0CB0               	rrf	__div_to_l_@quot+2,f
  8308  1650  0CAF               	rrf	__div_to_l_@quot+1,f
  8309  1651  0CAE               	rrf	__div_to_l_@quot,f
  8310  1652  3EFF               	addlw	-1
  8311  1653  1D03               	skipz
  8312  1654  2E4D               	goto	u5235
  8313  1655  3001               	movlw	1
  8314  1656  00A6               	movwf	??__div_to_l_
  8315  1657  0826               	movf	??__div_to_l_,w
  8316  1658  07B3               	addwf	__div_to_l_@exp1,f
  8317  1659  1903               	btfsc	3,2
  8318  165A  2E77               	goto	l3692
  8319  165B  2E4C               	goto	l3682
  8320  165C                     l3684:	
  8321  165C  3020               	movlw	32
  8322  165D  0233               	subwf	__div_to_l_@exp1,w
  8323  165E  1C03               	skipc
  8324  165F  2E74               	goto	l593
  8325  1660  3000               	movlw	0
  8326  1661  00A3               	movwf	?__div_to_l_+3
  8327  1662  3000               	movlw	0
  8328  1663  00A2               	movwf	?__div_to_l_+2
  8329  1664  3000               	movlw	0
  8330  1665  00A1               	movwf	?__div_to_l_+1
  8331  1666  3000               	movlw	0
  8332  1667  00A0               	movwf	?__div_to_l_
  8333  1668  0008               	return
  8334  1669                     l3690:	
  8335  1669  3001               	movlw	1
  8336  166A  00A6               	movwf	??__div_to_l_
  8337  166B                     u5265:	
  8338  166B  1003               	clrc
  8339  166C  0DAE               	rlf	__div_to_l_@quot,f
  8340  166D  0DAF               	rlf	__div_to_l_@quot+1,f
  8341  166E  0DB0               	rlf	__div_to_l_@quot+2,f
  8342  166F  0DB1               	rlf	__div_to_l_@quot+3,f
  8343  1670  0BA6               	decfsz	??__div_to_l_,f
  8344  1671  2E6B               	goto	u5265
  8345  1672  3001               	movlw	1
  8346  1673  02B3               	subwf	__div_to_l_@exp1,f
  8347  1674                     l593:	
  8348  1674  0833               	movf	__div_to_l_@exp1,w
  8349  1675  1D03               	btfss	3,2
  8350  1676  2E69               	goto	l3690
  8351  1677                     l3692:	
  8352  1677  0831               	movf	__div_to_l_@quot+3,w
  8353  1678  00A3               	movwf	?__div_to_l_+3
  8354  1679  0830               	movf	__div_to_l_@quot+2,w
  8355  167A  00A2               	movwf	?__div_to_l_+2
  8356  167B  082F               	movf	__div_to_l_@quot+1,w
  8357  167C  00A1               	movwf	?__div_to_l_+1
  8358  167D  082E               	movf	__div_to_l_@quot,w
  8359  167E  00A0               	movwf	?__div_to_l_
  8360  167F  0008               	return
  8361  1680                     __end_of__div_to_l_:	
  8362                           
  8363                           	psect	text25
  8364  1006                     __ptext25:	
  8365 ;; *************** function ___wmul *****************
  8366 ;; Defined at:
  8367 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8370 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  product         2    4[COMMON] unsigned int 
  8373 ;; Return value:  Size  Location     Type
  8374 ;;                  2    0[BANK0 ] unsigned int 
  8375 ;; Registers used:
  8376 ;;		wreg, status,2, status,0
  8377 ;; Tracked objects:
  8378 ;;		On entry : 0/0
  8379 ;;		On exit  : 0/0
  8380 ;;		Unchanged: 0/0
  8381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8382 ;;      Params:         0       4       0       0       0
  8383 ;;      Locals:         2       0       0       0       0
  8384 ;;      Temps:          0       0       0       0       0
  8385 ;;      Totals:         2       4       0       0       0
  8386 ;;Total ram usage:        6 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    1
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_sprintf
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function ___wmul
  8398  1006                     ___wmul:	
  8399                           
  8400                           ;incstack = 0
  8401                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8402  1006  01F4               	clrf	___wmul@product
  8403  1007  01F5               	clrf	___wmul@product+1
  8404  1008                     l3698:	
  8405  1008  1283               	bcf	3,5	;RP0=0, select bank0
  8406  1009  1303               	bcf	3,6	;RP1=0, select bank0
  8407  100A  1C20               	btfss	___wmul@multiplier,0
  8408  100B  2812               	goto	l427
  8409  100C  0822               	movf	___wmul@multiplicand,w
  8410  100D  07F4               	addwf	___wmul@product,f
  8411  100E  1803               	skipnc
  8412  100F  0AF5               	incf	___wmul@product+1,f
  8413  1010  0823               	movf	___wmul@multiplicand+1,w
  8414  1011  07F5               	addwf	___wmul@product+1,f
  8415  1012                     l427:	
  8416  1012  3001               	movlw	1
  8417  1013                     u5295:	
  8418  1013  1003               	clrc
  8419  1014  0DA2               	rlf	___wmul@multiplicand,f
  8420  1015  0DA3               	rlf	___wmul@multiplicand+1,f
  8421  1016  3EFF               	addlw	-1
  8422  1017  1D03               	skipz
  8423  1018  2813               	goto	u5295
  8424  1019  3001               	movlw	1
  8425  101A                     u5305:	
  8426  101A  1003               	clrc
  8427  101B  0CA1               	rrf	___wmul@multiplier+1,f
  8428  101C  0CA0               	rrf	___wmul@multiplier,f
  8429  101D  3EFF               	addlw	-1
  8430  101E  1D03               	skipz
  8431  101F  281A               	goto	u5305
  8432  1020  0820               	movf	___wmul@multiplier,w
  8433  1021  0421               	iorwf	___wmul@multiplier+1,w
  8434  1022  1D03               	btfss	3,2
  8435  1023  2808               	goto	l3698
  8436  1024  0875               	movf	___wmul@product+1,w
  8437  1025  00A1               	movwf	?___wmul+1
  8438  1026  0874               	movf	___wmul@product,w
  8439  1027  00A0               	movwf	?___wmul
  8440  1028  0008               	return
  8441  1029                     __end_of___wmul:	
  8442                           
  8443                           	psect	text26
  8444  1BB6                     __ptext26:	
  8445 ;; *************** function ___lltoft *****************
  8446 ;; Defined at:
  8447 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  c               4    8[BANK0 ] unsigned long 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;  exp             1    5[COMMON] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  3    8[BANK0 ] float 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2, status,0, pclath, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8461 ;;      Params:         0       4       0       0       0
  8462 ;;      Locals:         1       0       0       0       0
  8463 ;;      Temps:          1       0       0       0       0
  8464 ;;      Totals:         2       4       0       0       0
  8465 ;;Total ram usage:        6 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    2
  8468 ;; This function calls:
  8469 ;;		___ftpack
  8470 ;; This function is called by:
  8471 ;;		_sprintf
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function ___lltoft
  8477  1BB6                     ___lltoft:	
  8478                           
  8479                           ;incstack = 0
  8480                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8481  1BB6  308E               	movlw	142
  8482  1BB7  00F4               	movwf	??___lltoft
  8483  1BB8  0874               	movf	??___lltoft,w
  8484  1BB9  00F5               	movwf	___lltoft@exp
  8485  1BBA                     l3816:	
  8486  1BBA  30FF               	movlw	255
  8487  1BBB  1283               	bcf	3,5	;RP0=0, select bank0
  8488  1BBC  1303               	bcf	3,6	;RP1=0, select bank0
  8489  1BBD  052B               	andwf	___lltoft@c+3,w
  8490  1BBE  1903               	btfsc	3,2
  8491  1BBF  2BD0               	goto	l3818
  8492  1BC0  3001               	movlw	1
  8493  1BC1                     u5545:	
  8494  1BC1  1003               	clrc
  8495  1BC2  1283               	bcf	3,5	;RP0=0, select bank0
  8496  1BC3  1303               	bcf	3,6	;RP1=0, select bank0
  8497  1BC4  0CAB               	rrf	___lltoft@c+3,f
  8498  1BC5  0CAA               	rrf	___lltoft@c+2,f
  8499  1BC6  0CA9               	rrf	___lltoft@c+1,f
  8500  1BC7  0CA8               	rrf	___lltoft@c,f
  8501  1BC8  3EFF               	addlw	-1
  8502  1BC9  1D03               	skipz
  8503  1BCA  2BC1               	goto	u5545
  8504  1BCB  3001               	movlw	1
  8505  1BCC  00F4               	movwf	??___lltoft
  8506  1BCD  0874               	movf	??___lltoft,w
  8507  1BCE  07F5               	addwf	___lltoft@exp,f
  8508  1BCF  2BBA               	goto	l3816
  8509  1BD0                     l3818:	
  8510  1BD0  0828               	movf	___lltoft@c,w
  8511  1BD1  00A0               	movwf	___ftpack@arg
  8512  1BD2  0829               	movf	___lltoft@c+1,w
  8513  1BD3  00A1               	movwf	___ftpack@arg+1
  8514  1BD4  082A               	movf	___lltoft@c+2,w
  8515  1BD5  00A2               	movwf	___ftpack@arg+2
  8516  1BD6  0875               	movf	___lltoft@exp,w
  8517  1BD7  00F4               	movwf	??___lltoft
  8518  1BD8  0874               	movf	??___lltoft,w
  8519  1BD9  00A3               	movwf	___ftpack@exp
  8520  1BDA  01A4               	clrf	___ftpack@sign
  8521  1BDB  160A  158A  2723   	fcall	___ftpack
  8522  1BDE  1283               	bcf	3,5	;RP0=0, select bank0
  8523  1BDF  1303               	bcf	3,6	;RP1=0, select bank0
  8524  1BE0  0820               	movf	?___ftpack,w
  8525  1BE1  00A8               	movwf	?___lltoft
  8526  1BE2  0821               	movf	?___ftpack+1,w
  8527  1BE3  00A9               	movwf	?___lltoft+1
  8528  1BE4  0822               	movf	?___ftpack+2,w
  8529  1BE5  00AA               	movwf	?___lltoft+2
  8530  1BE6  0008               	return
  8531  1BE7                     __end_of___lltoft:	
  8532                           
  8533                           	psect	text27
  8534  1D58                     __ptext27:	
  8535 ;; *************** function ___llmod *****************
  8536 ;; Defined at:
  8537 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  divisor         4    0[BANK0 ] unsigned long 
  8540 ;;  dividend        4    4[BANK0 ] unsigned long 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  counter         1    5[COMMON] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  4    0[BANK0 ] unsigned long 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8552 ;;      Params:         0       8       0       0       0
  8553 ;;      Locals:         1       0       0       0       0
  8554 ;;      Temps:          1       0       0       0       0
  8555 ;;      Totals:         2       8       0       0       0
  8556 ;;Total ram usage:       10 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    1
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_sprintf
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function ___llmod
  8568  1D58                     ___llmod:	
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8572  1D58  1283               	bcf	3,5	;RP0=0, select bank0
  8573  1D59  1303               	bcf	3,6	;RP1=0, select bank0
  8574  1D5A  0823               	movf	___llmod@divisor+3,w
  8575  1D5B  0422               	iorwf	___llmod@divisor+2,w
  8576  1D5C  0421               	iorwf	___llmod@divisor+1,w
  8577  1D5D  0420               	iorwf	___llmod@divisor,w
  8578  1D5E  1903               	skipnz
  8579  1D5F  2D9D               	goto	l2738
  8580  1D60  01F5               	clrf	___llmod@counter
  8581  1D61  0AF5               	incf	___llmod@counter,f
  8582  1D62                     l2728:	
  8583  1D62  1BA3               	btfsc	___llmod@divisor+3,7
  8584  1D63  2D72               	goto	l2730
  8585  1D64  3001               	movlw	1
  8586  1D65  00F4               	movwf	??___llmod
  8587  1D66                     u3655:	
  8588  1D66  1003               	clrc
  8589  1D67  0DA0               	rlf	___llmod@divisor,f
  8590  1D68  0DA1               	rlf	___llmod@divisor+1,f
  8591  1D69  0DA2               	rlf	___llmod@divisor+2,f
  8592  1D6A  0DA3               	rlf	___llmod@divisor+3,f
  8593  1D6B  0BF4               	decfsz	??___llmod,f
  8594  1D6C  2D66               	goto	u3655
  8595  1D6D  3001               	movlw	1
  8596  1D6E  00F4               	movwf	??___llmod
  8597  1D6F  0874               	movf	??___llmod,w
  8598  1D70  07F5               	addwf	___llmod@counter,f
  8599  1D71  2D62               	goto	l2728
  8600  1D72                     l2730:	
  8601  1D72  0823               	movf	___llmod@divisor+3,w
  8602  1D73  0227               	subwf	___llmod@dividend+3,w
  8603  1D74  1D03               	skipz
  8604  1D75  2D80               	goto	u3675
  8605  1D76  0822               	movf	___llmod@divisor+2,w
  8606  1D77  0226               	subwf	___llmod@dividend+2,w
  8607  1D78  1D03               	skipz
  8608  1D79  2D80               	goto	u3675
  8609  1D7A  0821               	movf	___llmod@divisor+1,w
  8610  1D7B  0225               	subwf	___llmod@dividend+1,w
  8611  1D7C  1D03               	skipz
  8612  1D7D  2D80               	goto	u3675
  8613  1D7E  0820               	movf	___llmod@divisor,w
  8614  1D7F  0224               	subwf	___llmod@dividend,w
  8615  1D80                     u3675:	
  8616  1D80  1C03               	skipc
  8617  1D81  2D90               	goto	l2734
  8618  1D82  0820               	movf	___llmod@divisor,w
  8619  1D83  02A4               	subwf	___llmod@dividend,f
  8620  1D84  0821               	movf	___llmod@divisor+1,w
  8621  1D85  1C03               	skipc
  8622  1D86  0F21               	incfsz	___llmod@divisor+1,w
  8623  1D87  02A5               	subwf	___llmod@dividend+1,f
  8624  1D88  0822               	movf	___llmod@divisor+2,w
  8625  1D89  1C03               	skipc
  8626  1D8A  0F22               	incfsz	___llmod@divisor+2,w
  8627  1D8B  02A6               	subwf	___llmod@dividend+2,f
  8628  1D8C  0823               	movf	___llmod@divisor+3,w
  8629  1D8D  1C03               	skipc
  8630  1D8E  0F23               	incfsz	___llmod@divisor+3,w
  8631  1D8F  02A7               	subwf	___llmod@dividend+3,f
  8632  1D90                     l2734:	
  8633  1D90  3001               	movlw	1
  8634  1D91                     u3685:	
  8635  1D91  1003               	clrc
  8636  1D92  0CA3               	rrf	___llmod@divisor+3,f
  8637  1D93  0CA2               	rrf	___llmod@divisor+2,f
  8638  1D94  0CA1               	rrf	___llmod@divisor+1,f
  8639  1D95  0CA0               	rrf	___llmod@divisor,f
  8640  1D96  3EFF               	addlw	-1
  8641  1D97  1D03               	skipz
  8642  1D98  2D91               	goto	u3685
  8643  1D99  3001               	movlw	1
  8644  1D9A  02F5               	subwf	___llmod@counter,f
  8645  1D9B  1D03               	btfss	3,2
  8646  1D9C  2D72               	goto	l2730
  8647  1D9D                     l2738:	
  8648  1D9D  0827               	movf	___llmod@dividend+3,w
  8649  1D9E  00A3               	movwf	?___llmod+3
  8650  1D9F  0826               	movf	___llmod@dividend+2,w
  8651  1DA0  00A2               	movwf	?___llmod+2
  8652  1DA1  0825               	movf	___llmod@dividend+1,w
  8653  1DA2  00A1               	movwf	?___llmod+1
  8654  1DA3  0824               	movf	___llmod@dividend,w
  8655  1DA4  00A0               	movwf	?___llmod
  8656  1DA5  0008               	return
  8657  1DA6                     __end_of___llmod:	
  8658                           
  8659                           	psect	text28
  8660  0800                     __ptext28:	
  8661 ;; *************** function ___lldiv *****************
  8662 ;; Defined at:
  8663 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  8664 ;; Parameters:    Size  Location     Type
  8665 ;;  divisor         4    0[BANK0 ] unsigned long 
  8666 ;;  dividend        4    4[BANK0 ] unsigned long 
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;  quotient        4    8[BANK0 ] unsigned long 
  8669 ;;  counter         1   12[BANK0 ] unsigned char 
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  4    0[BANK0 ] unsigned long 
  8672 ;; Registers used:
  8673 ;;		wreg, status,2, status,0
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8679 ;;      Params:         0       8       0       0       0
  8680 ;;      Locals:         0       5       0       0       0
  8681 ;;      Temps:          1       0       0       0       0
  8682 ;;      Totals:         1      13       0       0       0
  8683 ;;Total ram usage:       14 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    1
  8686 ;; This function calls:
  8687 ;;		Nothing
  8688 ;; This function is called by:
  8689 ;;		_sprintf
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           
  8694                           ;psect for function ___lldiv
  8695  0800                     ___lldiv:	
  8696                           
  8697                           ;incstack = 0
  8698                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8699  0800  3000               	movlw	0
  8700  0801  1283               	bcf	3,5	;RP0=0, select bank0
  8701  0802  1303               	bcf	3,6	;RP1=0, select bank0
  8702  0803  00AB               	movwf	___lldiv@quotient+3
  8703  0804  3000               	movlw	0
  8704  0805  00AA               	movwf	___lldiv@quotient+2
  8705  0806  3000               	movlw	0
  8706  0807  00A9               	movwf	___lldiv@quotient+1
  8707  0808  3000               	movlw	0
  8708  0809  00A8               	movwf	___lldiv@quotient
  8709  080A  0823               	movf	___lldiv@divisor+3,w
  8710  080B  0422               	iorwf	___lldiv@divisor+2,w
  8711  080C  0421               	iorwf	___lldiv@divisor+1,w
  8712  080D  0420               	iorwf	___lldiv@divisor,w
  8713  080E  1903               	skipnz
  8714  080F  2857               	goto	l3808
  8715  0810  01AC               	clrf	___lldiv@counter
  8716  0811  0AAC               	incf	___lldiv@counter,f
  8717  0812                     l3794:	
  8718  0812  1BA3               	btfsc	___lldiv@divisor+3,7
  8719  0813  2822               	goto	l3796
  8720  0814  3001               	movlw	1
  8721  0815  00F4               	movwf	??___lldiv
  8722  0816                     u5485:	
  8723  0816  1003               	clrc
  8724  0817  0DA0               	rlf	___lldiv@divisor,f
  8725  0818  0DA1               	rlf	___lldiv@divisor+1,f
  8726  0819  0DA2               	rlf	___lldiv@divisor+2,f
  8727  081A  0DA3               	rlf	___lldiv@divisor+3,f
  8728  081B  0BF4               	decfsz	??___lldiv,f
  8729  081C  2816               	goto	u5485
  8730  081D  3001               	movlw	1
  8731  081E  00F4               	movwf	??___lldiv
  8732  081F  0874               	movf	??___lldiv,w
  8733  0820  07AC               	addwf	___lldiv@counter,f
  8734  0821  2812               	goto	l3794
  8735  0822                     l3796:	
  8736  0822  3001               	movlw	1
  8737  0823  00F4               	movwf	??___lldiv
  8738  0824                     u5505:	
  8739  0824  1003               	clrc
  8740  0825  0DA8               	rlf	___lldiv@quotient,f
  8741  0826  0DA9               	rlf	___lldiv@quotient+1,f
  8742  0827  0DAA               	rlf	___lldiv@quotient+2,f
  8743  0828  0DAB               	rlf	___lldiv@quotient+3,f
  8744  0829  0BF4               	decfsz	??___lldiv,f
  8745  082A  2824               	goto	u5505
  8746  082B  0823               	movf	___lldiv@divisor+3,w
  8747  082C  0227               	subwf	___lldiv@dividend+3,w
  8748  082D  1D03               	skipz
  8749  082E  2839               	goto	u5515
  8750  082F  0822               	movf	___lldiv@divisor+2,w
  8751  0830  0226               	subwf	___lldiv@dividend+2,w
  8752  0831  1D03               	skipz
  8753  0832  2839               	goto	u5515
  8754  0833  0821               	movf	___lldiv@divisor+1,w
  8755  0834  0225               	subwf	___lldiv@dividend+1,w
  8756  0835  1D03               	skipz
  8757  0836  2839               	goto	u5515
  8758  0837  0820               	movf	___lldiv@divisor,w
  8759  0838  0224               	subwf	___lldiv@dividend,w
  8760  0839                     u5515:	
  8761  0839  1C03               	skipc
  8762  083A  284A               	goto	l3804
  8763  083B  0820               	movf	___lldiv@divisor,w
  8764  083C  02A4               	subwf	___lldiv@dividend,f
  8765  083D  0821               	movf	___lldiv@divisor+1,w
  8766  083E  1C03               	skipc
  8767  083F  0F21               	incfsz	___lldiv@divisor+1,w
  8768  0840  02A5               	subwf	___lldiv@dividend+1,f
  8769  0841  0822               	movf	___lldiv@divisor+2,w
  8770  0842  1C03               	skipc
  8771  0843  0F22               	incfsz	___lldiv@divisor+2,w
  8772  0844  02A6               	subwf	___lldiv@dividend+2,f
  8773  0845  0823               	movf	___lldiv@divisor+3,w
  8774  0846  1C03               	skipc
  8775  0847  0F23               	incfsz	___lldiv@divisor+3,w
  8776  0848  02A7               	subwf	___lldiv@dividend+3,f
  8777  0849  1428               	bsf	___lldiv@quotient,0
  8778  084A                     l3804:	
  8779  084A  3001               	movlw	1
  8780  084B                     u5525:	
  8781  084B  1003               	clrc
  8782  084C  0CA3               	rrf	___lldiv@divisor+3,f
  8783  084D  0CA2               	rrf	___lldiv@divisor+2,f
  8784  084E  0CA1               	rrf	___lldiv@divisor+1,f
  8785  084F  0CA0               	rrf	___lldiv@divisor,f
  8786  0850  3EFF               	addlw	-1
  8787  0851  1D03               	skipz
  8788  0852  284B               	goto	u5525
  8789  0853  3001               	movlw	1
  8790  0854  02AC               	subwf	___lldiv@counter,f
  8791  0855  1D03               	btfss	3,2
  8792  0856  2822               	goto	l3796
  8793  0857                     l3808:	
  8794  0857  082B               	movf	___lldiv@quotient+3,w
  8795  0858  00A3               	movwf	?___lldiv+3
  8796  0859  082A               	movf	___lldiv@quotient+2,w
  8797  085A  00A2               	movwf	?___lldiv+2
  8798  085B  0829               	movf	___lldiv@quotient+1,w
  8799  085C  00A1               	movwf	?___lldiv+1
  8800  085D  0828               	movf	___lldiv@quotient,w
  8801  085E  00A0               	movwf	?___lldiv
  8802  085F  0008               	return
  8803  0860                     __end_of___lldiv:	
  8804                           
  8805                           	psect	text29
  8806  1029                     __ptext29:	
  8807 ;; *************** function ___fttol *****************
  8808 ;; Defined at:
  8809 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;  f1              3   43[BANK0 ] float 
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;  lval            4   52[BANK0 ] unsigned long 
  8814 ;;  exp1            1   56[BANK0 ] unsigned char 
  8815 ;;  sign1           1   51[BANK0 ] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  4   43[BANK0 ] long 
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8825 ;;      Params:         0       4       0       0       0
  8826 ;;      Locals:         0       6       0       0       0
  8827 ;;      Temps:          0       4       0       0       0
  8828 ;;      Totals:         0      14       0       0       0
  8829 ;;Total ram usage:       14 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    1
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_sprintf
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function ___fttol
  8841  1029                     ___fttol:	
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8845  1029  1283               	bcf	3,5	;RP0=0, select bank0
  8846  102A  1303               	bcf	3,6	;RP1=0, select bank0
  8847  102B  084B               	movf	___fttol@f1,w
  8848  102C  00CF               	movwf	??___fttol
  8849  102D  084C               	movf	___fttol@f1+1,w
  8850  102E  00D0               	movwf	??___fttol+1
  8851  102F  084D               	movf	___fttol@f1+2,w
  8852  1030  00D1               	movwf	??___fttol+2
  8853  1031  1003               	clrc
  8854  1032  0D50               	rlf	??___fttol+1,w
  8855  1033  0D51               	rlf	??___fttol+2,w
  8856  1034  00D2               	movwf	??___fttol+3
  8857  1035  0852               	movf	??___fttol+3,w
  8858  1036  00D8               	movwf	___fttol@exp1
  8859  1037  0858               	movf	___fttol@exp1,w
  8860  1038  1D03               	btfss	3,2
  8861  1039  2843               	goto	l2662
  8862  103A  3000               	movlw	0
  8863  103B  00CE               	movwf	?___fttol+3
  8864  103C  3000               	movlw	0
  8865  103D  00CD               	movwf	?___fttol+2
  8866  103E  3000               	movlw	0
  8867  103F  00CC               	movwf	?___fttol+1
  8868  1040  3000               	movlw	0
  8869  1041  00CB               	movwf	?___fttol
  8870  1042  0008               	return
  8871  1043                     l2662:	
  8872  1043  084B               	movf	___fttol@f1,w
  8873  1044  00CF               	movwf	??___fttol
  8874  1045  084C               	movf	___fttol@f1+1,w
  8875  1046  00D0               	movwf	??___fttol+1
  8876  1047  084D               	movf	___fttol@f1+2,w
  8877  1048  00D1               	movwf	??___fttol+2
  8878  1049  3017               	movlw	23
  8879  104A                     u3485:	
  8880  104A  1003               	clrc
  8881  104B  0CD1               	rrf	??___fttol+2,f
  8882  104C  0CD0               	rrf	??___fttol+1,f
  8883  104D  0CCF               	rrf	??___fttol,f
  8884  104E  3EFF               	addlw	-1
  8885  104F  1D03               	skipz
  8886  1050  284A               	goto	u3485
  8887  1051  084F               	movf	??___fttol,w
  8888  1052  00D2               	movwf	??___fttol+3
  8889  1053  0852               	movf	??___fttol+3,w
  8890  1054  00D3               	movwf	___fttol@sign1
  8891  1055  17CC               	bsf	___fttol@f1+1,7
  8892  1056  30FF               	movlw	255
  8893  1057  05CB               	andwf	___fttol@f1,f
  8894  1058  30FF               	movlw	255
  8895  1059  05CC               	andwf	___fttol@f1+1,f
  8896  105A  3000               	movlw	0
  8897  105B  05CD               	andwf	___fttol@f1+2,f
  8898  105C  084B               	movf	___fttol@f1,w
  8899  105D  00D4               	movwf	___fttol@lval
  8900  105E  084C               	movf	___fttol@f1+1,w
  8901  105F  00D5               	movwf	___fttol@lval+1
  8902  1060  084D               	movf	___fttol@f1+2,w
  8903  1061  00D6               	movwf	___fttol@lval+2
  8904  1062  01D7               	clrf	___fttol@lval+3
  8905  1063  308E               	movlw	142
  8906  1064  02D8               	subwf	___fttol@exp1,f
  8907  1065  1FD8               	btfss	___fttol@exp1,7
  8908  1066  2885               	goto	l2682
  8909  1067  0858               	movf	___fttol@exp1,w
  8910  1068  3A80               	xorlw	128
  8911  1069  3E8F               	addlw	143
  8912  106A  1803               	skipnc
  8913  106B  2875               	goto	l2680
  8914  106C  3000               	movlw	0
  8915  106D  00CE               	movwf	?___fttol+3
  8916  106E  3000               	movlw	0
  8917  106F  00CD               	movwf	?___fttol+2
  8918  1070  3000               	movlw	0
  8919  1071  00CC               	movwf	?___fttol+1
  8920  1072  3000               	movlw	0
  8921  1073  00CB               	movwf	?___fttol
  8922  1074  0008               	return
  8923  1075                     l2680:	
  8924  1075  3001               	movlw	1
  8925  1076                     u3515:	
  8926  1076  1003               	clrc
  8927  1077  0CD7               	rrf	___fttol@lval+3,f
  8928  1078  0CD6               	rrf	___fttol@lval+2,f
  8929  1079  0CD5               	rrf	___fttol@lval+1,f
  8930  107A  0CD4               	rrf	___fttol@lval,f
  8931  107B  3EFF               	addlw	-1
  8932  107C  1D03               	skipz
  8933  107D  2876               	goto	u3515
  8934  107E  3001               	movlw	1
  8935  107F  00CF               	movwf	??___fttol
  8936  1080  084F               	movf	??___fttol,w
  8937  1081  07D8               	addwf	___fttol@exp1,f
  8938  1082  1903               	btfsc	3,2
  8939  1083  28A0               	goto	l2690
  8940  1084  2875               	goto	l2680
  8941  1085                     l2682:	
  8942  1085  3018               	movlw	24
  8943  1086  0258               	subwf	___fttol@exp1,w
  8944  1087  1C03               	skipc
  8945  1088  289D               	goto	l713
  8946  1089  3000               	movlw	0
  8947  108A  00CE               	movwf	?___fttol+3
  8948  108B  3000               	movlw	0
  8949  108C  00CD               	movwf	?___fttol+2
  8950  108D  3000               	movlw	0
  8951  108E  00CC               	movwf	?___fttol+1
  8952  108F  3000               	movlw	0
  8953  1090  00CB               	movwf	?___fttol
  8954  1091  0008               	return
  8955  1092                     l2688:	
  8956  1092  3001               	movlw	1
  8957  1093  00CF               	movwf	??___fttol
  8958  1094                     u3545:	
  8959  1094  1003               	clrc
  8960  1095  0DD4               	rlf	___fttol@lval,f
  8961  1096  0DD5               	rlf	___fttol@lval+1,f
  8962  1097  0DD6               	rlf	___fttol@lval+2,f
  8963  1098  0DD7               	rlf	___fttol@lval+3,f
  8964  1099  0BCF               	decfsz	??___fttol,f
  8965  109A  2894               	goto	u3545
  8966  109B  3001               	movlw	1
  8967  109C  02D8               	subwf	___fttol@exp1,f
  8968  109D                     l713:	
  8969  109D  0858               	movf	___fttol@exp1,w
  8970  109E  1D03               	btfss	3,2
  8971  109F  2892               	goto	l2688
  8972  10A0                     l2690:	
  8973  10A0  0853               	movf	___fttol@sign1,w
  8974  10A1  1903               	btfsc	3,2
  8975  10A2  28AE               	goto	l2694
  8976  10A3  09D4               	comf	___fttol@lval,f
  8977  10A4  09D5               	comf	___fttol@lval+1,f
  8978  10A5  09D6               	comf	___fttol@lval+2,f
  8979  10A6  09D7               	comf	___fttol@lval+3,f
  8980  10A7  0AD4               	incf	___fttol@lval,f
  8981  10A8  1903               	skipnz
  8982  10A9  0AD5               	incf	___fttol@lval+1,f
  8983  10AA  1903               	skipnz
  8984  10AB  0AD6               	incf	___fttol@lval+2,f
  8985  10AC  1903               	skipnz
  8986  10AD  0AD7               	incf	___fttol@lval+3,f
  8987  10AE                     l2694:	
  8988  10AE  0857               	movf	___fttol@lval+3,w
  8989  10AF  00CE               	movwf	?___fttol+3
  8990  10B0  0856               	movf	___fttol@lval+2,w
  8991  10B1  00CD               	movwf	?___fttol+2
  8992  10B2  0855               	movf	___fttol@lval+1,w
  8993  10B3  00CC               	movwf	?___fttol+1
  8994  10B4  0854               	movf	___fttol@lval,w
  8995  10B5  00CB               	movwf	?___fttol
  8996  10B6  0008               	return
  8997  10B7                     __end_of___fttol:	
  8998                           
  8999                           	psect	text30
  9000  1B40                     __ptext30:	
  9001 ;; *************** function ___ftsub *****************
  9002 ;; Defined at:
  9003 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  f2              3   63[BANK0 ] float 
  9006 ;;  f1              3   66[BANK0 ] float 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  3   63[BANK0 ] float 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0, pclath, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9018 ;;      Params:         0       6       0       0       0
  9019 ;;      Locals:         0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0
  9021 ;;      Totals:         0       6       0       0       0
  9022 ;;Total ram usage:        6 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    3
  9025 ;; This function calls:
  9026 ;;		___ftadd
  9027 ;; This function is called by:
  9028 ;;		_sprintf
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           
  9033                           ;psect for function ___ftsub
  9034  1B40                     ___ftsub:	
  9035                           
  9036                           ;incstack = 0
  9037                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9038  1B40  1283               	bcf	3,5	;RP0=0, select bank0
  9039  1B41  1303               	bcf	3,6	;RP1=0, select bank0
  9040  1B42  0861               	movf	___ftsub@f2+2,w
  9041  1B43  0460               	iorwf	___ftsub@f2+1,w
  9042  1B44  045F               	iorwf	___ftsub@f2,w
  9043  1B45  1903               	skipnz
  9044  1B46  2B49               	goto	l3784
  9045  1B47  3080               	movlw	128
  9046  1B48  06E1               	xorwf	___ftsub@f2+2,f
  9047  1B49                     l3784:	
  9048  1B49  0862               	movf	___ftsub@f1,w
  9049  1B4A  00D2               	movwf	___ftadd@f1
  9050  1B4B  0863               	movf	___ftsub@f1+1,w
  9051  1B4C  00D3               	movwf	___ftadd@f1+1
  9052  1B4D  0864               	movf	___ftsub@f1+2,w
  9053  1B4E  00D4               	movwf	___ftadd@f1+2
  9054  1B4F  085F               	movf	___ftsub@f2,w
  9055  1B50  00D5               	movwf	___ftadd@f2
  9056  1B51  0860               	movf	___ftsub@f2+1,w
  9057  1B52  00D6               	movwf	___ftadd@f2+1
  9058  1B53  0861               	movf	___ftsub@f2+2,w
  9059  1B54  00D7               	movwf	___ftadd@f2+2
  9060  1B55  160A  118A  2444   	fcall	___ftadd
  9061  1B58  1283               	bcf	3,5	;RP0=0, select bank0
  9062  1B59  1303               	bcf	3,6	;RP1=0, select bank0
  9063  1B5A  0852               	movf	?___ftadd,w
  9064  1B5B  00DF               	movwf	?___ftsub
  9065  1B5C  0853               	movf	?___ftadd+1,w
  9066  1B5D  00E0               	movwf	?___ftsub+1
  9067  1B5E  0854               	movf	?___ftadd+2,w
  9068  1B5F  00E1               	movwf	?___ftsub+2
  9069  1B60  0008               	return
  9070  1B61                     __end_of___ftsub:	
  9071                           
  9072                           	psect	text31
  9073  1A6D                     __ptext31:	
  9074 ;; *************** function ___ftneg *****************
  9075 ;; Defined at:
  9076 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  f1              3    0[BANK0 ] float 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  3    0[BANK0 ] float 
  9083 ;; Registers used:
  9084 ;;		wreg
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9090 ;;      Params:         0       3       0       0       0
  9091 ;;      Locals:         0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0
  9093 ;;      Totals:         0       3       0       0       0
  9094 ;;Total ram usage:        3 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    1
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_sprintf
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           
  9105                           ;psect for function ___ftneg
  9106  1A6D                     ___ftneg:	
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in ___ftneg: [wreg]
  9110  1A6D  1283               	bcf	3,5	;RP0=0, select bank0
  9111  1A6E  1303               	bcf	3,6	;RP1=0, select bank0
  9112  1A6F  0822               	movf	___ftneg@f1+2,w
  9113  1A70  0421               	iorwf	___ftneg@f1+1,w
  9114  1A71  0420               	iorwf	___ftneg@f1,w
  9115  1A72  1903               	skipnz
  9116  1A73  0008               	return
  9117  1A74  3080               	movlw	128
  9118  1A75  06A2               	xorwf	___ftneg@f1+2,f
  9119  1A76  0008               	return
  9120  1A77                     __end_of___ftneg:	
  9121                           
  9122                           	psect	text32
  9123  1E59                     __ptext32:	
  9124 ;; *************** function ___ftge *****************
  9125 ;; Defined at:
  9126 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;  ff1             3    0[BANK0 ] float 
  9129 ;;  ff2             3    3[BANK0 ] float 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;		None
  9132 ;; Return value:  Size  Location     Type
  9133 ;;		None               void
  9134 ;; Registers used:
  9135 ;;		wreg, status,2, status,0
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9141 ;;      Params:         0       6       0       0       0
  9142 ;;      Locals:         0       0       0       0       0
  9143 ;;      Temps:          0       6       0       0       0
  9144 ;;      Totals:         0      12       0       0       0
  9145 ;;Total ram usage:       12 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:    1
  9148 ;; This function calls:
  9149 ;;		Nothing
  9150 ;; This function is called by:
  9151 ;;		_sprintf
  9152 ;;		_checkCurrent
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           
  9157                           ;psect for function ___ftge
  9158  1E59                     ___ftge:	
  9159                           
  9160                           ;incstack = 0
  9161                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9162  1E59  1283               	bcf	3,5	;RP0=0, select bank0
  9163  1E5A  1303               	bcf	3,6	;RP1=0, select bank0
  9164  1E5B  1FA2               	btfss	___ftge@ff1+2,7
  9165  1E5C  2E82               	goto	l3756
  9166  1E5D  3000               	movlw	0
  9167  1E5E  00A6               	movwf	??___ftge
  9168  1E5F  3000               	movlw	0
  9169  1E60  00A7               	movwf	??___ftge+1
  9170  1E61  3080               	movlw	128
  9171  1E62  00A8               	movwf	??___ftge+2
  9172  1E63  0920               	comf	___ftge@ff1,w
  9173  1E64  00A9               	movwf	??___ftge+3
  9174  1E65  0921               	comf	___ftge@ff1+1,w
  9175  1E66  00AA               	movwf	??___ftge+4
  9176  1E67  0922               	comf	___ftge@ff1+2,w
  9177  1E68  00AB               	movwf	??___ftge+5
  9178  1E69  0AA9               	incf	??___ftge+3,f
  9179  1E6A  1903               	skipnz
  9180  1E6B  0AAA               	incf	??___ftge+4,f
  9181  1E6C  1903               	skipnz
  9182  1E6D  0AAB               	incf	??___ftge+5,f
  9183  1E6E  0829               	movf	??___ftge+3,w
  9184  1E6F  07A6               	addwf	??___ftge,f
  9185  1E70  082A               	movf	??___ftge+4,w
  9186  1E71  1803               	skipnc
  9187  1E72  0F2A               	incfsz	??___ftge+4,w
  9188  1E73  2E75               	goto	u5411
  9189  1E74  2E76               	goto	u5412
  9190  1E75                     u5411:	
  9191  1E75  07A7               	addwf	??___ftge+1,f
  9192  1E76                     u5412:	
  9193  1E76  082B               	movf	??___ftge+5,w
  9194  1E77  1803               	skipnc
  9195  1E78  0F2B               	incfsz	??___ftge+5,w
  9196  1E79  2E7B               	goto	u5413
  9197  1E7A  2E7C               	goto	u5414
  9198  1E7B                     u5413:	
  9199  1E7B  07A8               	addwf	??___ftge+2,f
  9200  1E7C                     u5414:	
  9201  1E7C  0826               	movf	??___ftge,w
  9202  1E7D  00A0               	movwf	___ftge@ff1
  9203  1E7E  0827               	movf	??___ftge+1,w
  9204  1E7F  00A1               	movwf	___ftge@ff1+1
  9205  1E80  0828               	movf	??___ftge+2,w
  9206  1E81  00A2               	movwf	___ftge@ff1+2
  9207  1E82                     l3756:	
  9208  1E82  1FA5               	btfss	___ftge@ff2+2,7
  9209  1E83  2EA9               	goto	l3760
  9210  1E84  3000               	movlw	0
  9211  1E85  00A6               	movwf	??___ftge
  9212  1E86  3000               	movlw	0
  9213  1E87  00A7               	movwf	??___ftge+1
  9214  1E88  3080               	movlw	128
  9215  1E89  00A8               	movwf	??___ftge+2
  9216  1E8A  0923               	comf	___ftge@ff2,w
  9217  1E8B  00A9               	movwf	??___ftge+3
  9218  1E8C  0924               	comf	___ftge@ff2+1,w
  9219  1E8D  00AA               	movwf	??___ftge+4
  9220  1E8E  0925               	comf	___ftge@ff2+2,w
  9221  1E8F  00AB               	movwf	??___ftge+5
  9222  1E90  0AA9               	incf	??___ftge+3,f
  9223  1E91  1903               	skipnz
  9224  1E92  0AAA               	incf	??___ftge+4,f
  9225  1E93  1903               	skipnz
  9226  1E94  0AAB               	incf	??___ftge+5,f
  9227  1E95  0829               	movf	??___ftge+3,w
  9228  1E96  07A6               	addwf	??___ftge,f
  9229  1E97  082A               	movf	??___ftge+4,w
  9230  1E98  1803               	skipnc
  9231  1E99  0F2A               	incfsz	??___ftge+4,w
  9232  1E9A  2E9C               	goto	u5431
  9233  1E9B  2E9D               	goto	u5432
  9234  1E9C                     u5431:	
  9235  1E9C  07A7               	addwf	??___ftge+1,f
  9236  1E9D                     u5432:	
  9237  1E9D  082B               	movf	??___ftge+5,w
  9238  1E9E  1803               	skipnc
  9239  1E9F  0F2B               	incfsz	??___ftge+5,w
  9240  1EA0  2EA2               	goto	u5433
  9241  1EA1  2EA3               	goto	u5434
  9242  1EA2                     u5433:	
  9243  1EA2  07A8               	addwf	??___ftge+2,f
  9244  1EA3                     u5434:	
  9245  1EA3  0826               	movf	??___ftge,w
  9246  1EA4  00A3               	movwf	___ftge@ff2
  9247  1EA5  0827               	movf	??___ftge+1,w
  9248  1EA6  00A4               	movwf	___ftge@ff2+1
  9249  1EA7  0828               	movf	??___ftge+2,w
  9250  1EA8  00A5               	movwf	___ftge@ff2+2
  9251  1EA9                     l3760:	
  9252  1EA9  3080               	movlw	128
  9253  1EAA  06A2               	xorwf	___ftge@ff1+2,f
  9254  1EAB  3080               	movlw	128
  9255  1EAC  06A5               	xorwf	___ftge@ff2+2,f
  9256  1EAD  0825               	movf	___ftge@ff2+2,w
  9257  1EAE  0222               	subwf	___ftge@ff1+2,w
  9258  1EAF  1D03               	skipz
  9259  1EB0  0008               	return
  9260  1EB1  0824               	movf	___ftge@ff2+1,w
  9261  1EB2  0221               	subwf	___ftge@ff1+1,w
  9262  1EB3  1D03               	skipz
  9263  1EB4  0008               	return
  9264  1EB5  0823               	movf	___ftge@ff2,w
  9265  1EB6  0220               	subwf	___ftge@ff1,w
  9266  1EB7  0008               	return
  9267  1EB8                     __end_of___ftge:	
  9268                           
  9269                           	psect	text33
  9270  1CC5                     __ptext33:	
  9271 ;; *************** function _batteryVoltage *****************
  9272 ;; Defined at:
  9273 ;;		line 293 in file "PIC16F917 Battery Management.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;		None
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;  i               1   70[BANK0 ] unsigned char 
  9278 ;;  sum             3   67[BANK0 ] float 
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  3   63[BANK0 ] float 
  9281 ;; Registers used:
  9282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9288 ;;      Params:         0       3       0       0       0
  9289 ;;      Locals:         0       4       0       0       0
  9290 ;;      Temps:          0       1       0       0       0
  9291 ;;      Totals:         0       8       0       0       0
  9292 ;;Total ram usage:        8 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    3
  9295 ;; This function calls:
  9296 ;;		___bmul
  9297 ;;		___ftadd
  9298 ;; This function is called by:
  9299 ;;		_displayLCD
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _batteryVoltage
  9305  1CC5                     _batteryVoltage:	
  9306                           
  9307                           ;PIC16F917 Battery Management.c: 295: float sum = 0;
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _batteryVoltage: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9311  1CC5  3000               	movlw	0
  9312  1CC6  1283               	bcf	3,5	;RP0=0, select bank0
  9313  1CC7  1303               	bcf	3,6	;RP1=0, select bank0
  9314  1CC8  00E3               	movwf	batteryVoltage@sum
  9315  1CC9  3000               	movlw	0
  9316  1CCA  00E4               	movwf	batteryVoltage@sum+1
  9317  1CCB  3000               	movlw	0
  9318  1CCC  00E5               	movwf	batteryVoltage@sum+2
  9319                           
  9320                           ;PIC16F917 Battery Management.c: 297: for(uint8_t i = 0; i < 6; i++)
  9321  1CCD  01E6               	clrf	batteryVoltage@i
  9322  1CCE  3006               	movlw	6
  9323  1CCF  0266               	subwf	batteryVoltage@i,w
  9324  1CD0  1803               	btfsc	3,0
  9325  1CD1  2D04               	goto	l4096
  9326  1CD2                     l4090:	
  9327                           
  9328                           ;PIC16F917 Battery Management.c: 298: {
  9329                           ;PIC16F917 Battery Management.c: 299: sum += cellVolt[i];
  9330  1CD2  3003               	movlw	3
  9331  1CD3  00E2               	movwf	??_batteryVoltage
  9332  1CD4  0862               	movf	??_batteryVoltage,w
  9333  1CD5  00AE               	movwf	___bmul@multiplicand
  9334  1CD6  0866               	movf	batteryVoltage@i,w
  9335  1CD7  160A  158A  22C0  160A  158A  	fcall	___bmul
  9336  1CDC  3EA0               	addlw	(low (_cellVolt| 0))& (0+255)
  9337  1CDD  0084               	movwf	4
  9338  1CDE  1383               	bcf	3,7	;select IRP bank1
  9339  1CDF  0800               	movf	0,w
  9340  1CE0  1283               	bcf	3,5	;RP0=0, select bank0
  9341  1CE1  1303               	bcf	3,6	;RP1=0, select bank0
  9342  1CE2  00D2               	movwf	___ftadd@f1
  9343  1CE3  0A84               	incf	4,f
  9344  1CE4  0800               	movf	0,w
  9345  1CE5  00D3               	movwf	___ftadd@f1+1
  9346  1CE6  0A84               	incf	4,f
  9347  1CE7  0800               	movf	0,w
  9348  1CE8  00D4               	movwf	___ftadd@f1+2
  9349  1CE9  0863               	movf	batteryVoltage@sum,w
  9350  1CEA  00D5               	movwf	___ftadd@f2
  9351  1CEB  0864               	movf	batteryVoltage@sum+1,w
  9352  1CEC  00D6               	movwf	___ftadd@f2+1
  9353  1CED  0865               	movf	batteryVoltage@sum+2,w
  9354  1CEE  00D7               	movwf	___ftadd@f2+2
  9355  1CEF  160A  118A  2444  160A  158A  	fcall	___ftadd
  9356  1CF4  1283               	bcf	3,5	;RP0=0, select bank0
  9357  1CF5  1303               	bcf	3,6	;RP1=0, select bank0
  9358  1CF6  0852               	movf	?___ftadd,w
  9359  1CF7  00E3               	movwf	batteryVoltage@sum
  9360  1CF8  0853               	movf	?___ftadd+1,w
  9361  1CF9  00E4               	movwf	batteryVoltage@sum+1
  9362  1CFA  0854               	movf	?___ftadd+2,w
  9363  1CFB  00E5               	movwf	batteryVoltage@sum+2
  9364  1CFC  3001               	movlw	1
  9365  1CFD  00E2               	movwf	??_batteryVoltage
  9366  1CFE  0862               	movf	??_batteryVoltage,w
  9367  1CFF  07E6               	addwf	batteryVoltage@i,f
  9368  1D00  3006               	movlw	6
  9369  1D01  0266               	subwf	batteryVoltage@i,w
  9370  1D02  1C03               	skipc
  9371  1D03  2CD2               	goto	l4090
  9372  1D04                     l4096:	
  9373                           
  9374                           ;PIC16F917 Battery Management.c: 300: }
  9375                           ;PIC16F917 Battery Management.c: 302: return sum;
  9376  1D04  0863               	movf	batteryVoltage@sum,w
  9377  1D05  00DF               	movwf	?_batteryVoltage
  9378  1D06  0864               	movf	batteryVoltage@sum+1,w
  9379  1D07  00E0               	movwf	?_batteryVoltage+1
  9380  1D08  0865               	movf	batteryVoltage@sum+2,w
  9381  1D09  00E1               	movwf	?_batteryVoltage+2
  9382  1D0A  0008               	return
  9383  1D0B                     __end_of_batteryVoltage:	
  9384                           
  9385                           	psect	text34
  9386  1444                     __ptext34:	
  9387 ;; *************** function ___ftadd *****************
  9388 ;; Defined at:
  9389 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  f1              3   50[BANK0 ] float 
  9392 ;;  f2              3   53[BANK0 ] float 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  exp1            1   62[BANK0 ] unsigned char 
  9395 ;;  exp2            1   61[BANK0 ] unsigned char 
  9396 ;;  sign            1   60[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  3   50[BANK0 ] float 
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9406 ;;      Params:         0       6       0       0       0
  9407 ;;      Locals:         0       3       0       0       0
  9408 ;;      Temps:          0       4       0       0       0
  9409 ;;      Totals:         0      13       0       0       0
  9410 ;;Total ram usage:       13 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    2
  9413 ;; This function calls:
  9414 ;;		___ftpack
  9415 ;; This function is called by:
  9416 ;;		_batteryVoltage
  9417 ;;		_sprintf
  9418 ;;		___ftsub
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           
  9423                           ;psect for function ___ftadd
  9424  1444                     ___ftadd:	
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9428  1444  1283               	bcf	3,5	;RP0=0, select bank0
  9429  1445  1303               	bcf	3,6	;RP1=0, select bank0
  9430  1446  0852               	movf	___ftadd@f1,w
  9431  1447  00D8               	movwf	??___ftadd
  9432  1448  0853               	movf	___ftadd@f1+1,w
  9433  1449  00D9               	movwf	??___ftadd+1
  9434  144A  0854               	movf	___ftadd@f1+2,w
  9435  144B  00DA               	movwf	??___ftadd+2
  9436  144C  1003               	clrc
  9437  144D  0D59               	rlf	??___ftadd+1,w
  9438  144E  0D5A               	rlf	??___ftadd+2,w
  9439  144F  00DB               	movwf	??___ftadd+3
  9440  1450  085B               	movf	??___ftadd+3,w
  9441  1451  00DE               	movwf	___ftadd@exp1
  9442  1452  0855               	movf	___ftadd@f2,w
  9443  1453  00D8               	movwf	??___ftadd
  9444  1454  0856               	movf	___ftadd@f2+1,w
  9445  1455  00D9               	movwf	??___ftadd+1
  9446  1456  0857               	movf	___ftadd@f2+2,w
  9447  1457  00DA               	movwf	??___ftadd+2
  9448  1458  1003               	clrc
  9449  1459  0D59               	rlf	??___ftadd+1,w
  9450  145A  0D5A               	rlf	??___ftadd+2,w
  9451  145B  00DB               	movwf	??___ftadd+3
  9452  145C  085B               	movf	??___ftadd+3,w
  9453  145D  00DD               	movwf	___ftadd@exp2
  9454  145E  085E               	movf	___ftadd@exp1,w
  9455  145F  1903               	btfsc	3,2
  9456  1460  2C6D               	goto	l3374
  9457  1461  085D               	movf	___ftadd@exp2,w
  9458  1462  025E               	subwf	___ftadd@exp1,w
  9459  1463  1803               	skipnc
  9460  1464  2C74               	goto	l3378
  9461  1465  035E               	decf	___ftadd@exp1,w
  9462  1466  3AFF               	xorlw	255
  9463  1467  075D               	addwf	___ftadd@exp2,w
  9464  1468  00D8               	movwf	??___ftadd
  9465  1469  3019               	movlw	25
  9466  146A  0258               	subwf	??___ftadd,w
  9467  146B  1C03               	skipc
  9468  146C  2C74               	goto	l3378
  9469  146D                     l3374:	
  9470  146D  0855               	movf	___ftadd@f2,w
  9471  146E  00D2               	movwf	?___ftadd
  9472  146F  0856               	movf	___ftadd@f2+1,w
  9473  1470  00D3               	movwf	?___ftadd+1
  9474  1471  0857               	movf	___ftadd@f2+2,w
  9475  1472  00D4               	movwf	?___ftadd+2
  9476  1473  0008               	return
  9477  1474                     l3378:	
  9478  1474  085D               	movf	___ftadd@exp2,w
  9479  1475  1903               	btfsc	3,2
  9480  1476  0008               	return
  9481  1477  085E               	movf	___ftadd@exp1,w
  9482  1478  025D               	subwf	___ftadd@exp2,w
  9483  1479  1803               	skipnc
  9484  147A  2C83               	goto	l3384
  9485  147B  035D               	decf	___ftadd@exp2,w
  9486  147C  3AFF               	xorlw	255
  9487  147D  075E               	addwf	___ftadd@exp1,w
  9488  147E  00D8               	movwf	??___ftadd
  9489  147F  3019               	movlw	25
  9490  1480  0258               	subwf	??___ftadd,w
  9491  1481  1803               	btfsc	3,0
  9492  1482  0008               	return
  9493  1483                     l3384:	
  9494  1483  3006               	movlw	6
  9495  1484  00D8               	movwf	??___ftadd
  9496  1485  0858               	movf	??___ftadd,w
  9497  1486  00DC               	movwf	___ftadd@sign
  9498  1487  1BD4               	btfsc	___ftadd@f1+2,7
  9499  1488  17DC               	bsf	___ftadd@sign,7
  9500  1489  1BD7               	btfsc	___ftadd@f2+2,7
  9501  148A  175C               	bsf	___ftadd@sign,6
  9502  148B  17D3               	bsf	___ftadd@f1+1,7
  9503  148C  30FF               	movlw	255
  9504  148D  05D2               	andwf	___ftadd@f1,f
  9505  148E  30FF               	movlw	255
  9506  148F  05D3               	andwf	___ftadd@f1+1,f
  9507  1490  3000               	movlw	0
  9508  1491  05D4               	andwf	___ftadd@f1+2,f
  9509  1492  17D6               	bsf	___ftadd@f2+1,7
  9510  1493  30FF               	movlw	255
  9511  1494  05D5               	andwf	___ftadd@f2,f
  9512  1495  30FF               	movlw	255
  9513  1496  05D6               	andwf	___ftadd@f2+1,f
  9514  1497  3000               	movlw	0
  9515  1498  05D7               	andwf	___ftadd@f2+2,f
  9516  1499  085D               	movf	___ftadd@exp2,w
  9517  149A  025E               	subwf	___ftadd@exp1,w
  9518  149B  1803               	skipnc
  9519  149C  2CC3               	goto	l3406
  9520  149D                     l3396:	
  9521  149D  3001               	movlw	1
  9522  149E                     u4645:	
  9523  149E  1003               	clrc
  9524  149F  0DD5               	rlf	___ftadd@f2,f
  9525  14A0  0DD6               	rlf	___ftadd@f2+1,f
  9526  14A1  0DD7               	rlf	___ftadd@f2+2,f
  9527  14A2  3EFF               	addlw	-1
  9528  14A3  1D03               	skipz
  9529  14A4  2C9E               	goto	u4645
  9530  14A5  3001               	movlw	1
  9531  14A6  02DD               	subwf	___ftadd@exp2,f
  9532  14A7  085D               	movf	___ftadd@exp2,w
  9533  14A8  065E               	xorwf	___ftadd@exp1,w
  9534  14A9  1903               	skipnz
  9535  14AA  2CBE               	goto	l3404
  9536  14AB  3001               	movlw	1
  9537  14AC  02DC               	subwf	___ftadd@sign,f
  9538  14AD  085C               	movf	___ftadd@sign,w
  9539  14AE  3907               	andlw	7
  9540  14AF  1903               	btfsc	3,2
  9541  14B0  2CBE               	goto	l3404
  9542  14B1  2C9D               	goto	l3396
  9543  14B2                     l3402:	
  9544  14B2  3001               	movlw	1
  9545  14B3                     u4675:	
  9546  14B3  1003               	clrc
  9547  14B4  0CD4               	rrf	___ftadd@f1+2,f
  9548  14B5  0CD3               	rrf	___ftadd@f1+1,f
  9549  14B6  0CD2               	rrf	___ftadd@f1,f
  9550  14B7  3EFF               	addlw	-1
  9551  14B8  1D03               	skipz
  9552  14B9  2CB3               	goto	u4675
  9553  14BA  3001               	movlw	1
  9554  14BB  00D8               	movwf	??___ftadd
  9555  14BC  0858               	movf	??___ftadd,w
  9556  14BD  07DE               	addwf	___ftadd@exp1,f
  9557  14BE                     l3404:	
  9558  14BE  085E               	movf	___ftadd@exp1,w
  9559  14BF  065D               	xorwf	___ftadd@exp2,w
  9560  14C0  1903               	btfsc	3,2
  9561  14C1  2CEC               	goto	l636
  9562  14C2  2CB2               	goto	l3402
  9563  14C3                     l3406:	
  9564  14C3  085E               	movf	___ftadd@exp1,w
  9565  14C4  025D               	subwf	___ftadd@exp2,w
  9566  14C5  1803               	skipnc
  9567  14C6  2CEC               	goto	l636
  9568  14C7                     l3408:	
  9569  14C7  3001               	movlw	1
  9570  14C8                     u4705:	
  9571  14C8  1003               	clrc
  9572  14C9  0DD2               	rlf	___ftadd@f1,f
  9573  14CA  0DD3               	rlf	___ftadd@f1+1,f
  9574  14CB  0DD4               	rlf	___ftadd@f1+2,f
  9575  14CC  3EFF               	addlw	-1
  9576  14CD  1D03               	skipz
  9577  14CE  2CC8               	goto	u4705
  9578  14CF  3001               	movlw	1
  9579  14D0  02DE               	subwf	___ftadd@exp1,f
  9580  14D1  085D               	movf	___ftadd@exp2,w
  9581  14D2  065E               	xorwf	___ftadd@exp1,w
  9582  14D3  1903               	skipnz
  9583  14D4  2CE8               	goto	l3416
  9584  14D5  3001               	movlw	1
  9585  14D6  02DC               	subwf	___ftadd@sign,f
  9586  14D7  085C               	movf	___ftadd@sign,w
  9587  14D8  3907               	andlw	7
  9588  14D9  1903               	btfsc	3,2
  9589  14DA  2CE8               	goto	l3416
  9590  14DB  2CC7               	goto	l3408
  9591  14DC                     l3414:	
  9592  14DC  3001               	movlw	1
  9593  14DD                     u4735:	
  9594  14DD  1003               	clrc
  9595  14DE  0CD7               	rrf	___ftadd@f2+2,f
  9596  14DF  0CD6               	rrf	___ftadd@f2+1,f
  9597  14E0  0CD5               	rrf	___ftadd@f2,f
  9598  14E1  3EFF               	addlw	-1
  9599  14E2  1D03               	skipz
  9600  14E3  2CDD               	goto	u4735
  9601  14E4  3001               	movlw	1
  9602  14E5  00D8               	movwf	??___ftadd
  9603  14E6  0858               	movf	??___ftadd,w
  9604  14E7  07DD               	addwf	___ftadd@exp2,f
  9605  14E8                     l3416:	
  9606  14E8  085E               	movf	___ftadd@exp1,w
  9607  14E9  065D               	xorwf	___ftadd@exp2,w
  9608  14EA  1D03               	skipz
  9609  14EB  2CDC               	goto	l3414
  9610  14EC                     l636:	
  9611  14EC  1FDC               	btfss	___ftadd@sign,7
  9612  14ED  2CFE               	goto	l3420
  9613  14EE  30FF               	movlw	255
  9614  14EF  06D2               	xorwf	___ftadd@f1,f
  9615  14F0  30FF               	movlw	255
  9616  14F1  06D3               	xorwf	___ftadd@f1+1,f
  9617  14F2  30FF               	movlw	255
  9618  14F3  06D4               	xorwf	___ftadd@f1+2,f
  9619  14F4  3001               	movlw	1
  9620  14F5  07D2               	addwf	___ftadd@f1,f
  9621  14F6  3000               	movlw	0
  9622  14F7  1803               	skipnc
  9623  14F8  3001               	movlw	1
  9624  14F9  07D3               	addwf	___ftadd@f1+1,f
  9625  14FA  3000               	movlw	0
  9626  14FB  1803               	skipnc
  9627  14FC  3001               	movlw	1
  9628  14FD  07D4               	addwf	___ftadd@f1+2,f
  9629  14FE                     l3420:	
  9630  14FE  1F5C               	btfss	___ftadd@sign,6
  9631  14FF  2D10               	goto	l3424
  9632  1500  30FF               	movlw	255
  9633  1501  06D5               	xorwf	___ftadd@f2,f
  9634  1502  30FF               	movlw	255
  9635  1503  06D6               	xorwf	___ftadd@f2+1,f
  9636  1504  30FF               	movlw	255
  9637  1505  06D7               	xorwf	___ftadd@f2+2,f
  9638  1506  3001               	movlw	1
  9639  1507  07D5               	addwf	___ftadd@f2,f
  9640  1508  3000               	movlw	0
  9641  1509  1803               	skipnc
  9642  150A  3001               	movlw	1
  9643  150B  07D6               	addwf	___ftadd@f2+1,f
  9644  150C  3000               	movlw	0
  9645  150D  1803               	skipnc
  9646  150E  3001               	movlw	1
  9647  150F  07D7               	addwf	___ftadd@f2+2,f
  9648  1510                     l3424:	
  9649  1510  01DC               	clrf	___ftadd@sign
  9650  1511  0852               	movf	___ftadd@f1,w
  9651  1512  07D5               	addwf	___ftadd@f2,f
  9652  1513  0853               	movf	___ftadd@f1+1,w
  9653  1514  1103               	clrz
  9654  1515  1803               	skipnc
  9655  1516  0A53               	incf	___ftadd@f1+1,w
  9656  1517  1D03               	btfss	3,2
  9657  1518  07D6               	addwf	___ftadd@f2+1,f
  9658  1519  0854               	movf	___ftadd@f1+2,w
  9659  151A  1103               	clrz
  9660  151B  1803               	skipnc
  9661  151C  0A54               	incf	___ftadd@f1+2,w
  9662  151D  1D03               	btfss	3,2
  9663  151E  07D7               	addwf	___ftadd@f2+2,f
  9664  151F  1FD7               	btfss	___ftadd@f2+2,7
  9665  1520  2D33               	goto	l3434
  9666  1521  30FF               	movlw	255
  9667  1522  06D5               	xorwf	___ftadd@f2,f
  9668  1523  30FF               	movlw	255
  9669  1524  06D6               	xorwf	___ftadd@f2+1,f
  9670  1525  30FF               	movlw	255
  9671  1526  06D7               	xorwf	___ftadd@f2+2,f
  9672  1527  3001               	movlw	1
  9673  1528  07D5               	addwf	___ftadd@f2,f
  9674  1529  3000               	movlw	0
  9675  152A  1803               	skipnc
  9676  152B  3001               	movlw	1
  9677  152C  07D6               	addwf	___ftadd@f2+1,f
  9678  152D  3000               	movlw	0
  9679  152E  1803               	skipnc
  9680  152F  3001               	movlw	1
  9681  1530  07D7               	addwf	___ftadd@f2+2,f
  9682  1531  01DC               	clrf	___ftadd@sign
  9683  1532  0ADC               	incf	___ftadd@sign,f
  9684  1533                     l3434:	
  9685  1533  0855               	movf	___ftadd@f2,w
  9686  1534  00A0               	movwf	___ftpack@arg
  9687  1535  0856               	movf	___ftadd@f2+1,w
  9688  1536  00A1               	movwf	___ftpack@arg+1
  9689  1537  0857               	movf	___ftadd@f2+2,w
  9690  1538  00A2               	movwf	___ftpack@arg+2
  9691  1539  085E               	movf	___ftadd@exp1,w
  9692  153A  00D8               	movwf	??___ftadd
  9693  153B  0858               	movf	??___ftadd,w
  9694  153C  00A3               	movwf	___ftpack@exp
  9695  153D  085C               	movf	___ftadd@sign,w
  9696  153E  00D9               	movwf	??___ftadd+1
  9697  153F  0859               	movf	??___ftadd+1,w
  9698  1540  00A4               	movwf	___ftpack@sign
  9699  1541  160A  158A  2723   	fcall	___ftpack
  9700  1544  1283               	bcf	3,5	;RP0=0, select bank0
  9701  1545  1303               	bcf	3,6	;RP1=0, select bank0
  9702  1546  0820               	movf	?___ftpack,w
  9703  1547  00D2               	movwf	?___ftadd
  9704  1548  0821               	movf	?___ftpack+1,w
  9705  1549  00D3               	movwf	?___ftadd+1
  9706  154A  0822               	movf	?___ftpack+2,w
  9707  154B  00D4               	movwf	?___ftadd+2
  9708  154C  0008               	return
  9709  154D                     __end_of___ftadd:	
  9710                           
  9711                           	psect	text35
  9712  1F23                     __ptext35:	
  9713 ;; *************** function ___ftpack *****************
  9714 ;; Defined at:
  9715 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  arg             3    0[BANK0 ] unsigned um
  9718 ;;  exp             1    3[BANK0 ] unsigned char 
  9719 ;;  sign            1    4[BANK0 ] unsigned char 
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;		None
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  3    0[BANK0 ] float 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2, status,0
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9731 ;;      Params:         0       5       0       0       0
  9732 ;;      Locals:         0       0       0       0       0
  9733 ;;      Temps:          0       3       0       0       0
  9734 ;;      Totals:         0       8       0       0       0
  9735 ;;Total ram usage:        8 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; Hardware stack levels required when called:    1
  9738 ;; This function calls:
  9739 ;;		Nothing
  9740 ;; This function is called by:
  9741 ;;		___ftadd
  9742 ;;		___ftdiv
  9743 ;;		___ftmul
  9744 ;;		___lbtoft
  9745 ;;		___lltoft
  9746 ;;		___lwtoft
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function ___ftpack
  9752  1F23                     ___ftpack:	
  9753                           
  9754                           ;incstack = 0
  9755                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9756  1F23  1283               	bcf	3,5	;RP0=0, select bank0
  9757  1F24  1303               	bcf	3,6	;RP1=0, select bank0
  9758  1F25  0823               	movf	___ftpack@exp,w
  9759  1F26  1903               	btfsc	3,2
  9760  1F27  2F2D               	goto	l3286
  9761  1F28  0822               	movf	___ftpack@arg+2,w
  9762  1F29  0421               	iorwf	___ftpack@arg+1,w
  9763  1F2A  0420               	iorwf	___ftpack@arg,w
  9764  1F2B  1D03               	skipz
  9765  1F2C  2F40               	goto	l3292
  9766  1F2D                     l3286:	
  9767  1F2D  3000               	movlw	0
  9768  1F2E  00A0               	movwf	?___ftpack
  9769  1F2F  3000               	movlw	0
  9770  1F30  00A1               	movwf	?___ftpack+1
  9771  1F31  3000               	movlw	0
  9772  1F32  00A2               	movwf	?___ftpack+2
  9773  1F33  0008               	return
  9774  1F34                     l3290:	
  9775  1F34  3001               	movlw	1
  9776  1F35  00A5               	movwf	??___ftpack
  9777  1F36  0825               	movf	??___ftpack,w
  9778  1F37  07A3               	addwf	___ftpack@exp,f
  9779  1F38  3001               	movlw	1
  9780  1F39                     u4325:	
  9781  1F39  1003               	clrc
  9782  1F3A  0CA2               	rrf	___ftpack@arg+2,f
  9783  1F3B  0CA1               	rrf	___ftpack@arg+1,f
  9784  1F3C  0CA0               	rrf	___ftpack@arg,f
  9785  1F3D  3EFF               	addlw	-1
  9786  1F3E  1D03               	skipz
  9787  1F3F  2F39               	goto	u4325
  9788  1F40                     l3292:	
  9789  1F40  30FE               	movlw	254
  9790  1F41  0522               	andwf	___ftpack@arg+2,w
  9791  1F42  1903               	btfsc	3,2
  9792  1F43  2F5B               	goto	l605
  9793  1F44  2F34               	goto	l3290
  9794  1F45                     l3294:	
  9795  1F45  3001               	movlw	1
  9796  1F46  00A5               	movwf	??___ftpack
  9797  1F47  0825               	movf	??___ftpack,w
  9798  1F48  07A3               	addwf	___ftpack@exp,f
  9799  1F49  3001               	movlw	1
  9800  1F4A  07A0               	addwf	___ftpack@arg,f
  9801  1F4B  3000               	movlw	0
  9802  1F4C  1803               	skipnc
  9803  1F4D  3001               	movlw	1
  9804  1F4E  07A1               	addwf	___ftpack@arg+1,f
  9805  1F4F  3000               	movlw	0
  9806  1F50  1803               	skipnc
  9807  1F51  3001               	movlw	1
  9808  1F52  07A2               	addwf	___ftpack@arg+2,f
  9809  1F53  3001               	movlw	1
  9810  1F54                     u4345:	
  9811  1F54  1003               	clrc
  9812  1F55  0CA2               	rrf	___ftpack@arg+2,f
  9813  1F56  0CA1               	rrf	___ftpack@arg+1,f
  9814  1F57  0CA0               	rrf	___ftpack@arg,f
  9815  1F58  3EFF               	addlw	-1
  9816  1F59  1D03               	skipz
  9817  1F5A  2F54               	goto	u4345
  9818  1F5B                     l605:	
  9819  1F5B  30FF               	movlw	255
  9820  1F5C  0522               	andwf	___ftpack@arg+2,w
  9821  1F5D  1903               	btfsc	3,2
  9822  1F5E  2F6E               	goto	l3302
  9823  1F5F  2F45               	goto	l3294
  9824  1F60                     l3304:	
  9825  1F60  3002               	movlw	2
  9826  1F61  0223               	subwf	___ftpack@exp,w
  9827  1F62  1C03               	btfss	3,0
  9828  1F63  2F70               	goto	l612
  9829  1F64  3001               	movlw	1
  9830  1F65  02A3               	subwf	___ftpack@exp,f
  9831  1F66  3001               	movlw	1
  9832  1F67                     u4365:	
  9833  1F67  1003               	clrc
  9834  1F68  0DA0               	rlf	___ftpack@arg,f
  9835  1F69  0DA1               	rlf	___ftpack@arg+1,f
  9836  1F6A  0DA2               	rlf	___ftpack@arg+2,f
  9837  1F6B  3EFF               	addlw	-1
  9838  1F6C  1D03               	skipz
  9839  1F6D  2F67               	goto	u4365
  9840  1F6E                     l3302:	
  9841  1F6E  1FA1               	btfss	___ftpack@arg+1,7
  9842  1F6F  2F60               	goto	l3304
  9843  1F70                     l612:	
  9844  1F70  1823               	btfsc	___ftpack@exp,0
  9845  1F71  2F78               	goto	l613
  9846  1F72  30FF               	movlw	255
  9847  1F73  05A0               	andwf	___ftpack@arg,f
  9848  1F74  307F               	movlw	127
  9849  1F75  05A1               	andwf	___ftpack@arg+1,f
  9850  1F76  30FF               	movlw	255
  9851  1F77  05A2               	andwf	___ftpack@arg+2,f
  9852  1F78                     l613:	
  9853  1F78  1003               	clrc
  9854  1F79  0CA3               	rrf	___ftpack@exp,f
  9855  1F7A  0823               	movf	___ftpack@exp,w
  9856  1F7B  00A5               	movwf	??___ftpack
  9857  1F7C  01A6               	clrf	??___ftpack+1
  9858  1F7D  01A7               	clrf	??___ftpack+2
  9859  1F7E  3010               	movlw	16
  9860  1F7F                     u4405:	
  9861  1F7F  1003               	clrc
  9862  1F80  0DA5               	rlf	??___ftpack,f
  9863  1F81  0DA6               	rlf	??___ftpack+1,f
  9864  1F82  0DA7               	rlf	??___ftpack+2,f
  9865  1F83  3EFF               	addlw	-1
  9866  1F84  1D03               	skipz
  9867  1F85  2F7F               	goto	u4405
  9868  1F86  0825               	movf	??___ftpack,w
  9869  1F87  04A0               	iorwf	___ftpack@arg,f
  9870  1F88  0826               	movf	??___ftpack+1,w
  9871  1F89  04A1               	iorwf	___ftpack@arg+1,f
  9872  1F8A  0827               	movf	??___ftpack+2,w
  9873  1F8B  04A2               	iorwf	___ftpack@arg+2,f
  9874  1F8C  0824               	movf	___ftpack@sign,w
  9875  1F8D  1903               	btfsc	3,2
  9876  1F8E  0008               	return
  9877  1F8F  17A2               	bsf	___ftpack@arg+2,7
  9878  1F90  0008               	return
  9879  1F91                     __end_of___ftpack:	
  9880                           
  9881                           	psect	text36
  9882  1AC0                     __ptext36:	
  9883 ;; *************** function ___bmul *****************
  9884 ;; Defined at:
  9885 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;  multiplier      1    wreg     unsigned char 
  9888 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;  multiplier      1   17[BANK0 ] unsigned char 
  9891 ;;  product         1   16[BANK0 ] unsigned char 
  9892 ;; Return value:  Size  Location     Type
  9893 ;;                  1    wreg      unsigned char 
  9894 ;; Registers used:
  9895 ;;		wreg, status,2, status,0
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9901 ;;      Params:         0       1       0       0       0
  9902 ;;      Locals:         0       2       0       0       0
  9903 ;;      Temps:          0       1       0       0       0
  9904 ;;      Totals:         0       4       0       0       0
  9905 ;;Total ram usage:        4 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    1
  9908 ;; This function calls:
  9909 ;;		Nothing
  9910 ;; This function is called by:
  9911 ;;		_batteryVoltage
  9912 ;;		_fround
  9913 ;;		_scale
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function ___bmul
  9919  1AC0                     ___bmul:	
  9920                           
  9921                           ;incstack = 0
  9922                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9923                           ;___bmul@multiplier stored from wreg
  9924  1AC0  1283               	bcf	3,5	;RP0=0, select bank0
  9925  1AC1  1303               	bcf	3,6	;RP1=0, select bank0
  9926  1AC2  00B1               	movwf	___bmul@multiplier
  9927  1AC3  01B0               	clrf	___bmul@product
  9928  1AC4                     l2130:	
  9929  1AC4  1C31               	btfss	___bmul@multiplier,0
  9930  1AC5  2ACA               	goto	l2134
  9931  1AC6  082E               	movf	___bmul@multiplicand,w
  9932  1AC7  00AF               	movwf	??___bmul
  9933  1AC8  082F               	movf	??___bmul,w
  9934  1AC9  07B0               	addwf	___bmul@product,f
  9935  1ACA                     l2134:	
  9936  1ACA  1003               	clrc
  9937  1ACB  0DAE               	rlf	___bmul@multiplicand,f
  9938  1ACC  1003               	clrc
  9939  1ACD  0CB1               	rrf	___bmul@multiplier,f
  9940  1ACE  0831               	movf	___bmul@multiplier,w
  9941  1ACF  1D03               	btfss	3,2
  9942  1AD0  2AC4               	goto	l2130
  9943  1AD1  0830               	movf	___bmul@product,w
  9944  1AD2  0008               	return
  9945  1AD3                     __end_of___bmul:	
  9946                           
  9947                           	psect	text37
  9948  1C8B                     __ptext37:	
  9949 ;; *************** function _LCDWriteString *****************
  9950 ;; Defined at:
  9951 ;;		line 160 in file "lcd.h"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  a               2    3[BANK0 ] PTR unsigned char 
  9954 ;;		 -> btmStr(16), topStr(16), 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  i               2    8[BANK0 ] int 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;		None               void
  9959 ;; Registers used:
  9960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9966 ;;      Params:         0       2       0       0       0
  9967 ;;      Locals:         0       2       0       0       0
  9968 ;;      Temps:          0       3       0       0       0
  9969 ;;      Totals:         0       7       0       0       0
  9970 ;;Total ram usage:        7 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    3
  9973 ;; This function calls:
  9974 ;;		_LCDWriteChar
  9975 ;; This function is called by:
  9976 ;;		_main
  9977 ;;		_displayLCD
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _LCDWriteString
  9983  1C8B                     _LCDWriteString:	
  9984                           
  9985                           ;lcd.h: 162: for(int i=0;a[i]!='\0';i++)
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9989  1C8B  1283               	bcf	3,5	;RP0=0, select bank0
  9990  1C8C  1303               	bcf	3,6	;RP1=0, select bank0
  9991  1C8D  01A8               	clrf	LCDWriteString@i
  9992  1C8E  01A9               	clrf	LCDWriteString@i+1
  9993  1C8F                     l3878:	
  9994  1C8F  0828               	movf	LCDWriteString@i,w
  9995  1C90  0723               	addwf	LCDWriteString@a,w
  9996  1C91  00A6               	movwf	??_LCDWriteString+1
  9997  1C92  0824               	movf	LCDWriteString@a+1,w
  9998  1C93  00A5               	movwf	??_LCDWriteString
  9999  1C94  1803               	skipnc
 10000  1C95  0AA5               	incf	??_LCDWriteString,f
 10001  1C96  1BA8               	btfsc	LCDWriteString@i,7
 10002  1C97  03A5               	decf	??_LCDWriteString,f
 10003  1C98  1283               	bcf	3,5	;RP0=0, select bank0
 10004  1C99  1303               	bcf	3,6	;RP1=0, select bank0
 10005  1C9A  0825               	movf	??_LCDWriteString,w
 10006  1C9B  00A7               	movwf	??_LCDWriteString+2
 10007  1C9C  0826               	movf	??_LCDWriteString+1,w
 10008  1C9D  0084               	movwf	4
 10009  1C9E  1783               	bsf	3,7
 10010  1C9F  1C27               	btfss	??_LCDWriteString+2,0
 10011  1CA0  1383               	bcf	3,7
 10012  1CA1  0800               	movf	0,w
 10013  1CA2  1903               	btfsc	3,2
 10014  1CA3  0008               	return
 10015                           
 10016                           ;lcd.h: 163: {
 10017                           ;lcd.h: 164: LCDWriteChar(a[i]);
 10018  1CA4  0828               	movf	LCDWriteString@i,w
 10019  1CA5  0723               	addwf	LCDWriteString@a,w
 10020  1CA6  00A6               	movwf	??_LCDWriteString+1
 10021  1CA7  0824               	movf	LCDWriteString@a+1,w
 10022  1CA8  00A5               	movwf	??_LCDWriteString
 10023  1CA9  1803               	skipnc
 10024  1CAA  0AA5               	incf	??_LCDWriteString,f
 10025  1CAB  1BA8               	btfsc	LCDWriteString@i,7
 10026  1CAC  03A5               	decf	??_LCDWriteString,f
 10027  1CAD  1283               	bcf	3,5	;RP0=0, select bank0
 10028  1CAE  1303               	bcf	3,6	;RP1=0, select bank0
 10029  1CAF  0825               	movf	??_LCDWriteString,w
 10030  1CB0  00A7               	movwf	??_LCDWriteString+2
 10031  1CB1  0826               	movf	??_LCDWriteString+1,w
 10032  1CB2  0084               	movwf	4
 10033  1CB3  1783               	bsf	3,7
 10034  1CB4  1C27               	btfss	??_LCDWriteString+2,0
 10035  1CB5  1383               	bcf	3,7
 10036  1CB6  0800               	movf	0,w
 10037  1CB7  160A  158A  2361  160A  158A  	fcall	_LCDWriteChar
 10038  1CBC  3001               	movlw	1
 10039  1CBD  1283               	bcf	3,5	;RP0=0, select bank0
 10040  1CBE  1303               	bcf	3,6	;RP1=0, select bank0
 10041  1CBF  07A8               	addwf	LCDWriteString@i,f
 10042  1CC0  1803               	skipnc
 10043  1CC1  0AA9               	incf	LCDWriteString@i+1,f
 10044  1CC2  3000               	movlw	0
 10045  1CC3  07A9               	addwf	LCDWriteString@i+1,f
 10046  1CC4  2C8F               	goto	l3878
 10047  1CC5                     __end_of_LCDWriteString:	
 10048                           
 10049                           	psect	text38
 10050  1B61                     __ptext38:	
 10051 ;; *************** function _LCDWriteChar *****************
 10052 ;; Defined at:
 10053 ;;		line 128 in file "lcd.h"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  a               1    wreg     unsigned char 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  a               1    2[BANK0 ] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;		None               void
 10060 ;; Registers used:
 10061 ;;		wreg, status,2, status,0, pclath, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10067 ;;      Params:         0       0       0       0       0
 10068 ;;      Locals:         0       1       0       0       0
 10069 ;;      Temps:          0       2       0       0       0
 10070 ;;      Totals:         0       3       0       0       0
 10071 ;;Total ram usage:        3 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    2
 10074 ;; This function calls:
 10075 ;;		_LCDSetBits
 10076 ;;		_pulse
 10077 ;; This function is called by:
 10078 ;;		_LCDWriteString
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           
 10083                           ;psect for function _LCDWriteChar
 10084  1B61                     _LCDWriteChar:	
 10085                           
 10086                           ;incstack = 0
 10087                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0+pclath+cstack]
 10088                           ;LCDWriteChar@a stored from wreg
 10089  1B61  1283               	bcf	3,5	;RP0=0, select bank0
 10090  1B62  1303               	bcf	3,6	;RP1=0, select bank0
 10091  1B63  00A2               	movwf	LCDWriteChar@a
 10092                           
 10093                           ;lcd.h: 130: LCDSetBits(a);
 10094  1B64  0822               	movf	LCDWriteChar@a,w
 10095  1B65  160A  158A  22EB  160A  158A  	fcall	_LCDSetBits
 10096                           
 10097                           ;lcd.h: 131: RB0 = 1;
 10098  1B6A  1283               	bcf	3,5	;RP0=0, select bank0
 10099  1B6B  1303               	bcf	3,6	;RP1=0, select bank0
 10100  1B6C  1406               	bsf	6,0	;volatile
 10101                           
 10102                           ;lcd.h: 133: pulse();
 10103  1B6D  160A  158A  229F  160A  158A  	fcall	_pulse
 10104                           
 10105                           ;lcd.h: 134: a = a<<4;
 10106  1B72  1283               	bcf	3,5	;RP0=0, select bank0
 10107  1B73  1303               	bcf	3,6	;RP1=0, select bank0
 10108  1B74  0822               	movf	LCDWriteChar@a,w
 10109  1B75  00A0               	movwf	??_LCDWriteChar
 10110  1B76  3003               	movlw	3
 10111  1B77                     u4945:	
 10112  1B77  1003               	clrc
 10113  1B78  0DA0               	rlf	??_LCDWriteChar,f
 10114  1B79  3EFF               	addlw	-1
 10115  1B7A  1D03               	skipz
 10116  1B7B  2B77               	goto	u4945
 10117  1B7C  1003               	clrc
 10118  1B7D  0D20               	rlf	??_LCDWriteChar,w
 10119  1B7E  00A1               	movwf	??_LCDWriteChar+1
 10120  1B7F  0821               	movf	??_LCDWriteChar+1,w
 10121  1B80  00A2               	movwf	LCDWriteChar@a
 10122                           
 10123                           ;lcd.h: 135: LCDSetBits(a);
 10124  1B81  0822               	movf	LCDWriteChar@a,w
 10125  1B82  160A  158A  22EB  160A  158A  	fcall	_LCDSetBits
 10126                           
 10127                           ;lcd.h: 136: pulse();
 10128  1B87  160A  158A  229F   	fcall	_pulse
 10129  1B8A  0008               	return
 10130  1B8B                     __end_of_LCDWriteChar:	
 10131                           
 10132                           	psect	text39
 10133  1C19                     __ptext39:	
 10134 ;; *************** function _LCDSetCursor *****************
 10135 ;; Defined at:
 10136 ;;		line 143 in file "lcd.h"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  a               1    wreg     unsigned char 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  a               1    3[BANK0 ] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0, pclath, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10150 ;;      Params:         0       0       0       0       0
 10151 ;;      Locals:         0       1       0       0       0
 10152 ;;      Temps:          0       2       0       0       0
 10153 ;;      Totals:         0       3       0       0       0
 10154 ;;Total ram usage:        3 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    3
 10157 ;; This function calls:
 10158 ;;		_LCD4bitCmd
 10159 ;; This function is called by:
 10160 ;;		_main
 10161 ;;		_displayLCD
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _LCDSetCursor
 10167  1C19                     _LCDSetCursor:	
 10168                           
 10169                           ;incstack = 0
 10170                           ; Regs used in _LCDSetCursor: [wreg+status,2+status,0+pclath+cstack]
 10171                           ;LCDSetCursor@a stored from wreg
 10172  1C19  1283               	bcf	3,5	;RP0=0, select bank0
 10173  1C1A  1303               	bcf	3,6	;RP1=0, select bank0
 10174  1C1B  00A3               	movwf	LCDSetCursor@a
 10175                           
 10176                           ;lcd.h: 145: if (a & 16)
 10177  1C1C  1E23               	btfss	LCDSetCursor@a,4
 10178  1C1D  2C38               	goto	l3866
 10179                           
 10180                           ;lcd.h: 146: {
 10181                           ;lcd.h: 147: LCD4bitCmd(0xC0);
 10182  1C1E  30C0               	movlw	192
 10183  1C1F  160A  158A  22AF  160A  158A  	fcall	_LCD4bitCmd
 10184                           
 10185                           ;lcd.h: 148: a = a << 4;
 10186  1C24  1283               	bcf	3,5	;RP0=0, select bank0
 10187  1C25  1303               	bcf	3,6	;RP1=0, select bank0
 10188  1C26  0823               	movf	LCDSetCursor@a,w
 10189  1C27  00A1               	movwf	??_LCDSetCursor
 10190  1C28  3003               	movlw	3
 10191  1C29                     u5575:	
 10192  1C29  1003               	clrc
 10193  1C2A  0DA1               	rlf	??_LCDSetCursor,f
 10194  1C2B  3EFF               	addlw	-1
 10195  1C2C  1D03               	skipz
 10196  1C2D  2C29               	goto	u5575
 10197  1C2E  1003               	clrc
 10198  1C2F  0D21               	rlf	??_LCDSetCursor,w
 10199  1C30  00A2               	movwf	??_LCDSetCursor+1
 10200  1C31  0822               	movf	??_LCDSetCursor+1,w
 10201  1C32  00A3               	movwf	LCDSetCursor@a
 10202                           
 10203                           ;lcd.h: 149: LCD4bitCmd(a);
 10204  1C33  0823               	movf	LCDSetCursor@a,w
 10205  1C34  160A  158A  22AF   	fcall	_LCD4bitCmd
 10206                           
 10207                           ;lcd.h: 150: }
 10208  1C37  0008               	return
 10209  1C38                     l3866:	
 10210                           
 10211                           ;lcd.h: 152: else
 10212                           ;lcd.h: 153: {
 10213                           ;lcd.h: 154: LCD4bitCmd(0x80);
 10214  1C38  3080               	movlw	128
 10215  1C39  160A  158A  22AF  160A  158A  	fcall	_LCD4bitCmd
 10216                           
 10217                           ;lcd.h: 155: a = a << 4;
 10218  1C3E  1283               	bcf	3,5	;RP0=0, select bank0
 10219  1C3F  1303               	bcf	3,6	;RP1=0, select bank0
 10220  1C40  0823               	movf	LCDSetCursor@a,w
 10221  1C41  00A1               	movwf	??_LCDSetCursor
 10222  1C42  3003               	movlw	3
 10223  1C43                     u5585:	
 10224  1C43  1003               	clrc
 10225  1C44  0DA1               	rlf	??_LCDSetCursor,f
 10226  1C45  3EFF               	addlw	-1
 10227  1C46  1D03               	skipz
 10228  1C47  2C43               	goto	u5585
 10229  1C48  1003               	clrc
 10230  1C49  0D21               	rlf	??_LCDSetCursor,w
 10231  1C4A  00A2               	movwf	??_LCDSetCursor+1
 10232  1C4B  0822               	movf	??_LCDSetCursor+1,w
 10233  1C4C  00A3               	movwf	LCDSetCursor@a
 10234                           
 10235                           ;lcd.h: 156: LCD4bitCmd(a);
 10236  1C4D  0823               	movf	LCDSetCursor@a,w
 10237  1C4E  160A  158A  22AF   	fcall	_LCD4bitCmd
 10238  1C51  0008               	return
 10239  1C52                     __end_of_LCDSetCursor:	
 10240                           
 10241                           	psect	text40
 10242  1AAF                     __ptext40:	
 10243 ;; *************** function _LCD4bitCmd *****************
 10244 ;; Defined at:
 10245 ;;		line 120 in file "lcd.h"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;  a               1    wreg     unsigned char 
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;  a               1    0[BANK0 ] unsigned char 
 10250 ;; Return value:  Size  Location     Type
 10251 ;;		None               void
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0, pclath, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10259 ;;      Params:         0       0       0       0       0
 10260 ;;      Locals:         0       1       0       0       0
 10261 ;;      Temps:          0       0       0       0       0
 10262 ;;      Totals:         0       1       0       0       0
 10263 ;;Total ram usage:        1 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    2
 10266 ;; This function calls:
 10267 ;;		_LCDSetBits
 10268 ;;		_pulse
 10269 ;; This function is called by:
 10270 ;;		_LCDSetCursor
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           
 10275                           ;psect for function _LCD4bitCmd
 10276  1AAF                     _LCD4bitCmd:	
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _LCD4bitCmd: [wreg+status,2+status,0+pclath+cstack]
 10280                           ;LCD4bitCmd@a stored from wreg
 10281  1AAF  1283               	bcf	3,5	;RP0=0, select bank0
 10282  1AB0  1303               	bcf	3,6	;RP1=0, select bank0
 10283  1AB1  00A0               	movwf	LCD4bitCmd@a
 10284                           
 10285                           ;lcd.h: 122: LCDSetBits(a);
 10286  1AB2  0820               	movf	LCD4bitCmd@a,w
 10287  1AB3  160A  158A  22EB  160A  158A  	fcall	_LCDSetBits
 10288                           
 10289                           ;lcd.h: 123: RB0 = 0;
 10290  1AB8  1283               	bcf	3,5	;RP0=0, select bank0
 10291  1AB9  1303               	bcf	3,6	;RP1=0, select bank0
 10292  1ABA  1006               	bcf	6,0	;volatile
 10293                           
 10294                           ;lcd.h: 124: RD7 = 0;
 10295  1ABB  1388               	bcf	8,7	;volatile
 10296                           
 10297                           ;lcd.h: 125: pulse();
 10298  1ABC  160A  158A  229F   	fcall	_pulse
 10299  1ABF  0008               	return
 10300  1AC0                     __end_of_LCD4bitCmd:	
 10301                           
 10302                           	psect	text41
 10303  1A9F                     __ptext41:	
 10304 ;; *************** function _pulse *****************
 10305 ;; Defined at:
 10306 ;;		line 99 in file "lcd.h"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;		None               void
 10313 ;; Registers used:
 10314 ;;		wreg
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10320 ;;      Params:         0       0       0       0       0
 10321 ;;      Locals:         0       0       0       0       0
 10322 ;;      Temps:          2       0       0       0       0
 10323 ;;      Totals:         2       0       0       0       0
 10324 ;;Total ram usage:        2 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    1
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_initLCD
 10331 ;;		_LCDcmd
 10332 ;;		_LCD4bitCmd
 10333 ;;		_LCDWriteChar
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _pulse
 10339  1A9F                     _pulse:	
 10340                           
 10341                           ;lcd.h: 101: RB1 = 1;
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _pulse: [wreg]
 10345  1A9F  1283               	bcf	3,5	;RP0=0, select bank0
 10346  1AA0  1303               	bcf	3,6	;RP1=0, select bank0
 10347  1AA1  1486               	bsf	6,1	;volatile
 10348                           
 10349                           ;lcd.h: 102: _delay((unsigned long)((1)*(8000000/4000.0)));
 10350  1AA2  3003               	movlw	3
 10351  1AA3  00F5               	movwf	??_pulse+1
 10352  1AA4  3097               	movlw	151
 10353  1AA5  00F4               	movwf	??_pulse
 10354  1AA6                     u6257:	
 10355  1AA6  0BF4               	decfsz	??_pulse,f
 10356  1AA7  2AA6               	goto	u6257
 10357  1AA8  0BF5               	decfsz	??_pulse+1,f
 10358  1AA9  2AA6               	goto	u6257
 10359  1AAA  2AAB               	nop2
 10360                           
 10361                           ;lcd.h: 103: RB1 = 0;
 10362  1AAB  1283               	bcf	3,5	;RP0=0, select bank0
 10363  1AAC  1303               	bcf	3,6	;RP1=0, select bank0
 10364  1AAD  1086               	bcf	6,1	;volatile
 10365  1AAE  0008               	return
 10366  1AAF                     __end_of_pulse:	
 10367                           
 10368                           	psect	text42
 10369  1AEB                     __ptext42:	
 10370 ;; *************** function _LCDSetBits *****************
 10371 ;; Defined at:
 10372 ;;		line 76 in file "lcd.h"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;  a               1    wreg     unsigned char 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  a               1    4[COMMON] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;		None               void
 10379 ;; Registers used:
 10380 ;;		wreg
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10386 ;;      Params:         0       0       0       0       0
 10387 ;;      Locals:         1       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0
 10389 ;;      Totals:         1       0       0       0       0
 10390 ;;Total ram usage:        1 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    1
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_initLCD
 10397 ;;		_LCDcmd
 10398 ;;		_LCD4bitCmd
 10399 ;;		_LCDWriteChar
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           
 10404                           ;psect for function _LCDSetBits
 10405  1AEB                     _LCDSetBits:	
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _LCDSetBits: [wreg]
 10409                           ;LCDSetBits@a stored from wreg
 10410  1AEB  00F4               	movwf	LCDSetBits@a
 10411                           
 10412                           ;lcd.h: 78: if(a & 16)
 10413  1AEC  1E74               	btfss	LCDSetBits@a,4
 10414  1AED  2AF2               	goto	l116
 10415                           
 10416                           ;lcd.h: 79: RB2 = 1;
 10417  1AEE  1283               	bcf	3,5	;RP0=0, select bank0
 10418  1AEF  1303               	bcf	3,6	;RP1=0, select bank0
 10419  1AF0  1506               	bsf	6,2	;volatile
 10420  1AF1  2AF5               	goto	l117
 10421  1AF2                     l116:	
 10422                           
 10423                           ;lcd.h: 80: else
 10424                           ;lcd.h: 81: RB2 = 0;
 10425  1AF2  1283               	bcf	3,5	;RP0=0, select bank0
 10426  1AF3  1303               	bcf	3,6	;RP1=0, select bank0
 10427  1AF4  1106               	bcf	6,2	;volatile
 10428  1AF5                     l117:	
 10429                           
 10430                           ;lcd.h: 83: if(a & 32)
 10431  1AF5  1EF4               	btfss	LCDSetBits@a,5
 10432  1AF6  2AF9               	goto	l118
 10433                           
 10434                           ;lcd.h: 84: RB3 = 1;
 10435  1AF7  1586               	bsf	6,3	;volatile
 10436  1AF8  2AFA               	goto	l119
 10437  1AF9                     l118:	
 10438                           
 10439                           ;lcd.h: 85: else
 10440                           ;lcd.h: 86: RB3 = 0;
 10441  1AF9  1186               	bcf	6,3	;volatile
 10442  1AFA                     l119:	
 10443                           
 10444                           ;lcd.h: 88: if(a & 64)
 10445  1AFA  1F74               	btfss	LCDSetBits@a,6
 10446  1AFB  2AFE               	goto	l120
 10447                           
 10448                           ;lcd.h: 89: RB4 = 1;
 10449  1AFC  1606               	bsf	6,4	;volatile
 10450  1AFD  2AFF               	goto	l121
 10451  1AFE                     l120:	
 10452                           
 10453                           ;lcd.h: 90: else
 10454                           ;lcd.h: 91: RB4 = 0;
 10455  1AFE  1206               	bcf	6,4	;volatile
 10456  1AFF                     l121:	
 10457                           
 10458                           ;lcd.h: 93: if(a & 128)
 10459  1AFF  1FF4               	btfss	LCDSetBits@a,7
 10460  1B00  2B03               	goto	l122
 10461                           
 10462                           ;lcd.h: 94: RB5 = 1;
 10463  1B01  1686               	bsf	6,5	;volatile
 10464  1B02  0008               	return
 10465  1B03                     l122:	
 10466                           
 10467                           ;lcd.h: 95: else
 10468                           ;lcd.h: 96: RB5 = 0;
 10469  1B03  1286               	bcf	6,5	;volatile
 10470  1B04  0008               	return
 10471  1B05                     __end_of_LCDSetBits:	
 10472                           
 10473                           	psect	text43
 10474  1A77                     __ptext43:	
 10475 ;; *************** function _isr *****************
 10476 ;; Defined at:
 10477 ;;		line 251 in file "setup.h"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;		None
 10482 ;; Return value:  Size  Location     Type
 10483 ;;		None               void
 10484 ;; Registers used:
 10485 ;;		None
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10491 ;;      Params:         0       0       0       0       0
 10492 ;;      Locals:         0       0       0       0       0
 10493 ;;      Temps:          4       0       0       0       0
 10494 ;;      Totals:         4       0       0       0       0
 10495 ;;Total ram usage:        4 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		Interrupt level 1
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           
 10505                           ;psect for function _isr
 10506  1A77                     _isr:	
 10507  1A77  0873               	movf	??_isr+3,w
 10508  1A78  00FF               	movwf	127
 10509  1A79  0872               	movf	??_isr+2,w
 10510  1A7A  008A               	movwf	10
 10511  1A7B  0871               	movf	??_isr+1,w
 10512  1A7C  0084               	movwf	4
 10513  1A7D  0E70               	swapf	??_isr^(0+-128),w
 10514  1A7E  0083               	movwf	3
 10515  1A7F  0EFE               	swapf	126,f
 10516  1A80  0E7E               	swapf	126,w
 10517  1A81  0009               	retfie
 10518  1A82                     __end_of_isr:	
 10519  007E                     btemp	set	126	;btemp
 10520  007E                     wtemp	set	126
 10521  007E                     wtemp0	set	126
 10522  0080                     wtemp1	set	128
 10523  0082                     wtemp2	set	130
 10524  0084                     wtemp3	set	132
 10525  0086                     wtemp4	set	134
 10526  0088                     wtemp5	set	136
 10527  007F                     wtemp6	set	127
 10528  007E                     ttemp	set	126
 10529  007E                     ttemp0	set	126
 10530  0081                     ttemp1	set	129
 10531  0084                     ttemp2	set	132
 10532  0087                     ttemp3	set	135
 10533  007F                     ttemp4	set	127
 10534  007E                     ltemp	set	126
 10535  007E                     ltemp0	set	126
 10536  0082                     ltemp1	set	130
 10537  0086                     ltemp2	set	134
 10538  0080                     ltemp3	set	128
 10539                           
 10540                           	psect	intentry
 10541  0004                     __pintentry:	
 10542                           ;incstack = 0
 10543                           ; Regs used in _isr: []
 10544                           
 10545  0004                     interrupt_function:	
 10546  007E                     saved_w	set	btemp
 10547  0004  00FE               	movwf	btemp
 10548  0005  0E03               	swapf	3,w
 10549  0006  00F0               	movwf	??_isr
 10550  0007  0804               	movf	4,w
 10551  0008  00F1               	movwf	??_isr+1
 10552  0009  080A               	movf	10,w
 10553  000A  00F2               	movwf	??_isr+2
 10554  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10555  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10556  000D  087F               	movf	btemp+1,w
 10557  000E  00F3               	movwf	??_isr+3
 10558  000F  160A  158A  2A77   	ljmp	_isr


Data Sizes:
    Strings     160
    Constant    135
    Data        7
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     80      80
    BANK1            80     30      73
    BANK3            96      0      16
    BANK2            80      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[20]), STR_3(CODE[21]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> btmStr(BANK3[16]), topStr(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCDWriteString@a	PTR unsigned char  size(2) Largest target is 16
		 -> btmStr(BANK3[16]), topStr(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_handlePB
    _sampleReference->_analogRead
    _sampleCurrent->_analogRead
    _sampleVoltage->_analogRead
    ___lwtoft->_analogRead
    ___ftdiv->_analogRead
    _initLCD->_pulse
    _LCDcmd->_pulse
    _sprintf->___awdiv
    _sprintf->___llmod
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->_isdigit
    _scale->___awdiv
    _fround->___awdiv
    ___ftmul->___awdiv
    ___ftmul->_analogRead
    ___awdiv->___awmod
    ___ftsub->___lltoft
    ___bmul->___awdiv
    _LCDWriteChar->_pulse
    _LCD4bitCmd->_pulse

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_displayLCD
    _sampleReference->___ftdiv
    _sampleCurrent->___ftdiv
    ___lbtoft->___ftpack
    _sampleBatteryCells->_sampleVoltage
    _sampleVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _initController->_initLCD
    _initLCD->_LCDcmd
    _displayLCD->_sprintf
    _sprintf->_batteryVoltage
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    _batteryVoltage->___ftadd
    ___ftadd->_fround
    ___bmul->___awdiv
    _LCDWriteString->_LCDWriteChar
    _LCDSetCursor->_LCD4bitCmd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _displayLCD->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  169727
                                             28 BANK1      2     2      0
                       _LCDSetCursor
                     _LCDWriteString
                         _displayLCD
                           _handlePB
                     _initController
                 _sampleBatteryCells
                      _sampleCurrent
                    _sampleReference
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sampleReference                                      2     2      0   13832
                                             50 BANK0      2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (1) _sampleCurrent                                        3     3      0   16481
                                             50 BANK0      3     3      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2615
                                              4 COMMON     1     1      0
                                              8 BANK0      7     4      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sampleBatteryCells                                  22    22      0   26328
                                             56 BANK0      7     7      0
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                      _sampleVoltage
 ---------------------------------------------------------------------------------
 (2) _sampleVoltage                                        6     3      3   13863
                                             50 BANK0      6     3      3
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           7     5      2     136
                                              4 COMMON     2     0      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    3308
                                              8 BANK0      4     1      3
                           ___ftpack
                            ___lwdiv (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3620
                                             34 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1165
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initController                                       0     0      0     344
                            _initADC
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              3     3      0     344
                                              3 BANK0      3     3      0
                         _LCDSetBits
                             _LCDcmd
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               3     3      0     220
                                              0 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePB                                             2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayLCD                                           2     0      2   58937
                                             78 BANK0      2     0      2
                       _LCDSetCursor
                     _LCDWriteString
                     _batteryVoltage
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             42    35      7   52769
                                             71 BANK0      7     0      7
                                              0 BANK1     28    28      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                     _batteryVoltage (ARG)
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3   11450
                                             34 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              19    16      3   11171
                                             34 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    6768
                                             18 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1819
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1580
                                              5 COMMON     1     1      0
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     608
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     827
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2040
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2763
                                              4 COMMON     2     2      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              4 COMMON     2     2      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     549
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             43 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4521
                                             63 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6    1122
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) _batteryVoltage                                       8     5      3    5024
                                             63 BANK0      8     5      3
                             ___bmul
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    4271
                                             50 BANK0     13     7      6
                             ___bmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     586
                                             14 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       7     5      2     720
                                              3 BANK0      7     5      2
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         3     3      0     220
                                              0 BANK0      3     3      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _LCDSetCursor                                         3     3      0     316
                                              1 BANK0      3     3      0
                         _LCD4bitCmd
 ---------------------------------------------------------------------------------
 (3) _LCD4bitCmd                                           1     1      0     155
                                              0 BANK0      1     1      0
                         _LCDSetBits
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _LCDSetBits                                           1     1      0     124
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDSetCursor
     _LCD4bitCmd
       _LCDSetBits
       _pulse
   _LCDWriteString
     _LCDWriteChar
       _LCDSetBits
       _pulse
   _displayLCD
     _LCDSetCursor
       _LCD4bitCmd
         _LCDSetBits
         _pulse
     _LCDWriteString
       _LCDWriteChar
         _LCDSetBits
         _pulse
     _batteryVoltage
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftadd
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
               _analogRead (ARG)
             _analogRead (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
               _analogRead (ARG)
             _analogRead (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwdiv (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___lwdiv (ARG)
                 _analogRead (ARG)
               _analogRead (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
               _analogRead (ARG)
             _analogRead (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _batteryVoltage (ARG)
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftadd
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwdiv (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___lwdiv (ARG)
                 _analogRead (ARG)
               _analogRead (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
   _handlePB
   _initController
     _initADC
     _initLCD
       _LCDSetBits
       _LCDcmd
         _LCDSetBits
         _pulse
       _pulse
   _sampleBatteryCells
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
       _analogRead (ARG)
     _sampleVoltage
       ___ftdiv
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       ___lwtoft
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead
   _sampleCurrent
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
       _analogRead (ARG)
     _analogRead
   _sampleReference
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
       _analogRead (ARG)
     _analogRead
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwdiv (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___lwdiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
               _analogRead (ARG)
             _analogRead (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwdiv (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___lwdiv (ARG)
             _analogRead (ARG)
           _analogRead (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _batteryVoltage (ARG)
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftadd
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwdiv (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___lwdiv (ARG)
               _analogRead (ARG)
             _analogRead (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwdiv (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___lwdiv (ARG)
           _analogRead (ARG)
         _analogRead (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      10       8       16.7%
BITBANK3            60      0       0       7        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1E      49       6       91.3%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B3      12        0.0%
ABS                  0      0      B3      10        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jul 03 20:19:22 2015

                ?_LCDSetBits 0070                            pc 0002               ___bmul@product 0030  
                __CFG_CP$OFF 0000                 ___awdiv@sign 002B                           fsr 0004  
        ___wmul@multiplicand 0022                 ___ftadd@exp1 005E                 ___ftadd@exp2 005D  
               ___ftadd@sign 005C                          l120 1AFE                          l121 1AFF  
                        l122 1B03                          l116 1AF2                          l117 1AF5  
                        l118 1AF9                          l222 17FF                          l119 1AFA  
                        l156 1C69                          l237 1B16                          l337 076D  
                        l427 1012                          l339 079F                          l612 1F70  
                        l613 1F78                          l605 1F5B                          l296 010C  
                        l713 109D                          l289 00B9                          l636 14EC  
                        l662 12E0                          l672 1365                          l593 1674  
                        l585 162B                          _RB0 0030                          _RB1 0031  
                        _RC0 0038                          _RB2 0032                          _RB3 0033  
                        _RD0 0040                          _RC2 003A                          _RB4 0034  
                        _RA6 002E                          _RD1 0041                          _RC3 003B  
                        _RB5 0035                          _RA7 002F                          _RD2 0042  
                        _RD4 0044                          _RD5 0045                          _RD6 0046  
                        _RD7 0047                 __CFG_CPD$OFF 0000                          _isr 1A77  
                        fsr0 0004                          indf 0000                 ___awmod@sign 0025  
              ?_LCDSetCursor 0070                 __CFG_IESO$ON 0000                  _sprintf$856 00CB  
               ___ftdiv@cntr 004C                 ___ftdiv@sign 0051                         l2130 1AC4  
                       l2134 1ACA                         l2150 1E0A                         l4010 0573  
                       l2156 1E15                         l3302 1F6E                         l2182 1E54  
                       l2174 1E41                         l2166 1E1D                         l4030 05C5  
                       l4022 05A4                         l3304 1F60                         l2168 1E2B  
                       l4016 0588                         l4008 04B8                         l3402 14B2  
                       l2178 1E4C                         l4122 07F0                         l4114 07CC  
                       l3420 14FE                         l3404 14BE                         l4052 0758  
                       l4220 1681                         l4116 07DA                         l3414 14DC  
                       l3406 14C3                         l3350 1D24                         l3342 1D1E  
                       l4062 0785                         l4046 0743                         l4054 075D  
                       l4070 005E                         l4230 16DF                         l4126 07FB  
                       l3424 1510                         l3416 14E8                         l3408 14C7  
                       l3352 1D32                         l3360 1D4B                         l2456 1A8E  
                       l4072 07B9                         l4240 173C                         l3290 1F34  
                       l3434 1533                         l4090 1CD2                         l2730 1D72  
                       l3338 1D17                         l3450 139F                         l4250 1793  
                       l3292 1F40                         l3620 1321                         l3612 1301  
                       l3364 1D53                         l3356 1D40                         l3444 1389  
                       l3540 0952                         l3294 1F45                         l3286 1F2D  
                       l3374 146D                         l2662 1043                         l2734 1D90  
                       l3630 133D                         l3462 13DE                         l4326 17F1  
                       l4262 17EA                         l3384 1483                         l4096 1D04  
                       l2680 1075                         l2728 1D62                         l3640 1368  
                       l3632 134D                         l3378 1474                         l2690 10A0  
                       l2682 1085                         l2738 1D9D                         l3650 156F  
                       l3474 1406                         l3466 13EE                         l3570 0B70  
                       l3722 1224                         l3396 149D                         l3804 084A  
                       l3548 09E8                         l3564 0AF6                         l3900 0106  
                       l3716 120E                         l2694 10AE                         l3638 135A  
                       l3478 1416                         l3582 0C64                         l3574 0B93  
                       l4286 1FD7                         l3760 1EA9                         l2688 1092  
                       l3808 0857                         l3816 1BBA                         l3656 158E  
                       l3744 1288                         l3736 1269                         l3818 1BD0  
                       l3690 1669                         l3682 164C                         l3666 15D5  
                       l3914 014A                         l3906 010E                         l3756 1E82  
                       l3692 1677                         l3684 165C                         l3588 0CDE  
                       l3940 0225                         l3924 01A3                         l3908 013A  
                       l3598 12C8                         l3784 1B49                         l3952 02C3  
                       l3866 1C38                         l3794 0812                         l3698 1008  
                       l3796 0822                         l3964 0347                         l3956 0309  
                       l3948 029C                         l3878 1C8F                         l3982 044B  
                       l3968 0368                         l3888 009A                         l3994 04A1  
                       l3978 03CE                         l3988 0451                         ?_isr 0070  
                       STR_1 18C2                         STR_2 18C2                         STR_3 1899  
                       STR_4 18AE                         STR_5 18D3                         STR_6 18E4  
                       STR_7 18F5                         STR_8 1906                         STR_9 1917  
                       u2405 1E38                         u2415 1E42                __CFG_DEBUG$ON 0000  
                       u2375 1E20                         u3515 1076                         u5115 133E  
                       u2395 1E2C                         u4405 1F7F                         u4325 1F39  
                       u5055 1303                         u4345 1F54                         u3545 1094  
                       u5305 101A                         u5145 135C                         u5065 1314  
                       u6025 07CF                         u5411 1E75                         u5235 164D  
                       u5075 1322                         u4515 1D38                         u6107 1EC0  
                       u5412 1E76                         u4365 1F67                         u5413 1E7B  
                       u3485 104A                         u4525 1D41                         u6045 07DB  
                       u6117 0D09                         u5414 1E7C                         u5431 1E9C  
                       u3655 1D66                         u6207 11BD                         u6055 07E7  
                       u6127 0E87                         u5432 1E9D                         u4705 14C8  
                       u5433 1EA2                         u5505 0824                         u5265 166B  
                       u5185 15D7                         u6217 11CE                         u6065 07F1  
                       u5345 1236                         u6137 1DAD                         u5434 1EA3  
                       u5515 0839                         u3675 1D80                         u5195 1606  
                       u6227 11DF                         u5355 1248                         u6147 1C61  
                       u4645 149E                         u5525 084B                         u3685 1D91  
                       u6237 11F0                         u6157 115F                         u5365 126A  
                       u4735 14DD                         u5295 1013                         u4495 1D27  
                       u4815 13AB                         u6247 1B0D                         u6167 1172  
                       u5375 127B                         u6257 1AA6                         u5545 1BC1  
                       u4905 1417                         u4825 13BD                         u6177 1181  
                       u5385 1289                         u4675 14B3                         u4915 141F  
                       u6187 1191                         u5485 0816                         u5805 0454  
                       u6197 11A1                         u5575 1C29                         u4855 13EF  
                       u5815 0497                         u5735 02CE                         u4935 1BA2  
                       u5585 1C43                         u4945 1B77                         u4865 13F7  
                       u5905 06E9                         u5745 0314                         u5845 04C6  
                       u5775 0345                         u5695 01BB                         u5865 0591  
                       u5955 077C                         u5875 059E                         u5965 0796  
                       u5895 0635                         _main 1F91                 ___ftpack@arg 0020  
               ___ftpack@exp 0023                         btemp 007E                         ltemp 007E  
                       start 0012                         ttemp 007E                         wtemp 007E  
                LCDSetBits@a 0074      __size_of_batteryVoltage 0046            ___bmul@multiplier 0031  
              __CFG_MCLRE$ON 0000                 ___ftmul@cntr 0040                 ___ftmul@sign 0041  
               ___fttol@exp1 0058                 ___fttol@lval 0054                        ??_isr 0070  
              ?_LCDWriteChar 0070          __size_of_LCD4bitCmd 0011                        ?_main 0070  
            __end_of___awdiv 1E59              __end_of___ftadd 154D                        STR_10 1928  
              __CFG_WDTE$OFF 0000              __end_of___awmod 1D58              __end_of___ftdiv 12AE  
            __end_of___ftneg 1A77                        _ANSEL 0091              __end_of___lldiv 0860  
            __end_of___ftmul 1444              ___awdiv@divisor 0026              __end_of___llmod 1DA6  
            __end_of___ftsub 1B61              __end_of___fttol 10B7              __end_of___lwdiv 0800  
            ___awdiv@counter 002A              __end_of_cellRDB 1899                        _PORTA 0005  
                      _PORTB 0006                        _PORTC 0007                        _PORTD 0008  
                      _PORTE 0009               ??_LCDSetCursor 0021                        _TRISA 0085  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _TRISE 0089                 ___lltoft@exp 0075               __CFG_FCMEN$OFF 0000  
            __end_of_initADC 1A9F              __end_of_initLCD 11F6              __end_of_dpowers 183A  
                      _scale 0A1E              __end_of_isdigit 1A90              __end_of_refVolt 188B  
              ___ftpack@sign 0024                        _pulse 1A9F          __size_of_LCDSetBits 001A  
             __CFG_BOREN$OFF 0000                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087              batteryVoltage@i 0066                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F              __end_of_sprintf 07C2  
      __end_of_sampleCurrent 114D            ??_sampleReference 0052              __initialization 0015  
      __end_of_sampleVoltage 1DFE                 __end_of_main 2000               ??_LCDWriteChar 0020  
                     ??_main 00E1                ___fttol@sign1 0053         __size_of__tdiv_to_l_ 00C3  
     _sampleBatteryCells$851 005C                       _ADCON0 001F                       _ADCON1 009F  
           ___llmod@dividend 0024                       ?_scale 0042                       _ADRESH 001E  
                     _ADRESL 009E             ___awdiv@dividend 0028                       ?_pulse 0070  
           __end_of___ftpack 1F91             __end_of___lbtoft 1B40                       _LCDCON 0107  
           __end_of___lltoft 1BE7                       _LCDcmd 1B8B             __end_of_cell1RDT 188D  
           __end_of_cell2RDT 188F             __end_of_cell3RDT 1891             __end_of_cell4RDT 1893  
           __end_of___lwtoft 1AEB             __end_of_cell5RDT 1895             __end_of_cell6RDT 1897  
             __CFG_PWRTE$OFF 0000             __end_of_handlePB 1B22               _LCDWriteString 1C8B  
           __end_of__powers_ 1888                       ___bmul 1AC0                       ___ftge 1E59  
                     ___wmul 1006                    ??___awdiv 0075                    ??___ftadd 0058  
                  ??___awmod 0074                    ??___ftdiv 0048                    ??___ftneg 0074  
                  ??___lldiv 0074                    ??___ftmul 0038                    ??___llmod 0074  
                  ??___ftsub 0076                    ??___fttol 004F                    ??___lwdiv 0074  
                     _btmStr 0190                       _fround 0860             ___awdiv@quotient 002C  
            ___awmod@divisor 0020              ___awmod@counter 0024                       _topStr 00B5  
                  ??_initADC 0074        ___ftmul@f3_as_product 003D                    ??_initLCD 0023  
               __pdataCOMMON 0079                    ??_isdigit 0074      __size_of_initController 0032  
                     saved_w 007E                 ??_LCD4bitCmd 0076                    ??_sprintf 00C5  
    __end_of__initialization 0054                   ___ftadd@f1 0052                   ___ftadd@f2 0055  
                 ___ftge@ff1 0020                   ___ftge@ff2 0023       __end_of_LCDWriteString 1CC5  
                 ___ftdiv@f1 0045                   ___ftdiv@f2 0042                   ___ftdiv@f3 004D  
             _batteryVoltage 1CC5                   ___ftneg@f1 0020          ___bmul@multiplicand 002E  
                 ___lbtoft@c 0074         __end_of_LCDSetCursor 1C52                LCDSetCursor@a 0023  
                 ___ftmul@f1 0032                   ___ftmul@f2 0035                   ___ftsub@f1 0062  
                 ___ftsub@f2 005F                   ___fttol@f1 004B               __pcstackCOMMON 0070  
               __pidataBANK1 1000                 ??_LCDSetBits 0074                   ___lltoft@c 0028  
              __end_of_scale 0D01                __end_of_pulse 1AAF   __end_of_sampleBatteryCells 1000  
         __end_of_LCD4bitCmd 1AC0                   ___lwtoft@c 0028                   __div_to_l_ 154D  
             _OPTION_REGbits 0081              __div_to_l_@exp1 0033              __div_to_l_@cntr 0032  
                    ??_scale 0045              __div_to_l_@quot 002E                      ??_pulse 0074  
       __end_of_LCDWriteChar 1B8B                   __pbssBANK1 00A0                   __pbssBANK3 0190  
                    ?_LCDcmd 0070           __end_of_LCDSetBits 1B05       __end_of_batteryVoltage 1D0B  
                    LCDcmd@a 0022                   _analogRead 1C52              ?_LCDWriteString 0023  
              __div_to_l_@f1 0020                __div_to_l_@f2 0023                   __pmaintext 1F91  
                    ?___bmul 002E                      ?___ftge 0020                      ?___wmul 0020  
                 __pintentry 0004                      _CCP1CON 0017                      _CCP2CON 001D  
                    ?_fround 0042                    ?___ftpack 0020                    ?___lbtoft 0028  
                  ?___lltoft 0028                    ?___lwtoft 0028               displayLCD@disp 006E  
                  ?_handlePB 0070                   _displayLCD 1680              _sampleReference 1EB8  
                 __stringtab 1800              __size_of_LCDcmd 002B              ?_batteryVoltage 005F  
          __end_of__npowers_ 1861              __size_of___bmul 0013              __size_of___ftge 005F  
                    ___awdiv 1DFE                      ___ftadd 1444                      ___awmod 1D0B  
                    ___ftdiv 11F6                      ___ftneg 1A6D                      ___lldiv 0800  
            __size_of___wmul 0023                      ___ftmul 1371                      ___llmod 1D58  
                    ___ftsub 1B40                      ___fttol 1029                      ___lwdiv 07C2  
                 _fround$853 004E                   _fround$854 004B                      _cellRDB 1897  
                 ??___ftpack 0025                   ??___lbtoft 002B              __size_of_fround 01BE  
                 ??___lltoft 0074                      __ptext1 1EB8                      __ptext2 10B7  
                    __ptext3 1B22                      __ptext4 0D01                      __ptext5 1DA6  
                    __ptext6 1C52                      __ptext7 1AD3                      __ptext8 11F6  
                    __ptext9 07C2                   ??___lwtoft 002B                      _initADC 1A90  
                    _initLCD 114D                  ?__div_to_l_ 0020                      _dpowers 1812  
             _initController 1BE7                      _current 00B2                      _isdigit 1A82  
               __size_of_isr 000B                      _refVolt 1888             ___awmod@dividend 0022  
                 ??_handlePB 0074                      _supVolt 00E6                      _sprintf 0058  
                    clrloop0 1A66         end_of_initialization 0054            _sampleCurrent$852 0052  
      __size_of_LCDSetCursor 0039                LCDWriteChar@a 0022                  ?_analogRead 0074  
            ___lldiv@divisor 0020              ___lldiv@counter 002C                 __pstringtext 1800  
          batteryVoltage@sum 0063               __tdiv_to_l_@f1 0020               __tdiv_to_l_@f2 0023  
              ??__tdiv_to_l_ 0026       __end_of_initController 1C19       __size_of_sampleCurrent 0096  
    __end_of_sampleReference 1F23        __size_of_LCDWriteChar 002A                 _LCDSetCursor 1C19  
                ?_displayLCD 006E       __size_of_sampleVoltage 0058                  ___ftdiv@exp 0050  
             __end_of_LCDcmd 1BB6          __size_of__div_to_l_ 0133                  ___ftmul@exp 003C  
             __end_of___bmul 1AD3               __end_of___ftge 1EB8                 _LCDWriteChar 1B61  
             __end_of___wmul 1029                __pidataCOMMON 0003              ?_initController 0070  
             __end_of_fround 0A1E          __size_of_analogRead 0039          start_initialization 0015  
        __end_of__tdiv_to_l_ 1371                  __end_of_isr 1A82           _sampleBatteryCells 0D01  
           ??_LCDWriteString 0025                     ??_LCDcmd 0020              ___llmod@divisor 0020  
        ?_sampleBatteryCells 0070              ___llmod@counter 0075                _sampleCurrent 10B7  
                   ??___bmul 002F                     ??___ftge 0026                     ??___wmul 0074  
              _sampleVoltage 1DA6          __size_of_displayLCD 0180                  __pdataBANK1 00E3  
                   ??_fround 0045                sprintf@tmpval 00D7         ??_sampleBatteryCells 0058  
                 fround@prec 0051            __size_of___ftpack 006E            __size_of___lbtoft 001E  
          __size_of___lltoft 0031             ?_sampleReference 0070                  __pbssCOMMON 0076  
                  ___latbits 0002            __size_of___lwtoft 0018                __pcstackBANK0 0020  
              __pcstackBANK1 00C5             ??_batteryVoltage 0062            __size_of_handlePB 001D  
                sprintf@flag 00CF                  sprintf@fval 00DD                  sprintf@prec 00DB  
             ?_sampleCurrent 0070             ___lwdiv@dividend 0022               ?_sampleVoltage 0052  
                   ?___awdiv 0026                     ?___ftadd 0052                     ?___awmod 0020  
                   ?___ftdiv 0042                     ?___ftneg 0020                     ?___lldiv 0020  
                   ?___ftmul 0032                     ?___llmod 0020                     ?___ftsub 005F  
                  __npowers_ 183A                     ?___fttol 004B                     ?___lwdiv 0020  
                __tdiv_to_l_ 12AE                     ?_initADC 0070                 ??__div_to_l_ 0026  
                   ?_initLCD 0070                     ?_isdigit 0070                    _scale$855 0047  
           ___lwdiv@quotient 0025                     ?_sprintf 0067               __size_of_scale 02E3  
          sampleVoltage@chan 0057               __size_of_pulse 0010            interrupt_function 0004  
             ___wmul@product 0074                 ??_analogRead 0020                    clear_ram0 1A65  
         __end_of__div_to_l_ 1680                   _ADCON0bits 001F                  __stringbase 1812  
          ___wmul@multiplier 0020           __end_of_analogRead 1C8B                 ??_displayLCD 0076  
            ??_sampleCurrent 0076              ??_sampleVoltage 0055             ??_initController 0076  
                 _CMCON0bits 009C           __end_of_displayLCD 1800             __size_of___awdiv 005B  
           __size_of___ftadd 0109             __size_of___awmod 004D             __size_of___ftdiv 00B8  
           __size_of___ftneg 000A             __size_of___lldiv 0060             __size_of___ftmul 00D3  
           __size_of___llmod 004E             __size_of___ftsub 0021             __size_of___fttol 008E  
           __size_of___lwdiv 003E                     ___ftpack 1F23                     ___lbtoft 1B22  
         __end_of__stringtab 1812                     ___lltoft 1BB6                  _isdigit$619 0074  
                   _cell1RDT 188B                     _cell2RDT 188D                     _cell3RDT 188F  
                   _cell4RDT 1891                     _cell5RDT 1893                     ___lwtoft 1AD3  
                   _cell6RDT 1895                  _currentGain 0079                   sprintf@exp 00D5  
                 sprintf@val 00D1             __size_of_initADC 000F             __size_of_initLCD 00A9  
                   _cellVolt 00A0             __size_of_isdigit 000E              ___lwdiv@divisor 0020  
                   _handlePB 1B05              ___lwdiv@counter 0024                     __ptext10 1BE7  
                   __ptext11 114D                     __ptext20 1371                     __ptext12 1B8B  
                   __ptext21 1D0B                     __ptext13 1A90                     __ptext30 1B40  
                   __ptext22 1DFE                     __ptext14 1B05                     __ptext31 1A6D  
                   __ptext23 12AE                     __ptext15 1680                     __ptext40 1AAF  
                   __ptext32 1E59                     __ptext24 154D                     __ptext16 0058  
                   __ptext41 1A9F                     __ptext33 1CC5                     __ptext25 1006  
                   __ptext17 0A1E                     __ptext42 1AEB                     __ptext34 1444  
                   __ptext26 1BB6                     __ptext18 1A82                     __ptext43 1A77  
                   __ptext35 1F23                     __ptext27 1D58                     __ptext19 0860  
                   __ptext36 1AC0                     __ptext28 0800                     __ptext37 1C8B  
                   __ptext29 1029                     __ptext38 1B61                     __ptext39 1C19  
                   __powers_ 1861                   _LCD4bitCmd 1AAF             __size_of_sprintf 076A  
             _LCDDisplayMode 0078                __size_of_main 006F                     _refValue 0076  
            LCDWriteString@a 0023              LCDWriteString@i 0028                   _LCDSetBits 1AEB  
                   _shuntRes 00E3               analogRead@chan 0022                     isdigit@c 0075  
                   scale@scl 004A                     intlevel1 0000                    sprintf@ap 00CE  
           __tdiv_to_l_@exp1 002F                    sprintf@sp 0067             __tdiv_to_l_@cntr 002E  
           __tdiv_to_l_@quot 002A             ___lldiv@dividend 0024                   _LVDCONbits 0109  
                LCD4bitCmd@a 0020                    stringcode 180A                   _OSCCONbits 008F  
               ?__tdiv_to_l_ 0020                     sprintf@c 00E0                     sprintf@f 0069  
__size_of_sampleBatteryCells 02FF             ___lldiv@quotient 0028                     stringtab 1800  
        analogRead@returnVal 0023                  ?_LCD4bitCmd 0070           __CFG_FOSC$INTOSCIO 0000  
   __size_of_sampleReference 006B      __size_of_LCDWriteString 003A  
